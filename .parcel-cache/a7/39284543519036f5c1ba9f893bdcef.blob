// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this,
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"3zYeR":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "2e7aeb1cb8a692989efc5b8426cd0cdd"; // @flow
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets/*: {|[string]: boolean|} */ , acceptedAssets/*: {|[string]: boolean|} */ , assetsToAccept/*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
    // $FlowFixMe
    ws.onmessage = function(event/*: {data: string, ...} */ ) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH
            );
            // Handle HMR Update
            var handled = false;
            assets.forEach((asset)=>{
                var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
                if (didAccept) handled = true;
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
            }
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function(e) {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
        errorHTML += `\n      <div>\n        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>\n          ${stack}\n        </pre>\n        <div>\n          ${diagnostic.hints.map((hint)=>'<div>' + hint + '</div>'
        ).join('')}\n        </div>\n      </div>\n    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    link.getAttribute('href').split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle/*: ParcelRequire */ , asset/*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle/*: ParcelRequire */ , id/*: string */ , depsByBundle/*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle/*: ParcelRequire */ , id/*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"2SiKW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _vue = require("vue");
var _basketVue = require("./basket.vue");
var _basketVueDefault = parcelHelpers.interopDefault(_basketVue);
var _indexJs = require("../store/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _vuetifyJs = require("../plugins/vuetify.js");
var _vuetifyJsDefault = parcelHelpers.interopDefault(_vuetifyJs);
const app = _vue.createApp(_basketVueDefault.default);
app.use(_indexJsDefault.default);
app.use(_vuetifyJsDefault.default);
app.mount("#basket");

},{"vue":"4ayRm","./basket.vue":"7pGvO","../store/index.js":"2tdzU","../plugins/vuetify.js":"cOUdf","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"4ayRm":[function(require,module,exports) {
'use strict';
module.exports = require('./dist/vue.cjs.js');

},{"./dist/vue.cjs.js":"7orE1"}],"7orE1":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var compilerDom = require('@vue/compiler-dom');
var runtimeDom = require('@vue/runtime-dom');
var shared = require('@vue/shared');
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) Object.keys(e).forEach(function(k) {
        n[k] = e[k];
    });
    n['default'] = e;
    return Object.freeze(n);
}
var runtimeDom__namespace = /*#__PURE__*/ _interopNamespace(runtimeDom);
// This entry is the "full-build" that includes both the runtime
const compileCache = Object.create(null);
function compileToFunction(template, options) {
    if (!shared.isString(template)) {
        if (template.nodeType) template = template.innerHTML;
        else {
            runtimeDom.warn(`invalid template option: `, template);
            return shared.NOOP;
        }
    }
    const key = template;
    const cached = compileCache[key];
    if (cached) return cached;
    if (template[0] === '#') {
        const el = document.querySelector(template);
        if (!el) runtimeDom.warn(`Template element not found or is empty: ${template}`);
        // __UNSAFE__
        // Reason: potential execution of JS expressions in in-DOM template.
        // The user must make sure the in-DOM template is trusted. If it's rendered
        // by the server, the template should not contain any user data.
        template = el ? el.innerHTML : ``;
    }
    const { code  } = compilerDom.compile(template, shared.extend({
        hoistStatic: true,
        onError: onError,
        onWarn: (e)=>onError(e, true)
    }, options));
    function onError(err, asWarning = false) {
        const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
        const codeFrame = err.loc && shared.generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);
        runtimeDom.warn(codeFrame ? `${message}\n${codeFrame}` : message);
    }
    // The wildcard import results in a huge object with every export
    // with keys that cannot be mangled, and can be quite heavy size-wise.
    // In the global build we know `Vue` is available globally so we can avoid
    // the wildcard object.
    const render = new Function('Vue', code)(runtimeDom__namespace);
    render._rc = true;
    return compileCache[key] = render;
}
runtimeDom.registerRuntimeCompiler(compileToFunction);
Object.keys(runtimeDom).forEach(function(k) {
    if (k !== 'default') exports[k] = runtimeDom[k];
});
exports.compile = compileToFunction;

},{"@vue/compiler-dom":"22OTP","@vue/runtime-dom":"4nkfb","@vue/shared":"4sn3I"}],"22OTP":[function(require,module,exports) {
'use strict';
module.exports = require('./dist/compiler-dom.cjs.js');

},{"./dist/compiler-dom.cjs.js":"3OBZ9"}],"3OBZ9":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var compilerCore = require('@vue/compiler-core');
var shared = require('@vue/shared');
const V_MODEL_RADIO = Symbol(`vModelRadio`);
const V_MODEL_CHECKBOX = Symbol(`vModelCheckbox`);
const V_MODEL_TEXT = Symbol(`vModelText`);
const V_MODEL_SELECT = Symbol(`vModelSelect`);
const V_MODEL_DYNAMIC = Symbol(`vModelDynamic`);
const V_ON_WITH_MODIFIERS = Symbol(`vOnModifiersGuard`);
const V_ON_WITH_KEYS = Symbol(`vOnKeysGuard`);
const V_SHOW = Symbol(`vShow`);
const TRANSITION = Symbol(`Transition`);
const TRANSITION_GROUP = Symbol(`TransitionGroup`);
compilerCore.registerRuntimeHelpers({
    [V_MODEL_RADIO]: `vModelRadio`,
    [V_MODEL_CHECKBOX]: `vModelCheckbox`,
    [V_MODEL_TEXT]: `vModelText`,
    [V_MODEL_SELECT]: `vModelSelect`,
    [V_MODEL_DYNAMIC]: `vModelDynamic`,
    [V_ON_WITH_MODIFIERS]: `withModifiers`,
    [V_ON_WITH_KEYS]: `withKeys`,
    [V_SHOW]: `vShow`,
    [TRANSITION]: `Transition`,
    [TRANSITION_GROUP]: `TransitionGroup`
});
var namedCharacterReferences = {
    GT: ">",
    gt: ">",
    LT: "<",
    lt: "<",
    "ac;": "∾",
    "af;": "⁡",
    AMP: "&",
    amp: "&",
    "ap;": "≈",
    "DD;": "ⅅ",
    "dd;": "ⅆ",
    deg: "°",
    "ee;": "ⅇ",
    "eg;": "⪚",
    "el;": "⪙",
    ETH: "Ð",
    eth: "ð",
    "gE;": "≧",
    "ge;": "≥",
    "Gg;": "⋙",
    "gg;": "≫",
    "gl;": "≷",
    "GT;": ">",
    "Gt;": "≫",
    "gt;": ">",
    "ic;": "⁣",
    "ii;": "ⅈ",
    "Im;": "ℑ",
    "in;": "∈",
    "it;": "⁢",
    "lE;": "≦",
    "le;": "≤",
    "lg;": "≶",
    "Ll;": "⋘",
    "ll;": "≪",
    "LT;": "<",
    "Lt;": "≪",
    "lt;": "<",
    "mp;": "∓",
    "Mu;": "Μ",
    "mu;": "μ",
    "ne;": "≠",
    "ni;": "∋",
    not: "¬",
    "Nu;": "Ν",
    "nu;": "ν",
    "Or;": "⩔",
    "or;": "∨",
    "oS;": "Ⓢ",
    "Pi;": "Π",
    "pi;": "π",
    "pm;": "±",
    "Pr;": "⪻",
    "pr;": "≺",
    "Re;": "ℜ",
    REG: "®",
    reg: "®",
    "rx;": "℞",
    "Sc;": "⪼",
    "sc;": "≻",
    shy: "­",
    uml: "¨",
    "wp;": "℘",
    "wr;": "≀",
    "Xi;": "Ξ",
    "xi;": "ξ",
    yen: "¥",
    "acd;": "∿",
    "acE;": "∾̳",
    "Acy;": "А",
    "acy;": "а",
    "Afr;": "𝔄",
    "afr;": "𝔞",
    "AMP;": "&",
    "amp;": "&",
    "And;": "⩓",
    "and;": "∧",
    "ang;": "∠",
    "apE;": "⩰",
    "ape;": "≊",
    "ast;": "*",
    Auml: "Ä",
    auml: "ä",
    "Bcy;": "Б",
    "bcy;": "б",
    "Bfr;": "𝔅",
    "bfr;": "𝔟",
    "bne;": "=⃥",
    "bot;": "⊥",
    "Cap;": "⋒",
    "cap;": "∩",
    cent: "¢",
    "Cfr;": "ℭ",
    "cfr;": "𝔠",
    "Chi;": "Χ",
    "chi;": "χ",
    "cir;": "○",
    COPY: "©",
    copy: "©",
    "Cup;": "⋓",
    "cup;": "∪",
    "Dcy;": "Д",
    "dcy;": "д",
    "deg;": "°",
    "Del;": "∇",
    "Dfr;": "𝔇",
    "dfr;": "𝔡",
    "die;": "¨",
    "div;": "÷",
    "Dot;": "¨",
    "dot;": "˙",
    "Ecy;": "Э",
    "ecy;": "э",
    "Efr;": "𝔈",
    "efr;": "𝔢",
    "egs;": "⪖",
    "ell;": "ℓ",
    "els;": "⪕",
    "ENG;": "Ŋ",
    "eng;": "ŋ",
    "Eta;": "Η",
    "eta;": "η",
    "ETH;": "Ð",
    "eth;": "ð",
    Euml: "Ë",
    euml: "ë",
    "Fcy;": "Ф",
    "fcy;": "ф",
    "Ffr;": "𝔉",
    "ffr;": "𝔣",
    "gap;": "⪆",
    "Gcy;": "Г",
    "gcy;": "г",
    "gEl;": "⪌",
    "gel;": "⋛",
    "geq;": "≥",
    "ges;": "⩾",
    "Gfr;": "𝔊",
    "gfr;": "𝔤",
    "ggg;": "⋙",
    "gla;": "⪥",
    "glE;": "⪒",
    "glj;": "⪤",
    "gnE;": "≩",
    "gne;": "⪈",
    "Hat;": "^",
    "Hfr;": "ℌ",
    "hfr;": "𝔥",
    "Icy;": "И",
    "icy;": "и",
    "iff;": "⇔",
    "Ifr;": "ℑ",
    "ifr;": "𝔦",
    "Int;": "∬",
    "int;": "∫",
    Iuml: "Ï",
    iuml: "ï",
    "Jcy;": "Й",
    "jcy;": "й",
    "Jfr;": "𝔍",
    "jfr;": "𝔧",
    "Kcy;": "К",
    "kcy;": "к",
    "Kfr;": "𝔎",
    "kfr;": "𝔨",
    "lap;": "⪅",
    "lat;": "⪫",
    "Lcy;": "Л",
    "lcy;": "л",
    "lEg;": "⪋",
    "leg;": "⋚",
    "leq;": "≤",
    "les;": "⩽",
    "Lfr;": "𝔏",
    "lfr;": "𝔩",
    "lgE;": "⪑",
    "lnE;": "≨",
    "lne;": "⪇",
    "loz;": "◊",
    "lrm;": "‎",
    "Lsh;": "↰",
    "lsh;": "↰",
    macr: "¯",
    "Map;": "⤅",
    "map;": "↦",
    "Mcy;": "М",
    "mcy;": "м",
    "Mfr;": "𝔐",
    "mfr;": "𝔪",
    "mho;": "℧",
    "mid;": "∣",
    "nap;": "≉",
    nbsp: " ",
    "Ncy;": "Н",
    "ncy;": "н",
    "Nfr;": "𝔑",
    "nfr;": "𝔫",
    "ngE;": "≧̸",
    "nge;": "≱",
    "nGg;": "⋙̸",
    "nGt;": "≫⃒",
    "ngt;": "≯",
    "nis;": "⋼",
    "niv;": "∋",
    "nlE;": "≦̸",
    "nle;": "≰",
    "nLl;": "⋘̸",
    "nLt;": "≪⃒",
    "nlt;": "≮",
    "Not;": "⫬",
    "not;": "¬",
    "npr;": "⊀",
    "nsc;": "⊁",
    "num;": "#",
    "Ocy;": "О",
    "ocy;": "о",
    "Ofr;": "𝔒",
    "ofr;": "𝔬",
    "ogt;": "⧁",
    "ohm;": "Ω",
    "olt;": "⧀",
    "ord;": "⩝",
    ordf: "ª",
    ordm: "º",
    "orv;": "⩛",
    Ouml: "Ö",
    ouml: "ö",
    "par;": "∥",
    para: "¶",
    "Pcy;": "П",
    "pcy;": "п",
    "Pfr;": "𝔓",
    "pfr;": "𝔭",
    "Phi;": "Φ",
    "phi;": "φ",
    "piv;": "ϖ",
    "prE;": "⪳",
    "pre;": "⪯",
    "Psi;": "Ψ",
    "psi;": "ψ",
    "Qfr;": "𝔔",
    "qfr;": "𝔮",
    QUOT: "\"",
    quot: "\"",
    "Rcy;": "Р",
    "rcy;": "р",
    "REG;": "®",
    "reg;": "®",
    "Rfr;": "ℜ",
    "rfr;": "𝔯",
    "Rho;": "Ρ",
    "rho;": "ρ",
    "rlm;": "‏",
    "Rsh;": "↱",
    "rsh;": "↱",
    "scE;": "⪴",
    "sce;": "⪰",
    "Scy;": "С",
    "scy;": "с",
    sect: "§",
    "Sfr;": "𝔖",
    "sfr;": "𝔰",
    "shy;": "­",
    "sim;": "∼",
    "smt;": "⪪",
    "sol;": "/",
    "squ;": "□",
    "Sub;": "⋐",
    "sub;": "⊂",
    "Sum;": "∑",
    "sum;": "∑",
    "Sup;": "⋑",
    "sup;": "⊃",
    sup1: "¹",
    sup2: "²",
    sup3: "³",
    "Tab;": "\t",
    "Tau;": "Τ",
    "tau;": "τ",
    "Tcy;": "Т",
    "tcy;": "т",
    "Tfr;": "𝔗",
    "tfr;": "𝔱",
    "top;": "⊤",
    "Ucy;": "У",
    "ucy;": "у",
    "Ufr;": "𝔘",
    "ufr;": "𝔲",
    "uml;": "¨",
    Uuml: "Ü",
    uuml: "ü",
    "Vcy;": "В",
    "vcy;": "в",
    "Vee;": "⋁",
    "vee;": "∨",
    "Vfr;": "𝔙",
    "vfr;": "𝔳",
    "Wfr;": "𝔚",
    "wfr;": "𝔴",
    "Xfr;": "𝔛",
    "xfr;": "𝔵",
    "Ycy;": "Ы",
    "ycy;": "ы",
    "yen;": "¥",
    "Yfr;": "𝔜",
    "yfr;": "𝔶",
    yuml: "ÿ",
    "Zcy;": "З",
    "zcy;": "з",
    "Zfr;": "ℨ",
    "zfr;": "𝔷",
    "zwj;": "‍",
    Acirc: "Â",
    acirc: "â",
    acute: "´",
    AElig: "Æ",
    aelig: "æ",
    "andd;": "⩜",
    "andv;": "⩚",
    "ange;": "⦤",
    "Aopf;": "𝔸",
    "aopf;": "𝕒",
    "apid;": "≋",
    "apos;": "'",
    Aring: "Å",
    aring: "å",
    "Ascr;": "𝒜",
    "ascr;": "𝒶",
    "Auml;": "Ä",
    "auml;": "ä",
    "Barv;": "⫧",
    "bbrk;": "⎵",
    "Beta;": "Β",
    "beta;": "β",
    "beth;": "ℶ",
    "bNot;": "⫭",
    "bnot;": "⌐",
    "Bopf;": "𝔹",
    "bopf;": "𝕓",
    "boxH;": "═",
    "boxh;": "─",
    "boxV;": "║",
    "boxv;": "│",
    "Bscr;": "ℬ",
    "bscr;": "𝒷",
    "bsim;": "∽",
    "bsol;": "\\",
    "bull;": "•",
    "bump;": "≎",
    "caps;": "∩︀",
    "Cdot;": "Ċ",
    "cdot;": "ċ",
    cedil: "¸",
    "cent;": "¢",
    "CHcy;": "Ч",
    "chcy;": "ч",
    "circ;": "ˆ",
    "cirE;": "⧃",
    "cire;": "≗",
    "comp;": "∁",
    "cong;": "≅",
    "Copf;": "ℂ",
    "copf;": "𝕔",
    "COPY;": "©",
    "copy;": "©",
    "Cscr;": "𝒞",
    "cscr;": "𝒸",
    "csub;": "⫏",
    "csup;": "⫐",
    "cups;": "∪︀",
    "Darr;": "↡",
    "dArr;": "⇓",
    "darr;": "↓",
    "dash;": "‐",
    "dHar;": "⥥",
    "diam;": "⋄",
    "DJcy;": "Ђ",
    "djcy;": "ђ",
    "Dopf;": "𝔻",
    "dopf;": "𝕕",
    "Dscr;": "𝒟",
    "dscr;": "𝒹",
    "DScy;": "Ѕ",
    "dscy;": "ѕ",
    "dsol;": "⧶",
    "dtri;": "▿",
    "DZcy;": "Џ",
    "dzcy;": "џ",
    "ecir;": "≖",
    Ecirc: "Ê",
    ecirc: "ê",
    "Edot;": "Ė",
    "eDot;": "≑",
    "edot;": "ė",
    "emsp;": " ",
    "ensp;": " ",
    "Eopf;": "𝔼",
    "eopf;": "𝕖",
    "epar;": "⋕",
    "epsi;": "ε",
    "Escr;": "ℰ",
    "escr;": "ℯ",
    "Esim;": "⩳",
    "esim;": "≂",
    "Euml;": "Ë",
    "euml;": "ë",
    "euro;": "€",
    "excl;": "!",
    "flat;": "♭",
    "fnof;": "ƒ",
    "Fopf;": "𝔽",
    "fopf;": "𝕗",
    "fork;": "⋔",
    "Fscr;": "ℱ",
    "fscr;": "𝒻",
    "Gdot;": "Ġ",
    "gdot;": "ġ",
    "geqq;": "≧",
    "gesl;": "⋛︀",
    "GJcy;": "Ѓ",
    "gjcy;": "ѓ",
    "gnap;": "⪊",
    "gneq;": "⪈",
    "Gopf;": "𝔾",
    "gopf;": "𝕘",
    "Gscr;": "𝒢",
    "gscr;": "ℊ",
    "gsim;": "≳",
    "gtcc;": "⪧",
    "gvnE;": "≩︀",
    "half;": "½",
    "hArr;": "⇔",
    "harr;": "↔",
    "hbar;": "ℏ",
    "Hopf;": "ℍ",
    "hopf;": "𝕙",
    "Hscr;": "ℋ",
    "hscr;": "𝒽",
    Icirc: "Î",
    icirc: "î",
    "Idot;": "İ",
    "IEcy;": "Е",
    "iecy;": "е",
    iexcl: "¡",
    "imof;": "⊷",
    "IOcy;": "Ё",
    "iocy;": "ё",
    "Iopf;": "𝕀",
    "iopf;": "𝕚",
    "Iota;": "Ι",
    "iota;": "ι",
    "Iscr;": "ℐ",
    "iscr;": "𝒾",
    "isin;": "∈",
    "Iuml;": "Ï",
    "iuml;": "ï",
    "Jopf;": "𝕁",
    "jopf;": "𝕛",
    "Jscr;": "𝒥",
    "jscr;": "𝒿",
    "KHcy;": "Х",
    "khcy;": "х",
    "KJcy;": "Ќ",
    "kjcy;": "ќ",
    "Kopf;": "𝕂",
    "kopf;": "𝕜",
    "Kscr;": "𝒦",
    "kscr;": "𝓀",
    "Lang;": "⟪",
    "lang;": "⟨",
    laquo: "«",
    "Larr;": "↞",
    "lArr;": "⇐",
    "larr;": "←",
    "late;": "⪭",
    "lcub;": "{",
    "ldca;": "⤶",
    "ldsh;": "↲",
    "leqq;": "≦",
    "lesg;": "⋚︀",
    "lHar;": "⥢",
    "LJcy;": "Љ",
    "ljcy;": "љ",
    "lnap;": "⪉",
    "lneq;": "⪇",
    "Lopf;": "𝕃",
    "lopf;": "𝕝",
    "lozf;": "⧫",
    "lpar;": "(",
    "Lscr;": "ℒ",
    "lscr;": "𝓁",
    "lsim;": "≲",
    "lsqb;": "[",
    "ltcc;": "⪦",
    "ltri;": "◃",
    "lvnE;": "≨︀",
    "macr;": "¯",
    "male;": "♂",
    "malt;": "✠",
    micro: "µ",
    "mlcp;": "⫛",
    "mldr;": "…",
    "Mopf;": "𝕄",
    "mopf;": "𝕞",
    "Mscr;": "ℳ",
    "mscr;": "𝓂",
    "nang;": "∠⃒",
    "napE;": "⩰̸",
    "nbsp;": " ",
    "ncap;": "⩃",
    "ncup;": "⩂",
    "ngeq;": "≱",
    "nges;": "⩾̸",
    "ngtr;": "≯",
    "nGtv;": "≫̸",
    "nisd;": "⋺",
    "NJcy;": "Њ",
    "njcy;": "њ",
    "nldr;": "‥",
    "nleq;": "≰",
    "nles;": "⩽̸",
    "nLtv;": "≪̸",
    "nmid;": "∤",
    "Nopf;": "ℕ",
    "nopf;": "𝕟",
    "npar;": "∦",
    "npre;": "⪯̸",
    "nsce;": "⪰̸",
    "Nscr;": "𝒩",
    "nscr;": "𝓃",
    "nsim;": "≁",
    "nsub;": "⊄",
    "nsup;": "⊅",
    "ntgl;": "≹",
    "ntlg;": "≸",
    "nvap;": "≍⃒",
    "nvge;": "≥⃒",
    "nvgt;": ">⃒",
    "nvle;": "≤⃒",
    "nvlt;": "<⃒",
    "oast;": "⊛",
    "ocir;": "⊚",
    Ocirc: "Ô",
    ocirc: "ô",
    "odiv;": "⨸",
    "odot;": "⊙",
    "ogon;": "˛",
    "oint;": "∮",
    "omid;": "⦶",
    "Oopf;": "𝕆",
    "oopf;": "𝕠",
    "opar;": "⦷",
    "ordf;": "ª",
    "ordm;": "º",
    "oror;": "⩖",
    "Oscr;": "𝒪",
    "oscr;": "ℴ",
    "osol;": "⊘",
    "Ouml;": "Ö",
    "ouml;": "ö",
    "para;": "¶",
    "part;": "∂",
    "perp;": "⊥",
    "phiv;": "ϕ",
    "plus;": "+",
    "Popf;": "ℙ",
    "popf;": "𝕡",
    pound: "£",
    "prap;": "⪷",
    "prec;": "≺",
    "prnE;": "⪵",
    "prod;": "∏",
    "prop;": "∝",
    "Pscr;": "𝒫",
    "pscr;": "𝓅",
    "qint;": "⨌",
    "Qopf;": "ℚ",
    "qopf;": "𝕢",
    "Qscr;": "𝒬",
    "qscr;": "𝓆",
    "QUOT;": "\"",
    "quot;": "\"",
    "race;": "∽̱",
    "Rang;": "⟫",
    "rang;": "⟩",
    raquo: "»",
    "Rarr;": "↠",
    "rArr;": "⇒",
    "rarr;": "→",
    "rcub;": "}",
    "rdca;": "⤷",
    "rdsh;": "↳",
    "real;": "ℜ",
    "rect;": "▭",
    "rHar;": "⥤",
    "rhov;": "ϱ",
    "ring;": "˚",
    "Ropf;": "ℝ",
    "ropf;": "𝕣",
    "rpar;": ")",
    "Rscr;": "ℛ",
    "rscr;": "𝓇",
    "rsqb;": "]",
    "rtri;": "▹",
    "scap;": "⪸",
    "scnE;": "⪶",
    "sdot;": "⋅",
    "sect;": "§",
    "semi;": ";",
    "sext;": "✶",
    "SHcy;": "Ш",
    "shcy;": "ш",
    "sime;": "≃",
    "simg;": "⪞",
    "siml;": "⪝",
    "smid;": "∣",
    "smte;": "⪬",
    "solb;": "⧄",
    "Sopf;": "𝕊",
    "sopf;": "𝕤",
    "spar;": "∥",
    "Sqrt;": "√",
    "squf;": "▪",
    "Sscr;": "𝒮",
    "sscr;": "𝓈",
    "Star;": "⋆",
    "star;": "☆",
    "subE;": "⫅",
    "sube;": "⊆",
    "succ;": "≻",
    "sung;": "♪",
    "sup1;": "¹",
    "sup2;": "²",
    "sup3;": "³",
    "supE;": "⫆",
    "supe;": "⊇",
    szlig: "ß",
    "tbrk;": "⎴",
    "tdot;": "⃛",
    THORN: "Þ",
    thorn: "þ",
    times: "×",
    "tint;": "∭",
    "toea;": "⤨",
    "Topf;": "𝕋",
    "topf;": "𝕥",
    "tosa;": "⤩",
    "trie;": "≜",
    "Tscr;": "𝒯",
    "tscr;": "𝓉",
    "TScy;": "Ц",
    "tscy;": "ц",
    "Uarr;": "↟",
    "uArr;": "⇑",
    "uarr;": "↑",
    Ucirc: "Û",
    ucirc: "û",
    "uHar;": "⥣",
    "Uopf;": "𝕌",
    "uopf;": "𝕦",
    "Upsi;": "ϒ",
    "upsi;": "υ",
    "Uscr;": "𝒰",
    "uscr;": "𝓊",
    "utri;": "▵",
    "Uuml;": "Ü",
    "uuml;": "ü",
    "vArr;": "⇕",
    "varr;": "↕",
    "Vbar;": "⫫",
    "vBar;": "⫨",
    "Vert;": "‖",
    "vert;": "|",
    "Vopf;": "𝕍",
    "vopf;": "𝕧",
    "Vscr;": "𝒱",
    "vscr;": "𝓋",
    "Wopf;": "𝕎",
    "wopf;": "𝕨",
    "Wscr;": "𝒲",
    "wscr;": "𝓌",
    "xcap;": "⋂",
    "xcup;": "⋃",
    "xmap;": "⟼",
    "xnis;": "⋻",
    "Xopf;": "𝕏",
    "xopf;": "𝕩",
    "Xscr;": "𝒳",
    "xscr;": "𝓍",
    "xvee;": "⋁",
    "YAcy;": "Я",
    "yacy;": "я",
    "YIcy;": "Ї",
    "yicy;": "ї",
    "Yopf;": "𝕐",
    "yopf;": "𝕪",
    "Yscr;": "𝒴",
    "yscr;": "𝓎",
    "YUcy;": "Ю",
    "yucy;": "ю",
    "Yuml;": "Ÿ",
    "yuml;": "ÿ",
    "Zdot;": "Ż",
    "zdot;": "ż",
    "Zeta;": "Ζ",
    "zeta;": "ζ",
    "ZHcy;": "Ж",
    "zhcy;": "ж",
    "Zopf;": "ℤ",
    "zopf;": "𝕫",
    "Zscr;": "𝒵",
    "zscr;": "𝓏",
    "zwnj;": "‌",
    Aacute: "Á",
    aacute: "á",
    "Acirc;": "Â",
    "acirc;": "â",
    "acute;": "´",
    "AElig;": "Æ",
    "aelig;": "æ",
    Agrave: "À",
    agrave: "à",
    "aleph;": "ℵ",
    "Alpha;": "Α",
    "alpha;": "α",
    "Amacr;": "Ā",
    "amacr;": "ā",
    "amalg;": "⨿",
    "angle;": "∠",
    "angrt;": "∟",
    "angst;": "Å",
    "Aogon;": "Ą",
    "aogon;": "ą",
    "Aring;": "Å",
    "aring;": "å",
    "asymp;": "≈",
    Atilde: "Ã",
    atilde: "ã",
    "awint;": "⨑",
    "bcong;": "≌",
    "bdquo;": "„",
    "bepsi;": "϶",
    "blank;": "␣",
    "blk12;": "▒",
    "blk14;": "░",
    "blk34;": "▓",
    "block;": "█",
    "boxDL;": "╗",
    "boxDl;": "╖",
    "boxdL;": "╕",
    "boxdl;": "┐",
    "boxDR;": "╔",
    "boxDr;": "╓",
    "boxdR;": "╒",
    "boxdr;": "┌",
    "boxHD;": "╦",
    "boxHd;": "╤",
    "boxhD;": "╥",
    "boxhd;": "┬",
    "boxHU;": "╩",
    "boxHu;": "╧",
    "boxhU;": "╨",
    "boxhu;": "┴",
    "boxUL;": "╝",
    "boxUl;": "╜",
    "boxuL;": "╛",
    "boxul;": "┘",
    "boxUR;": "╚",
    "boxUr;": "╙",
    "boxuR;": "╘",
    "boxur;": "└",
    "boxVH;": "╬",
    "boxVh;": "╫",
    "boxvH;": "╪",
    "boxvh;": "┼",
    "boxVL;": "╣",
    "boxVl;": "╢",
    "boxvL;": "╡",
    "boxvl;": "┤",
    "boxVR;": "╠",
    "boxVr;": "╟",
    "boxvR;": "╞",
    "boxvr;": "├",
    "Breve;": "˘",
    "breve;": "˘",
    brvbar: "¦",
    "bsemi;": "⁏",
    "bsime;": "⋍",
    "bsolb;": "⧅",
    "bumpE;": "⪮",
    "bumpe;": "≏",
    "caret;": "⁁",
    "caron;": "ˇ",
    "ccaps;": "⩍",
    Ccedil: "Ç",
    ccedil: "ç",
    "Ccirc;": "Ĉ",
    "ccirc;": "ĉ",
    "ccups;": "⩌",
    "cedil;": "¸",
    "check;": "✓",
    "clubs;": "♣",
    "Colon;": "∷",
    "colon;": ":",
    "comma;": ",",
    "crarr;": "↵",
    "Cross;": "⨯",
    "cross;": "✗",
    "csube;": "⫑",
    "csupe;": "⫒",
    "ctdot;": "⋯",
    "cuepr;": "⋞",
    "cuesc;": "⋟",
    "cupor;": "⩅",
    curren: "¤",
    "cuvee;": "⋎",
    "cuwed;": "⋏",
    "cwint;": "∱",
    "Dashv;": "⫤",
    "dashv;": "⊣",
    "dblac;": "˝",
    "ddarr;": "⇊",
    "Delta;": "Δ",
    "delta;": "δ",
    "dharl;": "⇃",
    "dharr;": "⇂",
    "diams;": "♦",
    "disin;": "⋲",
    divide: "÷",
    "doteq;": "≐",
    "dtdot;": "⋱",
    "dtrif;": "▾",
    "duarr;": "⇵",
    "duhar;": "⥯",
    Eacute: "É",
    eacute: "é",
    "Ecirc;": "Ê",
    "ecirc;": "ê",
    "eDDot;": "⩷",
    "efDot;": "≒",
    Egrave: "È",
    egrave: "è",
    "Emacr;": "Ē",
    "emacr;": "ē",
    "empty;": "∅",
    "Eogon;": "Ę",
    "eogon;": "ę",
    "eplus;": "⩱",
    "epsiv;": "ϵ",
    "eqsim;": "≂",
    "Equal;": "⩵",
    "equiv;": "≡",
    "erarr;": "⥱",
    "erDot;": "≓",
    "esdot;": "≐",
    "exist;": "∃",
    "fflig;": "ﬀ",
    "filig;": "ﬁ",
    "fjlig;": "fj",
    "fllig;": "ﬂ",
    "fltns;": "▱",
    "forkv;": "⫙",
    frac12: "½",
    frac14: "¼",
    frac34: "¾",
    "frasl;": "⁄",
    "frown;": "⌢",
    "Gamma;": "Γ",
    "gamma;": "γ",
    "Gcirc;": "Ĝ",
    "gcirc;": "ĝ",
    "gescc;": "⪩",
    "gimel;": "ℷ",
    "gneqq;": "≩",
    "gnsim;": "⋧",
    "grave;": "`",
    "gsime;": "⪎",
    "gsiml;": "⪐",
    "gtcir;": "⩺",
    "gtdot;": "⋗",
    "Hacek;": "ˇ",
    "harrw;": "↭",
    "Hcirc;": "Ĥ",
    "hcirc;": "ĥ",
    "hoarr;": "⇿",
    Iacute: "Í",
    iacute: "í",
    "Icirc;": "Î",
    "icirc;": "î",
    "iexcl;": "¡",
    Igrave: "Ì",
    igrave: "ì",
    "iiint;": "∭",
    "iiota;": "℩",
    "IJlig;": "Ĳ",
    "ijlig;": "ĳ",
    "Imacr;": "Ī",
    "imacr;": "ī",
    "image;": "ℑ",
    "imath;": "ı",
    "imped;": "Ƶ",
    "infin;": "∞",
    "Iogon;": "Į",
    "iogon;": "į",
    "iprod;": "⨼",
    iquest: "¿",
    "isinE;": "⋹",
    "isins;": "⋴",
    "isinv;": "∈",
    "Iukcy;": "І",
    "iukcy;": "і",
    "Jcirc;": "Ĵ",
    "jcirc;": "ĵ",
    "jmath;": "ȷ",
    "Jukcy;": "Є",
    "jukcy;": "є",
    "Kappa;": "Κ",
    "kappa;": "κ",
    "lAarr;": "⇚",
    "langd;": "⦑",
    "laquo;": "«",
    "larrb;": "⇤",
    "lates;": "⪭︀",
    "lBarr;": "⤎",
    "lbarr;": "⤌",
    "lbbrk;": "❲",
    "lbrke;": "⦋",
    "lceil;": "⌈",
    "ldquo;": "“",
    "lescc;": "⪨",
    "lhard;": "↽",
    "lharu;": "↼",
    "lhblk;": "▄",
    "llarr;": "⇇",
    "lltri;": "◺",
    "lneqq;": "≨",
    "lnsim;": "⋦",
    "loang;": "⟬",
    "loarr;": "⇽",
    "lobrk;": "⟦",
    "lopar;": "⦅",
    "lrarr;": "⇆",
    "lrhar;": "⇋",
    "lrtri;": "⊿",
    "lsime;": "⪍",
    "lsimg;": "⪏",
    "lsquo;": "‘",
    "ltcir;": "⩹",
    "ltdot;": "⋖",
    "ltrie;": "⊴",
    "ltrif;": "◂",
    "mdash;": "—",
    "mDDot;": "∺",
    "micro;": "µ",
    middot: "·",
    "minus;": "−",
    "mumap;": "⊸",
    "nabla;": "∇",
    "napid;": "≋̸",
    "napos;": "ŉ",
    "natur;": "♮",
    "nbump;": "≎̸",
    "ncong;": "≇",
    "ndash;": "–",
    "neArr;": "⇗",
    "nearr;": "↗",
    "nedot;": "≐̸",
    "nesim;": "≂̸",
    "ngeqq;": "≧̸",
    "ngsim;": "≵",
    "nhArr;": "⇎",
    "nharr;": "↮",
    "nhpar;": "⫲",
    "nlArr;": "⇍",
    "nlarr;": "↚",
    "nleqq;": "≦̸",
    "nless;": "≮",
    "nlsim;": "≴",
    "nltri;": "⋪",
    "notin;": "∉",
    "notni;": "∌",
    "npart;": "∂̸",
    "nprec;": "⊀",
    "nrArr;": "⇏",
    "nrarr;": "↛",
    "nrtri;": "⋫",
    "nsime;": "≄",
    "nsmid;": "∤",
    "nspar;": "∦",
    "nsubE;": "⫅̸",
    "nsube;": "⊈",
    "nsucc;": "⊁",
    "nsupE;": "⫆̸",
    "nsupe;": "⊉",
    Ntilde: "Ñ",
    ntilde: "ñ",
    "numsp;": " ",
    "nvsim;": "∼⃒",
    "nwArr;": "⇖",
    "nwarr;": "↖",
    Oacute: "Ó",
    oacute: "ó",
    "Ocirc;": "Ô",
    "ocirc;": "ô",
    "odash;": "⊝",
    "OElig;": "Œ",
    "oelig;": "œ",
    "ofcir;": "⦿",
    Ograve: "Ò",
    ograve: "ò",
    "ohbar;": "⦵",
    "olarr;": "↺",
    "olcir;": "⦾",
    "oline;": "‾",
    "Omacr;": "Ō",
    "omacr;": "ō",
    "Omega;": "Ω",
    "omega;": "ω",
    "operp;": "⦹",
    "oplus;": "⊕",
    "orarr;": "↻",
    "order;": "ℴ",
    Oslash: "Ø",
    oslash: "ø",
    Otilde: "Õ",
    otilde: "õ",
    "ovbar;": "⌽",
    "parsl;": "⫽",
    "phone;": "☎",
    "plusb;": "⊞",
    "pluse;": "⩲",
    plusmn: "±",
    "pound;": "£",
    "prcue;": "≼",
    "Prime;": "″",
    "prime;": "′",
    "prnap;": "⪹",
    "prsim;": "≾",
    "quest;": "?",
    "rAarr;": "⇛",
    "radic;": "√",
    "rangd;": "⦒",
    "range;": "⦥",
    "raquo;": "»",
    "rarrb;": "⇥",
    "rarrc;": "⤳",
    "rarrw;": "↝",
    "ratio;": "∶",
    "RBarr;": "⤐",
    "rBarr;": "⤏",
    "rbarr;": "⤍",
    "rbbrk;": "❳",
    "rbrke;": "⦌",
    "rceil;": "⌉",
    "rdquo;": "”",
    "reals;": "ℝ",
    "rhard;": "⇁",
    "rharu;": "⇀",
    "rlarr;": "⇄",
    "rlhar;": "⇌",
    "rnmid;": "⫮",
    "roang;": "⟭",
    "roarr;": "⇾",
    "robrk;": "⟧",
    "ropar;": "⦆",
    "rrarr;": "⇉",
    "rsquo;": "’",
    "rtrie;": "⊵",
    "rtrif;": "▸",
    "sbquo;": "‚",
    "sccue;": "≽",
    "Scirc;": "Ŝ",
    "scirc;": "ŝ",
    "scnap;": "⪺",
    "scsim;": "≿",
    "sdotb;": "⊡",
    "sdote;": "⩦",
    "seArr;": "⇘",
    "searr;": "↘",
    "setmn;": "∖",
    "sharp;": "♯",
    "Sigma;": "Σ",
    "sigma;": "σ",
    "simeq;": "≃",
    "simgE;": "⪠",
    "simlE;": "⪟",
    "simne;": "≆",
    "slarr;": "←",
    "smile;": "⌣",
    "smtes;": "⪬︀",
    "sqcap;": "⊓",
    "sqcup;": "⊔",
    "sqsub;": "⊏",
    "sqsup;": "⊐",
    "srarr;": "→",
    "starf;": "★",
    "strns;": "¯",
    "subnE;": "⫋",
    "subne;": "⊊",
    "supnE;": "⫌",
    "supne;": "⊋",
    "swArr;": "⇙",
    "swarr;": "↙",
    "szlig;": "ß",
    "Theta;": "Θ",
    "theta;": "θ",
    "thkap;": "≈",
    "THORN;": "Þ",
    "thorn;": "þ",
    "Tilde;": "∼",
    "tilde;": "˜",
    "times;": "×",
    "TRADE;": "™",
    "trade;": "™",
    "trisb;": "⧍",
    "TSHcy;": "Ћ",
    "tshcy;": "ћ",
    "twixt;": "≬",
    Uacute: "Ú",
    uacute: "ú",
    "Ubrcy;": "Ў",
    "ubrcy;": "ў",
    "Ucirc;": "Û",
    "ucirc;": "û",
    "udarr;": "⇅",
    "udhar;": "⥮",
    Ugrave: "Ù",
    ugrave: "ù",
    "uharl;": "↿",
    "uharr;": "↾",
    "uhblk;": "▀",
    "ultri;": "◸",
    "Umacr;": "Ū",
    "umacr;": "ū",
    "Union;": "⋃",
    "Uogon;": "Ų",
    "uogon;": "ų",
    "uplus;": "⊎",
    "upsih;": "ϒ",
    "UpTee;": "⊥",
    "Uring;": "Ů",
    "uring;": "ů",
    "urtri;": "◹",
    "utdot;": "⋰",
    "utrif;": "▴",
    "uuarr;": "⇈",
    "varpi;": "ϖ",
    "vBarv;": "⫩",
    "VDash;": "⊫",
    "Vdash;": "⊩",
    "vDash;": "⊨",
    "vdash;": "⊢",
    "veeeq;": "≚",
    "vltri;": "⊲",
    "vnsub;": "⊂⃒",
    "vnsup;": "⊃⃒",
    "vprop;": "∝",
    "vrtri;": "⊳",
    "Wcirc;": "Ŵ",
    "wcirc;": "ŵ",
    "Wedge;": "⋀",
    "wedge;": "∧",
    "xcirc;": "◯",
    "xdtri;": "▽",
    "xhArr;": "⟺",
    "xharr;": "⟷",
    "xlArr;": "⟸",
    "xlarr;": "⟵",
    "xodot;": "⨀",
    "xrArr;": "⟹",
    "xrarr;": "⟶",
    "xutri;": "△",
    Yacute: "Ý",
    yacute: "ý",
    "Ycirc;": "Ŷ",
    "ycirc;": "ŷ",
    "Aacute;": "Á",
    "aacute;": "á",
    "Abreve;": "Ă",
    "abreve;": "ă",
    "Agrave;": "À",
    "agrave;": "à",
    "andand;": "⩕",
    "angmsd;": "∡",
    "angsph;": "∢",
    "apacir;": "⩯",
    "approx;": "≈",
    "Assign;": "≔",
    "Atilde;": "Ã",
    "atilde;": "ã",
    "barvee;": "⊽",
    "Barwed;": "⌆",
    "barwed;": "⌅",
    "becaus;": "∵",
    "bernou;": "ℬ",
    "bigcap;": "⋂",
    "bigcup;": "⋃",
    "bigvee;": "⋁",
    "bkarow;": "⤍",
    "bottom;": "⊥",
    "bowtie;": "⋈",
    "boxbox;": "⧉",
    "bprime;": "‵",
    "brvbar;": "¦",
    "bullet;": "•",
    "Bumpeq;": "≎",
    "bumpeq;": "≏",
    "Cacute;": "Ć",
    "cacute;": "ć",
    "capand;": "⩄",
    "capcap;": "⩋",
    "capcup;": "⩇",
    "capdot;": "⩀",
    "Ccaron;": "Č",
    "ccaron;": "č",
    "Ccedil;": "Ç",
    "ccedil;": "ç",
    "circeq;": "≗",
    "cirmid;": "⫯",
    "Colone;": "⩴",
    "colone;": "≔",
    "commat;": "@",
    "compfn;": "∘",
    "Conint;": "∯",
    "conint;": "∮",
    "coprod;": "∐",
    "copysr;": "℗",
    "cularr;": "↶",
    "CupCap;": "≍",
    "cupcap;": "⩆",
    "cupcup;": "⩊",
    "cupdot;": "⊍",
    "curarr;": "↷",
    "curren;": "¤",
    "cylcty;": "⌭",
    "Dagger;": "‡",
    "dagger;": "†",
    "daleth;": "ℸ",
    "Dcaron;": "Ď",
    "dcaron;": "ď",
    "dfisht;": "⥿",
    "divide;": "÷",
    "divonx;": "⋇",
    "dlcorn;": "⌞",
    "dlcrop;": "⌍",
    "dollar;": "$",
    "DotDot;": "⃜",
    "drcorn;": "⌟",
    "drcrop;": "⌌",
    "Dstrok;": "Đ",
    "dstrok;": "đ",
    "Eacute;": "É",
    "eacute;": "é",
    "easter;": "⩮",
    "Ecaron;": "Ě",
    "ecaron;": "ě",
    "ecolon;": "≕",
    "Egrave;": "È",
    "egrave;": "è",
    "egsdot;": "⪘",
    "elsdot;": "⪗",
    "emptyv;": "∅",
    "emsp13;": " ",
    "emsp14;": " ",
    "eparsl;": "⧣",
    "eqcirc;": "≖",
    "equals;": "=",
    "equest;": "≟",
    "Exists;": "∃",
    "female;": "♀",
    "ffilig;": "ﬃ",
    "ffllig;": "ﬄ",
    "ForAll;": "∀",
    "forall;": "∀",
    "frac12;": "½",
    "frac13;": "⅓",
    "frac14;": "¼",
    "frac15;": "⅕",
    "frac16;": "⅙",
    "frac18;": "⅛",
    "frac23;": "⅔",
    "frac25;": "⅖",
    "frac34;": "¾",
    "frac35;": "⅗",
    "frac38;": "⅜",
    "frac45;": "⅘",
    "frac56;": "⅚",
    "frac58;": "⅝",
    "frac78;": "⅞",
    "gacute;": "ǵ",
    "Gammad;": "Ϝ",
    "gammad;": "ϝ",
    "Gbreve;": "Ğ",
    "gbreve;": "ğ",
    "Gcedil;": "Ģ",
    "gesdot;": "⪀",
    "gesles;": "⪔",
    "gtlPar;": "⦕",
    "gtrarr;": "⥸",
    "gtrdot;": "⋗",
    "gtrsim;": "≳",
    "hairsp;": " ",
    "hamilt;": "ℋ",
    "HARDcy;": "Ъ",
    "hardcy;": "ъ",
    "hearts;": "♥",
    "hellip;": "…",
    "hercon;": "⊹",
    "homtht;": "∻",
    "horbar;": "―",
    "hslash;": "ℏ",
    "Hstrok;": "Ħ",
    "hstrok;": "ħ",
    "hybull;": "⁃",
    "hyphen;": "‐",
    "Iacute;": "Í",
    "iacute;": "í",
    "Igrave;": "Ì",
    "igrave;": "ì",
    "iiiint;": "⨌",
    "iinfin;": "⧜",
    "incare;": "℅",
    "inodot;": "ı",
    "intcal;": "⊺",
    "iquest;": "¿",
    "isinsv;": "⋳",
    "Itilde;": "Ĩ",
    "itilde;": "ĩ",
    "Jsercy;": "Ј",
    "jsercy;": "ј",
    "kappav;": "ϰ",
    "Kcedil;": "Ķ",
    "kcedil;": "ķ",
    "kgreen;": "ĸ",
    "Lacute;": "Ĺ",
    "lacute;": "ĺ",
    "lagran;": "ℒ",
    "Lambda;": "Λ",
    "lambda;": "λ",
    "langle;": "⟨",
    "larrfs;": "⤝",
    "larrhk;": "↩",
    "larrlp;": "↫",
    "larrpl;": "⤹",
    "larrtl;": "↢",
    "lAtail;": "⤛",
    "latail;": "⤙",
    "lbrace;": "{",
    "lbrack;": "[",
    "Lcaron;": "Ľ",
    "lcaron;": "ľ",
    "Lcedil;": "Ļ",
    "lcedil;": "ļ",
    "ldquor;": "„",
    "lesdot;": "⩿",
    "lesges;": "⪓",
    "lfisht;": "⥼",
    "lfloor;": "⌊",
    "lharul;": "⥪",
    "llhard;": "⥫",
    "Lmidot;": "Ŀ",
    "lmidot;": "ŀ",
    "lmoust;": "⎰",
    "loplus;": "⨭",
    "lowast;": "∗",
    "lowbar;": "_",
    "lparlt;": "⦓",
    "lrhard;": "⥭",
    "lsaquo;": "‹",
    "lsquor;": "‚",
    "Lstrok;": "Ł",
    "lstrok;": "ł",
    "lthree;": "⋋",
    "ltimes;": "⋉",
    "ltlarr;": "⥶",
    "ltrPar;": "⦖",
    "mapsto;": "↦",
    "marker;": "▮",
    "mcomma;": "⨩",
    "midast;": "*",
    "midcir;": "⫰",
    "middot;": "·",
    "minusb;": "⊟",
    "minusd;": "∸",
    "mnplus;": "∓",
    "models;": "⊧",
    "mstpos;": "∾",
    "Nacute;": "Ń",
    "nacute;": "ń",
    "nbumpe;": "≏̸",
    "Ncaron;": "Ň",
    "ncaron;": "ň",
    "Ncedil;": "Ņ",
    "ncedil;": "ņ",
    "nearhk;": "⤤",
    "nequiv;": "≢",
    "nesear;": "⤨",
    "nexist;": "∄",
    "nltrie;": "⋬",
    "notinE;": "⋹̸",
    "nparsl;": "⫽⃥",
    "nprcue;": "⋠",
    "nrarrc;": "⤳̸",
    "nrarrw;": "↝̸",
    "nrtrie;": "⋭",
    "nsccue;": "⋡",
    "nsimeq;": "≄",
    "Ntilde;": "Ñ",
    "ntilde;": "ñ",
    "numero;": "№",
    "nVDash;": "⊯",
    "nVdash;": "⊮",
    "nvDash;": "⊭",
    "nvdash;": "⊬",
    "nvHarr;": "⤄",
    "nvlArr;": "⤂",
    "nvrArr;": "⤃",
    "nwarhk;": "⤣",
    "nwnear;": "⤧",
    "Oacute;": "Ó",
    "oacute;": "ó",
    "Odblac;": "Ő",
    "odblac;": "ő",
    "odsold;": "⦼",
    "Ograve;": "Ò",
    "ograve;": "ò",
    "ominus;": "⊖",
    "origof;": "⊶",
    "Oslash;": "Ø",
    "oslash;": "ø",
    "Otilde;": "Õ",
    "otilde;": "õ",
    "Otimes;": "⨷",
    "otimes;": "⊗",
    "parsim;": "⫳",
    "percnt;": "%",
    "period;": ".",
    "permil;": "‰",
    "phmmat;": "ℳ",
    "planck;": "ℏ",
    "plankv;": "ℏ",
    "plusdo;": "∔",
    "plusdu;": "⨥",
    "plusmn;": "±",
    "preceq;": "⪯",
    "primes;": "ℙ",
    "prnsim;": "⋨",
    "propto;": "∝",
    "prurel;": "⊰",
    "puncsp;": " ",
    "qprime;": "⁗",
    "Racute;": "Ŕ",
    "racute;": "ŕ",
    "rangle;": "⟩",
    "rarrap;": "⥵",
    "rarrfs;": "⤞",
    "rarrhk;": "↪",
    "rarrlp;": "↬",
    "rarrpl;": "⥅",
    "Rarrtl;": "⤖",
    "rarrtl;": "↣",
    "rAtail;": "⤜",
    "ratail;": "⤚",
    "rbrace;": "}",
    "rbrack;": "]",
    "Rcaron;": "Ř",
    "rcaron;": "ř",
    "Rcedil;": "Ŗ",
    "rcedil;": "ŗ",
    "rdquor;": "”",
    "rfisht;": "⥽",
    "rfloor;": "⌋",
    "rharul;": "⥬",
    "rmoust;": "⎱",
    "roplus;": "⨮",
    "rpargt;": "⦔",
    "rsaquo;": "›",
    "rsquor;": "’",
    "rthree;": "⋌",
    "rtimes;": "⋊",
    "Sacute;": "Ś",
    "sacute;": "ś",
    "Scaron;": "Š",
    "scaron;": "š",
    "Scedil;": "Ş",
    "scedil;": "ş",
    "scnsim;": "⋩",
    "searhk;": "⤥",
    "seswar;": "⤩",
    "sfrown;": "⌢",
    "SHCHcy;": "Щ",
    "shchcy;": "щ",
    "sigmaf;": "ς",
    "sigmav;": "ς",
    "simdot;": "⩪",
    "smashp;": "⨳",
    "SOFTcy;": "Ь",
    "softcy;": "ь",
    "solbar;": "⌿",
    "spades;": "♠",
    "sqcaps;": "⊓︀",
    "sqcups;": "⊔︀",
    "sqsube;": "⊑",
    "sqsupe;": "⊒",
    "Square;": "□",
    "square;": "□",
    "squarf;": "▪",
    "ssetmn;": "∖",
    "ssmile;": "⌣",
    "sstarf;": "⋆",
    "subdot;": "⪽",
    "Subset;": "⋐",
    "subset;": "⊂",
    "subsim;": "⫇",
    "subsub;": "⫕",
    "subsup;": "⫓",
    "succeq;": "⪰",
    "supdot;": "⪾",
    "Supset;": "⋑",
    "supset;": "⊃",
    "supsim;": "⫈",
    "supsub;": "⫔",
    "supsup;": "⫖",
    "swarhk;": "⤦",
    "swnwar;": "⤪",
    "target;": "⌖",
    "Tcaron;": "Ť",
    "tcaron;": "ť",
    "Tcedil;": "Ţ",
    "tcedil;": "ţ",
    "telrec;": "⌕",
    "there4;": "∴",
    "thetav;": "ϑ",
    "thinsp;": " ",
    "thksim;": "∼",
    "timesb;": "⊠",
    "timesd;": "⨰",
    "topbot;": "⌶",
    "topcir;": "⫱",
    "tprime;": "‴",
    "tridot;": "◬",
    "Tstrok;": "Ŧ",
    "tstrok;": "ŧ",
    "Uacute;": "Ú",
    "uacute;": "ú",
    "Ubreve;": "Ŭ",
    "ubreve;": "ŭ",
    "Udblac;": "Ű",
    "udblac;": "ű",
    "ufisht;": "⥾",
    "Ugrave;": "Ù",
    "ugrave;": "ù",
    "ulcorn;": "⌜",
    "ulcrop;": "⌏",
    "urcorn;": "⌝",
    "urcrop;": "⌎",
    "Utilde;": "Ũ",
    "utilde;": "ũ",
    "vangrt;": "⦜",
    "varphi;": "ϕ",
    "varrho;": "ϱ",
    "Vdashl;": "⫦",
    "veebar;": "⊻",
    "vellip;": "⋮",
    "Verbar;": "‖",
    "verbar;": "|",
    "vsubnE;": "⫋︀",
    "vsubne;": "⊊︀",
    "vsupnE;": "⫌︀",
    "vsupne;": "⊋︀",
    "Vvdash;": "⊪",
    "wedbar;": "⩟",
    "wedgeq;": "≙",
    "weierp;": "℘",
    "wreath;": "≀",
    "xoplus;": "⨁",
    "xotime;": "⨂",
    "xsqcup;": "⨆",
    "xuplus;": "⨄",
    "xwedge;": "⋀",
    "Yacute;": "Ý",
    "yacute;": "ý",
    "Zacute;": "Ź",
    "zacute;": "ź",
    "Zcaron;": "Ž",
    "zcaron;": "ž",
    "zeetrf;": "ℨ",
    "alefsym;": "ℵ",
    "angrtvb;": "⊾",
    "angzarr;": "⍼",
    "asympeq;": "≍",
    "backsim;": "∽",
    "Because;": "∵",
    "because;": "∵",
    "bemptyv;": "⦰",
    "between;": "≬",
    "bigcirc;": "◯",
    "bigodot;": "⨀",
    "bigstar;": "★",
    "bnequiv;": "≡⃥",
    "boxplus;": "⊞",
    "Cayleys;": "ℭ",
    "Cconint;": "∰",
    "ccupssm;": "⩐",
    "Cedilla;": "¸",
    "cemptyv;": "⦲",
    "cirscir;": "⧂",
    "coloneq;": "≔",
    "congdot;": "⩭",
    "cudarrl;": "⤸",
    "cudarrr;": "⤵",
    "cularrp;": "⤽",
    "curarrm;": "⤼",
    "dbkarow;": "⤏",
    "ddagger;": "‡",
    "ddotseq;": "⩷",
    "demptyv;": "⦱",
    "Diamond;": "⋄",
    "diamond;": "⋄",
    "digamma;": "ϝ",
    "dotplus;": "∔",
    "DownTee;": "⊤",
    "dwangle;": "⦦",
    "Element;": "∈",
    "Epsilon;": "Ε",
    "epsilon;": "ε",
    "eqcolon;": "≕",
    "equivDD;": "⩸",
    "gesdoto;": "⪂",
    "gtquest;": "⩼",
    "gtrless;": "≷",
    "harrcir;": "⥈",
    "Implies;": "⇒",
    "intprod;": "⨼",
    "isindot;": "⋵",
    "larrbfs;": "⤟",
    "larrsim;": "⥳",
    "lbrksld;": "⦏",
    "lbrkslu;": "⦍",
    "ldrdhar;": "⥧",
    "LeftTee;": "⊣",
    "lesdoto;": "⪁",
    "lessdot;": "⋖",
    "lessgtr;": "≶",
    "lesssim;": "≲",
    "lotimes;": "⨴",
    "lozenge;": "◊",
    "ltquest;": "⩻",
    "luruhar;": "⥦",
    "maltese;": "✠",
    "minusdu;": "⨪",
    "napprox;": "≉",
    "natural;": "♮",
    "nearrow;": "↗",
    "NewLine;": "\n",
    "nexists;": "∄",
    "NoBreak;": "⁠",
    "notinva;": "∉",
    "notinvb;": "⋷",
    "notinvc;": "⋶",
    "NotLess;": "≮",
    "notniva;": "∌",
    "notnivb;": "⋾",
    "notnivc;": "⋽",
    "npolint;": "⨔",
    "npreceq;": "⪯̸",
    "nsqsube;": "⋢",
    "nsqsupe;": "⋣",
    "nsubset;": "⊂⃒",
    "nsucceq;": "⪰̸",
    "nsupset;": "⊃⃒",
    "nvinfin;": "⧞",
    "nvltrie;": "⊴⃒",
    "nvrtrie;": "⊵⃒",
    "nwarrow;": "↖",
    "olcross;": "⦻",
    "Omicron;": "Ο",
    "omicron;": "ο",
    "orderof;": "ℴ",
    "orslope;": "⩗",
    "OverBar;": "‾",
    "pertenk;": "‱",
    "planckh;": "ℎ",
    "pluscir;": "⨢",
    "plussim;": "⨦",
    "plustwo;": "⨧",
    "precsim;": "≾",
    "Product;": "∏",
    "quatint;": "⨖",
    "questeq;": "≟",
    "rarrbfs;": "⤠",
    "rarrsim;": "⥴",
    "rbrksld;": "⦎",
    "rbrkslu;": "⦐",
    "rdldhar;": "⥩",
    "realine;": "ℛ",
    "rotimes;": "⨵",
    "ruluhar;": "⥨",
    "searrow;": "↘",
    "simplus;": "⨤",
    "simrarr;": "⥲",
    "subedot;": "⫃",
    "submult;": "⫁",
    "subplus;": "⪿",
    "subrarr;": "⥹",
    "succsim;": "≿",
    "supdsub;": "⫘",
    "supedot;": "⫄",
    "suphsol;": "⟉",
    "suphsub;": "⫗",
    "suplarr;": "⥻",
    "supmult;": "⫂",
    "supplus;": "⫀",
    "swarrow;": "↙",
    "topfork;": "⫚",
    "triplus;": "⨹",
    "tritime;": "⨻",
    "UpArrow;": "↑",
    "Uparrow;": "⇑",
    "uparrow;": "↑",
    "Upsilon;": "Υ",
    "upsilon;": "υ",
    "uwangle;": "⦧",
    "vzigzag;": "⦚",
    "zigrarr;": "⇝",
    "andslope;": "⩘",
    "angmsdaa;": "⦨",
    "angmsdab;": "⦩",
    "angmsdac;": "⦪",
    "angmsdad;": "⦫",
    "angmsdae;": "⦬",
    "angmsdaf;": "⦭",
    "angmsdag;": "⦮",
    "angmsdah;": "⦯",
    "angrtvbd;": "⦝",
    "approxeq;": "≊",
    "awconint;": "∳",
    "backcong;": "≌",
    "barwedge;": "⌅",
    "bbrktbrk;": "⎶",
    "bigoplus;": "⨁",
    "bigsqcup;": "⨆",
    "biguplus;": "⨄",
    "bigwedge;": "⋀",
    "boxminus;": "⊟",
    "boxtimes;": "⊠",
    "bsolhsub;": "⟈",
    "capbrcup;": "⩉",
    "circledR;": "®",
    "circledS;": "Ⓢ",
    "cirfnint;": "⨐",
    "clubsuit;": "♣",
    "cupbrcap;": "⩈",
    "curlyvee;": "⋎",
    "cwconint;": "∲",
    "DDotrahd;": "⤑",
    "doteqdot;": "≑",
    "DotEqual;": "≐",
    "dotminus;": "∸",
    "drbkarow;": "⤐",
    "dzigrarr;": "⟿",
    "elinters;": "⏧",
    "emptyset;": "∅",
    "eqvparsl;": "⧥",
    "fpartint;": "⨍",
    "geqslant;": "⩾",
    "gesdotol;": "⪄",
    "gnapprox;": "⪊",
    "hksearow;": "⤥",
    "hkswarow;": "⤦",
    "imagline;": "ℐ",
    "imagpart;": "ℑ",
    "infintie;": "⧝",
    "integers;": "ℤ",
    "Integral;": "∫",
    "intercal;": "⊺",
    "intlarhk;": "⨗",
    "laemptyv;": "⦴",
    "ldrushar;": "⥋",
    "leqslant;": "⩽",
    "lesdotor;": "⪃",
    "LessLess;": "⪡",
    "llcorner;": "⌞",
    "lnapprox;": "⪉",
    "lrcorner;": "⌟",
    "lurdshar;": "⥊",
    "mapstoup;": "↥",
    "multimap;": "⊸",
    "naturals;": "ℕ",
    "ncongdot;": "⩭̸",
    "NotEqual;": "≠",
    "notindot;": "⋵̸",
    "NotTilde;": "≁",
    "otimesas;": "⨶",
    "parallel;": "∥",
    "PartialD;": "∂",
    "plusacir;": "⨣",
    "pointint;": "⨕",
    "Precedes;": "≺",
    "precneqq;": "⪵",
    "precnsim;": "⋨",
    "profalar;": "⌮",
    "profline;": "⌒",
    "profsurf;": "⌓",
    "raemptyv;": "⦳",
    "realpart;": "ℜ",
    "RightTee;": "⊢",
    "rppolint;": "⨒",
    "rtriltri;": "⧎",
    "scpolint;": "⨓",
    "setminus;": "∖",
    "shortmid;": "∣",
    "smeparsl;": "⧤",
    "sqsubset;": "⊏",
    "sqsupset;": "⊐",
    "subseteq;": "⊆",
    "Succeeds;": "≻",
    "succneqq;": "⪶",
    "succnsim;": "⋩",
    "SuchThat;": "∋",
    "Superset;": "⊃",
    "supseteq;": "⊇",
    "thetasym;": "ϑ",
    "thicksim;": "∼",
    "timesbar;": "⨱",
    "triangle;": "▵",
    "triminus;": "⨺",
    "trpezium;": "⏢",
    "Uarrocir;": "⥉",
    "ulcorner;": "⌜",
    "UnderBar;": "_",
    "urcorner;": "⌝",
    "varkappa;": "ϰ",
    "varsigma;": "ς",
    "vartheta;": "ϑ",
    "backprime;": "‵",
    "backsimeq;": "⋍",
    "Backslash;": "∖",
    "bigotimes;": "⨂",
    "CenterDot;": "·",
    "centerdot;": "·",
    "checkmark;": "✓",
    "CircleDot;": "⊙",
    "complexes;": "ℂ",
    "Congruent;": "≡",
    "Coproduct;": "∐",
    "dotsquare;": "⊡",
    "DoubleDot;": "¨",
    "DownArrow;": "↓",
    "Downarrow;": "⇓",
    "downarrow;": "↓",
    "DownBreve;": "̑",
    "gtrapprox;": "⪆",
    "gtreqless;": "⋛",
    "gvertneqq;": "≩︀",
    "heartsuit;": "♥",
    "HumpEqual;": "≏",
    "LeftArrow;": "←",
    "Leftarrow;": "⇐",
    "leftarrow;": "←",
    "LeftFloor;": "⌊",
    "lesseqgtr;": "⋚",
    "LessTilde;": "≲",
    "lvertneqq;": "≨︀",
    "Mellintrf;": "ℳ",
    "MinusPlus;": "∓",
    "ngeqslant;": "⩾̸",
    "nleqslant;": "⩽̸",
    "NotCupCap;": "≭",
    "NotExists;": "∄",
    "NotSubset;": "⊂⃒",
    "nparallel;": "∦",
    "nshortmid;": "∤",
    "nsubseteq;": "⊈",
    "nsupseteq;": "⊉",
    "OverBrace;": "⏞",
    "pitchfork;": "⋔",
    "PlusMinus;": "±",
    "rationals;": "ℚ",
    "spadesuit;": "♠",
    "subseteqq;": "⫅",
    "subsetneq;": "⊊",
    "supseteqq;": "⫆",
    "supsetneq;": "⊋",
    "Therefore;": "∴",
    "therefore;": "∴",
    "ThinSpace;": " ",
    "triangleq;": "≜",
    "TripleDot;": "⃛",
    "UnionPlus;": "⊎",
    "varpropto;": "∝",
    "Bernoullis;": "ℬ",
    "circledast;": "⊛",
    "CirclePlus;": "⊕",
    "complement;": "∁",
    "curlywedge;": "⋏",
    "eqslantgtr;": "⪖",
    "EqualTilde;": "≂",
    "Fouriertrf;": "ℱ",
    "gtreqqless;": "⪌",
    "ImaginaryI;": "ⅈ",
    "Laplacetrf;": "ℒ",
    "LeftVector;": "↼",
    "lessapprox;": "⪅",
    "lesseqqgtr;": "⪋",
    "Lleftarrow;": "⇚",
    "lmoustache;": "⎰",
    "longmapsto;": "⟼",
    "mapstodown;": "↧",
    "mapstoleft;": "↤",
    "nLeftarrow;": "⇍",
    "nleftarrow;": "↚",
    "NotElement;": "∉",
    "NotGreater;": "≯",
    "nsubseteqq;": "⫅̸",
    "nsupseteqq;": "⫆̸",
    "precapprox;": "⪷",
    "Proportion;": "∷",
    "RightArrow;": "→",
    "Rightarrow;": "⇒",
    "rightarrow;": "→",
    "RightFloor;": "⌋",
    "rmoustache;": "⎱",
    "sqsubseteq;": "⊑",
    "sqsupseteq;": "⊒",
    "subsetneqq;": "⫋",
    "succapprox;": "⪸",
    "supsetneqq;": "⫌",
    "ThickSpace;": "  ",
    "TildeEqual;": "≃",
    "TildeTilde;": "≈",
    "UnderBrace;": "⏟",
    "UpArrowBar;": "⤒",
    "UpTeeArrow;": "↥",
    "upuparrows;": "⇈",
    "varepsilon;": "ϵ",
    "varnothing;": "∅",
    "backepsilon;": "϶",
    "blacksquare;": "▪",
    "circledcirc;": "⊚",
    "circleddash;": "⊝",
    "CircleMinus;": "⊖",
    "CircleTimes;": "⊗",
    "curlyeqprec;": "⋞",
    "curlyeqsucc;": "⋟",
    "diamondsuit;": "♦",
    "eqslantless;": "⪕",
    "Equilibrium;": "⇌",
    "expectation;": "ℰ",
    "GreaterLess;": "≷",
    "LeftCeiling;": "⌈",
    "LessGreater;": "≶",
    "MediumSpace;": " ",
    "NotLessLess;": "≪̸",
    "NotPrecedes;": "⊀",
    "NotSucceeds;": "⊁",
    "NotSuperset;": "⊃⃒",
    "nRightarrow;": "⇏",
    "nrightarrow;": "↛",
    "OverBracket;": "⎴",
    "preccurlyeq;": "≼",
    "precnapprox;": "⪹",
    "quaternions;": "ℍ",
    "RightVector;": "⇀",
    "Rrightarrow;": "⇛",
    "RuleDelayed;": "⧴",
    "SmallCircle;": "∘",
    "SquareUnion;": "⊔",
    "straightphi;": "ϕ",
    "SubsetEqual;": "⊆",
    "succcurlyeq;": "≽",
    "succnapprox;": "⪺",
    "thickapprox;": "≈",
    "UpDownArrow;": "↕",
    "Updownarrow;": "⇕",
    "updownarrow;": "↕",
    "VerticalBar;": "∣",
    "blacklozenge;": "⧫",
    "DownArrowBar;": "⤓",
    "DownTeeArrow;": "↧",
    "ExponentialE;": "ⅇ",
    "exponentiale;": "ⅇ",
    "GreaterEqual;": "≥",
    "GreaterTilde;": "≳",
    "HilbertSpace;": "ℋ",
    "HumpDownHump;": "≎",
    "Intersection;": "⋂",
    "LeftArrowBar;": "⇤",
    "LeftTeeArrow;": "↤",
    "LeftTriangle;": "⊲",
    "LeftUpVector;": "↿",
    "NotCongruent;": "≢",
    "NotHumpEqual;": "≏̸",
    "NotLessEqual;": "≰",
    "NotLessTilde;": "≴",
    "Proportional;": "∝",
    "RightCeiling;": "⌉",
    "risingdotseq;": "≓",
    "RoundImplies;": "⥰",
    "ShortUpArrow;": "↑",
    "SquareSubset;": "⊏",
    "triangledown;": "▿",
    "triangleleft;": "◃",
    "UnderBracket;": "⎵",
    "varsubsetneq;": "⊊︀",
    "varsupsetneq;": "⊋︀",
    "VerticalLine;": "|",
    "ApplyFunction;": "⁡",
    "bigtriangleup;": "△",
    "blacktriangle;": "▴",
    "DifferentialD;": "ⅆ",
    "divideontimes;": "⋇",
    "DoubleLeftTee;": "⫤",
    "DoubleUpArrow;": "⇑",
    "fallingdotseq;": "≒",
    "hookleftarrow;": "↩",
    "leftarrowtail;": "↢",
    "leftharpoonup;": "↼",
    "LeftTeeVector;": "⥚",
    "LeftVectorBar;": "⥒",
    "LessFullEqual;": "≦",
    "LongLeftArrow;": "⟵",
    "Longleftarrow;": "⟸",
    "longleftarrow;": "⟵",
    "looparrowleft;": "↫",
    "measuredangle;": "∡",
    "NotEqualTilde;": "≂̸",
    "NotTildeEqual;": "≄",
    "NotTildeTilde;": "≉",
    "ntriangleleft;": "⋪",
    "Poincareplane;": "ℌ",
    "PrecedesEqual;": "⪯",
    "PrecedesTilde;": "≾",
    "RightArrowBar;": "⇥",
    "RightTeeArrow;": "↦",
    "RightTriangle;": "⊳",
    "RightUpVector;": "↾",
    "shortparallel;": "∥",
    "smallsetminus;": "∖",
    "SucceedsEqual;": "⪰",
    "SucceedsTilde;": "≿",
    "SupersetEqual;": "⊇",
    "triangleright;": "▹",
    "UpEquilibrium;": "⥮",
    "upharpoonleft;": "↿",
    "varsubsetneqq;": "⫋︀",
    "varsupsetneqq;": "⫌︀",
    "VerticalTilde;": "≀",
    "VeryThinSpace;": " ",
    "curvearrowleft;": "↶",
    "DiacriticalDot;": "˙",
    "doublebarwedge;": "⌆",
    "DoubleRightTee;": "⊨",
    "downdownarrows;": "⇊",
    "DownLeftVector;": "↽",
    "GreaterGreater;": "⪢",
    "hookrightarrow;": "↪",
    "HorizontalLine;": "─",
    "InvisibleComma;": "⁣",
    "InvisibleTimes;": "⁢",
    "LeftDownVector;": "⇃",
    "leftleftarrows;": "⇇",
    "LeftRightArrow;": "↔",
    "Leftrightarrow;": "⇔",
    "leftrightarrow;": "↔",
    "leftthreetimes;": "⋋",
    "LessSlantEqual;": "⩽",
    "LongRightArrow;": "⟶",
    "Longrightarrow;": "⟹",
    "longrightarrow;": "⟶",
    "looparrowright;": "↬",
    "LowerLeftArrow;": "↙",
    "NestedLessLess;": "≪",
    "NotGreaterLess;": "≹",
    "NotLessGreater;": "≸",
    "NotSubsetEqual;": "⊈",
    "NotVerticalBar;": "∤",
    "nshortparallel;": "∦",
    "ntriangleright;": "⋫",
    "OpenCurlyQuote;": "‘",
    "ReverseElement;": "∋",
    "rightarrowtail;": "↣",
    "rightharpoonup;": "⇀",
    "RightTeeVector;": "⥛",
    "RightVectorBar;": "⥓",
    "ShortDownArrow;": "↓",
    "ShortLeftArrow;": "←",
    "SquareSuperset;": "⊐",
    "TildeFullEqual;": "≅",
    "trianglelefteq;": "⊴",
    "upharpoonright;": "↾",
    "UpperLeftArrow;": "↖",
    "ZeroWidthSpace;": "​",
    "bigtriangledown;": "▽",
    "circlearrowleft;": "↺",
    "CloseCurlyQuote;": "’",
    "ContourIntegral;": "∮",
    "curvearrowright;": "↷",
    "DoubleDownArrow;": "⇓",
    "DoubleLeftArrow;": "⇐",
    "downharpoonleft;": "⇃",
    "DownRightVector;": "⇁",
    "leftharpoondown;": "↽",
    "leftrightarrows;": "⇆",
    "LeftRightVector;": "⥎",
    "LeftTriangleBar;": "⧏",
    "LeftUpTeeVector;": "⥠",
    "LeftUpVectorBar;": "⥘",
    "LowerRightArrow;": "↘",
    "nLeftrightarrow;": "⇎",
    "nleftrightarrow;": "↮",
    "NotGreaterEqual;": "≱",
    "NotGreaterTilde;": "≵",
    "NotHumpDownHump;": "≎̸",
    "NotLeftTriangle;": "⋪",
    "NotSquareSubset;": "⊏̸",
    "ntrianglelefteq;": "⋬",
    "OverParenthesis;": "⏜",
    "RightDownVector;": "⇂",
    "rightleftarrows;": "⇄",
    "rightsquigarrow;": "↝",
    "rightthreetimes;": "⋌",
    "ShortRightArrow;": "→",
    "straightepsilon;": "ϵ",
    "trianglerighteq;": "⊵",
    "UpperRightArrow;": "↗",
    "vartriangleleft;": "⊲",
    "circlearrowright;": "↻",
    "DiacriticalAcute;": "´",
    "DiacriticalGrave;": "`",
    "DiacriticalTilde;": "˜",
    "DoubleRightArrow;": "⇒",
    "DownArrowUpArrow;": "⇵",
    "downharpoonright;": "⇂",
    "EmptySmallSquare;": "◻",
    "GreaterEqualLess;": "⋛",
    "GreaterFullEqual;": "≧",
    "LeftAngleBracket;": "⟨",
    "LeftUpDownVector;": "⥑",
    "LessEqualGreater;": "⋚",
    "NonBreakingSpace;": " ",
    "NotPrecedesEqual;": "⪯̸",
    "NotRightTriangle;": "⋫",
    "NotSucceedsEqual;": "⪰̸",
    "NotSucceedsTilde;": "≿̸",
    "NotSupersetEqual;": "⊉",
    "ntrianglerighteq;": "⋭",
    "rightharpoondown;": "⇁",
    "rightrightarrows;": "⇉",
    "RightTriangleBar;": "⧐",
    "RightUpTeeVector;": "⥜",
    "RightUpVectorBar;": "⥔",
    "twoheadleftarrow;": "↞",
    "UnderParenthesis;": "⏝",
    "UpArrowDownArrow;": "⇅",
    "vartriangleright;": "⊳",
    "blacktriangledown;": "▾",
    "blacktriangleleft;": "◂",
    "DoubleUpDownArrow;": "⇕",
    "DoubleVerticalBar;": "∥",
    "DownLeftTeeVector;": "⥞",
    "DownLeftVectorBar;": "⥖",
    "FilledSmallSquare;": "◼",
    "GreaterSlantEqual;": "⩾",
    "LeftDoubleBracket;": "⟦",
    "LeftDownTeeVector;": "⥡",
    "LeftDownVectorBar;": "⥙",
    "leftrightharpoons;": "⇋",
    "LeftTriangleEqual;": "⊴",
    "NegativeThinSpace;": "​",
    "NotGreaterGreater;": "≫̸",
    "NotLessSlantEqual;": "⩽̸",
    "NotNestedLessLess;": "⪡̸",
    "NotReverseElement;": "∌",
    "NotSquareSuperset;": "⊐̸",
    "NotTildeFullEqual;": "≇",
    "RightAngleBracket;": "⟩",
    "rightleftharpoons;": "⇌",
    "RightUpDownVector;": "⥏",
    "SquareSubsetEqual;": "⊑",
    "twoheadrightarrow;": "↠",
    "VerticalSeparator;": "❘",
    "blacktriangleright;": "▸",
    "DownRightTeeVector;": "⥟",
    "DownRightVectorBar;": "⥗",
    "LongLeftRightArrow;": "⟷",
    "Longleftrightarrow;": "⟺",
    "longleftrightarrow;": "⟷",
    "NegativeThickSpace;": "​",
    "NotLeftTriangleBar;": "⧏̸",
    "PrecedesSlantEqual;": "≼",
    "ReverseEquilibrium;": "⇋",
    "RightDoubleBracket;": "⟧",
    "RightDownTeeVector;": "⥝",
    "RightDownVectorBar;": "⥕",
    "RightTriangleEqual;": "⊵",
    "SquareIntersection;": "⊓",
    "SucceedsSlantEqual;": "≽",
    "DoubleLongLeftArrow;": "⟸",
    "DownLeftRightVector;": "⥐",
    "LeftArrowRightArrow;": "⇆",
    "leftrightsquigarrow;": "↭",
    "NegativeMediumSpace;": "​",
    "NotGreaterFullEqual;": "≧̸",
    "NotRightTriangleBar;": "⧐̸",
    "RightArrowLeftArrow;": "⇄",
    "SquareSupersetEqual;": "⊒",
    "CapitalDifferentialD;": "ⅅ",
    "DoubleLeftRightArrow;": "⇔",
    "DoubleLongRightArrow;": "⟹",
    "EmptyVerySmallSquare;": "▫",
    "NestedGreaterGreater;": "≫",
    "NotDoubleVerticalBar;": "∦",
    "NotGreaterSlantEqual;": "⩾̸",
    "NotLeftTriangleEqual;": "⋬",
    "NotSquareSubsetEqual;": "⋢",
    "OpenCurlyDoubleQuote;": "“",
    "ReverseUpEquilibrium;": "⥯",
    "CloseCurlyDoubleQuote;": "”",
    "DoubleContourIntegral;": "∯",
    "FilledVerySmallSquare;": "▪",
    "NegativeVeryThinSpace;": "​",
    "NotPrecedesSlantEqual;": "⋠",
    "NotRightTriangleEqual;": "⋭",
    "NotSucceedsSlantEqual;": "⋡",
    "DiacriticalDoubleAcute;": "˝",
    "NotSquareSupersetEqual;": "⋣",
    "NotNestedGreaterGreater;": "⪢̸",
    "ClockwiseContourIntegral;": "∲",
    "DoubleLongLeftRightArrow;": "⟺",
    "CounterClockwiseContourIntegral;": "∳"
};
// lazy compute this to make this file tree-shakable for browser
let maxCRNameLength;
const decodeHtml = (rawText, asAttr)=>{
    let offset = 0;
    const end = rawText.length;
    let decodedText = '';
    function advance(length) {
        offset += length;
        rawText = rawText.slice(length);
    }
    while(offset < end){
        const head = /&(?:#x?)?/i.exec(rawText);
        if (!head || offset + head.index >= end) {
            const remaining = end - offset;
            decodedText += rawText.slice(0, remaining);
            advance(remaining);
            break;
        }
        // Advance to the "&".
        decodedText += rawText.slice(0, head.index);
        advance(head.index);
        if (head[0] === '&') {
            // Named character reference.
            let name = '';
            let value = undefined;
            if (/[0-9a-z]/i.test(rawText[1])) {
                if (!maxCRNameLength) maxCRNameLength = Object.keys(namedCharacterReferences).reduce((max, name1)=>Math.max(max, name1.length)
                , 0);
                for(let length = maxCRNameLength; !value && length > 0; --length){
                    name = rawText.substr(1, length);
                    value = namedCharacterReferences[name];
                }
                if (value) {
                    const semi = name.endsWith(';');
                    if (asAttr && !semi && /[=a-z0-9]/i.test(rawText[name.length + 1] || '')) {
                        decodedText += '&' + name;
                        advance(1 + name.length);
                    } else {
                        decodedText += value;
                        advance(1 + name.length);
                    }
                } else {
                    decodedText += '&' + name;
                    advance(1 + name.length);
                }
            } else {
                decodedText += '&';
                advance(1);
            }
        } else {
            // Numeric character reference.
            const hex = head[0] === '&#x';
            const pattern = hex ? /^&#x([0-9a-f]+);?/i : /^&#([0-9]+);?/;
            const body = pattern.exec(rawText);
            if (!body) {
                decodedText += head[0];
                advance(head[0].length);
            } else {
                // https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state
                let cp = Number.parseInt(body[1], hex ? 16 : 10);
                if (cp === 0) cp = 65533;
                else if (cp > 1114111) cp = 65533;
                else if (cp >= 55296 && cp <= 57343) cp = 65533;
                else if (cp >= 64976 && cp <= 65007 || (cp & 65534) === 65534) ;
                else if (cp >= 1 && cp <= 8 || cp === 11 || cp >= 13 && cp <= 31 || cp >= 127 && cp <= 159) cp = CCR_REPLACEMENTS[cp] || cp;
                decodedText += String.fromCodePoint(cp);
                advance(body[0].length);
            }
        }
    }
    return decodedText;
};
// https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state
const CCR_REPLACEMENTS = {
    128: 8364,
    130: 8218,
    131: 402,
    132: 8222,
    133: 8230,
    134: 8224,
    135: 8225,
    136: 710,
    137: 8240,
    138: 352,
    139: 8249,
    140: 338,
    142: 381,
    145: 8216,
    146: 8217,
    147: 8220,
    148: 8221,
    149: 8226,
    150: 8211,
    151: 8212,
    152: 732,
    153: 8482,
    154: 353,
    155: 8250,
    156: 339,
    158: 382,
    159: 376
};
const isRawTextContainer = /*#__PURE__*/ shared.makeMap('style,iframe,script,noscript', true);
const parserOptions = {
    isVoidTag: shared.isVoidTag,
    isNativeTag: (tag)=>shared.isHTMLTag(tag) || shared.isSVGTag(tag)
    ,
    isPreTag: (tag)=>tag === 'pre'
    ,
    decodeEntities: decodeHtml,
    isBuiltInComponent: (tag)=>{
        if (compilerCore.isBuiltInType(tag, `Transition`)) return TRANSITION;
        else if (compilerCore.isBuiltInType(tag, `TransitionGroup`)) return TRANSITION_GROUP;
    },
    // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
    getNamespace (tag, parent) {
        let ns = parent ? parent.ns : 0/* HTML */ ;
        if (parent && ns === 2) {
            if (parent.tag === 'annotation-xml') {
                if (tag === 'svg') return 1;
                if (parent.props.some((a)=>a.type === 6 && a.name === 'encoding' && a.value != null && (a.value.content === 'text/html' || a.value.content === 'application/xhtml+xml')
                )) ns = 0;
            } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== 'mglyph' && tag !== 'malignmark') ns = 0;
        } else if (parent && ns === 1) {
            if (parent.tag === 'foreignObject' || parent.tag === 'desc' || parent.tag === 'title') ns = 0;
        }
        if (ns === 0) {
            if (tag === 'svg') return 1;
            if (tag === 'math') return 2;
        }
        return ns;
    },
    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments
    getTextMode ({ tag , ns  }) {
        if (ns === 0) {
            if (tag === 'textarea' || tag === 'title') return 1;
            if (isRawTextContainer(tag)) return 2;
        }
        return 0;
    }
};
// Parse inline CSS strings for static style attributes into an object.
// This is a NodeTransform since it works on the static `style` attribute and
// converts it into a dynamic equivalent:
// style="color: red" -> :style='{ "color": "red" }'
// It is then processed by `transformElement` and included in the generated
// props.
const transformStyle = (node)=>{
    if (node.type === 1) node.props.forEach((p, i)=>{
        if (p.type === 6 && p.name === 'style' && p.value) // replace p with an expression node
        node.props[i] = {
            type: 7,
            name: `bind`,
            arg: compilerCore.createSimpleExpression(`style`, true, p.loc),
            exp: parseInlineCSS(p.value.content, p.loc),
            modifiers: [],
            loc: p.loc
        };
    });
};
const parseInlineCSS = (cssText, loc)=>{
    const normalized = shared.parseStringStyle(cssText);
    return compilerCore.createSimpleExpression(JSON.stringify(normalized), false, loc, 3/* CAN_STRINGIFY */ );
};
function createDOMCompilerError(code, loc) {
    return compilerCore.createCompilerError(code, loc, DOMErrorMessages);
}
const DOMErrorMessages = {
    [49]: `v-html is missing expression.`,
    [50]: `v-html will override element children.`,
    [51]: `v-text is missing expression.`,
    [52]: `v-text will override element children.`,
    [53]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
    [54]: `v-model argument is not supported on plain elements.`,
    [55]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
    [56]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
    [57]: `v-show is missing expression.`,
    [58]: `<Transition> expects exactly one child element or component.`,
    [59]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
};
const transformVHtml = (dir, node, context)=>{
    const { exp , loc  } = dir;
    if (!exp) context.onError(createDOMCompilerError(49/* X_V_HTML_NO_EXPRESSION */ , loc));
    if (node.children.length) {
        context.onError(createDOMCompilerError(50/* X_V_HTML_WITH_CHILDREN */ , loc));
        node.children.length = 0;
    }
    return {
        props: [
            compilerCore.createObjectProperty(compilerCore.createSimpleExpression(`innerHTML`, true, loc), exp || compilerCore.createSimpleExpression('', true))
        ]
    };
};
const transformVText = (dir, node, context)=>{
    const { exp , loc  } = dir;
    if (!exp) context.onError(createDOMCompilerError(51/* X_V_TEXT_NO_EXPRESSION */ , loc));
    if (node.children.length) {
        context.onError(createDOMCompilerError(52/* X_V_TEXT_WITH_CHILDREN */ , loc));
        node.children.length = 0;
    }
    return {
        props: [
            compilerCore.createObjectProperty(compilerCore.createSimpleExpression(`textContent`, true), exp ? compilerCore.createCallExpression(context.helperString(compilerCore.TO_DISPLAY_STRING), [
                exp
            ], loc) : compilerCore.createSimpleExpression('', true))
        ]
    };
};
const transformModel = (dir, node, context)=>{
    const baseResult = compilerCore.transformModel(dir, node, context);
    // base transform has errors OR component v-model (only need props)
    if (!baseResult.props.length || node.tagType === 1) return baseResult;
    if (dir.arg) context.onError(createDOMCompilerError(54/* X_V_MODEL_ARG_ON_ELEMENT */ , dir.arg.loc));
    function checkDuplicatedValue() {
        const value = compilerCore.findProp(node, 'value');
        if (value) context.onError(createDOMCompilerError(56/* X_V_MODEL_UNNECESSARY_VALUE */ , value.loc));
    }
    const { tag  } = node;
    const isCustomElement = context.isCustomElement(tag);
    if (tag === 'input' || tag === 'textarea' || tag === 'select' || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT;
        let isInvalidType = false;
        if (tag === 'input' || isCustomElement) {
            const type = compilerCore.findProp(node, `type`);
            if (type) {
                if (type.type === 7) // :type="foo"
                directiveToUse = V_MODEL_DYNAMIC;
                else if (type.value) switch(type.value.content){
                    case 'radio':
                        directiveToUse = V_MODEL_RADIO;
                        break;
                    case 'checkbox':
                        directiveToUse = V_MODEL_CHECKBOX;
                        break;
                    case 'file':
                        isInvalidType = true;
                        context.onError(createDOMCompilerError(55/* X_V_MODEL_ON_FILE_INPUT_ELEMENT */ , dir.loc));
                        break;
                    default:
                        // text type
                        checkDuplicatedValue();
                        break;
                }
            } else if (compilerCore.hasDynamicKeyVBind(node)) // element has bindings with dynamic keys, which can possibly contain
            // "type".
            directiveToUse = V_MODEL_DYNAMIC;
            else // text type
            checkDuplicatedValue();
        } else if (tag === 'select') directiveToUse = V_MODEL_SELECT;
        else // textarea
        checkDuplicatedValue();
        // inject runtime directive
        // by returning the helper symbol via needRuntime
        // the import will replaced a resolveDirective call.
        if (!isInvalidType) baseResult.needRuntime = context.helper(directiveToUse);
    } else context.onError(createDOMCompilerError(53/* X_V_MODEL_ON_INVALID_ELEMENT */ , dir.loc));
    // native vmodel doesn't need the `modelValue` props since they are also
    // passed to the runtime as `binding.value`. removing it reduces code size.
    baseResult.props = baseResult.props.filter((p)=>!(p.key.type === 4 && p.key.content === 'modelValue')
    );
    return baseResult;
};
const isEventOptionModifier = /*#__PURE__*/ shared.makeMap(`passive,once,capture`);
const isNonKeyModifier = /*#__PURE__*/ shared.makeMap(// event propagation management
`stop,prevent,self,` + // system modifiers + exact
`ctrl,shift,alt,meta,exact,` + // mouse
`middle`);
// left & right could be mouse or key modifiers based on event type
const maybeKeyModifier = /*#__PURE__*/ shared.makeMap('left,right');
const isKeyboardEvent = /*#__PURE__*/ shared.makeMap(`onkeyup,onkeydown,onkeypress`, true);
const resolveModifiers = (key, modifiers, context, loc)=>{
    const keyModifiers = [];
    const nonKeyModifiers = [];
    const eventOptionModifiers = [];
    for(let i = 0; i < modifiers.length; i++){
        const modifier = modifiers[i];
        if (modifier === 'native' && compilerCore.checkCompatEnabled("COMPILER_V_ON_NATIVE"/* COMPILER_V_ON_NATIVE */ , context, loc)) eventOptionModifiers.push(modifier);
        else if (isEventOptionModifier(modifier)) // eventOptionModifiers: modifiers for addEventListener() options,
        // e.g. .passive & .capture
        eventOptionModifiers.push(modifier);
        else {
            // runtimeModifiers: modifiers that needs runtime guards
            if (maybeKeyModifier(modifier)) {
                if (compilerCore.isStaticExp(key)) {
                    if (isKeyboardEvent(key.content)) keyModifiers.push(modifier);
                    else nonKeyModifiers.push(modifier);
                } else {
                    keyModifiers.push(modifier);
                    nonKeyModifiers.push(modifier);
                }
            } else if (isNonKeyModifier(modifier)) nonKeyModifiers.push(modifier);
            else keyModifiers.push(modifier);
        }
    }
    return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
    };
};
const transformClick = (key, event)=>{
    const isStaticClick = compilerCore.isStaticExp(key) && key.content.toLowerCase() === 'onclick';
    return isStaticClick ? compilerCore.createSimpleExpression(event, true) : key.type !== 4 ? compilerCore.createCompoundExpression([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
    ]) : key;
};
const transformOn = (dir, node, context)=>{
    return compilerCore.transformOn(dir, node, context, (baseResult)=>{
        const { modifiers  } = dir;
        if (!modifiers.length) return baseResult;
        let { key , value: handlerExp  } = baseResult.props[0];
        const { keyModifiers , nonKeyModifiers , eventOptionModifiers  } = resolveModifiers(key, modifiers, context, dir.loc);
        // normalize click.right and click.middle since they don't actually fire
        if (nonKeyModifiers.includes('right')) key = transformClick(key, `onContextmenu`);
        if (nonKeyModifiers.includes('middle')) key = transformClick(key, `onMouseup`);
        if (nonKeyModifiers.length) handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
        ]);
        if (keyModifiers.length && (!compilerCore.isStaticExp(key) || isKeyboardEvent(key.content))) handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_KEYS), [
            handlerExp,
            JSON.stringify(keyModifiers)
        ]);
        if (eventOptionModifiers.length) {
            const modifierPostfix = eventOptionModifiers.map(shared.capitalize).join('');
            key = compilerCore.isStaticExp(key) ? compilerCore.createSimpleExpression(`${key.content}${modifierPostfix}`, true) : compilerCore.createCompoundExpression([
                `(`,
                key,
                `) + "${modifierPostfix}"`
            ]);
        }
        return {
            props: [
                compilerCore.createObjectProperty(key, handlerExp)
            ]
        };
    });
};
const transformShow = (dir, node, context)=>{
    const { exp , loc  } = dir;
    if (!exp) context.onError(createDOMCompilerError(57/* X_V_SHOW_NO_EXPRESSION */ , loc));
    return {
        props: [],
        needRuntime: context.helper(V_SHOW)
    };
};
const warnTransitionChildren = (node, context)=>{
    if (node.type === 1 && node.tagType === 1) {
        const component = context.isBuiltInComponent(node.tag);
        if (component === TRANSITION) return ()=>{
            if (node.children.length && hasMultipleChildren(node)) context.onError(createDOMCompilerError(58/* X_TRANSITION_INVALID_CHILDREN */ , {
                start: node.children[0].loc.start,
                end: node.children[node.children.length - 1].loc.end,
                source: ''
            }));
        };
    }
};
function hasMultipleChildren(node) {
    // #1352 filter out potential comment nodes.
    const children = node.children = node.children.filter((c)=>c.type !== 3
    /* COMMENT */ );
    const child = children[0];
    return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
}
/**
 * This module is Node-only.
 */ /**
 * Turn eligible hoisted static trees into stringified static nodes, e.g.
 *
 * ```js
 * const _hoisted_1 = createStaticVNode(`<div class="foo">bar</div>`)
 * ```
 *
 * A single static vnode can contain stringified content for **multiple**
 * consecutive nodes (element and plain text), called a "chunk".
 * `@vue/runtime-dom` will create the content via innerHTML in a hidden
 * container element and insert all the nodes in place. The call must also
 * provide the number of nodes contained in the chunk so that during hydration
 * we can know how many nodes the static vnode should adopt.
 *
 * The optimization scans a children list that contains hoisted nodes, and
 * tries to find the largest chunk of consecutive hoisted nodes before running
 * into a non-hoisted node or the end of the list. A chunk is then converted
 * into a single static vnode and replaces the hoisted expression of the first
 * node in the chunk. Other nodes in the chunk are considered "merged" and
 * therefore removed from both the hoist list and the children array.
 *
 * This optimization is only performed in Node.js.
 */ const stringifyStatic = (children, context, parent)=>{
    // bail stringification for slot content
    if (context.scopes.vSlot > 0) return;
    let nc = 0; // current node count
    let ec = 0; // current element with binding count
    const currentChunk = [];
    const stringifyCurrentChunk = (currentIndex)=>{
        if (nc >= 20 || ec >= 5) {
            // combine all currently eligible nodes into a single static vnode call
            const staticCall = compilerCore.createCallExpression(context.helper(compilerCore.CREATE_STATIC), [
                JSON.stringify(currentChunk.map((node)=>stringifyNode(node, context)
                ).join('')),
                // the 2nd argument indicates the number of DOM nodes this static vnode
                // will insert / hydrate
                String(currentChunk.length)
            ]);
            // replace the first node's hoisted expression with the static vnode call
            replaceHoist(currentChunk[0], staticCall, context);
            if (currentChunk.length > 1) {
                for(let i = 1; i < currentChunk.length; i++)// for the merged nodes, set their hoisted expression to null
                replaceHoist(currentChunk[i], null, context);
                // also remove merged nodes from children
                const deleteCount = currentChunk.length - 1;
                children.splice(currentIndex - currentChunk.length + 1, deleteCount);
                return deleteCount;
            }
        }
        return 0;
    };
    let i = 0;
    for(; i < children.length; i++){
        const child = children[i];
        const hoisted = getHoistedNode(child);
        if (hoisted) {
            // presence of hoisted means child must be a stringifiable node
            const node = child;
            const result = analyzeNode(node);
            if (result) {
                // node is stringifiable, record state
                nc += result[0];
                ec += result[1];
                currentChunk.push(node);
                continue;
            }
        }
        // we only reach here if we ran into a node that is not stringifiable
        // check if currently analyzed nodes meet criteria for stringification.
        // adjust iteration index
        i -= stringifyCurrentChunk(i);
        // reset state
        nc = 0;
        ec = 0;
        currentChunk.length = 0;
    }
    // in case the last node was also stringifiable
    stringifyCurrentChunk(i);
};
const getHoistedNode = (node)=>(node.type === 1 && node.tagType === 0 || node.type == 12) && node.codegenNode && node.codegenNode.type === 4 && node.codegenNode.hoisted
;
const dataAriaRE = /^(data|aria)-/;
const isStringifiableAttr = (name)=>{
    return shared.isKnownAttr(name) || dataAriaRE.test(name);
};
const replaceHoist = (node, replacement, context)=>{
    const hoistToReplace = node.codegenNode.hoisted;
    context.hoists[context.hoists.indexOf(hoistToReplace)] = replacement;
};
const isNonStringifiable = /*#__PURE__*/ shared.makeMap(`caption,thead,tr,th,tbody,td,tfoot,colgroup,col`);
/**
 * for a hoisted node, analyze it and return:
 * - false: bailed (contains runtime constant)
 * - [nc, ec] where
 *   - nc is the number of nodes inside
 *   - ec is the number of element with bindings inside
 */ function analyzeNode(node) {
    if (node.type === 1 && isNonStringifiable(node.tag)) return false;
    if (node.type === 12) return [
        1,
        0
    ];
    let nc = 1; // node count
    let ec = node.props.length > 0 ? 1 : 0; // element w/ binding count
    let bailed = false;
    const bail = ()=>{
        bailed = true;
        return false;
    };
    // TODO: check for cases where using innerHTML will result in different
    // output compared to imperative node insertions.
    // probably only need to check for most common case
    // i.e. non-phrasing-content tags inside `<p>`
    function walk(node1) {
        for(let i = 0; i < node1.props.length; i++){
            const p = node1.props[i];
            // bail on non-attr bindings
            if (p.type === 6 && !isStringifiableAttr(p.name)) return bail();
            if (p.type === 7 && p.name === 'bind') {
                // bail on non-attr bindings
                if (p.arg && (p.arg.type === 8 || p.arg.isStatic && !isStringifiableAttr(p.arg.content))) return bail();
            }
        }
        for(let i1 = 0; i1 < node1.children.length; i1++){
            nc++;
            const child = node1.children[i1];
            if (child.type === 1) {
                if (child.props.length > 0) ec++;
                walk(child);
                if (bailed) return false;
            }
        }
        return true;
    }
    return walk(node) ? [
        nc,
        ec
    ] : false;
}
function stringifyNode(node, context) {
    if (shared.isString(node)) return node;
    if (shared.isSymbol(node)) return ``;
    switch(node.type){
        case 1:
            return stringifyElement(node, context);
        case 2:
            return shared.escapeHtml(node.content);
        case 3:
            return `<!--${shared.escapeHtml(node.content)}-->`;
        case 5:
            return shared.escapeHtml(shared.toDisplayString(evaluateConstant(node.content)));
        case 8:
            return shared.escapeHtml(evaluateConstant(node));
        case 12:
            return stringifyNode(node.content, context);
        default:
            // static trees will not contain if/for nodes
            return '';
    }
}
function stringifyElement(node, context) {
    let res = `<${node.tag}`;
    for(let i = 0; i < node.props.length; i++){
        const p = node.props[i];
        if (p.type === 6) {
            res += ` ${p.name}`;
            if (p.value) res += `="${shared.escapeHtml(p.value.content)}"`;
        } else if (p.type === 7 && p.name === 'bind') {
            // constant v-bind, e.g. :foo="1"
            let evaluated = evaluateConstant(p.exp);
            if (evaluated != null) {
                const arg = p.arg && p.arg.content;
                if (arg === 'class') evaluated = shared.normalizeClass(evaluated);
                else if (arg === 'style') evaluated = shared.stringifyStyle(shared.normalizeStyle(evaluated));
                res += ` ${p.arg.content}="${shared.escapeHtml(evaluated)}"`;
            }
        }
    }
    if (context.scopeId) res += ` ${context.scopeId}`;
    res += `>`;
    for(let i1 = 0; i1 < node.children.length; i1++)res += stringifyNode(node.children[i1], context);
    if (!shared.isVoidTag(node.tag)) res += `</${node.tag}>`;
    return res;
}
// __UNSAFE__
// Reason: eval.
// It's technically safe to eval because only constant expressions are possible
// here, e.g. `{{ 1 }}` or `{{ 'foo' }}`
// in addition, constant exps bail on presence of parens so you can't even
// run JSFuck in here. But we mark it unsafe for security review purposes.
// (see compiler-core/src/transformExpressions)
function evaluateConstant(exp) {
    if (exp.type === 4) return new Function(`return ${exp.content}`)();
    else {
        // compound
        let res = ``;
        exp.children.forEach((c)=>{
            if (shared.isString(c) || shared.isSymbol(c)) return;
            if (c.type === 2) res += c.content;
            else if (c.type === 5) res += shared.toDisplayString(evaluateConstant(c.content));
            else res += evaluateConstant(c);
        });
        return res;
    }
}
const ignoreSideEffectTags = (node, context)=>{
    if (node.type === 1 && node.tagType === 0 && (node.tag === 'script' || node.tag === 'style')) {
        context.onError(createDOMCompilerError(59/* X_IGNORED_SIDE_EFFECT_TAG */ , node.loc));
        context.removeNode();
    }
};
const DOMNodeTransforms = [
    transformStyle,
    warnTransitionChildren
];
const DOMDirectiveTransforms = {
    cloak: compilerCore.noopDirectiveTransform,
    html: transformVHtml,
    text: transformVText,
    model: transformModel,
    on: transformOn,
    show: transformShow
};
function compile(template, options = {
}) {
    return compilerCore.baseCompile(template, shared.extend({
    }, parserOptions, options, {
        nodeTransforms: [
            // ignore <script> and <tag>
            // this is not put inside DOMNodeTransforms because that list is used
            // by compiler-ssr to generate vnode fallback branches
            ignoreSideEffectTags,
            ...DOMNodeTransforms,
            ...options.nodeTransforms || []
        ],
        directiveTransforms: shared.extend({
        }, DOMDirectiveTransforms, options.directiveTransforms || {
        }),
        transformHoist: stringifyStatic
    }));
}
function parse(template, options = {
}) {
    return compilerCore.baseParse(template, shared.extend({
    }, parserOptions, options));
}
Object.keys(compilerCore).forEach(function(k) {
    if (k !== 'default') exports[k] = compilerCore[k];
});
exports.DOMDirectiveTransforms = DOMDirectiveTransforms;
exports.DOMNodeTransforms = DOMNodeTransforms;
exports.TRANSITION = TRANSITION;
exports.TRANSITION_GROUP = TRANSITION_GROUP;
exports.V_MODEL_CHECKBOX = V_MODEL_CHECKBOX;
exports.V_MODEL_DYNAMIC = V_MODEL_DYNAMIC;
exports.V_MODEL_RADIO = V_MODEL_RADIO;
exports.V_MODEL_SELECT = V_MODEL_SELECT;
exports.V_MODEL_TEXT = V_MODEL_TEXT;
exports.V_ON_WITH_KEYS = V_ON_WITH_KEYS;
exports.V_ON_WITH_MODIFIERS = V_ON_WITH_MODIFIERS;
exports.V_SHOW = V_SHOW;
exports.compile = compile;
exports.createDOMCompilerError = createDOMCompilerError;
exports.parse = parse;
exports.parserOptions = parserOptions;
exports.transformStyle = transformStyle;

},{"@vue/compiler-core":"2ofqt","@vue/shared":"4sn3I"}],"2ofqt":[function(require,module,exports) {
'use strict';
module.exports = require('./dist/compiler-core.cjs.js');

},{"./dist/compiler-core.cjs.js":"64xjP"}],"64xjP":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var shared = require('@vue/shared');
var sourceMap = require('source-map');
var parser = require('@babel/parser');
var estreeWalker = require('estree-walker');
function defaultOnError(error) {
    throw error;
}
function defaultOnWarn(msg) {
    console.warn(`[Vue warn] ${msg.message}`);
}
function createCompilerError(code, loc, messages, additionalMessage) {
    const msg = (messages || errorMessages)[code] + (additionalMessage || ``);
    const error = new SyntaxError(String(msg));
    error.code = code;
    error.loc = loc;
    return error;
}
const errorMessages = {
    // parse errors
    [0]: 'Illegal comment.',
    [1]: 'CDATA section is allowed only in XML context.',
    [2]: 'Duplicate attribute.',
    [3]: 'End tag cannot have attributes.',
    [4]: "Illegal '/' in tags.",
    [5]: 'Unexpected EOF in tag.',
    [6]: 'Unexpected EOF in CDATA section.',
    [7]: 'Unexpected EOF in comment.',
    [8]: 'Unexpected EOF in script.',
    [9]: 'Unexpected EOF in tag.',
    [10]: 'Incorrectly closed comment.',
    [11]: 'Incorrectly opened comment.',
    [12]: "Illegal tag name. Use '&lt;' to print '<'.",
    [13]: 'Attribute value was expected.',
    [14]: 'End tag name was expected.',
    [15]: 'Whitespace was expected.',
    [16]: "Unexpected '<!--' in comment.",
    [17]: 'Attribute name cannot contain U+0022 ("), U+0027 (\'), and U+003C (<).',
    [18]: 'Unquoted attribute value cannot contain U+0022 ("), U+0027 (\'), U+003C (<), U+003D (=), and U+0060 (`).',
    [19]: "Attribute name cannot start with '='.",
    [21]: "'<?' is allowed only in XML context.",
    [20]: `Unexpected null cahracter.`,
    [22]: "Illegal '/' in tags.",
    // Vue-specific parse errors
    [23]: 'Invalid end tag.',
    [24]: 'Element is missing end tag.',
    [25]: 'Interpolation end sign was not found.',
    [26]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
    // transform errors
    [27]: `v-if/v-else-if is missing expression.`,
    [28]: `v-if/else branches must use unique keys.`,
    [29]: `v-else/v-else-if has no adjacent v-if.`,
    [30]: `v-for is missing expression.`,
    [31]: `v-for has invalid expression.`,
    [32]: `<template v-for> key should be placed on the <template> tag.`,
    [33]: `v-bind is missing expression.`,
    [34]: `v-on is missing expression.`,
    [35]: `Unexpected custom directive on <slot> outlet.`,
    [36]: `Mixed v-slot usage on both the component and nested <template>.` + `When there are multiple named slots, all slots should use <template> ` + `syntax to avoid scope ambiguity.`,
    [37]: `Duplicate slot names found. `,
    [38]: `Extraneous children found when component already has explicitly named ` + `default slot. These children will be ignored.`,
    [39]: `v-slot can only be used on components or <template> tags.`,
    [40]: `v-model is missing expression.`,
    [41]: `v-model value must be a valid JavaScript member expression.`,
    [42]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
    [43]: `Error parsing JavaScript expression: `,
    [44]: `<KeepAlive> expects exactly one child component.`,
    // generic errors
    [45]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
    [46]: `ES module mode is not supported in this build of compiler.`,
    [47]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
    [48]: `"scopeId" option is only supported in module mode.`,
    // just to fullfill types
    [49]: ``
};
const FRAGMENT = Symbol(`Fragment`);
const TELEPORT = Symbol(`Teleport`);
const SUSPENSE = Symbol(`Suspense`);
const KEEP_ALIVE = Symbol(`KeepAlive`);
const BASE_TRANSITION = Symbol(`BaseTransition`);
const OPEN_BLOCK = Symbol(`openBlock`);
const CREATE_BLOCK = Symbol(`createBlock`);
const CREATE_VNODE = Symbol(`createVNode`);
const CREATE_COMMENT = Symbol(`createCommentVNode`);
const CREATE_TEXT = Symbol(`createTextVNode`);
const CREATE_STATIC = Symbol(`createStaticVNode`);
const RESOLVE_COMPONENT = Symbol(`resolveComponent`);
const RESOLVE_DYNAMIC_COMPONENT = Symbol(`resolveDynamicComponent`);
const RESOLVE_DIRECTIVE = Symbol(`resolveDirective`);
const RESOLVE_FILTER = Symbol(`resolveFilter`);
const WITH_DIRECTIVES = Symbol(`withDirectives`);
const RENDER_LIST = Symbol(`renderList`);
const RENDER_SLOT = Symbol(`renderSlot`);
const CREATE_SLOTS = Symbol(`createSlots`);
const TO_DISPLAY_STRING = Symbol(`toDisplayString`);
const MERGE_PROPS = Symbol(`mergeProps`);
const TO_HANDLERS = Symbol(`toHandlers`);
const CAMELIZE = Symbol(`camelize`);
const CAPITALIZE = Symbol(`capitalize`);
const TO_HANDLER_KEY = Symbol(`toHandlerKey`);
const SET_BLOCK_TRACKING = Symbol(`setBlockTracking`);
const PUSH_SCOPE_ID = Symbol(`pushScopeId`);
const POP_SCOPE_ID = Symbol(`popScopeId`);
const WITH_SCOPE_ID = Symbol(`withScopeId`);
const WITH_CTX = Symbol(`withCtx`);
const UNREF = Symbol(`unref`);
const IS_REF = Symbol(`isRef`);
// Name mapping for runtime helpers that need to be imported from 'vue' in
// generated code. Make sure these are correctly exported in the runtime!
// Using `any` here because TS doesn't allow symbols as index type.
const helperNameMap = {
    [FRAGMENT]: `Fragment`,
    [TELEPORT]: `Teleport`,
    [SUSPENSE]: `Suspense`,
    [KEEP_ALIVE]: `KeepAlive`,
    [BASE_TRANSITION]: `BaseTransition`,
    [OPEN_BLOCK]: `openBlock`,
    [CREATE_BLOCK]: `createBlock`,
    [CREATE_VNODE]: `createVNode`,
    [CREATE_COMMENT]: `createCommentVNode`,
    [CREATE_TEXT]: `createTextVNode`,
    [CREATE_STATIC]: `createStaticVNode`,
    [RESOLVE_COMPONENT]: `resolveComponent`,
    [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
    [RESOLVE_DIRECTIVE]: `resolveDirective`,
    [RESOLVE_FILTER]: `resolveFilter`,
    [WITH_DIRECTIVES]: `withDirectives`,
    [RENDER_LIST]: `renderList`,
    [RENDER_SLOT]: `renderSlot`,
    [CREATE_SLOTS]: `createSlots`,
    [TO_DISPLAY_STRING]: `toDisplayString`,
    [MERGE_PROPS]: `mergeProps`,
    [TO_HANDLERS]: `toHandlers`,
    [CAMELIZE]: `camelize`,
    [CAPITALIZE]: `capitalize`,
    [TO_HANDLER_KEY]: `toHandlerKey`,
    [SET_BLOCK_TRACKING]: `setBlockTracking`,
    [PUSH_SCOPE_ID]: `pushScopeId`,
    [POP_SCOPE_ID]: `popScopeId`,
    [WITH_SCOPE_ID]: `withScopeId`,
    [WITH_CTX]: `withCtx`,
    [UNREF]: `unref`,
    [IS_REF]: `isRef`
};
function registerRuntimeHelpers(helpers) {
    Object.getOwnPropertySymbols(helpers).forEach((s)=>{
        helperNameMap[s] = helpers[s];
    });
}
// AST Utilities ---------------------------------------------------------------
// Some expressions, e.g. sequence and conditional expressions, are never
// associated with template nodes, so their source locations are just a stub.
// Container types like CompoundExpression also don't need a real location.
const locStub = {
    source: '',
    start: {
        line: 1,
        column: 1,
        offset: 0
    },
    end: {
        line: 1,
        column: 1,
        offset: 0
    }
};
function createRoot(children, loc = locStub) {
    return {
        type: 0,
        children,
        helpers: [],
        components: [],
        directives: [],
        hoists: [],
        imports: [],
        cached: 0,
        temps: 0,
        codegenNode: undefined,
        loc
    };
}
function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, loc = locStub) {
    if (context) {
        if (isBlock) {
            context.helper(OPEN_BLOCK);
            context.helper(CREATE_BLOCK);
        } else context.helper(CREATE_VNODE);
        if (directives) context.helper(WITH_DIRECTIVES);
    }
    return {
        type: 13,
        tag,
        props,
        children,
        patchFlag,
        dynamicProps,
        directives,
        isBlock,
        disableTracking,
        loc
    };
}
function createArrayExpression(elements, loc = locStub) {
    return {
        type: 17,
        loc,
        elements
    };
}
function createObjectExpression(properties, loc = locStub) {
    return {
        type: 15,
        loc,
        properties
    };
}
function createObjectProperty(key, value) {
    return {
        type: 16,
        loc: locStub,
        key: shared.isString(key) ? createSimpleExpression(key, true) : key,
        value
    };
}
function createSimpleExpression(content, isStatic, loc = locStub, constType = 0/* NOT_CONSTANT */ ) {
    return {
        type: 4,
        loc,
        content,
        isStatic,
        constType: isStatic ? 3 : constType
    };
}
function createInterpolation(content, loc) {
    return {
        type: 5,
        loc,
        content: shared.isString(content) ? createSimpleExpression(content, false, loc) : content
    };
}
function createCompoundExpression(children, loc = locStub) {
    return {
        type: 8,
        loc,
        children
    };
}
function createCallExpression(callee, args = [], loc = locStub) {
    return {
        type: 14,
        loc,
        callee,
        arguments: args
    };
}
function createFunctionExpression(params, returns, newline = false, isSlot = false, loc = locStub) {
    return {
        type: 18,
        params,
        returns,
        newline,
        isSlot,
        loc
    };
}
function createConditionalExpression(test, consequent, alternate, newline = true) {
    return {
        type: 19,
        test,
        consequent,
        alternate,
        newline,
        loc: locStub
    };
}
function createCacheExpression(index, value, isVNode = false) {
    return {
        type: 20,
        index,
        value,
        isVNode,
        loc: locStub
    };
}
function createBlockStatement(body) {
    return {
        type: 21,
        body,
        loc: locStub
    };
}
function createTemplateLiteral(elements) {
    return {
        type: 22,
        elements,
        loc: locStub
    };
}
function createIfStatement(test, consequent, alternate) {
    return {
        type: 23,
        test,
        consequent,
        alternate,
        loc: locStub
    };
}
function createAssignmentExpression(left, right) {
    return {
        type: 24,
        left,
        right,
        loc: locStub
    };
}
function createSequenceExpression(expressions) {
    return {
        type: 25,
        expressions,
        loc: locStub
    };
}
function createReturnStatement(returns) {
    return {
        type: 26,
        returns,
        loc: locStub
    };
}
const isStaticExp = (p)=>p.type === 4 && p.isStatic
;
const isBuiltInType = (tag, expected)=>tag === expected || tag === shared.hyphenate(expected)
;
function isCoreComponent(tag) {
    if (isBuiltInType(tag, 'Teleport')) return TELEPORT;
    else if (isBuiltInType(tag, 'Suspense')) return SUSPENSE;
    else if (isBuiltInType(tag, 'KeepAlive')) return KEEP_ALIVE;
    else if (isBuiltInType(tag, 'BaseTransition')) return BASE_TRANSITION;
}
const nonIdentifierRE = /^\d|[^\$\w]/;
const isSimpleIdentifier = (name)=>!nonIdentifierRE.test(name)
;
const memberExpRE = /^[A-Za-z_$\xA0-\uFFFF][\w$\xA0-\uFFFF]*(?:\s*\.\s*[A-Za-z_$\xA0-\uFFFF][\w$\xA0-\uFFFF]*|\[(.+)\])*$/;
const isMemberExpression = (path)=>{
    if (!path) return false;
    const matched = memberExpRE.exec(path.trim());
    if (!matched) return false;
    if (!matched[1]) return true;
    if (!/[\[\]]/.test(matched[1])) return true;
    return isMemberExpression(matched[1].trim());
};
function getInnerRange(loc, offset, length) {
    const source = loc.source.substr(offset, length);
    const newLoc = {
        source,
        start: advancePositionWithClone(loc.start, loc.source, offset),
        end: loc.end
    };
    if (length != null) newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);
    return newLoc;
}
function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
    return advancePositionWithMutation(shared.extend({
    }, pos), source, numberOfCharacters);
}
// advance by mutation without cloning (for performance reasons), since this
// gets called a lot in the parser
function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
    let linesCount = 0;
    let lastNewLinePos = -1;
    for(let i = 0; i < numberOfCharacters; i++)if (source.charCodeAt(i) === 10) {
        linesCount++;
        lastNewLinePos = i;
    }
    pos.offset += numberOfCharacters;
    pos.line += linesCount;
    pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
    return pos;
}
function assert(condition, msg) {
    /* istanbul ignore if */ if (!condition) throw new Error(msg || `unexpected compiler condition`);
}
function findDir(node, name, allowEmpty = false) {
    for(let i = 0; i < node.props.length; i++){
        const p = node.props[i];
        if (p.type === 7 && (allowEmpty || p.exp) && (shared.isString(name) ? p.name === name : name.test(p.name))) return p;
    }
}
function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
    for(let i = 0; i < node.props.length; i++){
        const p = node.props[i];
        if (p.type === 6) {
            if (dynamicOnly) continue;
            if (p.name === name && (p.value || allowEmpty)) return p;
        } else if (p.name === 'bind' && (p.exp || allowEmpty) && isBindKey(p.arg, name)) return p;
    }
}
function isBindKey(arg, name) {
    return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node) {
    return node.props.some((p)=>p.type === 7 && p.name === 'bind' && (!p.arg || p.arg.type !== 4 || !p.arg.isStatic)
    // v-bind:[foo]
    );
}
function isText(node) {
    return node.type === 5 || node.type === 2;
}
function isVSlot(p) {
    return p.type === 7 && p.name === 'slot';
}
function isTemplateNode(node) {
    return node.type === 1 && node.tagType === 3;
}
function isSlotOutlet(node) {
    return node.type === 1 && node.tagType === 2;
}
function injectProp(node, prop, context) {
    let propsWithInjection;
    const props = node.type === 13 ? node.props : node.arguments[2];
    if (props == null || shared.isString(props)) propsWithInjection = createObjectExpression([
        prop
    ]);
    else if (props.type === 14) {
        // merged props... add ours
        // only inject key to object literal if it's the first argument so that
        // if doesn't override user provided keys
        const first = props.arguments[0];
        if (!shared.isString(first) && first.type === 15) first.properties.unshift(prop);
        else if (props.callee === TO_HANDLERS) // #2366
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
            createObjectExpression([
                prop
            ]),
            props
        ]);
        else props.arguments.unshift(createObjectExpression([
            prop
        ]));
        !propsWithInjection && (propsWithInjection = props);
    } else if (props.type === 15) {
        let alreadyExists = false;
        // check existing key to avoid overriding user provided keys
        if (prop.key.type === 4) {
            const propKeyName = prop.key.content;
            alreadyExists = props.properties.some((p)=>p.key.type === 4 && p.key.content === propKeyName
            );
        }
        if (!alreadyExists) props.properties.unshift(prop);
        propsWithInjection = props;
    } else // single v-bind with expression, return a merged replacement
    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
        createObjectExpression([
            prop
        ]),
        props
    ]);
    if (node.type === 13) node.props = propsWithInjection;
    else node.arguments[2] = propsWithInjection;
}
function toValidAssetId(name, type) {
    return `_${type}_${name.replace(/[^\w]/g, '_')}`;
}
// Check if a node contains expressions that reference current context scope ids
function hasScopeRef(node, ids) {
    if (!node || Object.keys(ids).length === 0) return false;
    switch(node.type){
        case 1:
            for(let i = 0; i < node.props.length; i++){
                const p = node.props[i];
                if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) return true;
            }
            return node.children.some((c)=>hasScopeRef(c, ids)
            );
        case 11:
            if (hasScopeRef(node.source, ids)) return true;
            return node.children.some((c)=>hasScopeRef(c, ids)
            );
        case 9:
            return node.branches.some((b)=>hasScopeRef(b, ids)
            );
        case 10:
            if (hasScopeRef(node.condition, ids)) return true;
            return node.children.some((c)=>hasScopeRef(c, ids)
            );
        case 4:
            return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];
        case 8:
            return node.children.some((c)=>shared.isObject(c) && hasScopeRef(c, ids)
            );
        case 5:
        case 12:
            return hasScopeRef(node.content, ids);
        case 2:
        case 3:
            return false;
        default:
            return false;
    }
}
const deprecationData = {
    ["COMPILER_IS_ON_ELEMENT"]: {
        message: `Platform-native elements with "is" prop will no longer be ` + `treated as components in Vue 3 unless the "is" value is explicitly ` + `prefixed with "vue:".`,
        link: `https://v3.vuejs.org/guide/migration/custom-elements-interop.html`
    },
    ["COMPILER_V_BIND_SYNC"]: {
        message: (key)=>`.sync modifier for v-bind has been removed. Use v-model with ` + `argument instead. \`v-bind:${key}.sync\` should be changed to ` + `\`v-model:${key}\`.`
        ,
        link: `https://v3.vuejs.org/guide/migration/v-model.html`
    },
    ["COMPILER_V_BIND_PROP"]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. ` + `Vue 3 will automatically set a binding as DOM property when appropriate.`
    },
    ["COMPILER_V_BIND_OBJECT_ORDER"]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript ` + `object spread: it will now overwrite an existing non-mergeable attribute ` + `that appears before v-bind in the case of conflict. ` + `To retain 2.x behavior, move v-bind to make it the first attribute. ` + `You can also suppress this warning if the usage is intended.`,
        link: `https://v3.vuejs.org/guide/migration/v-bind.html`
    },
    ["COMPILER_V_ON_NATIVE"]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3.vuejs.org/guide/migration/v-on-native-modifier-removed.html`
    },
    ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
        message: `v-if / v-for precedence when used on the same element has changed ` + `in Vue 3: v-if now takes higher precedence and will no longer have ` + `access to v-for scope variables. It is best to avoid the ambiguity ` + `with <template> tags or use a computed property that filters v-for ` + `data source.`,
        link: `https://v3.vuejs.org/guide/migration/v-if-v-for.html`
    },
    ["COMPILER_V_FOR_REF"]: {
        message: `Ref usage on v-for no longer creates array ref values in Vue 3. ` + `Consider using function refs or refactor to avoid ref usage altogether.`,
        link: `https://v3.vuejs.org/guide/migration/array-refs.html`
    },
    ["COMPILER_NATIVE_TEMPLATE"]: {
        message: `<template> with no special directives will render as a native template ` + `element instead of its inner content in Vue 3.`
    },
    ["COMPILER_INLINE_TEMPLATE"]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3.vuejs.org/guide/migration/inline-template-attribute.html`
    },
    ["COMPILER_FILTER"]: {
        message: `filters have been removed in Vue 3. ` + `The "|" symbol will be treated as native JavaScript bitwise OR operator. ` + `Use method calls or computed properties instead.`,
        link: `https://v3.vuejs.org/guide/migration/filters.html`
    }
};
function getCompatValue(key, context) {
    const config = context.options ? context.options.compatConfig : context.compatConfig;
    const value = config && config[key];
    if (key === 'MODE') return value || 3; // compiler defaults to v3 behavior
    else return value;
}
function isCompatEnabled(key, context) {
    const mode = getCompatValue('MODE', context);
    const value = getCompatValue(key, context);
    // in v3 mode, only enable if explicitly set to true
    // otherwise enable for any non-false value
    return mode === 3 ? value === true : value !== false;
}
function checkCompatEnabled(key, context, loc, ...args) {
    const enabled = isCompatEnabled(key, context);
    if (enabled) warnDeprecation(key, context, loc, ...args);
    return enabled;
}
function warnDeprecation(key, context, loc, ...args) {
    const val = getCompatValue(key, context);
    if (val === 'suppress-warning') return;
    const { message , link  } = deprecationData[key];
    const msg = `(deprecation ${key}) ${typeof message === 'function' ? message(...args) : message}${link ? `\n  Details: ${link}` : ``}`;
    const err = new SyntaxError(msg);
    err.code = key;
    if (loc) err.loc = loc;
    context.onWarn(err);
}
// The default decoder only provides escapes for characters reserved as part of
// the template syntax, and is only used if the custom renderer did not provide
// a platform-specific decoder.
const decodeRE = /&(gt|lt|amp|apos|quot);/g;
const decodeMap = {
    gt: '>',
    lt: '<',
    amp: '&',
    apos: "'",
    quot: '"'
};
const defaultParserOptions = {
    delimiters: [
        `{{`,
        `}}`
    ],
    getNamespace: ()=>0
    ,
    getTextMode: ()=>0
    ,
    isVoidTag: shared.NO,
    isPreTag: shared.NO,
    isCustomElement: shared.NO,
    decodeEntities: (rawText)=>rawText.replace(decodeRE, (_, p1)=>decodeMap[p1]
        )
    ,
    onError: defaultOnError,
    onWarn: defaultOnWarn,
    comments: false
};
function baseParse(content, options = {
}) {
    const context = createParserContext(content, options);
    const start = getCursor(context);
    return createRoot(parseChildren(context, 0/* DATA */ , []), getSelection(context, start));
}
function createParserContext(content, rawOptions) {
    const options = shared.extend({
    }, defaultParserOptions);
    for(const key in rawOptions)// @ts-ignore
    options[key] = rawOptions[key] || defaultParserOptions[key];
    return {
        options,
        column: 1,
        line: 1,
        offset: 0,
        originalSource: content,
        source: content,
        inPre: false,
        inVPre: false,
        onWarn: options.onWarn
    };
}
function parseChildren(context, mode, ancestors) {
    const parent = last(ancestors);
    const ns = parent ? parent.ns : 0/* HTML */ ;
    const nodes = [];
    while(!isEnd(context, mode, ancestors)){
        const s = context.source;
        let node = undefined;
        if (mode === 0 || mode === 1) {
            if (!context.inVPre && startsWith(s, context.options.delimiters[0])) // '{{'
            node = parseInterpolation(context, mode);
            else if (mode === 0 && s[0] === '<') {
                // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state
                if (s.length === 1) emitError(context, 5/* EOF_BEFORE_TAG_NAME */ , 1);
                else if (s[1] === '!') {
                    // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
                    if (startsWith(s, '<!--')) node = parseComment(context);
                    else if (startsWith(s, '<!DOCTYPE')) // Ignore DOCTYPE by a limitation.
                    node = parseBogusComment(context);
                    else if (startsWith(s, '<![CDATA[')) {
                        if (ns !== 0) node = parseCDATA(context, ancestors);
                        else {
                            emitError(context, 1/* CDATA_IN_HTML_CONTENT */ );
                            node = parseBogusComment(context);
                        }
                    } else {
                        emitError(context, 11/* INCORRECTLY_OPENED_COMMENT */ );
                        node = parseBogusComment(context);
                    }
                } else if (s[1] === '/') {
                    // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state
                    if (s.length === 2) emitError(context, 5/* EOF_BEFORE_TAG_NAME */ , 2);
                    else if (s[2] === '>') {
                        emitError(context, 14/* MISSING_END_TAG_NAME */ , 2);
                        advanceBy(context, 3);
                        continue;
                    } else if (/[a-z]/i.test(s[2])) {
                        emitError(context, 23/* X_INVALID_END_TAG */ );
                        parseTag(context, 1/* End */ , parent);
                        continue;
                    } else {
                        emitError(context, 12/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */ , 2);
                        node = parseBogusComment(context);
                    }
                } else if (/[a-z]/i.test(s[1])) {
                    node = parseElement(context, ancestors);
                    // 2.x <template> with no directive compat
                    if (isCompatEnabled("COMPILER_NATIVE_TEMPLATE"/* COMPILER_NATIVE_TEMPLATE */ , context) && node && node.tag === 'template' && !node.props.some((p)=>p.type === 7 && isSpecialTemplateDirective(p.name)
                    )) {
                        warnDeprecation("COMPILER_NATIVE_TEMPLATE"/* COMPILER_NATIVE_TEMPLATE */ , context, node.loc);
                        node = node.children;
                    }
                } else if (s[1] === '?') {
                    emitError(context, 21/* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */ , 1);
                    node = parseBogusComment(context);
                } else emitError(context, 12/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */ , 1);
            }
        }
        if (!node) node = parseText(context, mode);
        if (shared.isArray(node)) for(let i = 0; i < node.length; i++)pushNode(nodes, node[i]);
        else pushNode(nodes, node);
    }
    // Whitespace handling strategy like v2
    let removedWhitespace = false;
    if (mode !== 2 && mode !== 1) {
        const preserve = context.options.whitespace === 'preserve';
        for(let i = 0; i < nodes.length; i++){
            const node = nodes[i];
            if (!context.inPre && node.type === 2) {
                if (!/[^\t\r\n\f ]/.test(node.content)) {
                    const prev = nodes[i - 1];
                    const next = nodes[i + 1];
                    // Remove if:
                    // - the whitespace is the first or last node, or:
                    // - (condense mode) the whitespace is adjacent to a comment, or:
                    // - (condense mode) the whitespace is between two elements AND contains newline
                    if (!prev || !next || !preserve && (prev.type === 3 || next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node.content))) {
                        removedWhitespace = true;
                        nodes[i] = null;
                    } else // Otherwise, the whitespace is condensed into a single space
                    node.content = ' ';
                } else if (!preserve) // in condense mode, consecutive whitespaces in text are condensed
                // down to a single space.
                node.content = node.content.replace(/[\t\r\n\f ]+/g, ' ');
            }
        }
        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
            // remove leading newline per html spec
            // https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element
            const first = nodes[0];
            if (first && first.type === 2) first.content = first.content.replace(/^\r?\n/, '');
        }
    }
    return removedWhitespace ? nodes.filter(Boolean) : nodes;
}
function pushNode(nodes, node) {
    if (node.type === 2) {
        const prev = last(nodes);
        // Merge if both this and the previous node are text and those are
        // consecutive. This happens for cases like "a < b".
        if (prev && prev.type === 2 && prev.loc.end.offset === node.loc.start.offset) {
            prev.content += node.content;
            prev.loc.end = node.loc.end;
            prev.loc.source += node.loc.source;
            return;
        }
    }
    nodes.push(node);
}
function parseCDATA(context, ancestors) {
    advanceBy(context, 9);
    const nodes = parseChildren(context, 3/* CDATA */ , ancestors);
    if (context.source.length === 0) emitError(context, 6/* EOF_IN_CDATA */ );
    else advanceBy(context, 3);
    return nodes;
}
function parseComment(context) {
    const start = getCursor(context);
    let content;
    // Regular comment.
    const match = /--(\!)?>/.exec(context.source);
    if (!match) {
        content = context.source.slice(4);
        advanceBy(context, context.source.length);
        emitError(context, 7/* EOF_IN_COMMENT */ );
    } else {
        if (match.index <= 3) emitError(context, 0/* ABRUPT_CLOSING_OF_EMPTY_COMMENT */ );
        if (match[1]) emitError(context, 10/* INCORRECTLY_CLOSED_COMMENT */ );
        content = context.source.slice(4, match.index);
        // Advancing with reporting nested comments.
        const s = context.source.slice(0, match.index);
        let prevIndex = 1, nestedIndex = 0;
        while((nestedIndex = s.indexOf('<!--', prevIndex)) !== -1){
            advanceBy(context, nestedIndex - prevIndex + 1);
            if (nestedIndex + 4 < s.length) emitError(context, 16/* NESTED_COMMENT */ );
            prevIndex = nestedIndex + 1;
        }
        advanceBy(context, match.index + match[0].length - prevIndex + 1);
    }
    return {
        type: 3,
        content,
        loc: getSelection(context, start)
    };
}
function parseBogusComment(context) {
    const start = getCursor(context);
    const contentStart = context.source[1] === '?' ? 1 : 2;
    let content;
    const closeIndex = context.source.indexOf('>');
    if (closeIndex === -1) {
        content = context.source.slice(contentStart);
        advanceBy(context, context.source.length);
    } else {
        content = context.source.slice(contentStart, closeIndex);
        advanceBy(context, closeIndex + 1);
    }
    return {
        type: 3,
        content,
        loc: getSelection(context, start)
    };
}
function parseElement(context, ancestors) {
    // Start tag.
    const wasInPre = context.inPre;
    const wasInVPre = context.inVPre;
    const parent = last(ancestors);
    const element = parseTag(context, 0/* Start */ , parent);
    const isPreBoundary = context.inPre && !wasInPre;
    const isVPreBoundary = context.inVPre && !wasInVPre;
    if (element.isSelfClosing || context.options.isVoidTag(element.tag)) return element;
    // Children.
    ancestors.push(element);
    const mode = context.options.getTextMode(element, parent);
    const children = parseChildren(context, mode, ancestors);
    ancestors.pop();
    // 2.x inline-template compat
    {
        const inlineTemplateProp = element.props.find((p)=>p.type === 6 && p.name === 'inline-template'
        );
        if (inlineTemplateProp && checkCompatEnabled("COMPILER_INLINE_TEMPLATE"/* COMPILER_INLINE_TEMPLATE */ , context, inlineTemplateProp.loc)) {
            const loc = getSelection(context, element.loc.end);
            inlineTemplateProp.value = {
                type: 2,
                content: loc.source,
                loc
            };
        }
    }
    element.children = children;
    // End tag.
    if (startsWithEndTagOpen(context.source, element.tag)) parseTag(context, 1/* End */ , parent);
    else {
        emitError(context, 24/* X_MISSING_END_TAG */ , 0, element.loc.start);
        if (context.source.length === 0 && element.tag.toLowerCase() === 'script') {
            const first = children[0];
            if (first && startsWith(first.loc.source, '<!--')) emitError(context, 8/* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */ );
        }
    }
    element.loc = getSelection(context, element.loc.start);
    if (isPreBoundary) context.inPre = false;
    if (isVPreBoundary) context.inVPre = false;
    return element;
}
const isSpecialTemplateDirective = /*#__PURE__*/ shared.makeMap(`if,else,else-if,for,slot`);
function parseTag(context, type, parent) {
    // Tag open.
    const start = getCursor(context);
    const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
    const tag = match[1];
    const ns = context.options.getNamespace(tag, parent);
    advanceBy(context, match[0].length);
    advanceSpaces(context);
    // save current state in case we need to re-parse attributes with v-pre
    const cursor = getCursor(context);
    const currentSource = context.source;
    // Attributes.
    let props = parseAttributes(context, type);
    // check <pre> tag
    if (context.options.isPreTag(tag)) context.inPre = true;
    // check v-pre
    if (type === 0 && !context.inVPre && props.some((p)=>p.type === 7 && p.name === 'pre'
    )) {
        context.inVPre = true;
        // reset context
        shared.extend(context, cursor);
        context.source = currentSource;
        // re-parse attrs and filter out v-pre itself
        props = parseAttributes(context, type).filter((p)=>p.name !== 'v-pre'
        );
    }
    // Tag close.
    let isSelfClosing = false;
    if (context.source.length === 0) emitError(context, 9/* EOF_IN_TAG */ );
    else {
        isSelfClosing = startsWith(context.source, '/>');
        if (type === 1 && isSelfClosing) emitError(context, 4/* END_TAG_WITH_TRAILING_SOLIDUS */ );
        advanceBy(context, isSelfClosing ? 2 : 1);
    }
    if (type === 1) return;
    // 2.x deprecation checks
    if (isCompatEnabled("COMPILER_V_IF_V_FOR_PRECEDENCE"/* COMPILER_V_IF_V_FOR_PRECEDENCE */ , context)) {
        let hasIf = false;
        let hasFor = false;
        for(let i = 0; i < props.length; i++){
            const p = props[i];
            if (p.type === 7) {
                if (p.name === 'if') hasIf = true;
                else if (p.name === 'for') hasFor = true;
            }
            if (hasIf && hasFor) warnDeprecation("COMPILER_V_IF_V_FOR_PRECEDENCE"/* COMPILER_V_IF_V_FOR_PRECEDENCE */ , context, getSelection(context, start));
        }
    }
    let tagType = 0/* ELEMENT */ ;
    const options = context.options;
    if (!context.inVPre && !options.isCustomElement(tag)) {
        const hasVIs = props.some((p)=>{
            if (p.name !== 'is') return;
            // v-is="xxx" (TODO: deprecate)
            if (p.type === 7) return true;
            // is="vue:xxx"
            if (p.value && p.value.content.startsWith('vue:')) return true;
            // in compat mode, any is usage is considered a component
            if (checkCompatEnabled("COMPILER_IS_ON_ELEMENT"/* COMPILER_IS_ON_ELEMENT */ , context, p.loc)) return true;
        });
        if (options.isNativeTag && !hasVIs) {
            if (!options.isNativeTag(tag)) tagType = 1;
        } else if (hasVIs || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || /^[A-Z]/.test(tag) || tag === 'component') tagType = 1;
        if (tag === 'slot') tagType = 2;
        else if (tag === 'template' && props.some((p)=>p.type === 7 && isSpecialTemplateDirective(p.name)
        )) tagType = 3;
    }
    return {
        type: 1,
        ns,
        tag,
        tagType,
        props,
        isSelfClosing,
        children: [],
        loc: getSelection(context, start),
        codegenNode: undefined
    };
}
function parseAttributes(context, type) {
    const props = [];
    const attributeNames = new Set();
    while(context.source.length > 0 && !startsWith(context.source, '>') && !startsWith(context.source, '/>')){
        if (startsWith(context.source, '/')) {
            emitError(context, 22/* UNEXPECTED_SOLIDUS_IN_TAG */ );
            advanceBy(context, 1);
            advanceSpaces(context);
            continue;
        }
        if (type === 1) emitError(context, 3/* END_TAG_WITH_ATTRIBUTES */ );
        const attr = parseAttribute(context, attributeNames);
        if (type === 0) props.push(attr);
        if (/^[^\t\r\n\f />]/.test(context.source)) emitError(context, 15/* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */ );
        advanceSpaces(context);
    }
    return props;
}
function parseAttribute(context, nameSet) {
    // Name.
    const start = getCursor(context);
    const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
    const name = match[0];
    if (nameSet.has(name)) emitError(context, 2/* DUPLICATE_ATTRIBUTE */ );
    nameSet.add(name);
    if (name[0] === '=') emitError(context, 19/* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */ );
    {
        const pattern = /["'<]/g;
        let m;
        while(m = pattern.exec(name))emitError(context, 17/* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */ , m.index);
    }
    advanceBy(context, name.length);
    // Value
    let value = undefined;
    if (/^[\t\r\n\f ]*=/.test(context.source)) {
        advanceSpaces(context);
        advanceBy(context, 1);
        advanceSpaces(context);
        value = parseAttributeValue(context);
        if (!value) emitError(context, 13/* MISSING_ATTRIBUTE_VALUE */ );
    }
    const loc = getSelection(context, start);
    if (!context.inVPre && /^(v-|:|@|#)/.test(name)) {
        const match1 = /(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
        let dirName = match1[1] || (startsWith(name, ':') ? 'bind' : startsWith(name, '@') ? 'on' : 'slot');
        let arg;
        if (match1[2]) {
            const isSlot = dirName === 'slot';
            const startOffset = name.lastIndexOf(match1[2]);
            const loc1 = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match1[2].length + (isSlot && match1[3] || '').length));
            let content = match1[2];
            let isStatic = true;
            if (content.startsWith('[')) {
                isStatic = false;
                if (!content.endsWith(']')) emitError(context, 26/* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */ );
                content = content.substr(1, content.length - 2);
            } else if (isSlot) // #1241 special case for v-slot: vuetify relies extensively on slot
            // names containing dots. v-slot doesn't have any modifiers and Vue 2.x
            // supports such usage so we are keeping it consistent with 2.x.
            content += match1[3] || '';
            arg = {
                type: 4,
                content,
                isStatic,
                constType: isStatic ? 3 : 0,
                loc: loc1
            };
        }
        if (value && value.isQuoted) {
            const valueLoc = value.loc;
            valueLoc.start.offset++;
            valueLoc.start.column++;
            valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
            valueLoc.source = valueLoc.source.slice(1, -1);
        }
        const modifiers = match1[3] ? match1[3].substr(1).split('.') : [];
        // 2.x compat v-bind:foo.sync -> v-model:foo
        if (dirName === 'bind' && arg) {
            if (modifiers.includes('sync') && checkCompatEnabled("COMPILER_V_BIND_SYNC"/* COMPILER_V_BIND_SYNC */ , context, loc, arg.loc.source)) {
                dirName = 'model';
                modifiers.splice(modifiers.indexOf('sync'), 1);
            }
            if (modifiers.includes('prop')) checkCompatEnabled("COMPILER_V_BIND_PROP"/* COMPILER_V_BIND_PROP */ , context, loc);
        }
        return {
            type: 7,
            name: dirName,
            exp: value && {
                type: 4,
                content: value.content,
                isStatic: false,
                // Treat as non-constant by default. This can be potentially set to
                // other values by `transformExpression` to make it eligible for hoisting.
                constType: 0,
                loc: value.loc
            },
            arg,
            modifiers,
            loc
        };
    }
    return {
        type: 6,
        name,
        value: value && {
            type: 2,
            content: value.content,
            loc: value.loc
        },
        loc
    };
}
function parseAttributeValue(context) {
    const start = getCursor(context);
    let content;
    const quote = context.source[0];
    const isQuoted = quote === `"` || quote === `'`;
    if (isQuoted) {
        // Quoted value.
        advanceBy(context, 1);
        const endIndex = context.source.indexOf(quote);
        if (endIndex === -1) content = parseTextData(context, context.source.length, 4/* ATTRIBUTE_VALUE */ );
        else {
            content = parseTextData(context, endIndex, 4/* ATTRIBUTE_VALUE */ );
            advanceBy(context, 1);
        }
    } else {
        // Unquoted
        const match = /^[^\t\r\n\f >]+/.exec(context.source);
        if (!match) return undefined;
        const unexpectedChars = /["'<=`]/g;
        let m;
        while(m = unexpectedChars.exec(match[0]))emitError(context, 18/* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */ , m.index);
        content = parseTextData(context, match[0].length, 4/* ATTRIBUTE_VALUE */ );
    }
    return {
        content,
        isQuoted,
        loc: getSelection(context, start)
    };
}
function parseInterpolation(context, mode) {
    const [open, close] = context.options.delimiters;
    const closeIndex = context.source.indexOf(close, open.length);
    if (closeIndex === -1) {
        emitError(context, 25/* X_MISSING_INTERPOLATION_END */ );
        return undefined;
    }
    const start = getCursor(context);
    advanceBy(context, open.length);
    const innerStart = getCursor(context);
    const innerEnd = getCursor(context);
    const rawContentLength = closeIndex - open.length;
    const rawContent = context.source.slice(0, rawContentLength);
    const preTrimContent = parseTextData(context, rawContentLength, mode);
    const content = preTrimContent.trim();
    const startOffset = preTrimContent.indexOf(content);
    if (startOffset > 0) advancePositionWithMutation(innerStart, rawContent, startOffset);
    const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
    advancePositionWithMutation(innerEnd, rawContent, endOffset);
    advanceBy(context, close.length);
    return {
        type: 5,
        content: {
            type: 4,
            isStatic: false,
            // Set `isConstant` to false by default and will decide in transformExpression
            constType: 0,
            content,
            loc: getSelection(context, innerStart, innerEnd)
        },
        loc: getSelection(context, start)
    };
}
function parseText(context, mode) {
    const endTokens = [
        '<',
        context.options.delimiters[0]
    ];
    if (mode === 3) endTokens.push(']]>');
    let endIndex = context.source.length;
    for(let i = 0; i < endTokens.length; i++){
        const index = context.source.indexOf(endTokens[i], 1);
        if (index !== -1 && endIndex > index) endIndex = index;
    }
    const start = getCursor(context);
    const content = parseTextData(context, endIndex, mode);
    return {
        type: 2,
        content,
        loc: getSelection(context, start)
    };
}
/**
 * Get text data with a given length from the current location.
 * This translates HTML entities in the text data.
 */ function parseTextData(context, length, mode) {
    const rawText = context.source.slice(0, length);
    advanceBy(context, length);
    if (mode === 2 || mode === 3 || rawText.indexOf('&') === -1) return rawText;
    else // DATA or RCDATA containing "&"". Entity decoding required.
    return context.options.decodeEntities(rawText, mode === 4/* ATTRIBUTE_VALUE */ );
}
function getCursor(context) {
    const { column , line , offset  } = context;
    return {
        column,
        line,
        offset
    };
}
function getSelection(context, start, end) {
    end = end || getCursor(context);
    return {
        start,
        end,
        source: context.originalSource.slice(start.offset, end.offset)
    };
}
function last(xs) {
    return xs[xs.length - 1];
}
function startsWith(source, searchString) {
    return source.startsWith(searchString);
}
function advanceBy(context, numberOfCharacters) {
    const { source  } = context;
    advancePositionWithMutation(context, source, numberOfCharacters);
    context.source = source.slice(numberOfCharacters);
}
function advanceSpaces(context) {
    const match = /^[\t\r\n\f ]+/.exec(context.source);
    if (match) advanceBy(context, match[0].length);
}
function getNewPosition(context, start, numberOfCharacters) {
    return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
}
function emitError(context, code, offset, loc = getCursor(context)) {
    if (offset) {
        loc.offset += offset;
        loc.column += offset;
    }
    context.options.onError(createCompilerError(code, {
        start: loc,
        end: loc,
        source: ''
    }));
}
function isEnd(context, mode, ancestors) {
    const s = context.source;
    switch(mode){
        case 0:
            if (startsWith(s, '</')) // TODO: probably bad performance
            for(let i = ancestors.length - 1; i >= 0; --i){
                if (startsWithEndTagOpen(s, ancestors[i].tag)) return true;
            }
            break;
        case 1:
        case 2:
            {
                const parent = last(ancestors);
                if (parent && startsWithEndTagOpen(s, parent.tag)) return true;
                break;
            }
        case 3:
            if (startsWith(s, ']]>')) return true;
            break;
    }
    return !s;
}
function startsWithEndTagOpen(source, tag) {
    return startsWith(source, '</') && source.substr(2, tag.length).toLowerCase() === tag.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag.length] || '>');
}
function hoistStatic(root, context) {
    walk(root, context, // Root node is unfortunately non-hoistable due to potential parent
    // fallthrough attributes.
    isSingleElementRoot(root, root.children[0]));
}
function isSingleElementRoot(root, child) {
    const { children  } = root;
    return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
}
function walk(node, context, doNotHoistNode = false) {
    let hasHoistedNode = false;
    // Some transforms, e.g. transformAssetUrls from @vue/compiler-sfc, replaces
    // static bindings with expressions. These expressions are guaranteed to be
    // constant so they are still eligible for hoisting, but they are only
    // available at runtime and therefore cannot be evaluated ahead of time.
    // This is only a concern for pre-stringification (via transformHoist by
    // @vue/compiler-dom), but doing it here allows us to perform only one full
    // walk of the AST and allow `stringifyStatic` to stop walking as soon as its
    // stringficiation threshold is met.
    let canStringify = true;
    const { children  } = node;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        // only plain elements & text calls are eligible for hoisting.
        if (child.type === 1 && child.tagType === 0) {
            const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
            if (constantType > 0) {
                if (constantType < 3) canStringify = false;
                if (constantType >= 2) {
                    child.codegenNode.patchFlag = -1 + ` /* HOISTED */`;
                    child.codegenNode = context.hoist(child.codegenNode);
                    hasHoistedNode = true;
                    continue;
                }
            } else {
                // node may contain dynamic children, but its props may be eligible for
                // hoisting.
                const codegenNode = child.codegenNode;
                if (codegenNode.type === 13) {
                    const flag = getPatchFlag(codegenNode);
                    if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
                        const props = getNodeProps(child);
                        if (props) codegenNode.props = context.hoist(props);
                    }
                }
            }
        } else if (child.type === 12) {
            const contentType = getConstantType(child.content, context);
            if (contentType > 0) {
                if (contentType < 3) canStringify = false;
                if (contentType >= 2) {
                    child.codegenNode = context.hoist(child.codegenNode);
                    hasHoistedNode = true;
                }
            }
        }
        // walk further
        if (child.type === 1) {
            const isComponent = child.tagType === 1/* COMPONENT */ ;
            if (isComponent) context.scopes.vSlot++;
            walk(child, context);
            if (isComponent) context.scopes.vSlot--;
        } else if (child.type === 11) // Do not hoist v-for single child because it has to be a block
        walk(child, context, child.children.length === 1);
        else if (child.type === 9) for(let i1 = 0; i1 < child.branches.length; i1++)// Do not hoist v-if single child because it has to be a block
        walk(child.branches[i1], context, child.branches[i1].children.length === 1);
    }
    if (canStringify && hasHoistedNode && context.transformHoist) context.transformHoist(children, context, node);
}
function getConstantType(node, context) {
    const { constantCache  } = context;
    switch(node.type){
        case 1:
            if (node.tagType !== 0) return 0;
            const cached = constantCache.get(node);
            if (cached !== undefined) return cached;
            const codegenNode = node.codegenNode;
            if (codegenNode.type !== 13) return 0;
            const flag = getPatchFlag(codegenNode);
            if (!flag) {
                let returnType = 3/* CAN_STRINGIFY */ ;
                // Element itself has no patch flag. However we still need to check:
                // 1. Even for a node with no patch flag, it is possible for it to contain
                // non-hoistable expressions that refers to scope variables, e.g. compiler
                // injected keys or cached event handlers. Therefore we need to always
                // check the codegenNode's props to be sure.
                const generatedPropsType = getGeneratedPropsConstantType(node, context);
                if (generatedPropsType === 0) {
                    constantCache.set(node, 0/* NOT_CONSTANT */ );
                    return 0;
                }
                if (generatedPropsType < returnType) returnType = generatedPropsType;
                // 2. its children.
                for(let i = 0; i < node.children.length; i++){
                    const childType = getConstantType(node.children[i], context);
                    if (childType === 0) {
                        constantCache.set(node, 0/* NOT_CONSTANT */ );
                        return 0;
                    }
                    if (childType < returnType) returnType = childType;
                }
                // 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0
                // type, check if any of the props can cause the type to be lowered
                // we can skip can_patch because it's guaranteed by the absence of a
                // patchFlag.
                if (returnType > 1) for(let i1 = 0; i1 < node.props.length; i1++){
                    const p = node.props[i1];
                    if (p.type === 7 && p.name === 'bind' && p.exp) {
                        const expType = getConstantType(p.exp, context);
                        if (expType === 0) {
                            constantCache.set(node, 0/* NOT_CONSTANT */ );
                            return 0;
                        }
                        if (expType < returnType) returnType = expType;
                    }
                }
                // only svg/foreignObject could be block here, however if they are
                // static then they don't need to be blocks since there will be no
                // nested updates.
                if (codegenNode.isBlock) {
                    context.removeHelper(OPEN_BLOCK);
                    context.removeHelper(CREATE_BLOCK);
                    codegenNode.isBlock = false;
                    context.helper(CREATE_VNODE);
                }
                constantCache.set(node, returnType);
                return returnType;
            } else {
                constantCache.set(node, 0/* NOT_CONSTANT */ );
                return 0;
            }
        case 2:
        case 3:
            return 3;
        case 9:
        case 11:
        case 10:
            return 0;
        case 5:
        case 12:
            return getConstantType(node.content, context);
        case 4:
            return node.constType;
        case 8:
            let returnType = 3/* CAN_STRINGIFY */ ;
            for(let i = 0; i < node.children.length; i++){
                const child = node.children[i];
                if (shared.isString(child) || shared.isSymbol(child)) continue;
                const childType = getConstantType(child, context);
                if (childType === 0) return 0;
                else if (childType < returnType) returnType = childType;
            }
            return returnType;
        default:
            return 0;
    }
}
function getGeneratedPropsConstantType(node, context) {
    let returnType = 3/* CAN_STRINGIFY */ ;
    const props = getNodeProps(node);
    if (props && props.type === 15) {
        const { properties  } = props;
        for(let i = 0; i < properties.length; i++){
            const { key , value  } = properties[i];
            const keyType = getConstantType(key, context);
            if (keyType === 0) return keyType;
            if (keyType < returnType) returnType = keyType;
            if (value.type !== 4) return 0;
            const valueType = getConstantType(value, context);
            if (valueType === 0) return valueType;
            if (valueType < returnType) returnType = valueType;
        }
    }
    return returnType;
}
function getNodeProps(node) {
    const codegenNode = node.codegenNode;
    if (codegenNode.type === 13) return codegenNode.props;
}
function getPatchFlag(node) {
    const flag = node.patchFlag;
    return flag ? parseInt(flag, 10) : undefined;
}
function createTransformContext(root, { filename ='' , prefixIdentifiers =false , hoistStatic: hoistStatic1 = false , cacheHandlers =false , nodeTransforms =[] , directiveTransforms ={
} , transformHoist =null , isBuiltInComponent =shared.NOOP , isCustomElement =shared.NOOP , expressionPlugins =[] , scopeId =null , slotted =true , ssr =false , ssrCssVars =`` , bindingMetadata =shared.EMPTY_OBJ , inline =false , isTS =false , onError =defaultOnError , onWarn =defaultOnWarn , compatConfig  }) {
    const nameMatch = filename.replace(/\?.*$/, '').match(/([^/\\]+)\.\w+$/);
    const context = {
        // options
        selfName: nameMatch && shared.capitalize(shared.camelize(nameMatch[1])),
        prefixIdentifiers,
        hoistStatic: hoistStatic1,
        cacheHandlers,
        nodeTransforms,
        directiveTransforms,
        transformHoist,
        isBuiltInComponent,
        isCustomElement,
        expressionPlugins,
        scopeId,
        slotted,
        ssr,
        ssrCssVars,
        bindingMetadata,
        inline,
        isTS,
        onError,
        onWarn,
        compatConfig,
        // state
        root,
        helpers: new Map(),
        components: new Set(),
        directives: new Set(),
        hoists: [],
        imports: [],
        constantCache: new Map(),
        temps: 0,
        cached: 0,
        identifiers: Object.create(null),
        scopes: {
            vFor: 0,
            vSlot: 0,
            vPre: 0,
            vOnce: 0
        },
        parent: null,
        currentNode: root,
        childIndex: 0,
        // methods
        helper (name) {
            const count = context.helpers.get(name) || 0;
            context.helpers.set(name, count + 1);
            return name;
        },
        removeHelper (name) {
            const count = context.helpers.get(name);
            if (count) {
                const currentCount = count - 1;
                if (!currentCount) context.helpers.delete(name);
                else context.helpers.set(name, currentCount);
            }
        },
        helperString (name) {
            return `_${helperNameMap[context.helper(name)]}`;
        },
        replaceNode (node) {
            if (!context.currentNode) throw new Error(`Node being replaced is already removed.`);
            if (!context.parent) throw new Error(`Cannot replace root node.`);
            context.parent.children[context.childIndex] = context.currentNode = node;
        },
        removeNode (node) {
            if (!context.parent) throw new Error(`Cannot remove root node.`);
            const list = context.parent.children;
            const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
            /* istanbul ignore if */ if (removalIndex < 0) throw new Error(`node being removed is not a child of current parent`);
            if (!node || node === context.currentNode) {
                // current node removed
                context.currentNode = null;
                context.onNodeRemoved();
            } else // sibling node removed
            if (context.childIndex > removalIndex) {
                context.childIndex--;
                context.onNodeRemoved();
            }
            context.parent.children.splice(removalIndex, 1);
        },
        onNodeRemoved: ()=>{
        },
        addIdentifiers (exp) {
            if (shared.isString(exp)) addId(exp);
            else if (exp.identifiers) exp.identifiers.forEach(addId);
            else if (exp.type === 4) addId(exp.content);
        },
        removeIdentifiers (exp) {
            if (shared.isString(exp)) removeId(exp);
            else if (exp.identifiers) exp.identifiers.forEach(removeId);
            else if (exp.type === 4) removeId(exp.content);
        },
        hoist (exp) {
            context.hoists.push(exp);
            const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2/* CAN_HOIST */ );
            identifier.hoisted = exp;
            return identifier;
        },
        cache (exp, isVNode = false) {
            return createCacheExpression(++context.cached, exp, isVNode);
        }
    };
    context.filters = new Set();
    function addId(id) {
        const { identifiers  } = context;
        if (identifiers[id] === undefined) identifiers[id] = 0;
        identifiers[id]++;
    }
    function removeId(id) {
        context.identifiers[id]--;
    }
    return context;
}
function transform(root, options) {
    const context = createTransformContext(root, options);
    traverseNode(root, context);
    if (options.hoistStatic) hoistStatic(root, context);
    if (!options.ssr) createRootCodegen(root, context);
    // finalize meta information
    root.helpers = [
        ...context.helpers.keys()
    ];
    root.components = [
        ...context.components
    ];
    root.directives = [
        ...context.directives
    ];
    root.imports = context.imports;
    root.hoists = context.hoists;
    root.temps = context.temps;
    root.cached = context.cached;
    root.filters = [
        ...context.filters
    ];
}
function createRootCodegen(root, context) {
    const { helper , removeHelper  } = context;
    const { children  } = root;
    if (children.length === 1) {
        const child = children[0];
        // if the single child is an element, turn it into a block.
        if (isSingleElementRoot(root, child) && child.codegenNode) {
            // single element root is never hoisted so codegenNode will never be
            // SimpleExpressionNode
            const codegenNode = child.codegenNode;
            if (codegenNode.type === 13) {
                if (!codegenNode.isBlock) {
                    removeHelper(CREATE_VNODE);
                    codegenNode.isBlock = true;
                    helper(OPEN_BLOCK);
                    helper(CREATE_BLOCK);
                }
            }
            root.codegenNode = codegenNode;
        } else // - single <slot/>, IfNode, ForNode: already blocks.
        // - single text node: always patched.
        // root codegen falls through via genNode()
        root.codegenNode = child;
    } else if (children.length > 1) {
        // root has multiple nodes - return a fragment block.
        let patchFlag = 64/* STABLE_FRAGMENT */ ;
        let patchFlagText = shared.PatchFlagNames[64];
        // check if the fragment actually contains a single valid child with
        // the rest being comments
        if (children.filter((c)=>c.type !== 3
        /* COMMENT */ ).length === 1) {
            patchFlag |= 2048;
            patchFlagText += `, ${shared.PatchFlagNames[2048]}`;
        }
        root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, patchFlag + ` /* ${patchFlagText} */`, undefined, undefined, true);
    }
}
function traverseChildren(parent, context) {
    let i = 0;
    const nodeRemoved = ()=>{
        i--;
    };
    for(; i < parent.children.length; i++){
        const child = parent.children[i];
        if (shared.isString(child)) continue;
        context.parent = parent;
        context.childIndex = i;
        context.onNodeRemoved = nodeRemoved;
        traverseNode(child, context);
    }
}
function traverseNode(node, context) {
    context.currentNode = node;
    // apply transform plugins
    const { nodeTransforms  } = context;
    const exitFns = [];
    for(let i = 0; i < nodeTransforms.length; i++){
        const onExit = nodeTransforms[i](node, context);
        if (onExit) {
            if (shared.isArray(onExit)) exitFns.push(...onExit);
            else exitFns.push(onExit);
        }
        if (!context.currentNode) // node was removed
        return;
        else // node may have been replaced
        node = context.currentNode;
    }
    switch(node.type){
        case 3:
            if (!context.ssr) // inject import for the Comment symbol, which is needed for creating
            // comment nodes with `createVNode`
            context.helper(CREATE_COMMENT);
            break;
        case 5:
            // no need to traverse, but we need to inject toString helper
            if (!context.ssr) context.helper(TO_DISPLAY_STRING);
            break;
        // for container types, further traverse downwards
        case 9:
            for(let i1 = 0; i1 < node.branches.length; i1++)traverseNode(node.branches[i1], context);
            break;
        case 10:
        case 11:
        case 1:
        case 0:
            traverseChildren(node, context);
            break;
    }
    // exit transforms
    context.currentNode = node;
    let i2 = exitFns.length;
    while(i2--)exitFns[i2]();
}
function createStructuralDirectiveTransform(name, fn) {
    const matches = shared.isString(name) ? (n)=>n === name
     : (n)=>name.test(n)
    ;
    return (node, context)=>{
        if (node.type === 1) {
            const { props  } = node;
            // structural directive transforms are not concerned with slots
            // as they are handled separately in vSlot.ts
            if (node.tagType === 3 && props.some(isVSlot)) return;
            const exitFns = [];
            for(let i = 0; i < props.length; i++){
                const prop = props[i];
                if (prop.type === 7 && matches(prop.name)) {
                    // structural directives are removed to avoid infinite recursion
                    // also we remove them *before* applying so that it can further
                    // traverse itself in case it moves the node around
                    props.splice(i, 1);
                    i--;
                    const onExit = fn(node, prop, context);
                    if (onExit) exitFns.push(onExit);
                }
            }
            return exitFns;
        }
    };
}
const PURE_ANNOTATION = `/*#__PURE__*/`;
const WITH_ID = `_withId`;
function createCodegenContext(ast, { mode ='function' , prefixIdentifiers =mode === 'module' , sourceMap: sourceMap$1 = false , filename =`template.vue.html` , scopeId =null , optimizeImports =false , runtimeGlobalName =`Vue` , runtimeModuleName =`vue` , ssr =false  }) {
    const context = {
        mode,
        prefixIdentifiers,
        sourceMap: sourceMap$1,
        filename,
        scopeId,
        optimizeImports,
        runtimeGlobalName,
        runtimeModuleName,
        ssr,
        source: ast.loc.source,
        code: ``,
        column: 1,
        line: 1,
        offset: 0,
        indentLevel: 0,
        pure: false,
        map: undefined,
        helper (key) {
            return `_${helperNameMap[key]}`;
        },
        push (code, node) {
            context.code += code;
            if (context.map) {
                if (node) {
                    let name;
                    if (node.type === 4 && !node.isStatic) {
                        const content = node.content.replace(/^_ctx\./, '');
                        if (content !== node.content && isSimpleIdentifier(content)) name = content;
                    }
                    addMapping(node.loc.start, name);
                }
                advancePositionWithMutation(context, code);
                if (node && node.loc !== locStub) addMapping(node.loc.end);
            }
        },
        indent () {
            newline(++context.indentLevel);
        },
        deindent (withoutNewLine = false) {
            if (withoutNewLine) --context.indentLevel;
            else newline(--context.indentLevel);
        },
        newline () {
            newline(context.indentLevel);
        }
    };
    function newline(n) {
        context.push('\n' + `  `.repeat(n));
    }
    function addMapping(loc, name) {
        context.map.addMapping({
            name,
            source: context.filename,
            original: {
                line: loc.line,
                column: loc.column - 1
            },
            generated: {
                line: context.line,
                column: context.column - 1
            }
        });
    }
    if (sourceMap$1) {
        // lazy require source-map implementation, only in non-browser builds
        context.map = new sourceMap.SourceMapGenerator();
        context.map.setSourceContent(filename, context.source);
    }
    return context;
}
function generate(ast, options = {
}) {
    const context = createCodegenContext(ast, options);
    if (options.onContextCreated) options.onContextCreated(context);
    const { mode , push , prefixIdentifiers , indent , deindent , newline , scopeId , ssr  } = context;
    const hasHelpers = ast.helpers.length > 0;
    const useWithBlock = !prefixIdentifiers && mode !== 'module';
    const genScopeId = scopeId != null && mode === 'module';
    const isSetupInlined = !!options.inline;
    // preambles
    // in setup() inline mode, the preamble is generated in a sub context
    // and returned separately.
    const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;
    if (mode === 'module') genModulePreamble(ast, preambleContext, genScopeId, isSetupInlined);
    else genFunctionPreamble(ast, preambleContext);
    // enter render function
    const functionName = ssr ? `ssrRender` : `render`;
    const args = ssr ? [
        '_ctx',
        '_push',
        '_parent',
        '_attrs'
    ] : [
        '_ctx',
        '_cache'
    ];
    if (options.bindingMetadata && !options.inline) // binding optimization args
    args.push('$props', '$setup', '$data', '$options');
    const signature = options.isTS ? args.map((arg)=>`${arg}: any`
    ).join(',') : args.join(', ');
    if (genScopeId && !isSetupInlined) // root-level _withId wrapping is no longer necessary after 3.0.8 and is
    // a noop, it's only kept so that code compiled with 3.0.8+ can run with
    // runtime < 3.0.8.
    // TODO: consider removing in 3.1
    push(`const ${functionName} = ${PURE_ANNOTATION}${WITH_ID}(`);
    if (isSetupInlined || genScopeId) push(`(${signature}) => {`);
    else push(`function ${functionName}(${signature}) {`);
    indent();
    if (useWithBlock) {
        push(`with (_ctx) {`);
        indent();
        // function mode const declarations should be inside with block
        // also they should be renamed to avoid collision with user properties
        if (hasHelpers) {
            push(`const { ${ast.helpers.map((s)=>`${helperNameMap[s]}: _${helperNameMap[s]}`
            ).join(', ')} } = _Vue`);
            push(`\n`);
            newline();
        }
    }
    // generate asset resolution statements
    if (ast.components.length) {
        genAssets(ast.components, 'component', context);
        if (ast.directives.length || ast.temps > 0) newline();
    }
    if (ast.directives.length) {
        genAssets(ast.directives, 'directive', context);
        if (ast.temps > 0) newline();
    }
    if (ast.filters && ast.filters.length) {
        newline();
        genAssets(ast.filters, 'filter', context);
        newline();
    }
    if (ast.temps > 0) {
        push(`let `);
        for(let i = 0; i < ast.temps; i++)push(`${i > 0 ? `, ` : ``}_temp${i}`);
    }
    if (ast.components.length || ast.directives.length || ast.temps) {
        push(`\n`);
        newline();
    }
    // generate the VNode tree expression
    if (!ssr) push(`return `);
    if (ast.codegenNode) genNode(ast.codegenNode, context);
    else push(`null`);
    if (useWithBlock) {
        deindent();
        push(`}`);
    }
    deindent();
    push(`}`);
    if (genScopeId && !isSetupInlined) push(`)`);
    return {
        ast,
        code: context.code,
        preamble: isSetupInlined ? preambleContext.code : ``,
        // SourceMapGenerator does have toJSON() method but it's not in the types
        map: context.map ? context.map.toJSON() : undefined
    };
}
function genFunctionPreamble(ast, context) {
    const { ssr , prefixIdentifiers , push , newline , runtimeModuleName , runtimeGlobalName  } = context;
    const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;
    const aliasHelper = (s)=>`${helperNameMap[s]}: _${helperNameMap[s]}`
    ;
    // Generate const declaration for helpers
    // In prefix mode, we place the const declaration at top so it's done
    // only once; But if we not prefixing, we place the declaration inside the
    // with block so it doesn't incur the `in` check cost for every helper access.
    if (ast.helpers.length > 0) {
        if (prefixIdentifiers) push(`const { ${ast.helpers.map(aliasHelper).join(', ')} } = ${VueBinding}\n`);
        else {
            // "with" mode.
            // save Vue in a separate variable to avoid collision
            push(`const _Vue = ${VueBinding}\n`);
            // in "with" mode, helpers are declared inside the with block to avoid
            // has check cost, but hoists are lifted out of the function - we need
            // to provide the helper here.
            if (ast.hoists.length) {
                const staticHelpers = [
                    CREATE_VNODE,
                    CREATE_COMMENT,
                    CREATE_TEXT,
                    CREATE_STATIC
                ].filter((helper)=>ast.helpers.includes(helper)
                ).map(aliasHelper).join(', ');
                push(`const { ${staticHelpers} } = _Vue\n`);
            }
        }
    }
    // generate variables for ssr helpers
    if (ast.ssrHelpers && ast.ssrHelpers.length) // ssr guarantees prefixIdentifier: true
    push(`const { ${ast.ssrHelpers.map(aliasHelper).join(', ')} } = require("@vue/server-renderer")\n`);
    genHoists(ast.hoists, context);
    newline();
    push(`return `);
}
function genModulePreamble(ast, context, genScopeId, inline) {
    const { push , newline , optimizeImports , runtimeModuleName , scopeId , helper  } = context;
    if (genScopeId) {
        ast.helpers.push(WITH_SCOPE_ID);
        if (ast.hoists.length) ast.helpers.push(PUSH_SCOPE_ID, POP_SCOPE_ID);
    }
    // generate import statements for helpers
    if (ast.helpers.length) {
        if (optimizeImports) {
            // when bundled with webpack with code-split, calling an import binding
            // as a function leads to it being wrapped with `Object(a.b)` or `(0,a.b)`,
            // incurring both payload size increase and potential perf overhead.
            // therefore we assign the imports to variables (which is a constant ~50b
            // cost per-component instead of scaling with template size)
            push(`import { ${ast.helpers.map((s)=>helperNameMap[s]
            ).join(', ')} } from ${JSON.stringify(runtimeModuleName)}\n`);
            push(`\n// Binding optimization for webpack code-split\nconst ${ast.helpers.map((s)=>`_${helperNameMap[s]} = ${helperNameMap[s]}`
            ).join(', ')}\n`);
        } else push(`import { ${ast.helpers.map((s)=>`${helperNameMap[s]} as _${helperNameMap[s]}`
        ).join(', ')} } from ${JSON.stringify(runtimeModuleName)}\n`);
    }
    if (ast.ssrHelpers && ast.ssrHelpers.length) push(`import { ${ast.ssrHelpers.map((s)=>`${helperNameMap[s]} as _${helperNameMap[s]}`
    ).join(', ')} } from "@vue/server-renderer"\n`);
    if (ast.imports.length) {
        genImports(ast.imports, context);
        newline();
    }
    // we technically don't need this anymore since `withCtx` already sets the
    // correct scopeId, but this is necessary for backwards compat
    // TODO: consider removing in 3.1
    if (genScopeId) {
        push(`const ${WITH_ID} = ${PURE_ANNOTATION}${helper(WITH_SCOPE_ID)}("${scopeId}")`);
        newline();
    }
    genHoists(ast.hoists, context);
    newline();
    if (!inline) push(`export `);
}
function genAssets(assets, type, { helper , push , newline  }) {
    const resolver = helper(type === 'filter' ? RESOLVE_FILTER : type === 'component' ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);
    for(let i = 0; i < assets.length; i++){
        let id = assets[i];
        // potential component implicit self-reference inferred from SFC filename
        const maybeSelfReference = id.endsWith('__self');
        if (maybeSelfReference) id = id.slice(0, -6);
        push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})`);
        if (i < assets.length - 1) newline();
    }
}
function genHoists(hoists, context) {
    if (!hoists.length) return;
    context.pure = true;
    const { push , newline , helper , scopeId , mode  } = context;
    const genScopeId = scopeId != null && mode !== 'function';
    newline();
    // push scope Id before initializing hoisted vnodes so that these vnodes
    // get the proper scopeId as well.
    if (genScopeId) {
        push(`${helper(PUSH_SCOPE_ID)}("${scopeId}")`);
        newline();
    }
    hoists.forEach((exp, i)=>{
        if (exp) {
            push(`const _hoisted_${i + 1} = `);
            genNode(exp, context);
            newline();
        }
    });
    if (genScopeId) {
        push(`${helper(POP_SCOPE_ID)}()`);
        newline();
    }
    context.pure = false;
}
function genImports(importsOptions, context) {
    if (!importsOptions.length) return;
    importsOptions.forEach((imports)=>{
        context.push(`import `);
        genNode(imports.exp, context);
        context.push(` from '${imports.path}'`);
        context.newline();
    });
}
function isText$1(n) {
    return shared.isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;
}
function genNodeListAsArray(nodes, context) {
    const multilines = nodes.length > 3 || nodes.some((n)=>shared.isArray(n) || !isText$1(n)
    );
    context.push(`[`);
    multilines && context.indent();
    genNodeList(nodes, context, multilines);
    multilines && context.deindent();
    context.push(`]`);
}
function genNodeList(nodes, context, multilines = false, comma = true) {
    const { push , newline  } = context;
    for(let i = 0; i < nodes.length; i++){
        const node = nodes[i];
        if (shared.isString(node)) push(node);
        else if (shared.isArray(node)) genNodeListAsArray(node, context);
        else genNode(node, context);
        if (i < nodes.length - 1) {
            if (multilines) {
                comma && push(',');
                newline();
            } else comma && push(', ');
        }
    }
}
function genNode(node, context) {
    if (shared.isString(node)) {
        context.push(node);
        return;
    }
    if (shared.isSymbol(node)) {
        context.push(context.helper(node));
        return;
    }
    switch(node.type){
        case 1:
        case 9:
        case 11:
            assert(node.codegenNode != null, `Codegen node is missing for element/if/for node. ` + `Apply appropriate transforms first.`);
            genNode(node.codegenNode, context);
            break;
        case 2:
            genText(node, context);
            break;
        case 4:
            genExpression(node, context);
            break;
        case 5:
            genInterpolation(node, context);
            break;
        case 12:
            genNode(node.codegenNode, context);
            break;
        case 8:
            genCompoundExpression(node, context);
            break;
        case 3:
            genComment(node, context);
            break;
        case 13:
            genVNodeCall(node, context);
            break;
        case 14:
            genCallExpression(node, context);
            break;
        case 15:
            genObjectExpression(node, context);
            break;
        case 17:
            genArrayExpression(node, context);
            break;
        case 18:
            genFunctionExpression(node, context);
            break;
        case 19:
            genConditionalExpression(node, context);
            break;
        case 20:
            genCacheExpression(node, context);
            break;
        // SSR only types
        case 21:
            genNodeList(node.body, context, true, false);
            break;
        case 22:
            genTemplateLiteral(node, context);
            break;
        case 23:
            genIfStatement(node, context);
            break;
        case 24:
            genAssignmentExpression(node, context);
            break;
        case 25:
            genSequenceExpression(node, context);
            break;
        case 26:
            genReturnStatement(node, context);
            break;
        /* istanbul ignore next */ case 10:
            break;
        default:
            {
                assert(false, `unhandled codegen node type: ${node.type}`);
                // make sure we exhaust all possible types
                const exhaustiveCheck = node;
                return exhaustiveCheck;
            }
    }
}
function genText(node, context) {
    context.push(JSON.stringify(node.content), node);
}
function genExpression(node, context) {
    const { content , isStatic  } = node;
    context.push(isStatic ? JSON.stringify(content) : content, node);
}
function genInterpolation(node, context) {
    const { push , helper , pure  } = context;
    if (pure) push(PURE_ANNOTATION);
    push(`${helper(TO_DISPLAY_STRING)}(`);
    genNode(node.content, context);
    push(`)`);
}
function genCompoundExpression(node, context) {
    for(let i = 0; i < node.children.length; i++){
        const child = node.children[i];
        if (shared.isString(child)) context.push(child);
        else genNode(child, context);
    }
}
function genExpressionAsPropertyKey(node, context) {
    const { push  } = context;
    if (node.type === 8) {
        push(`[`);
        genCompoundExpression(node, context);
        push(`]`);
    } else if (node.isStatic) {
        // only quote keys if necessary
        const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
        push(text, node);
    } else push(`[${node.content}]`, node);
}
function genComment(node, context) {
    const { push , helper , pure  } = context;
    if (pure) push(PURE_ANNOTATION);
    push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);
}
function genVNodeCall(node, context) {
    const { push , helper , pure  } = context;
    const { tag , props , children , patchFlag , dynamicProps , directives , isBlock , disableTracking  } = node;
    if (directives) push(helper(WITH_DIRECTIVES) + `(`);
    if (isBlock) push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
    if (pure) push(PURE_ANNOTATION);
    push(helper(isBlock ? CREATE_BLOCK : CREATE_VNODE) + `(`, node);
    genNodeList(genNullableArgs([
        tag,
        props,
        children,
        patchFlag,
        dynamicProps
    ]), context);
    push(`)`);
    if (isBlock) push(`)`);
    if (directives) {
        push(`, `);
        genNode(directives, context);
        push(`)`);
    }
}
function genNullableArgs(args) {
    let i = args.length;
    while(i--){
        if (args[i] != null) break;
    }
    return args.slice(0, i + 1).map((arg)=>arg || `null`
    );
}
// JavaScript
function genCallExpression(node, context) {
    const { push , helper , pure  } = context;
    const callee = shared.isString(node.callee) ? node.callee : helper(node.callee);
    if (pure) push(PURE_ANNOTATION);
    push(callee + `(`, node);
    genNodeList(node.arguments, context);
    push(`)`);
}
function genObjectExpression(node, context) {
    const { push , indent , deindent , newline  } = context;
    const { properties  } = node;
    if (!properties.length) {
        push(`{}`, node);
        return;
    }
    const multilines = properties.length > 1 || properties.some((p)=>p.value.type !== 4
    /* SIMPLE_EXPRESSION */ );
    push(multilines ? `{` : `{ `);
    multilines && indent();
    for(let i = 0; i < properties.length; i++){
        const { key , value  } = properties[i];
        // key
        genExpressionAsPropertyKey(key, context);
        push(`: `);
        // value
        genNode(value, context);
        if (i < properties.length - 1) {
            // will only reach this if it's multilines
            push(`,`);
            newline();
        }
    }
    multilines && deindent();
    push(multilines ? `}` : ` }`);
}
function genArrayExpression(node, context) {
    genNodeListAsArray(node.elements, context);
}
function genFunctionExpression(node, context) {
    const { push , indent , deindent , scopeId , mode  } = context;
    const { params , returns , body , newline , isSlot  } = node;
    // slot functions also need to push scopeId before rendering its content
    const genScopeId = isSlot && scopeId != null && mode !== 'function';
    if (isSlot) // wrap slot functions with owner context
    push(genScopeId ? `${WITH_ID}(` : `_${helperNameMap[WITH_CTX]}(`);
    push(`(`, node);
    if (shared.isArray(params)) genNodeList(params, context);
    else if (params) genNode(params, context);
    push(`) => `);
    if (newline || body) {
        push(`{`);
        indent();
    }
    if (returns) {
        if (newline) push(`return `);
        if (shared.isArray(returns)) genNodeListAsArray(returns, context);
        else genNode(returns, context);
    } else if (body) genNode(body, context);
    if (newline || body) {
        deindent();
        push(`}`);
    }
    if (isSlot) {
        if (node.isNonScopedSlot) push(`, undefined, true`);
        push(`)`);
    }
}
function genConditionalExpression(node, context) {
    const { test , consequent , alternate , newline: needNewline  } = node;
    const { push , indent , deindent , newline  } = context;
    if (test.type === 4) {
        const needsParens = !isSimpleIdentifier(test.content);
        needsParens && push(`(`);
        genExpression(test, context);
        needsParens && push(`)`);
    } else {
        push(`(`);
        genNode(test, context);
        push(`)`);
    }
    needNewline && indent();
    context.indentLevel++;
    needNewline || push(` `);
    push(`? `);
    genNode(consequent, context);
    context.indentLevel--;
    needNewline && newline();
    needNewline || push(` `);
    push(`: `);
    const isNested = alternate.type === 19/* JS_CONDITIONAL_EXPRESSION */ ;
    if (!isNested) context.indentLevel++;
    genNode(alternate, context);
    if (!isNested) context.indentLevel--;
    needNewline && deindent(true);
}
function genCacheExpression(node, context) {
    const { push , helper , indent , deindent , newline  } = context;
    push(`_cache[${node.index}] || (`);
    if (node.isVNode) {
        indent();
        push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
        newline();
    }
    push(`_cache[${node.index}] = `);
    genNode(node.value, context);
    if (node.isVNode) {
        push(`,`);
        newline();
        push(`${helper(SET_BLOCK_TRACKING)}(1),`);
        newline();
        push(`_cache[${node.index}]`);
        deindent();
    }
    push(`)`);
}
function genTemplateLiteral(node, context) {
    const { push , indent , deindent  } = context;
    push('`');
    const l = node.elements.length;
    const multilines = l > 3;
    for(let i = 0; i < l; i++){
        const e = node.elements[i];
        if (shared.isString(e)) push(e.replace(/(`|\$|\\)/g, '\\$1'));
        else {
            push('${');
            if (multilines) indent();
            genNode(e, context);
            if (multilines) deindent();
            push('}');
        }
    }
    push('`');
}
function genIfStatement(node, context) {
    const { push , indent , deindent  } = context;
    const { test , consequent , alternate  } = node;
    push(`if (`);
    genNode(test, context);
    push(`) {`);
    indent();
    genNode(consequent, context);
    deindent();
    push(`}`);
    if (alternate) {
        push(` else `);
        if (alternate.type === 23) genIfStatement(alternate, context);
        else {
            push(`{`);
            indent();
            genNode(alternate, context);
            deindent();
            push(`}`);
        }
    }
}
function genAssignmentExpression(node, context) {
    genNode(node.left, context);
    context.push(` = `);
    genNode(node.right, context);
}
function genSequenceExpression(node, context) {
    context.push(`(`);
    genNodeList(node.expressions, context);
    context.push(`)`);
}
function genReturnStatement({ returns  }, context) {
    context.push(`return `);
    if (shared.isArray(returns)) genNodeListAsArray(returns, context);
    else genNode(returns, context);
}
const isLiteralWhitelisted = /*#__PURE__*/ shared.makeMap('true,false,null,this');
const transformExpression = (node, context)=>{
    if (node.type === 5) node.content = processExpression(node.content, context);
    else if (node.type === 1) // handle directives on element
    for(let i = 0; i < node.props.length; i++){
        const dir = node.props[i];
        // do not process for v-on & v-for since they are special handled
        if (dir.type === 7 && dir.name !== 'for') {
            const exp = dir.exp;
            const arg = dir.arg;
            // do not process exp if this is v-on:arg - we need special handling
            // for wrapping inline statements.
            if (exp && exp.type === 4 && !(dir.name === 'on' && arg)) dir.exp = processExpression(exp, context, // slot args must be processed as function params
            dir.name === 'slot');
            if (arg && arg.type === 4 && !arg.isStatic) dir.arg = processExpression(arg, context);
        }
    }
};
// Important: since this function uses Node.js only dependencies, it should
// always be used with a leading !false check so that it can be
// tree-shaken from the browser build.
function processExpression(node1, context, // some expressions like v-slot props & v-for aliases should be parsed as
// function params
asParams = false, // v-on handler values may contain multiple statements
asRawStatements = false) {
    if (!context.prefixIdentifiers || !node1.content.trim()) return node1;
    const { inline , bindingMetadata  } = context;
    const rewriteIdentifier = (raw, parent, id)=>{
        const type = shared.hasOwn(bindingMetadata, raw) && bindingMetadata[raw];
        if (inline) {
            // x = y
            const isAssignmentLVal = parent && parent.type === 'AssignmentExpression' && parent.left === id;
            // x++
            const isUpdateArg = parent && parent.type === 'UpdateExpression' && parent.argument === id;
            // ({ x } = y)
            const isDestructureAssignment = parent && isInDestructureAssignment(parent, parentStack);
            if (type === "setup-const") return raw;
            else if (type === "setup-ref") return `${raw}.value`;
            else if (type === "setup-maybe-ref") // const binding that may or may not be ref
            // if it's not a ref, then assignments don't make sense -
            // so we ignore the non-ref assignment case and generate code
            // that assumes the value to be a ref for more efficiency
            return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : `${context.helperString(UNREF)}(${raw})`;
            else if (type === "setup-let") {
                if (isAssignmentLVal) {
                    // let binding.
                    // this is a bit more tricky as we need to cover the case where
                    // let is a local non-ref value, and we need to replicate the
                    // right hand side value.
                    // x = y --> isRef(x) ? x.value = y : x = y
                    const { right: rVal , operator  } = parent;
                    const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);
                    const rExpString = stringifyExpression(processExpression(createSimpleExpression(rExp, false), context));
                    return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore\n` : ``} ? ${raw}.value ${operator} ${rExpString} : ${raw}`;
                } else if (isUpdateArg) {
                    // make id replace parent in the code range so the raw update operator
                    // is removed
                    id.start = parent.start;
                    id.end = parent.end;
                    const { prefix: isPrefix , operator  } = parent;
                    const prefix = isPrefix ? operator : ``;
                    const postfix = isPrefix ? `` : operator;
                    // let binding.
                    // x++ --> isRef(a) ? a.value++ : a++
                    return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore\n` : ``} ? ${prefix}${raw}.value${postfix} : ${prefix}${raw}${postfix}`;
                } else if (isDestructureAssignment) // TODO
                // let binding in a destructure assignment - it's very tricky to
                // handle both possible cases here without altering the original
                // structure of the code, so we just assume it's not a ref here
                // for now
                return raw;
                else return `${context.helperString(UNREF)}(${raw})`;
            } else if (type === "props") // use __props which is generated by compileScript so in ts mode
            // it gets correct type
            return `__props.${raw}`;
        } else {
            if (type && type.startsWith('setup')) // setup bindings in non-inline mode
            return `$setup.${raw}`;
            else if (type) return `$${type}.${raw}`;
        }
        // fallback to ctx
        return `_ctx.${raw}`;
    };
    // fast path if expression is a simple identifier.
    const rawExp = node1.content;
    // bail constant on parens (function invocation) and dot (member access)
    const bailConstant = rawExp.indexOf(`(`) > -1 || rawExp.indexOf('.') > 0;
    if (isSimpleIdentifier(rawExp)) {
        const isScopeVarReference = context.identifiers[rawExp];
        const isAllowedGlobal = shared.isGloballyWhitelisted(rawExp);
        const isLiteral = isLiteralWhitelisted(rawExp);
        if (!asParams && !isScopeVarReference && !isAllowedGlobal && !isLiteral) {
            // const bindings exposed from setup can be skipped for patching but
            // cannot be hoisted to module scope
            if (bindingMetadata[node1.content] === "setup-const") node1.constType = 1;
            node1.content = rewriteIdentifier(rawExp);
        } else if (!isScopeVarReference) {
            if (isLiteral) node1.constType = 3;
            else node1.constType = 2;
        }
        return node1;
    }
    let ast;
    // exp needs to be parsed differently:
    // 1. Multiple inline statements (v-on, with presence of `;`): parse as raw
    //    exp, but make sure to pad with spaces for consistent ranges
    // 2. Expressions: wrap with parens (for e.g. object expressions)
    // 3. Function arguments (v-for, v-slot): place in a function argument position
    const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;
    try {
        ast = parser.parse(source, {
            plugins: [
                ...context.expressionPlugins,
                ...shared.babelParserDefaultPlugins
            ]
        }).program;
    } catch (e) {
        context.onError(createCompilerError(43/* X_INVALID_EXPRESSION */ , node1.loc, undefined, e.message));
        return node1;
    }
    const ids = [];
    const knownIds = Object.create(context.identifiers);
    const isDuplicate = (node1)=>ids.some((id)=>id.start === node1.start
        )
    ;
    const parentStack = [];
    estreeWalker.walk(ast, {
        enter (node, parent) {
            parent && parentStack.push(parent);
            if (node.type === 'Identifier') {
                if (!isDuplicate(node)) {
                    // v2 wrapped filter call
                    if (node.name.startsWith('_filter_')) return;
                    const needPrefix = shouldPrefix(node, parent, parentStack);
                    if (!knownIds[node.name] && needPrefix) {
                        if (isStaticProperty(parent) && parent.shorthand) // property shorthand like { foo }, we need to add the key since
                        // we rewrite the value
                        node.prefix = `${node.name}: `;
                        node.name = rewriteIdentifier(node.name, parent, node);
                        ids.push(node);
                    } else if (!isStaticPropertyKey(node, parent)) {
                        // The identifier is considered constant unless it's pointing to a
                        // scope variable (a v-for alias, or a v-slot prop)
                        if (!(needPrefix && knownIds[node.name]) && !bailConstant) node.isConstant = true;
                        // also generate sub-expressions for other identifiers for better
                        // source map support. (except for property keys which are static)
                        ids.push(node);
                    }
                }
            } else if (isFunction(node)) // walk function expressions and add its arguments to known identifiers
            // so that we don't prefix them
            node.params.forEach((p)=>estreeWalker.walk(p, {
                    enter (child, parent) {
                        if (child.type === 'Identifier' && // do not record as scope variable if is a destructured key
                        !isStaticPropertyKey(child, parent) && // do not record if this is a default value
                        // assignment of a destructured variable
                        !(parent && parent.type === 'AssignmentPattern' && parent.right === child)) {
                            const { name  } = child;
                            if (node.scopeIds && node.scopeIds.has(name)) return;
                            if (name in knownIds) knownIds[name]++;
                            else knownIds[name] = 1;
                            (node.scopeIds || (node.scopeIds = new Set())).add(name);
                        }
                    }
                })
            );
        },
        leave (node, parent) {
            parent && parentStack.pop();
            if (node !== ast.body[0].expression && node.scopeIds) node.scopeIds.forEach((id)=>{
                knownIds[id]--;
                if (knownIds[id] === 0) delete knownIds[id];
            });
        }
    });
    // We break up the compound expression into an array of strings and sub
    // expressions (for identifiers that have been prefixed). In codegen, if
    // an ExpressionNode has the `.children` property, it will be used instead of
    // `.content`.
    const children = [];
    ids.sort((a, b)=>a.start - b.start
    );
    ids.forEach((id, i)=>{
        // range is offset by -1 due to the wrapping parens when parsed
        const start = id.start - 1;
        const end = id.end - 1;
        const last1 = ids[i - 1];
        const leadingText = rawExp.slice(last1 ? last1.end - 1 : 0, start);
        if (leadingText.length || id.prefix) children.push(leadingText + (id.prefix || ``));
        const source1 = rawExp.slice(start, end);
        children.push(createSimpleExpression(id.name, false, {
            source: source1,
            start: advancePositionWithClone(node1.loc.start, source1, start),
            end: advancePositionWithClone(node1.loc.start, source1, end)
        }, id.isConstant ? 3 : 0/* NOT_CONSTANT */ ));
        if (i === ids.length - 1 && end < rawExp.length) children.push(rawExp.slice(end));
    });
    let ret;
    if (children.length) ret = createCompoundExpression(children, node1.loc);
    else {
        ret = node1;
        ret.constType = bailConstant ? 0 : 3;
    }
    ret.identifiers = Object.keys(knownIds);
    return ret;
}
const isFunction = (node)=>{
    return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
};
const isStaticProperty = (node)=>node && (node.type === 'ObjectProperty' || node.type === 'ObjectMethod') && !node.computed
;
const isStaticPropertyKey = (node, parent)=>isStaticProperty(parent) && parent.key === node
;
function shouldPrefix(id, parent, parentStack) {
    // declaration id
    if ((parent.type === 'VariableDeclarator' || parent.type === 'ClassDeclaration') && parent.id === id) return false;
    if (isFunction(parent)) {
        // function decalration/expression id
        if (parent.id === id) return false;
        // params list
        if (parent.params.includes(id)) return false;
    }
    // property key
    // this also covers object destructure pattern
    if (isStaticPropertyKey(id, parent)) return false;
    // non-assignment array destructure pattern
    if (parent.type === 'ArrayPattern' && !isInDestructureAssignment(parent, parentStack)) return false;
    // member expression property
    if ((parent.type === 'MemberExpression' || parent.type === 'OptionalMemberExpression') && parent.property === id && !parent.computed) return false;
    // is a special keyword but parsed as identifier
    if (id.name === 'arguments') return false;
    // skip whitelisted globals
    if (shared.isGloballyWhitelisted(id.name)) return false;
    // special case for webpack compilation
    if (id.name === 'require') return false;
    return true;
}
function isInDestructureAssignment(parent, parentStack) {
    if (parent && (parent.type === 'ObjectProperty' || parent.type === 'ArrayPattern')) {
        let i = parentStack.length;
        while(i--){
            const p = parentStack[i];
            if (p.type === 'AssignmentExpression') return true;
            else if (p.type !== 'ObjectProperty' && !p.type.endsWith('Pattern')) break;
        }
    }
    return false;
}
function stringifyExpression(exp) {
    if (shared.isString(exp)) return exp;
    else if (exp.type === 4) return exp.content;
    else return exp.children.map(stringifyExpression).join('');
}
const transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context)=>{
    return processIf(node, dir, context, (ifNode, branch, isRoot)=>{
        // #1587: We need to dynamically increment the key based on the current
        // node's sibling nodes, since chained v-if/else branches are
        // rendered at the same depth
        const siblings = context.parent.children;
        let i = siblings.indexOf(ifNode);
        let key = 0;
        while((i--) >= 0){
            const sibling = siblings[i];
            if (sibling && sibling.type === 9) key += sibling.branches.length;
        }
        // Exit callback. Complete the codegenNode when all children have been
        // transformed.
        return ()=>{
            if (isRoot) ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);
            else {
                // attach this branch's codegen node to the v-if root.
                const parentCondition = getParentCondition(ifNode.codegenNode);
                parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);
            }
        };
    });
});
// target-agnostic transform used for both Client and SSR
function processIf(node, dir, context, processCodegen) {
    if (dir.name !== 'else' && (!dir.exp || !dir.exp.content.trim())) {
        const loc = dir.exp ? dir.exp.loc : node.loc;
        context.onError(createCompilerError(27/* X_V_IF_NO_EXPRESSION */ , dir.loc));
        dir.exp = createSimpleExpression(`true`, false, loc);
    }
    if (context.prefixIdentifiers && dir.exp) // dir.exp can only be simple expression because vIf transform is applied
    // before expression transform.
    dir.exp = processExpression(dir.exp, context);
    if (dir.name === 'if') {
        const branch = createIfBranch(node, dir);
        const ifNode = {
            type: 9,
            loc: node.loc,
            branches: [
                branch
            ]
        };
        context.replaceNode(ifNode);
        if (processCodegen) return processCodegen(ifNode, branch, true);
    } else {
        // locate the adjacent v-if
        const siblings = context.parent.children;
        const comments = [];
        let i = siblings.indexOf(node);
        while((i--) >= -1){
            const sibling = siblings[i];
            if (sibling && sibling.type === 3) {
                context.removeNode(sibling);
                comments.unshift(sibling);
                continue;
            }
            if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
                context.removeNode(sibling);
                continue;
            }
            if (sibling && sibling.type === 9) {
                // move the node to the if node's branches
                context.removeNode();
                const branch = createIfBranch(node, dir);
                if (comments.length && // #3619 ignore comments if the v-if is direct child of <transition>
                !(context.parent && context.parent.type === 1 && isBuiltInType(context.parent.tag, 'transition'))) branch.children = [
                    ...comments,
                    ...branch.children
                ];
                // check if user is forcing same key on different branches
                {
                    const key = branch.userKey;
                    if (key) sibling.branches.forEach(({ userKey  })=>{
                        if (isSameKey(userKey, key)) context.onError(createCompilerError(28/* X_V_IF_SAME_KEY */ , branch.userKey.loc));
                    });
                }
                sibling.branches.push(branch);
                const onExit = processCodegen && processCodegen(sibling, branch, false);
                // since the branch was removed, it will not be traversed.
                // make sure to traverse here.
                traverseNode(branch, context);
                // call on exit
                if (onExit) onExit();
                // make sure to reset currentNode after traversal to indicate this
                // node has been removed.
                context.currentNode = null;
            } else context.onError(createCompilerError(29/* X_V_ELSE_NO_ADJACENT_IF */ , node.loc));
            break;
        }
    }
}
function createIfBranch(node, dir) {
    return {
        type: 10,
        loc: node.loc,
        condition: dir.name === 'else' ? undefined : dir.exp,
        children: node.tagType === 3 && !findDir(node, 'for') ? node.children : [
            node
        ],
        userKey: findProp(node, `key`)
    };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
    if (branch.condition) return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, keyIndex, context), // make sure to pass in asBlock: true so that the comment node call
    // closes the current block.
    createCallExpression(context.helper(CREATE_COMMENT), [
        '"v-if"',
        'true'
    ]));
    else return createChildrenCodegenNode(branch, keyIndex, context);
}
function createChildrenCodegenNode(branch, keyIndex, context) {
    const { helper , removeHelper  } = context;
    const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2/* CAN_HOIST */ ));
    const { children  } = branch;
    const firstChild = children[0];
    const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1/* ELEMENT */ ;
    if (needFragmentWrapper) {
        if (children.length === 1 && firstChild.type === 11) {
            // optimize away nested fragments when child is a ForNode
            const vnodeCall = firstChild.codegenNode;
            injectProp(vnodeCall, keyProperty, context);
            return vnodeCall;
        } else {
            let patchFlag = 64/* STABLE_FRAGMENT */ ;
            let patchFlagText = shared.PatchFlagNames[64];
            // check if the fragment actually contains a single valid child with
            // the rest being comments
            if (children.filter((c)=>c.type !== 3
            /* COMMENT */ ).length === 1) {
                patchFlag |= 2048;
                patchFlagText += `, ${shared.PatchFlagNames[2048]}`;
            }
            return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([
                keyProperty
            ]), children, patchFlag + ` /* ${patchFlagText} */`, undefined, undefined, true, false, branch.loc);
        }
    } else {
        const vnodeCall = firstChild.codegenNode;
        // Change createVNode to createBlock.
        if (vnodeCall.type === 13 && !vnodeCall.isBlock) {
            removeHelper(CREATE_VNODE);
            vnodeCall.isBlock = true;
            helper(OPEN_BLOCK);
            helper(CREATE_BLOCK);
        }
        // inject branch key
        injectProp(vnodeCall, keyProperty, context);
        return vnodeCall;
    }
}
function isSameKey(a, b) {
    if (!a || a.type !== b.type) return false;
    if (a.type === 6) {
        if (a.value.content !== b.value.content) return false;
    } else {
        // directive
        const exp = a.exp;
        const branchExp = b.exp;
        if (exp.type !== branchExp.type) return false;
        if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) return false;
    }
    return true;
}
function getParentCondition(node) {
    while(true){
        if (node.type === 19) {
            if (node.alternate.type === 19) node = node.alternate;
            else return node;
        } else if (node.type === 20) node = node.value;
    }
}
const transformFor = createStructuralDirectiveTransform('for', (node, dir, context)=>{
    const { helper , removeHelper  } = context;
    return processFor(node, dir, context, (forNode)=>{
        // create the loop render function expression now, and add the
        // iterator on exit after all children have been traversed
        const renderExp = createCallExpression(helper(RENDER_LIST), [
            forNode.source
        ]);
        const keyProp = findProp(node, `key`);
        const keyProperty = keyProp ? createObjectProperty(`key`, keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp) : null;
        if (context.prefixIdentifiers && keyProperty) // #2085 process :key expression needs to be processed in order for it
        // to behave consistently for <template v-for> and <div v-for>.
        // In the case of `<template v-for>`, the node is discarded and never
        // traversed so its key expression won't be processed by the normal
        // transforms.
        keyProperty.value = processExpression(keyProperty.value, context);
        const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0/* NOT_CONSTANT */ ;
        const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256/* UNKEYED_FRAGMENT */ ;
        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, renderExp, fragmentFlag + ` /* ${shared.PatchFlagNames[fragmentFlag]} */`, undefined, undefined, true, !isStableFragment/* disableTracking */ , node.loc);
        return ()=>{
            // finish the codegen now that all children have been traversed
            let childBlock;
            const isTemplate = isTemplateNode(node);
            const { children  } = forNode;
            // check <template v-for> key placement
            if (isTemplate) node.children.some((c)=>{
                if (c.type === 1) {
                    const key = findProp(c, 'key');
                    if (key) {
                        context.onError(createCompilerError(32/* X_V_FOR_TEMPLATE_KEY_PLACEMENT */ , key.loc));
                        return true;
                    }
                }
            });
            const needFragmentWrapper = children.length !== 1 || children[0].type !== 1/* ELEMENT */ ;
            const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
            if (slotOutlet) {
                // <slot v-for="..."> or <template v-for="..."><slot/></template>
                childBlock = slotOutlet.codegenNode;
                if (isTemplate && keyProperty) // <template v-for="..." :key="..."><slot/></template>
                // we need to inject the key to the renderSlot() call.
                // the props for renderSlot is passed as the 3rd argument.
                injectProp(childBlock, keyProperty, context);
            } else if (needFragmentWrapper) // <template v-for="..."> with text or multi-elements
            // should generate a fragment block for each loop
            childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([
                keyProperty
            ]) : undefined, node.children, 64 + ` /* ${shared.PatchFlagNames[64]} */`, undefined, undefined, true);
            else {
                // Normal element v-for. Directly use the child's codegenNode
                // but mark it as a block.
                childBlock = children[0].codegenNode;
                if (isTemplate && keyProperty) injectProp(childBlock, keyProperty, context);
                if (childBlock.isBlock !== !isStableFragment) {
                    if (childBlock.isBlock) {
                        // switch from block to vnode
                        removeHelper(OPEN_BLOCK);
                        removeHelper(CREATE_BLOCK);
                    } else // switch from vnode to block
                    removeHelper(CREATE_VNODE);
                }
                childBlock.isBlock = !isStableFragment;
                if (childBlock.isBlock) {
                    helper(OPEN_BLOCK);
                    helper(CREATE_BLOCK);
                } else helper(CREATE_VNODE);
            }
            renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true));
        };
    });
});
// target-agnostic transform used for both Client and SSR
function processFor(node, dir, context, processCodegen) {
    if (!dir.exp) {
        context.onError(createCompilerError(30/* X_V_FOR_NO_EXPRESSION */ , dir.loc));
        return;
    }
    const parseResult = parseForExpression(// can only be simple expression because vFor transform is applied
    // before expression transform.
    dir.exp, context);
    if (!parseResult) {
        context.onError(createCompilerError(31/* X_V_FOR_MALFORMED_EXPRESSION */ , dir.loc));
        return;
    }
    const { addIdentifiers , removeIdentifiers , scopes  } = context;
    const { source , value , key , index  } = parseResult;
    const forNode = {
        type: 11,
        loc: dir.loc,
        source,
        valueAlias: value,
        keyAlias: key,
        objectIndexAlias: index,
        parseResult,
        children: isTemplateNode(node) ? node.children : [
            node
        ]
    };
    context.replaceNode(forNode);
    // bookkeeping
    scopes.vFor++;
    if (context.prefixIdentifiers) {
        // scope management
        // inject identifiers to context
        value && addIdentifiers(value);
        key && addIdentifiers(key);
        index && addIdentifiers(index);
    }
    const onExit = processCodegen && processCodegen(forNode);
    return ()=>{
        scopes.vFor--;
        if (context.prefixIdentifiers) {
            value && removeIdentifiers(value);
            key && removeIdentifiers(key);
            index && removeIdentifiers(index);
        }
        if (onExit) onExit();
    };
}
const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
// This regex doesn't cover the case if key or index aliases have destructuring,
// but those do not make sense in the first place, so this works in practice.
const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
const stripParensRE = /^\(|\)$/g;
function parseForExpression(input, context) {
    const loc = input.loc;
    const exp = input.content;
    const inMatch = exp.match(forAliasRE);
    if (!inMatch) return;
    const [, LHS, RHS] = inMatch;
    const result = {
        source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),
        value: undefined,
        key: undefined,
        index: undefined
    };
    if (context.prefixIdentifiers) result.source = processExpression(result.source, context);
    let valueContent = LHS.trim().replace(stripParensRE, '').trim();
    const trimmedOffset = LHS.indexOf(valueContent);
    const iteratorMatch = valueContent.match(forIteratorRE);
    if (iteratorMatch) {
        valueContent = valueContent.replace(forIteratorRE, '').trim();
        const keyContent = iteratorMatch[1].trim();
        let keyOffset;
        if (keyContent) {
            keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
            result.key = createAliasExpression(loc, keyContent, keyOffset);
            if (context.prefixIdentifiers) result.key = processExpression(result.key, context, true);
        }
        if (iteratorMatch[2]) {
            const indexContent = iteratorMatch[2].trim();
            if (indexContent) {
                result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));
                if (context.prefixIdentifiers) result.index = processExpression(result.index, context, true);
            }
        }
    }
    if (valueContent) {
        result.value = createAliasExpression(loc, valueContent, trimmedOffset);
        if (context.prefixIdentifiers) result.value = processExpression(result.value, context, true);
    }
    return result;
}
function createAliasExpression(range, content, offset) {
    return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));
}
function createForLoopParams({ value , key , index  }) {
    const params = [];
    if (value) params.push(value);
    if (key) {
        if (!value) params.push(createSimpleExpression(`_`, false));
        params.push(key);
    }
    if (index) {
        if (!key) {
            if (!value) params.push(createSimpleExpression(`_`, false));
            params.push(createSimpleExpression(`__`, false));
        }
        params.push(index);
    }
    return params;
}
const defaultFallback = createSimpleExpression(`undefined`, false);
// A NodeTransform that:
// 1. Tracks scope identifiers for scoped slots so that they don't get prefixed
//    by transformExpression. This is only applied in non-browser builds with
//    { prefixIdentifiers: true }.
// 2. Track v-slot depths so that we know a slot is inside another slot.
//    Note the exit callback is executed before buildSlots() on the same node,
//    so only nested slots see positive numbers.
const trackSlotScopes = (node, context)=>{
    if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
        // We are only checking non-empty v-slot here
        // since we only care about slots that introduce scope variables.
        const vSlot = findDir(node, 'slot');
        if (vSlot) {
            const slotProps = vSlot.exp;
            if (context.prefixIdentifiers) slotProps && context.addIdentifiers(slotProps);
            context.scopes.vSlot++;
            return ()=>{
                if (context.prefixIdentifiers) slotProps && context.removeIdentifiers(slotProps);
                context.scopes.vSlot--;
            };
        }
    }
};
// A NodeTransform that tracks scope identifiers for scoped slots with v-for.
// This transform is only applied in non-browser builds with { prefixIdentifiers: true }
const trackVForSlotScopes = (node, context)=>{
    let vFor;
    if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, 'for'))) {
        const result = vFor.parseResult = parseForExpression(vFor.exp, context);
        if (result) {
            const { value , key , index  } = result;
            const { addIdentifiers , removeIdentifiers  } = context;
            value && addIdentifiers(value);
            key && addIdentifiers(key);
            index && addIdentifiers(index);
            return ()=>{
                value && removeIdentifiers(value);
                key && removeIdentifiers(key);
                index && removeIdentifiers(index);
            };
        }
    }
};
const buildClientSlotFn = (props, children, loc)=>createFunctionExpression(props, children, false, true, children.length ? children[0].loc : loc)
;
// Instead of being a DirectiveTransform, v-slot processing is called during
// transformElement to build the slots object for a component.
function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
    context.helper(WITH_CTX);
    const { children , loc  } = node;
    const slotsProperties = [];
    const dynamicSlots = [];
    // If the slot is inside a v-for or another v-slot, force it to be dynamic
    // since it likely uses a scope variable.
    let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
    // with `prefixIdentifiers: true`, this can be further optimized to make
    // it dynamic only when the slot actually uses the scope variables.
    if (!context.ssr && context.prefixIdentifiers) hasDynamicSlots = hasScopeRef(node, context.identifiers);
    // 1. Check for slot with slotProps on component itself.
    //    <Comp v-slot="{ prop }"/>
    const onComponentSlot = findDir(node, 'slot', true);
    if (onComponentSlot) {
        const { arg , exp  } = onComponentSlot;
        if (arg && !isStaticExp(arg)) hasDynamicSlots = true;
        slotsProperties.push(createObjectProperty(arg || createSimpleExpression('default', true), buildSlotFn(exp, children, loc)));
    }
    // 2. Iterate through children and check for template slots
    //    <template v-slot:foo="{ prop }">
    let hasTemplateSlots = false;
    let hasNamedDefaultSlot = false;
    const implicitDefaultChildren = [];
    const seenSlotNames = new Set();
    for(let i = 0; i < children.length; i++){
        const slotElement = children[i];
        let slotDir;
        if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, 'slot', true))) {
            // not a <template v-slot>, skip.
            if (slotElement.type !== 3) implicitDefaultChildren.push(slotElement);
            continue;
        }
        if (onComponentSlot) {
            // already has on-component slot - this is incorrect usage.
            context.onError(createCompilerError(36/* X_V_SLOT_MIXED_SLOT_USAGE */ , slotDir.loc));
            break;
        }
        hasTemplateSlots = true;
        const { children: slotChildren , loc: slotLoc  } = slotElement;
        const { arg: slotName = createSimpleExpression(`default`, true) , exp: slotProps , loc: dirLoc  } = slotDir;
        // check if name is dynamic.
        let staticSlotName;
        if (isStaticExp(slotName)) staticSlotName = slotName ? slotName.content : `default`;
        else hasDynamicSlots = true;
        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
        // check if this slot is conditional (v-if/v-for)
        let vIf;
        let vElse;
        let vFor;
        if (vIf = findDir(slotElement, 'if')) {
            hasDynamicSlots = true;
            dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));
        } else if (vElse = findDir(slotElement, /^else(-if)?$/, true)) {
            // find adjacent v-if
            let j = i;
            let prev;
            while(j--){
                prev = children[j];
                if (prev.type !== 3) break;
            }
            if (prev && isTemplateNode(prev) && findDir(prev, 'if')) {
                // remove node
                children.splice(i, 1);
                i--;
                // attach this slot to previous conditional
                let conditional = dynamicSlots[dynamicSlots.length - 1];
                while(conditional.alternate.type === 19)conditional = conditional.alternate;
                conditional.alternate = vElse.exp ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback) : buildDynamicSlot(slotName, slotFunction);
            } else context.onError(createCompilerError(29/* X_V_ELSE_NO_ADJACENT_IF */ , vElse.loc));
        } else if (vFor = findDir(slotElement, 'for')) {
            hasDynamicSlots = true;
            const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
            if (parseResult) // Render the dynamic slots as an array and add it to the createSlot()
            // args. The runtime knows how to handle it appropriately.
            dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [
                parseResult.source,
                createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true)
            ]));
            else context.onError(createCompilerError(31/* X_V_FOR_MALFORMED_EXPRESSION */ , vFor.loc));
        } else {
            // check duplicate static names
            if (staticSlotName) {
                if (seenSlotNames.has(staticSlotName)) {
                    context.onError(createCompilerError(37/* X_V_SLOT_DUPLICATE_SLOT_NAMES */ , dirLoc));
                    continue;
                }
                seenSlotNames.add(staticSlotName);
                if (staticSlotName === 'default') hasNamedDefaultSlot = true;
            }
            slotsProperties.push(createObjectProperty(slotName, slotFunction));
        }
    }
    if (!onComponentSlot) {
        const buildDefaultSlotProperty = (props, children1)=>{
            const fn = buildSlotFn(props, children1, loc);
            if (context.compatConfig) fn.isNonScopedSlot = true;
            return createObjectProperty(`default`, fn);
        };
        if (!hasTemplateSlots) // implicit default slot (on component)
        slotsProperties.push(buildDefaultSlotProperty(undefined, children));
        else if (implicitDefaultChildren.length && // #3766
        // with whitespace: 'preserve', whitespaces between slots will end up in
        // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
        implicitDefaultChildren.some((node1)=>isNonWhitespaceContent(node1)
        )) {
            // implicit default slot (mixed with named slots)
            if (hasNamedDefaultSlot) context.onError(createCompilerError(38/* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */ , implicitDefaultChildren[0].loc));
            else slotsProperties.push(buildDefaultSlotProperty(undefined, implicitDefaultChildren));
        }
    }
    const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1/* STABLE */ ;
    let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(`_`, // 2 = compiled but dynamic = can skip normalization, but must run diff
    // 1 = compiled and static = can skip normalization AND diff as optimized
    createSimpleExpression(slotFlag + ` /* ${shared.slotFlagsText[slotFlag]} */`, false))), loc);
    if (dynamicSlots.length) slots = createCallExpression(context.helper(CREATE_SLOTS), [
        slots,
        createArrayExpression(dynamicSlots)
    ]);
    return {
        slots,
        hasDynamicSlots
    };
}
function buildDynamicSlot(name, fn) {
    return createObjectExpression([
        createObjectProperty(`name`, name),
        createObjectProperty(`fn`, fn)
    ]);
}
function hasForwardedSlots(children) {
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        switch(child.type){
            case 1:
                if (child.tagType === 2 || child.tagType === 0 && hasForwardedSlots(child.children)) return true;
                break;
            case 9:
                if (hasForwardedSlots(child.branches)) return true;
                break;
            case 10:
            case 11:
                if (hasForwardedSlots(child.children)) return true;
                break;
        }
    }
    return false;
}
function isNonWhitespaceContent(node) {
    if (node.type !== 2 && node.type !== 12) return true;
    return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
}
// some directive transforms (e.g. v-model) may return a symbol for runtime
// import, which should be used instead of a resolveDirective call.
const directiveImportMap = new WeakMap();
// generate a JavaScript AST for this element's codegen
const transformElement = (node, context)=>{
    // perform the work on exit, after all child expressions have been
    // processed and merged.
    return function postTransformElement() {
        node = context.currentNode;
        if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) return;
        const { tag , props  } = node;
        const isComponent = node.tagType === 1/* COMPONENT */ ;
        // The goal of the transform is to create a codegenNode implementing the
        // VNodeCall interface.
        let vnodeTag = isComponent ? resolveComponentType(node, context) : `"${tag}"`;
        const isDynamicComponent = shared.isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = // dynamic component may resolve to plain elements
        isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent && (tag === 'svg' || tag === 'foreignObject' || // #938: elements with dynamic keys should be forced into blocks
        findProp(node, 'key', true));
        // props
        if (props.length > 0) {
            const propsBuildResult = buildProps(node, context);
            vnodeProps = propsBuildResult.props;
            patchFlag = propsBuildResult.patchFlag;
            dynamicPropNames = propsBuildResult.dynamicPropNames;
            const directives = propsBuildResult.directives;
            vnodeDirectives = directives && directives.length ? createArrayExpression(directives.map((dir)=>buildDirectiveArgs(dir, context)
            )) : undefined;
        }
        // children
        if (node.children.length > 0) {
            if (vnodeTag === KEEP_ALIVE) {
                // Although a built-in component, we compile KeepAlive with raw children
                // instead of slot functions so that it can be used inside Transition
                // or other Transition-wrapping HOCs.
                // To ensure correct updates with block optimizations, we need to:
                // 1. Force keep-alive into a block. This avoids its children being
                //    collected by a parent block.
                shouldUseBlock = true;
                // 2. Force keep-alive to always be updated, since it uses raw children.
                patchFlag |= 1024;
                if (node.children.length > 1) context.onError(createCompilerError(44/* X_KEEP_ALIVE_INVALID_CHILDREN */ , {
                    start: node.children[0].loc.start,
                    end: node.children[node.children.length - 1].loc.end,
                    source: ''
                }));
            }
            const shouldBuildAsSlots = isComponent && // Teleport is not a real component and has dedicated runtime handling
            vnodeTag !== TELEPORT && // explained above.
            vnodeTag !== KEEP_ALIVE;
            if (shouldBuildAsSlots) {
                const { slots , hasDynamicSlots  } = buildSlots(node, context);
                vnodeChildren = slots;
                if (hasDynamicSlots) patchFlag |= 1024;
            } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
                const child = node.children[0];
                const type = child.type;
                // check for dynamic text children
                const hasDynamicTextChild = type === 5 || type === 8/* COMPOUND_EXPRESSION */ ;
                if (hasDynamicTextChild && getConstantType(child, context) === 0) patchFlag |= 1;
                // pass directly if the only child is a text node
                // (plain / interpolation / expression)
                if (hasDynamicTextChild || type === 2) vnodeChildren = child;
                else vnodeChildren = node.children;
            } else vnodeChildren = node.children;
        }
        // patchFlag & dynamicPropNames
        if (patchFlag !== 0) {
            if (patchFlag < 0) // special flags (negative and mutually exclusive)
            vnodePatchFlag = patchFlag + ` /* ${shared.PatchFlagNames[patchFlag]} */`;
            else {
                // bitwise flags
                const flagNames = Object.keys(shared.PatchFlagNames).map(Number).filter((n)=>n > 0 && patchFlag & n
                ).map((n)=>shared.PatchFlagNames[n]
                ).join(`, `);
                vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
            }
            if (dynamicPropNames && dynamicPropNames.length) vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
        }
        node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false, node.loc);
    };
};
function resolveComponentType(node, context, ssr = false) {
    let { tag  } = node;
    // 1. dynamic component
    const isExplicitDynamic = isComponentTag(tag);
    const isProp = findProp(node, 'is') || !isExplicitDynamic && findDir(node, 'is');
    if (isProp) {
        if (!isExplicitDynamic && isProp.type === 6) // <button is="vue:xxx">
        // if not <component>, only is value that starts with "vue:" will be
        // treated as component by the parse phase and reach here, unless it's
        // compat mode where all is values are considered components
        tag = isProp.value.content.replace(/^vue:/, '');
        else {
            const exp = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
            if (exp) return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
                exp
            ]);
        }
    }
    // 2. built-in components (Teleport, Transition, KeepAlive, Suspense...)
    const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
    if (builtIn) {
        // built-ins are simply fallthroughs / have special handling during ssr
        // so we don't need to import their runtime equivalents
        if (!ssr) context.helper(builtIn);
        return builtIn;
    }
    // 3. user component (from setup bindings)
    // this is skipped in browser build since browser builds do not perform
    // binding analysis.
    {
        const fromSetup = resolveSetupReference(tag, context);
        if (fromSetup) return fromSetup;
    }
    // 4. Self referencing component (inferred from filename)
    if (context.selfName && shared.capitalize(shared.camelize(tag)) === context.selfName) {
        context.helper(RESOLVE_COMPONENT);
        // codegen.ts has special check for __self postfix when generating
        // component imports, which will pass additional `maybeSelfReference` flag
        // to `resolveComponent`.
        context.components.add(tag + `__self`);
        return toValidAssetId(tag, `component`);
    }
    // 5. user component (resolve)
    context.helper(RESOLVE_COMPONENT);
    context.components.add(tag);
    return toValidAssetId(tag, `component`);
}
function resolveSetupReference(name, context) {
    const bindings = context.bindingMetadata;
    if (!bindings || bindings.__isScriptSetup === false) return;
    const camelName = shared.camelize(name);
    const PascalName = shared.capitalize(camelName);
    const checkType = (type)=>{
        if (bindings[name] === type) return name;
        if (bindings[camelName] === type) return camelName;
        if (bindings[PascalName] === type) return PascalName;
    };
    const fromConst = checkType("setup-const"/* SETUP_CONST */ );
    if (fromConst) return context.inline ? fromConst : `$setup[${JSON.stringify(fromConst)}]`;
    const fromMaybeRef = checkType("setup-let"/* SETUP_LET */ ) || checkType("setup-ref"/* SETUP_REF */ ) || checkType("setup-maybe-ref"/* SETUP_MAYBE_REF */ );
    if (fromMaybeRef) return context.inline ? `${context.helperString(UNREF)}(${fromMaybeRef})` : `$setup[${JSON.stringify(fromMaybeRef)}]`;
}
function buildProps(node, context, props = node.props, ssr = false) {
    const { tag , loc: elementLoc  } = node;
    const isComponent = node.tagType === 1/* COMPONENT */ ;
    let properties = [];
    const mergeArgs = [];
    const runtimeDirectives = [];
    // patchFlag analysis
    let patchFlag = 0;
    let hasRef = false;
    let hasClassBinding = false;
    let hasStyleBinding = false;
    let hasHydrationEventBinding = false;
    let hasDynamicKeys = false;
    let hasVnodeHook = false;
    const dynamicPropNames = [];
    const analyzePatchFlag = ({ key , value  })=>{
        if (isStaticExp(key)) {
            const name = key.content;
            const isEventHandler = shared.isOn(name);
            if (!isComponent && isEventHandler && // omit the flag for click handlers because hydration gives click
            // dedicated fast path.
            name.toLowerCase() !== 'onclick' && // omit v-model handlers
            name !== 'onUpdate:modelValue' && // omit onVnodeXXX hooks
            !shared.isReservedProp(name)) hasHydrationEventBinding = true;
            if (isEventHandler && shared.isReservedProp(name)) hasVnodeHook = true;
            if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) // skip if the prop is a cached handler or has constant value
            return;
            if (name === 'ref') hasRef = true;
            else if (name === 'class' && !isComponent) hasClassBinding = true;
            else if (name === 'style' && !isComponent) hasStyleBinding = true;
            else if (name !== 'key' && !dynamicPropNames.includes(name)) dynamicPropNames.push(name);
        } else hasDynamicKeys = true;
    };
    for(let i = 0; i < props.length; i++){
        // static attribute
        const prop = props[i];
        if (prop.type === 6) {
            const { loc , name , value  } = prop;
            let isStatic = true;
            if (name === 'ref') {
                hasRef = true;
                // in inline mode there is no setupState object, so we can't use string
                // keys to set the ref. Instead, we need to transform it to pass the
                // acrtual ref instead.
                if (context.inline) isStatic = false;
            }
            // skip is on <component>, or is="vue:xxx"
            if (name === 'is' && (isComponentTag(tag) || value && value.content.startsWith('vue:'))) continue;
            properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : '', isStatic, value ? value.loc : loc)));
        } else {
            // directives
            const { name , arg , exp , loc  } = prop;
            const isVBind = name === 'bind';
            const isVOn = name === 'on';
            // skip v-slot - it is handled by its dedicated transform.
            if (name === 'slot') {
                if (!isComponent) context.onError(createCompilerError(39/* X_V_SLOT_MISPLACED */ , loc));
                continue;
            }
            // skip v-once - it is handled by its dedicated transform.
            if (name === 'once') continue;
            // skip v-is and :is on <component>
            if (name === 'is' || isVBind && isComponentTag(tag) && isBindKey(arg, 'is')) continue;
            // skip v-on in SSR compilation
            if (isVOn && ssr) continue;
            // special case for v-bind and v-on with no argument
            if (!arg && (isVBind || isVOn)) {
                hasDynamicKeys = true;
                if (exp) {
                    if (properties.length) {
                        mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
                        properties = [];
                    }
                    if (isVBind) {
                        // 2.x v-bind object order compat
                        {
                            const hasOverridableKeys = mergeArgs.some((arg1)=>{
                                if (arg1.type === 15) return arg1.properties.some(({ key  })=>{
                                    if (key.type !== 4 || !key.isStatic) return true;
                                    return key.content !== 'class' && key.content !== 'style' && !shared.isOn(key.content);
                                });
                                else // dynamic expression
                                return true;
                            });
                            if (hasOverridableKeys) checkCompatEnabled("COMPILER_V_BIND_OBJECT_ORDER"/* COMPILER_V_BIND_OBJECT_ORDER */ , context, loc);
                        }
                        if (isCompatEnabled("COMPILER_V_BIND_OBJECT_ORDER"/* COMPILER_V_BIND_OBJECT_ORDER */ , context)) {
                            mergeArgs.unshift(exp);
                            continue;
                        }
                        mergeArgs.push(exp);
                    } else // v-on="obj" -> toHandlers(obj)
                    mergeArgs.push({
                        type: 14,
                        loc,
                        callee: context.helper(TO_HANDLERS),
                        arguments: [
                            exp
                        ]
                    });
                } else context.onError(createCompilerError(isVBind ? 33 : 34/* X_V_ON_NO_EXPRESSION */ , loc));
                continue;
            }
            const directiveTransform = context.directiveTransforms[name];
            if (directiveTransform) {
                // has built-in directive transform.
                const { props: props1 , needRuntime  } = directiveTransform(prop, node, context);
                !ssr && props1.forEach(analyzePatchFlag);
                properties.push(...props1);
                if (needRuntime) {
                    runtimeDirectives.push(prop);
                    if (shared.isSymbol(needRuntime)) directiveImportMap.set(prop, needRuntime);
                }
            } else // no built-in transform, this is a user custom directive.
            runtimeDirectives.push(prop);
        }
        if (prop.type === 6 && prop.name === 'ref' && context.scopes.vFor > 0 && checkCompatEnabled("COMPILER_V_FOR_REF"/* COMPILER_V_FOR_REF */ , context, prop.loc)) properties.push(createObjectProperty(createSimpleExpression('refInFor', true), createSimpleExpression('true', false)));
    }
    let propsExpression = undefined;
    // has v-bind="object" or v-on="object", wrap with mergeProps
    if (mergeArgs.length) {
        if (properties.length) mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
        if (mergeArgs.length > 1) propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);
        else // single v-bind with nothing else - no need for a mergeProps call
        propsExpression = mergeArgs[0];
    } else if (properties.length) propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);
    // patchFlag analysis
    if (hasDynamicKeys) patchFlag |= 16;
    else {
        if (hasClassBinding) patchFlag |= 2;
        if (hasStyleBinding) patchFlag |= 4;
        if (dynamicPropNames.length) patchFlag |= 8;
        if (hasHydrationEventBinding) patchFlag |= 32;
    }
    if ((patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) patchFlag |= 512;
    return {
        props: propsExpression,
        directives: runtimeDirectives,
        patchFlag,
        dynamicPropNames
    };
}
// Dedupe props in an object literal.
// Literal duplicated attributes would have been warned during the parse phase,
// however, it's possible to encounter duplicated `onXXX` handlers with different
// modifiers. We also need to merge static and dynamic class / style attributes.
// - onXXX handlers / style: merge into array
// - class: merge into single expression with concatenation
function dedupeProperties(properties) {
    const knownProps = new Map();
    const deduped = [];
    for(let i = 0; i < properties.length; i++){
        const prop = properties[i];
        // dynamic keys are always allowed
        if (prop.key.type === 8 || !prop.key.isStatic) {
            deduped.push(prop);
            continue;
        }
        const name = prop.key.content;
        const existing = knownProps.get(name);
        if (existing) {
            if (name === 'style' || name === 'class' || name.startsWith('on')) mergeAsArray(existing, prop);
        } else {
            knownProps.set(name, prop);
            deduped.push(prop);
        }
    }
    return deduped;
}
function mergeAsArray(existing, incoming) {
    if (existing.value.type === 17) existing.value.elements.push(incoming.value);
    else existing.value = createArrayExpression([
        existing.value,
        incoming.value
    ], existing.loc);
}
function buildDirectiveArgs(dir, context) {
    const dirArgs = [];
    const runtime = directiveImportMap.get(dir);
    if (runtime) // built-in directive with runtime
    dirArgs.push(context.helperString(runtime));
    else {
        // user directive.
        // see if we have directives exposed via <script setup>
        const fromSetup = resolveSetupReference(dir.name, context);
        if (fromSetup) dirArgs.push(fromSetup);
        else {
            // inject statement for resolving directive
            context.helper(RESOLVE_DIRECTIVE);
            context.directives.add(dir.name);
            dirArgs.push(toValidAssetId(dir.name, `directive`));
        }
    }
    const { loc  } = dir;
    if (dir.exp) dirArgs.push(dir.exp);
    if (dir.arg) {
        if (!dir.exp) dirArgs.push(`void 0`);
        dirArgs.push(dir.arg);
    }
    if (Object.keys(dir.modifiers).length) {
        if (!dir.arg) {
            if (!dir.exp) dirArgs.push(`void 0`);
            dirArgs.push(`void 0`);
        }
        const trueExpression = createSimpleExpression(`true`, false, loc);
        dirArgs.push(createObjectExpression(dir.modifiers.map((modifier)=>createObjectProperty(modifier, trueExpression)
        ), loc));
    }
    return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
    let propsNamesString = `[`;
    for(let i = 0, l = props.length; i < l; i++){
        propsNamesString += JSON.stringify(props[i]);
        if (i < l - 1) propsNamesString += ', ';
    }
    return propsNamesString + `]`;
}
function isComponentTag(tag) {
    return tag[0].toLowerCase() + tag.slice(1) === 'component';
}
Object.freeze({
});
Object.freeze([]);
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : ''
    );
});
const transformSlotOutlet = (node, context)=>{
    if (isSlotOutlet(node)) {
        const { children , loc  } = node;
        const { slotName , slotProps  } = processSlotOutlet(node, context);
        const slotArgs = [
            context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
            slotName
        ];
        if (slotProps) slotArgs.push(slotProps);
        if (children.length) {
            if (!slotProps) slotArgs.push(`{}`);
            slotArgs.push(createFunctionExpression([], children, false, false, loc));
        }
        if (context.scopeId && !context.slotted) {
            if (!slotProps) slotArgs.push(`{}`);
            if (!children.length) slotArgs.push(`undefined`);
            slotArgs.push(`true`);
        }
        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);
    }
};
function processSlotOutlet(node, context) {
    let slotName = `"default"`;
    let slotProps = undefined;
    const nonNameProps = [];
    for(let i = 0; i < node.props.length; i++){
        const p = node.props[i];
        if (p.type === 6) {
            if (p.value) {
                if (p.name === 'name') slotName = JSON.stringify(p.value.content);
                else {
                    p.name = camelize(p.name);
                    nonNameProps.push(p);
                }
            }
        } else {
            if (p.name === 'bind' && isBindKey(p.arg, 'name')) {
                if (p.exp) slotName = p.exp;
            } else {
                if (p.name === 'bind' && p.arg && isStaticExp(p.arg)) p.arg.content = camelize(p.arg.content);
                nonNameProps.push(p);
            }
        }
    }
    if (nonNameProps.length > 0) {
        const { props , directives  } = buildProps(node, context, nonNameProps);
        slotProps = props;
        if (directives.length) context.onError(createCompilerError(35/* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */ , directives[0].loc));
    }
    return {
        slotName,
        slotProps
    };
}
const fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^\s*function(?:\s+[\w$]+)?\s*\(/;
const transformOn = (dir, node, context, augmentor)=>{
    const { loc , modifiers , arg  } = dir;
    if (!dir.exp && !modifiers.length) context.onError(createCompilerError(34/* X_V_ON_NO_EXPRESSION */ , loc));
    let eventName;
    if (arg.type === 4) {
        if (arg.isStatic) {
            const rawName = arg.content;
            // for all event listeners, auto convert it to camelCase. See issue #2249
            eventName = createSimpleExpression(shared.toHandlerKey(shared.camelize(rawName)), true, arg.loc);
        } else // #2388
        eventName = createCompoundExpression([
            `${context.helperString(TO_HANDLER_KEY)}(`,
            arg,
            `)`
        ]);
    } else {
        // already a compound expression.
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
        eventName.children.push(`)`);
    }
    // handler processing
    let exp = dir.exp;
    if (exp && !exp.content.trim()) exp = undefined;
    let shouldCache = context.cacheHandlers && !exp;
    if (exp) {
        const isMemberExp = isMemberExpression(exp.content);
        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        // process the expression since it's been skipped
        if (context.prefixIdentifiers) {
            isInlineStatement && context.addIdentifiers(`$event`);
            exp = dir.exp = processExpression(exp, context, false, hasMultipleStatements);
            isInlineStatement && context.removeIdentifiers(`$event`);
            // with scope analysis, the function is hoistable if it has no reference
            // to scope variables.
            shouldCache = context.cacheHandlers && // runtime constants don't need to be cached
            // (this is analyzed by compileScript in SFC <script setup>)
            !(exp.type === 4 && exp.constType > 0) && // #1541 bail if this is a member exp handler passed to a component -
            // we need to use the original function to preserve arity,
            // e.g. <transition> relies on checking cb.length to determine
            // transition end handling. Inline function is ok since its arity
            // is preserved even when cached.
            !(isMemberExp && node.tagType === 1) && // bail if the function references closure variables (v-for, v-slot)
            // it must be passed fresh to avoid stale values.
            !hasScopeRef(exp, context.identifiers);
            // If the expression is optimizable and is a member expression pointing
            // to a function, turn it into invocation (and wrap in an arrow function
            // below) so that it always accesses the latest value when called - thus
            // avoiding the need to be patched.
            if (shouldCache && isMemberExp) {
                if (exp.type === 4) exp.content = `${exp.content} && ${exp.content}(...args)`;
                else exp.children = [
                    ...exp.children,
                    ` && `,
                    ...exp.children,
                    `(...args)`
                ];
            }
        }
        if (isInlineStatement || shouldCache && isMemberExp) // wrap inline statement in a function expression
        exp = createCompoundExpression([
            `${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `\n//@ts-ignore\n` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
        ]);
    }
    let ret = {
        props: [
            createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))
        ]
    };
    // apply extended compiler augmentor
    if (augmentor) ret = augmentor(ret);
    if (shouldCache) // cache handlers so that it's always the same handler being passed down.
    // this avoids unnecessary re-renders when users use inline handlers on
    // components.
    ret.props[0].value = context.cache(ret.props[0].value);
    return ret;
};
// v-bind without arg is handled directly in ./transformElements.ts due to it affecting
// codegen for the entire props object. This transform here is only for v-bind
// *with* args.
const transformBind = (dir, _node, context)=>{
    const { exp , modifiers , loc  } = dir;
    const arg = dir.arg;
    if (arg.type !== 4) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
    } else if (!arg.isStatic) arg.content = `${arg.content} || ""`;
    // .prop is no longer necessary due to new patch behavior
    // .sync is replaced by v-model:arg
    if (modifiers.includes('camel')) {
        if (arg.type === 4) {
            if (arg.isStatic) arg.content = shared.camelize(arg.content);
            else arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
        } else {
            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
            arg.children.push(`)`);
        }
    }
    if (!exp || exp.type === 4 && !exp.content.trim()) {
        context.onError(createCompilerError(33/* X_V_BIND_NO_EXPRESSION */ , loc));
        return {
            props: [
                createObjectProperty(arg, createSimpleExpression('', true, loc))
            ]
        };
    }
    return {
        props: [
            createObjectProperty(arg, exp)
        ]
    };
};
// Merge adjacent text nodes and expressions into a single expression
// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.
const transformText = (node, context)=>{
    if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) // perform the transform on node exit so that all expressions have already
    // been processed.
    return ()=>{
        const children = node.children;
        let currentContainer = undefined;
        let hasText = false;
        for(let i = 0; i < children.length; i++){
            const child = children[i];
            if (isText(child)) {
                hasText = true;
                for(let j = i + 1; j < children.length; j++){
                    const next = children[j];
                    if (isText(next)) {
                        if (!currentContainer) currentContainer = children[i] = {
                            type: 8,
                            loc: child.loc,
                            children: [
                                child
                            ]
                        };
                        // merge adjacent text node into current
                        currentContainer.children.push(` + `, next);
                        children.splice(j, 1);
                        j--;
                    } else {
                        currentContainer = undefined;
                        break;
                    }
                }
            }
        }
        if (!hasText || children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && // #3756
        // custom directives can potentially add DOM elements arbitrarily,
        // we need to avoid setting textContent of the element at runtime
        // to avoid accidentally overwriting the DOM elements added
        // by the user through custom directives.
        !node.props.find((p)=>p.type === 7 && !context.directiveTransforms[p.name]
        ) && // in compat mode, <template> tags with no special directives
        // will be rendered as a fragment so its children must be
        // converted into vnodes.
        !(node.tag === 'template'))) return;
        // pre-convert text nodes into createTextVNode(text) calls to avoid
        // runtime normalization.
        for(let i1 = 0; i1 < children.length; i1++){
            const child = children[i1];
            if (isText(child) || child.type === 8) {
                const callArgs = [];
                // createTextVNode defaults to single whitespace, so if it is a
                // single space the code could be an empty call to save bytes.
                if (child.type !== 2 || child.content !== ' ') callArgs.push(child);
                // mark dynamic text with flag so it gets patched inside a block
                if (!context.ssr && getConstantType(child, context) === 0) callArgs.push(1 + ` /* ${shared.PatchFlagNames[1]} */`);
                children[i1] = {
                    type: 12,
                    content: child,
                    loc: child.loc,
                    codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)
                };
            }
        }
    };
};
const seen = new WeakSet();
const transformOnce = (node, context)=>{
    if (node.type === 1 && findDir(node, 'once', true)) {
        if (seen.has(node)) return;
        seen.add(node);
        context.helper(SET_BLOCK_TRACKING);
        return ()=>{
            const cur = context.currentNode;
            if (cur.codegenNode) cur.codegenNode = context.cache(cur.codegenNode, true);
        };
    }
};
const transformModel = (dir, node, context)=>{
    const { exp , arg  } = dir;
    if (!exp) {
        context.onError(createCompilerError(40/* X_V_MODEL_NO_EXPRESSION */ , dir.loc));
        return createTransformProps();
    }
    const rawExp = exp.loc.source;
    const expString = exp.type === 4 ? exp.content : rawExp;
    // im SFC <script setup> inline mode, the exp may have been transformed into
    // _unref(exp)
    const bindingType = context.bindingMetadata[rawExp];
    const maybeRef = context.inline && bindingType && bindingType !== "setup-const"/* SETUP_CONST */ ;
    if (!isMemberExpression(expString) && !maybeRef) {
        context.onError(createCompilerError(41/* X_V_MODEL_MALFORMED_EXPRESSION */ , exp.loc));
        return createTransformProps();
    }
    if (context.prefixIdentifiers && isSimpleIdentifier(expString) && context.identifiers[expString]) {
        context.onError(createCompilerError(42/* X_V_MODEL_ON_SCOPE_VARIABLE */ , exp.loc));
        return createTransformProps();
    }
    const propName = arg ? arg : createSimpleExpression('modelValue', true);
    const eventName = arg ? isStaticExp(arg) ? `onUpdate:${arg.content}` : createCompoundExpression([
        '"onUpdate:" + ',
        arg
    ]) : `onUpdate:modelValue`;
    let assignmentExp;
    const eventArg = context.isTS ? `($event: any)` : `$event`;
    if (maybeRef) {
        if (bindingType === "setup-ref") // v-model used on known ref.
        assignmentExp = createCompoundExpression([
            `${eventArg} => (`,
            createSimpleExpression(rawExp, false, exp.loc),
            `.value = $event)`
        ]);
        else {
            // v-model used on a potentially ref binding in <script setup> inline mode.
            // the assignment needs to check whether the binding is actually a ref.
            const altAssignment = bindingType === "setup-let" ? `${rawExp} = $event` : `null`;
            assignmentExp = createCompoundExpression([
                `${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? `,
                createSimpleExpression(rawExp, false, exp.loc),
                `.value = $event : ${altAssignment})`
            ]);
        }
    } else assignmentExp = createCompoundExpression([
        `${eventArg} => (`,
        exp,
        ` = $event)`
    ]);
    const props = [
        // modelValue: foo
        createObjectProperty(propName, dir.exp),
        // "onUpdate:modelValue": $event => (foo = $event)
        createObjectProperty(eventName, assignmentExp)
    ];
    // cache v-model handler if applicable (when it doesn't refer any scope vars)
    if (context.prefixIdentifiers && context.cacheHandlers && !hasScopeRef(exp, context.identifiers)) props[1].value = context.cache(props[1].value);
    // modelModifiers: { foo: true, "bar-baz": true }
    if (dir.modifiers.length && node.tagType === 1) {
        const modifiers = dir.modifiers.map((m)=>(isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`
        ).join(`, `);
        const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([
            arg,
            ' + "Modifiers"'
        ]) : `modelModifiers`;
        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2/* CAN_HOIST */ )));
    }
    return createTransformProps(props);
};
function createTransformProps(props = []) {
    return {
        props
    };
}
const validDivisionCharRE = /[\w).+\-_$\]]/;
const transformFilter = (node, context)=>{
    if (!isCompatEnabled("COMPILER_FILTER"/* COMPILER_FILTERS */ , context)) return;
    if (node.type === 5) // filter rewrite is applied before expression transform so only
    // simple expressions are possible at this stage
    rewriteFilter(node.content, context);
    if (node.type === 1) node.props.forEach((prop)=>{
        if (prop.type === 7 && prop.name !== 'for' && prop.exp) rewriteFilter(prop.exp, context);
    });
};
function rewriteFilter(node, context) {
    if (node.type === 4) parseFilter(node, context);
    else for(let i = 0; i < node.children.length; i++){
        const child = node.children[i];
        if (typeof child !== 'object') continue;
        if (child.type === 4) parseFilter(child, context);
        else if (child.type === 8) rewriteFilter(node, context);
        else if (child.type === 5) rewriteFilter(child.content, context);
    }
}
function parseFilter(node, context) {
    const exp = node.content;
    let inSingle = false;
    let inDouble = false;
    let inTemplateString = false;
    let inRegex = false;
    let curly = 0;
    let square = 0;
    let paren = 0;
    let lastFilterIndex = 0;
    let c, prev, i, expression, filters = [];
    for(i = 0; i < exp.length; i++){
        prev = c;
        c = exp.charCodeAt(i);
        if (inSingle) {
            if (c === 39 && prev !== 92) inSingle = false;
        } else if (inDouble) {
            if (c === 34 && prev !== 92) inDouble = false;
        } else if (inTemplateString) {
            if (c === 96 && prev !== 92) inTemplateString = false;
        } else if (inRegex) {
            if (c === 47 && prev !== 92) inRegex = false;
        } else if (c === 124 && exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
            if (expression === undefined) {
                // first filter, end of expression
                lastFilterIndex = i + 1;
                expression = exp.slice(0, i).trim();
            } else pushFilter();
        } else {
            switch(c){
                case 34:
                    inDouble = true;
                    break; // "
                case 39:
                    inSingle = true;
                    break; // '
                case 96:
                    inTemplateString = true;
                    break; // `
                case 40:
                    paren++;
                    break; // (
                case 41:
                    paren--;
                    break; // )
                case 91:
                    square++;
                    break; // [
                case 93:
                    square--;
                    break; // ]
                case 123:
                    curly++;
                    break; // {
                case 125:
                    curly--;
                    break; // }
            }
            if (c === 47) {
                // /
                let j = i - 1;
                let p;
                // find first non-whitespace prev char
                for(; j >= 0; j--){
                    p = exp.charAt(j);
                    if (p !== ' ') break;
                }
                if (!p || !validDivisionCharRE.test(p)) inRegex = true;
            }
        }
    }
    if (expression === undefined) expression = exp.slice(0, i).trim();
    else if (lastFilterIndex !== 0) pushFilter();
    function pushFilter() {
        filters.push(exp.slice(lastFilterIndex, i).trim());
        lastFilterIndex = i + 1;
    }
    if (filters.length) {
        warnDeprecation("COMPILER_FILTER"/* COMPILER_FILTERS */ , context, node.loc);
        for(i = 0; i < filters.length; i++)expression = wrapFilter(expression, filters[i], context);
        node.content = expression;
    }
}
function wrapFilter(exp, filter, context) {
    context.helper(RESOLVE_FILTER);
    const i = filter.indexOf('(');
    if (i < 0) {
        context.filters.add(filter);
        return `${toValidAssetId(filter, 'filter')}(${exp})`;
    } else {
        const name = filter.slice(0, i);
        const args = filter.slice(i + 1);
        context.filters.add(name);
        return `${toValidAssetId(name, 'filter')}(${exp}${args !== ')' ? ',' + args : args}`;
    }
}
function getBaseTransformPreset(prefixIdentifiers) {
    return [
        [
            transformOnce,
            transformIf,
            transformFor,
            transformFilter,
            ...prefixIdentifiers ? [
                // order is important
                trackVForSlotScopes,
                transformExpression
            ] : [],
            transformSlotOutlet,
            transformElement,
            trackSlotScopes,
            transformText
        ],
        {
            on: transformOn,
            bind: transformBind,
            model: transformModel
        }
    ];
}
// we name it `baseCompile` so that higher order compilers like
// @vue/compiler-dom can export `compile` while re-exporting everything else.
function baseCompile(template, options = {
}) {
    const onError = options.onError || defaultOnError;
    const isModuleMode = options.mode === 'module';
    const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;
    if (!prefixIdentifiers && options.cacheHandlers) onError(createCompilerError(47/* X_CACHE_HANDLER_NOT_SUPPORTED */ ));
    if (options.scopeId && !isModuleMode) onError(createCompilerError(48/* X_SCOPE_ID_NOT_SUPPORTED */ ));
    const ast = shared.isString(template) ? baseParse(template, options) : template;
    const [nodeTransforms, directiveTransforms] = getBaseTransformPreset(prefixIdentifiers);
    transform(ast, shared.extend({
    }, options, {
        prefixIdentifiers,
        nodeTransforms: [
            ...nodeTransforms,
            ...options.nodeTransforms || []
        ],
        directiveTransforms: shared.extend({
        }, directiveTransforms, options.directiveTransforms || {
        }// user transforms
        )
    }));
    return generate(ast, shared.extend({
    }, options, {
        prefixIdentifiers
    }));
}
const noopDirectiveTransform = ()=>({
        props: []
    })
;
exports.generateCodeFrame = shared.generateCodeFrame;
exports.BASE_TRANSITION = BASE_TRANSITION;
exports.CAMELIZE = CAMELIZE;
exports.CAPITALIZE = CAPITALIZE;
exports.CREATE_BLOCK = CREATE_BLOCK;
exports.CREATE_COMMENT = CREATE_COMMENT;
exports.CREATE_SLOTS = CREATE_SLOTS;
exports.CREATE_STATIC = CREATE_STATIC;
exports.CREATE_TEXT = CREATE_TEXT;
exports.CREATE_VNODE = CREATE_VNODE;
exports.FRAGMENT = FRAGMENT;
exports.IS_REF = IS_REF;
exports.KEEP_ALIVE = KEEP_ALIVE;
exports.MERGE_PROPS = MERGE_PROPS;
exports.OPEN_BLOCK = OPEN_BLOCK;
exports.POP_SCOPE_ID = POP_SCOPE_ID;
exports.PUSH_SCOPE_ID = PUSH_SCOPE_ID;
exports.RENDER_LIST = RENDER_LIST;
exports.RENDER_SLOT = RENDER_SLOT;
exports.RESOLVE_COMPONENT = RESOLVE_COMPONENT;
exports.RESOLVE_DIRECTIVE = RESOLVE_DIRECTIVE;
exports.RESOLVE_DYNAMIC_COMPONENT = RESOLVE_DYNAMIC_COMPONENT;
exports.RESOLVE_FILTER = RESOLVE_FILTER;
exports.SET_BLOCK_TRACKING = SET_BLOCK_TRACKING;
exports.SUSPENSE = SUSPENSE;
exports.TELEPORT = TELEPORT;
exports.TO_DISPLAY_STRING = TO_DISPLAY_STRING;
exports.TO_HANDLERS = TO_HANDLERS;
exports.TO_HANDLER_KEY = TO_HANDLER_KEY;
exports.UNREF = UNREF;
exports.WITH_CTX = WITH_CTX;
exports.WITH_DIRECTIVES = WITH_DIRECTIVES;
exports.WITH_SCOPE_ID = WITH_SCOPE_ID;
exports.advancePositionWithClone = advancePositionWithClone;
exports.advancePositionWithMutation = advancePositionWithMutation;
exports.assert = assert;
exports.baseCompile = baseCompile;
exports.baseParse = baseParse;
exports.buildProps = buildProps;
exports.buildSlots = buildSlots;
exports.checkCompatEnabled = checkCompatEnabled;
exports.createArrayExpression = createArrayExpression;
exports.createAssignmentExpression = createAssignmentExpression;
exports.createBlockStatement = createBlockStatement;
exports.createCacheExpression = createCacheExpression;
exports.createCallExpression = createCallExpression;
exports.createCompilerError = createCompilerError;
exports.createCompoundExpression = createCompoundExpression;
exports.createConditionalExpression = createConditionalExpression;
exports.createForLoopParams = createForLoopParams;
exports.createFunctionExpression = createFunctionExpression;
exports.createIfStatement = createIfStatement;
exports.createInterpolation = createInterpolation;
exports.createObjectExpression = createObjectExpression;
exports.createObjectProperty = createObjectProperty;
exports.createReturnStatement = createReturnStatement;
exports.createRoot = createRoot;
exports.createSequenceExpression = createSequenceExpression;
exports.createSimpleExpression = createSimpleExpression;
exports.createStructuralDirectiveTransform = createStructuralDirectiveTransform;
exports.createTemplateLiteral = createTemplateLiteral;
exports.createTransformContext = createTransformContext;
exports.createVNodeCall = createVNodeCall;
exports.findDir = findDir;
exports.findProp = findProp;
exports.generate = generate;
exports.getBaseTransformPreset = getBaseTransformPreset;
exports.getInnerRange = getInnerRange;
exports.hasDynamicKeyVBind = hasDynamicKeyVBind;
exports.hasScopeRef = hasScopeRef;
exports.helperNameMap = helperNameMap;
exports.injectProp = injectProp;
exports.isBindKey = isBindKey;
exports.isBuiltInType = isBuiltInType;
exports.isCoreComponent = isCoreComponent;
exports.isMemberExpression = isMemberExpression;
exports.isSimpleIdentifier = isSimpleIdentifier;
exports.isSlotOutlet = isSlotOutlet;
exports.isStaticExp = isStaticExp;
exports.isTemplateNode = isTemplateNode;
exports.isText = isText;
exports.isVSlot = isVSlot;
exports.locStub = locStub;
exports.noopDirectiveTransform = noopDirectiveTransform;
exports.processExpression = processExpression;
exports.processFor = processFor;
exports.processIf = processIf;
exports.processSlotOutlet = processSlotOutlet;
exports.registerRuntimeHelpers = registerRuntimeHelpers;
exports.resolveComponentType = resolveComponentType;
exports.toValidAssetId = toValidAssetId;
exports.trackSlotScopes = trackSlotScopes;
exports.trackVForSlotScopes = trackVForSlotScopes;
exports.transform = transform;
exports.transformBind = transformBind;
exports.transformElement = transformElement;
exports.transformExpression = transformExpression;
exports.transformModel = transformModel;
exports.transformOn = transformOn;
exports.traverseNode = traverseNode;
exports.warnDeprecation = warnDeprecation;

},{"@vue/shared":"4sn3I","source-map":"2i1Ke","@babel/parser":"3hO6w","estree-walker":"3xnkF"}],"4sn3I":[function(require,module,exports) {
'use strict';
module.exports = require('./dist/shared.cjs.js');

},{"./dist/shared.cjs.js":"42YZI"}],"42YZI":[function(require,module,exports) {
var global = arguments[3];
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */ function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(',');
    for(let i = 0; i < list.length; i++)map[list[i]] = true;
    return expectsLowerCase ? (val)=>!!map[val.toLowerCase()]
     : (val)=>!!map[val]
    ;
}
/**
 * dev only flag -> name mapping
 */ const PatchFlagNames = {
    [1]: `TEXT`,
    [2]: `CLASS`,
    [4]: `STYLE`,
    [8]: `PROPS`,
    [16]: `FULL_PROPS`,
    [32]: `HYDRATE_EVENTS`,
    [64]: `STABLE_FRAGMENT`,
    [128]: `KEYED_FRAGMENT`,
    [256]: `UNKEYED_FRAGMENT`,
    [512]: `NEED_PATCH`,
    [1024]: `DYNAMIC_SLOTS`,
    [2048]: `DEV_ROOT_FRAGMENT`,
    [-1]: `HOISTED`,
    [-2]: `BAIL`
};
/**
 * Dev only
 */ const slotFlagsText = {
    [1]: 'STABLE',
    [2]: 'DYNAMIC',
    [3]: 'FORWARDED'
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    const lines = source.split(/\r?\n/);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + 1;
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                if (j === i) {
                    // push underline
                    const pad = start - (count - lineLength) + 1;
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + '^'.repeat(length));
                    }
                    count += lineLength + 1;
                }
            }
            break;
        }
    }
    return res.join('\n');
}
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */ const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */ const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {
};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
};
/**
 * CSS properties that accept plain numbers
 */ const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG
`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */ const isKnownAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {
        };
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {
    };
    cssText.split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = '';
    if (!styles) return ret;
    for(const key in styles){
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) || typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey)) // only render valid values
        ret += `${normalizedKey}:${value};`;
    }
    return ret;
}
function normalizeClass(value) {
    let res = '';
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + ' ';
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + ' ';
    }
    return res.trim();
}
// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';
const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = '' + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = '';
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = '&quot;';
                break;
            case 38:
                escaped = '&amp;';
                break;
            case 39:
                escaped = '&#39;';
                break;
            case 60:
                escaped = '&lt;';
                break;
            case 62:
                escaped = '&gt;';
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.substring(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, '');
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */ if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val)
    );
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */ const toDisplayString = (val)=>{
    return val == null ? '' : isObject(val) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val)=>{
    if (isMap(val)) return {
        [`Map(${val.size})`]: [
            ...val.entries()
        ].reduce((entries, [key, val1])=>{
            entries[`${key} =>`] = val1;
            return entries;
        }, {
        })
    };
    else if (isSet(val)) return {
        [`Set(${val.size})`]: [
            ...val.values()
        ]
    };
    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) return String(val);
    return val;
};
/**
 * List of @babel/parser plugins that are used for template expression
 * transforms and SFC script transforms. By default we enable proposals slated
 * for ES2020. This will need to be updated as the spec moves forward.
 * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins
 */ const babelParserDefaultPlugins = [
    'bigInt',
    'optionalChaining',
    'nullishCoalescingOperator'
];
const EMPTY_OBJ = Object.freeze({
});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{
};
/**
 * Always return false.
 */ const NO = ()=>false
;
const onRE = /^on[^a-z]/;
const isOn = (key)=>onRE.test(key)
;
const isModelListener = (key)=>key.startsWith('onUpdate:')
;
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key)
;
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === '[object Map]'
;
const isSet = (val)=>toTypeString(val) === '[object Set]'
;
const isDate = (val)=>val instanceof Date
;
const isFunction = (val)=>typeof val === 'function'
;
const isString = (val)=>typeof val === 'string'
;
const isSymbol = (val)=>typeof val === 'symbol'
;
const isObject = (val)=>val !== null && typeof val === 'object'
;
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value)
;
const toRawType = (value)=>{
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === '[object Object]'
;
const isIntegerKey = (key)=>isString(key) && key !== 'NaN' && key[0] !== '-' && '' + parseInt(key, 10) === key
;
const isReservedProp = /*#__PURE__*/ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : ''
    );
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */ const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, '-$1').toLowerCase()
);
/**
 * @private
 */ const capitalize = cacheStringFunction((str)=>str.charAt(0).toUpperCase() + str.slice(1)
);
/**
 * @private
 */ const toHandlerKey = cacheStringFunction((str)=>str ? `on${capitalize(str)}` : ``
);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue)=>value !== oldValue && (value === value || oldValue === oldValue)
;
const invokeArrayFns = (fns, arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](arg);
};
const def = (obj, key, value)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
    });
};
exports.EMPTY_ARR = EMPTY_ARR;
exports.EMPTY_OBJ = EMPTY_OBJ;
exports.NO = NO;
exports.NOOP = NOOP;
exports.PatchFlagNames = PatchFlagNames;
exports.babelParserDefaultPlugins = babelParserDefaultPlugins;
exports.camelize = camelize;
exports.capitalize = capitalize;
exports.def = def;
exports.escapeHtml = escapeHtml;
exports.escapeHtmlComment = escapeHtmlComment;
exports.extend = extend;
exports.generateCodeFrame = generateCodeFrame;
exports.getGlobalThis = getGlobalThis;
exports.hasChanged = hasChanged;
exports.hasOwn = hasOwn;
exports.hyphenate = hyphenate;
exports.invokeArrayFns = invokeArrayFns;
exports.isArray = isArray;
exports.isBooleanAttr = isBooleanAttr;
exports.isDate = isDate;
exports.isFunction = isFunction;
exports.isGloballyWhitelisted = isGloballyWhitelisted;
exports.isHTMLTag = isHTMLTag;
exports.isIntegerKey = isIntegerKey;
exports.isKnownAttr = isKnownAttr;
exports.isMap = isMap;
exports.isModelListener = isModelListener;
exports.isNoUnitNumericStyleProp = isNoUnitNumericStyleProp;
exports.isObject = isObject;
exports.isOn = isOn;
exports.isPlainObject = isPlainObject;
exports.isPromise = isPromise;
exports.isReservedProp = isReservedProp;
exports.isSSRSafeAttrName = isSSRSafeAttrName;
exports.isSVGTag = isSVGTag;
exports.isSet = isSet;
exports.isSpecialBooleanAttr = isSpecialBooleanAttr;
exports.isString = isString;
exports.isSymbol = isSymbol;
exports.isVoidTag = isVoidTag;
exports.looseEqual = looseEqual;
exports.looseIndexOf = looseIndexOf;
exports.makeMap = makeMap;
exports.normalizeClass = normalizeClass;
exports.normalizeStyle = normalizeStyle;
exports.objectToString = objectToString;
exports.parseStringStyle = parseStringStyle;
exports.propsToAttrMap = propsToAttrMap;
exports.remove = remove;
exports.slotFlagsText = slotFlagsText;
exports.stringifyStyle = stringifyStyle;
exports.toDisplayString = toDisplayString;
exports.toHandlerKey = toHandlerKey;
exports.toNumber = toNumber;
exports.toRawType = toRawType;
exports.toTypeString = toTypeString;

},{}],"2i1Ke":[function(require,module,exports) {
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ exports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./lib/source-node').SourceNode;

},{"./lib/source-map-generator":"3cXrd","./lib/source-map-consumer":"3bh8B","./lib/source-node":"awwZV"}],"3cXrd":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var base64VLQ = require('./base64-vlq');
var util = require('./util');
var ArraySet = require('./array-set').ArraySet;
var MappingList = require('./mapping-list').MappingList;
/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */ function SourceMapGenerator(aArgs) {
    if (!aArgs) aArgs = {
    };
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
}
SourceMapGenerator.prototype._version = 3;
/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */ SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
            generated: {
                line: mapping.generatedLine,
                column: mapping.generatedColumn
            }
        };
        if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) newMapping.source = util.relative(sourceRoot, newMapping.source);
            newMapping.original = {
                line: mapping.originalLine,
                column: mapping.originalColumn
            };
            if (mapping.name != null) newMapping.name = mapping.name;
        }
        generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) sourceRelative = util.relative(sourceRoot, sourceFile);
        if (!generator._sources.has(sourceRelative)) generator._sources.add(sourceRelative);
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) generator.setSourceContent(sourceFile, content);
    });
    return generator;
};
/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */ SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);
    if (!this._skipValidation) this._validateMapping(generated, original, source, name);
    if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) this._sources.add(source);
    }
    if (name != null) {
        name = String(name);
        if (!this._names.has(name)) this._names.add(name);
    }
    this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
    });
};
/**
 * Set the source content for a source file.
 */ SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) source = util.relative(this._sourceRoot, source);
    if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) this._sourcesContents = Object.create(null);
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) this._sourcesContents = null;
    }
};
/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */ SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) throw new Error("SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.");
        sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) sourceFile = util.relative(sourceRoot, sourceFile);
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();
    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
            // Check if it can be mapped by the source map, then update the mapping.
            var original = aSourceMapConsumer.originalPositionFor({
                line: mapping.originalLine,
                column: mapping.originalColumn
            });
            if (original.source != null) {
                // Copy mapping
                mapping.source = original.source;
                if (aSourceMapPath != null) mapping.source = util.join(aSourceMapPath, mapping.source);
                if (sourceRoot != null) mapping.source = util.relative(sourceRoot, mapping.source);
                mapping.originalLine = original.line;
                mapping.originalColumn = original.column;
                if (original.name != null) mapping.name = original.name;
            }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) newSources.add(source);
        var name = mapping.name;
        if (name != null && !newNames.has(name)) newNames.add(name);
    }, this);
    this._sources = newSources;
    this._names = newNames;
    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function(sourceFile1) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile1);
        if (content != null) {
            if (aSourceMapPath != null) sourceFile1 = util.join(aSourceMapPath, sourceFile1);
            if (sourceRoot != null) sourceFile1 = util.relative(sourceRoot, sourceFile1);
            this.setSourceContent(sourceFile1, content);
        }
    }, this);
};
/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */ SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) // Case 1.
    return;
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) // Cases 2 and 3.
    return;
    else throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
    }));
};
/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */ SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;
    var mappings = this._mappings.toArray();
    for(var i = 0, len = mappings.length; i < len; i++){
        mapping = mappings[i];
        next = '';
        if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while(mapping.generatedLine !== previousGeneratedLine){
                next += ';';
                previousGeneratedLine++;
            }
        } else if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) continue;
            next += ',';
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next += base64VLQ.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;
            // lines are stored 0-based in SourceMap spec version 3
            next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;
            next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;
            if (mapping.name != null) {
                nameIdx = this._names.indexOf(mapping.name);
                next += base64VLQ.encode(nameIdx - previousName);
                previousName = nameIdx;
            }
        }
        result += next;
    }
    return result;
};
SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function(source) {
        if (!this._sourcesContents) return null;
        if (aSourceRoot != null) source = util.relative(aSourceRoot, source);
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
    }, this);
};
/**
 * Externalize the source map.
 */ SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
    var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
    };
    if (this._file != null) map.file = this._file;
    if (this._sourceRoot != null) map.sourceRoot = this._sourceRoot;
    if (this._sourcesContents) map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    return map;
};
/**
 * Render the source map being generated to a string.
 */ SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
};
exports.SourceMapGenerator = SourceMapGenerator;

},{"./base64-vlq":"3fFko","./util":"3jSHP","./array-set":"6FVPd","./mapping-list":"4pIKS"}],"3fFko":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ var base64 = require('./base64');
// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011
var VLQ_BASE_SHIFT = 5;
// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;
// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;
/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */ function toVLQSigned(aValue) {
    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
}
/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */ function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative ? -shifted : shifted;
}
/**
 * Returns the base 64 VLQ encoded value.
 */ exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;
    var vlq = toVLQSigned(aValue);
    do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
        encoded += base64.encode(digit);
    }while (vlq > 0)
    return encoded;
};
/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */ exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;
    do {
        if (aIndex >= strLen) throw new Error("Expected more digits in base 64 VLQ value.");
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
    }while (continuation)
    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
};

},{"./base64":"3kyX0"}],"3kyX0":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */ exports.encode = function(number) {
    if (0 <= number && number < intToCharMap.length) return intToCharMap[number];
    throw new TypeError("Must be between 0 and 63: " + number);
};
/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */ exports.decode = function(charCode) {
    var bigA = 65; // 'A'
    var bigZ = 90; // 'Z'
    var littleA = 97; // 'a'
    var littleZ = 122; // 'z'
    var zero = 48; // '0'
    var nine = 57; // '9'
    var plus = 43; // '+'
    var slash = 47; // '/'
    var littleOffset = 26;
    var numberOffset = 52;
    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) return charCode - bigA;
    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) return charCode - littleA + littleOffset;
    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) return charCode - zero + numberOffset;
    // 62: +
    if (charCode == plus) return 62;
    // 63: /
    if (charCode == slash) return 63;
    // Invalid base64 digit.
    return -1;
};

},{}],"3jSHP":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ /**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */ function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) return aArgs[aName];
    else if (arguments.length === 3) return aDefaultValue;
    else throw new Error('"' + aName + '" is a required argument.');
}
exports.getArg = getArg;
var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;
function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) return null;
    return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
    };
}
exports.urlParse = urlParse;
function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) url += aParsedUrl.scheme + ':';
    url += '//';
    if (aParsedUrl.auth) url += aParsedUrl.auth + '@';
    if (aParsedUrl.host) url += aParsedUrl.host;
    if (aParsedUrl.port) url += ":" + aParsedUrl.port;
    if (aParsedUrl.path) url += aParsedUrl.path;
    return url;
}
exports.urlGenerate = urlGenerate;
/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */ function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
        if (!url.path) return aPath;
        path = url.path;
    }
    var isAbsolute = exports.isAbsolute(path);
    var parts = path.split(/\/+/);
    for(var part, up = 0, i = parts.length - 1; i >= 0; i--){
        part = parts[i];
        if (part === '.') parts.splice(i, 1);
        else if (part === '..') up++;
        else if (up > 0) {
            if (part === '') {
                // The first part is blank if the path is absolute. Trying to go
                // above the root is a no-op. Therefore we can remove all '..' parts
                // directly after the root.
                parts.splice(i + 1, up);
                up = 0;
            } else {
                parts.splice(i, 2);
                up--;
            }
        }
    }
    path = parts.join('/');
    if (path === '') path = isAbsolute ? '/' : '.';
    if (url) {
        url.path = path;
        return urlGenerate(url);
    }
    return path;
}
exports.normalize = normalize;
/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */ function join(aRoot, aPath) {
    if (aRoot === "") aRoot = ".";
    if (aPath === "") aPath = ".";
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) aRoot = aRootUrl.path || '/';
    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) aPathUrl.scheme = aRootUrl.scheme;
        return urlGenerate(aPathUrl);
    }
    if (aPathUrl || aPath.match(dataUrlRegexp)) return aPath;
    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
    }
    var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
    if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
    }
    return joined;
}
exports.join = join;
exports.isAbsolute = function(aPath) {
    return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};
/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */ function relative(aRoot, aPath) {
    if (aRoot === "") aRoot = ".";
    aRoot = aRoot.replace(/\/$/, '');
    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0;
    while(aPath.indexOf(aRoot + '/') !== 0){
        var index = aRoot.lastIndexOf("/");
        if (index < 0) return aPath;
        // If the only part of the root that is left is the scheme (i.e. http://,
        // file:///, etc.), one or more slashes (/), or simply nothing at all, we
        // have exhausted all components, so the path is not relative to the root.
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) return aPath;
        ++level;
    }
    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;
var supportsNullProto = function() {
    var obj = Object.create(null);
    return !('__proto__' in obj);
}();
function identity(s) {
    return s;
}
/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */ function toSetString(aStr) {
    if (isProtoString(aStr)) return '$' + aStr;
    return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;
function fromSetString(aStr) {
    if (isProtoString(aStr)) return aStr.slice(1);
    return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;
function isProtoString(s) {
    if (!s) return false;
    var length = s.length;
    if (length < 9) return false;
    if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) return false;
    for(var i = length - 10; i >= 0; i--){
        if (s.charCodeAt(i) !== 36) return false;
    }
    return true;
}
/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */ function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) return cmp;
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) return cmp;
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) return cmp;
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) return cmp;
    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) return cmp;
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;
/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */ function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) return cmp;
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) return cmp;
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) return cmp;
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) return cmp;
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) return cmp;
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) return 0;
    if (aStr1 === null) return 1; // aStr2 !== null
    if (aStr2 === null) return -1; // aStr1 !== null
    if (aStr1 > aStr2) return 1;
    return -1;
}
/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */ function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) return cmp;
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) return cmp;
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) return cmp;
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) return cmp;
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) return cmp;
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */ function parseSourceMapInput(str) {
    return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;
/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */ function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    sourceURL = sourceURL || '';
    if (sourceRoot) {
        // This follows what Chrome does.
        if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') sourceRoot += '/';
        // The spec says:
        //   Line 4: An optional source root, useful for relocating source
        //   files on a server or removing repeated values in the
        //   “sources” entry.  This value is prepended to the individual
        //   entries in the “source” field.
        sourceURL = sourceRoot + sourceURL;
    }
    // Historically, SourceMapConsumer did not take the sourceMapURL as
    // a parameter.  This mode is still somewhat supported, which is why
    // this code block is conditional.  However, it's preferable to pass
    // the source map URL to SourceMapConsumer, so that this function
    // can implement the source URL resolution algorithm as outlined in
    // the spec.  This block is basically the equivalent of:
    //    new URL(sourceURL, sourceMapURL).toString()
    // ... except it avoids using URL, which wasn't available in the
    // older releases of node still supported by this library.
    //
    // The spec says:
    //   If the sources are not absolute URLs after prepending of the
    //   “sourceRoot”, the sources are resolved relative to the
    //   SourceMap (like resolving script src in a html document).
    if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) throw new Error("sourceMapURL could not be parsed");
        if (parsed.path) {
            // Strip the last path component, but keep the "/".
            var index = parsed.path.lastIndexOf('/');
            if (index >= 0) parsed.path = parsed.path.substring(0, index + 1);
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
    }
    return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;

},{}],"6FVPd":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var util = require('./util');
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";
/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */ function ArraySet() {
    this._array = [];
    this._set = hasNativeMap ? new Map() : Object.create(null);
}
/**
 * Static method for creating ArraySet instances from an existing array.
 */ ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for(var i = 0, len = aArray.length; i < len; i++)set.add(aArray[i], aAllowDuplicates);
    return set;
};
/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */ ArraySet.prototype.size = function ArraySet_size() {
    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};
/**
 * Add the given string to this set.
 *
 * @param String aStr
 */ ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) this._array.push(aStr);
    if (!isDuplicate) {
        if (hasNativeMap) this._set.set(aStr, idx);
        else this._set[sStr] = idx;
    }
};
/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */ ArraySet.prototype.has = function ArraySet_has(aStr) {
    if (hasNativeMap) return this._set.has(aStr);
    else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
    }
};
/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */ ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) return idx;
    } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) return this._set[sStr];
    }
    throw new Error('"' + aStr + '" is not in the set.');
};
/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */ ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) return this._array[aIdx];
    throw new Error('No element indexed by ' + aIdx);
};
/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */ ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
};
exports.ArraySet = ArraySet;

},{"./util":"3jSHP"}],"4pIKS":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var util = require('./util');
/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */ function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}
/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */ function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {
        generatedLine: -1,
        generatedColumn: 0
    };
}
/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */ MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
};
/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */ MappingList.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
    } else {
        this._sorted = false;
        this._array.push(aMapping);
    }
};
/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */ MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
    }
    return this._array;
};
exports.MappingList = MappingList;

},{"./util":"3jSHP"}],"3bh8B":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var util = require('./util');
var binarySearch = require('./binary-search');
var ArraySet = require('./array-set').ArraySet;
var base64VLQ = require('./base64-vlq');
var quickSort = require('./quick-sort').quickSort;
function SourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') sourceMap = util.parseSourceMapInput(aSourceMap);
    return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}
SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
};
/**
 * The version of the source mapping spec that we are consuming.
 */ SourceMapConsumer.prototype._version = 3;
// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.
SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    configurable: true,
    enumerable: true,
    get: function() {
        if (!this.__generatedMappings) this._parseMappings(this._mappings, this.sourceRoot);
        return this.__generatedMappings;
    }
});
SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    configurable: true,
    enumerable: true,
    get: function() {
        if (!this.__originalMappings) this._parseMappings(this._mappings, this.sourceRoot);
        return this.__originalMappings;
    }
});
SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
};
/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */ SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
};
SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;
SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;
/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */ SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
    var mappings;
    switch(order){
        case SourceMapConsumer.GENERATED_ORDER:
            mappings = this._generatedMappings;
            break;
        case SourceMapConsumer.ORIGINAL_ORDER:
            mappings = this._originalMappings;
            break;
        default:
            throw new Error("Unknown order of iteration.");
    }
    var sourceRoot = this.sourceRoot;
    mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
            source: source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : this._names.at(mapping.name)
        };
    }, this).forEach(aCallback, context);
};
/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */ SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');
    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: line,
        originalColumn: util.getArg(aArgs, 'column', 0)
    };
    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) return [];
    var mappings = [];
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === undefined) {
            var originalLine = mapping.originalLine;
            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we found. Since
            // mappings are sorted, this is guaranteed to find all mappings for
            // the line we found.
            while(mapping && mapping.originalLine === originalLine){
                mappings.push({
                    line: util.getArg(mapping, 'generatedLine', null),
                    column: util.getArg(mapping, 'generatedColumn', null),
                    lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                });
                mapping = this._originalMappings[++index];
            }
        } else {
            var originalColumn = mapping.originalColumn;
            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we were searching for.
            // Since mappings are sorted, this is guaranteed to find all mappings for
            // the line we are searching for.
            while(mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn){
                mappings.push({
                    line: util.getArg(mapping, 'generatedLine', null),
                    column: util.getArg(mapping, 'generatedColumn', null),
                    lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                });
                mapping = this._originalMappings[++index];
            }
        }
    }
    return mappings;
};
exports.SourceMapConsumer = SourceMapConsumer;
/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */ function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') sourceMap = util.parseSourceMapInput(aSourceMap);
    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);
    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) throw new Error('Unsupported version: ' + version);
    if (sourceRoot) sourceRoot = util.normalize(sourceRoot);
    sources = sources.map(String)// Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)// Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function(source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
    });
    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names.map(String), true);
    this._sources = ArraySet.fromArray(sources, true);
    this._absoluteSources = this._sources.toArray().map(function(s) {
        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
    });
    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this._sourceMapURL = aSourceMapURL;
    this.file = file;
}
BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */ BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
    var relativeSource = aSource;
    if (this.sourceRoot != null) relativeSource = util.relative(this.sourceRoot, relativeSource);
    if (this._sources.has(relativeSource)) return this._sources.indexOf(relativeSource);
    // Maybe aSource is an absolute URL as returned by |sources|.  In
    // this case we can't simply undo the transform.
    var i;
    for(i = 0; i < this._absoluteSources.length; ++i){
        if (this._absoluteSources[i] == aSource) return i;
    }
    return -1;
};
/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */ BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);
    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });
    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.
    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];
    for(var i = 0, length = generatedMappings.length; i < length; i++){
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping;
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
            destMapping.source = sources.indexOf(srcMapping.source);
            destMapping.originalLine = srcMapping.originalLine;
            destMapping.originalColumn = srcMapping.originalColumn;
            if (srcMapping.name) destMapping.name = names.indexOf(srcMapping.name);
            destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
    }
    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
    return smc;
};
/**
 * The version of the source mapping spec that we are consuming.
 */ BasicSourceMapConsumer.prototype._version = 3;
/**
 * The list of original sources.
 */ Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
    get: function() {
        return this._absoluteSources.slice();
    }
});
/**
 * Provide the JIT with a nice shape / hidden class.
 */ function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
}
/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */ BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings1(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {
    };
    var temp = {
    };
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;
    while(index < length){
        if (aStr.charAt(index) === ';') {
            generatedLine++;
            index++;
            previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ',') index++;
        else {
            mapping = new Mapping();
            mapping.generatedLine = generatedLine;
            // Because each offset is encoded relative to the previous one,
            // many segments often have the same encoding. We can exploit this
            // fact by caching the parsed variable length fields of each segment,
            // allowing us to avoid a second parse if we encounter the same
            // segment again.
            for(end = index; end < length; end++){
                if (this._charIsMappingSeparator(aStr, end)) break;
            }
            str = aStr.slice(index, end);
            segment = cachedSegments[str];
            if (segment) index += str.length;
            else {
                segment = [];
                while(index < end){
                    base64VLQ.decode(aStr, index, temp);
                    value = temp.value;
                    index = temp.rest;
                    segment.push(value);
                }
                if (segment.length === 2) throw new Error('Found a source, but no line and column');
                if (segment.length === 3) throw new Error('Found a source and line, but no column');
                cachedSegments[str] = segment;
            }
            // Generated column.
            mapping.generatedColumn = previousGeneratedColumn + segment[0];
            previousGeneratedColumn = mapping.generatedColumn;
            if (segment.length > 1) {
                // Original source.
                mapping.source = previousSource + segment[1];
                previousSource += segment[1];
                // Original line.
                mapping.originalLine = previousOriginalLine + segment[2];
                previousOriginalLine = mapping.originalLine;
                // Lines are stored 0-based
                mapping.originalLine += 1;
                // Original column.
                mapping.originalColumn = previousOriginalColumn + segment[3];
                previousOriginalColumn = mapping.originalColumn;
                if (segment.length > 4) {
                    // Original name.
                    mapping.name = previousName + segment[4];
                    previousName += segment[4];
                }
            }
            generatedMappings.push(mapping);
            if (typeof mapping.originalLine === 'number') originalMappings.push(mapping);
        }
    }
    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;
    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
};
/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */ BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.
    if (aNeedle[aLineName] <= 0) throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
    if (aNeedle[aColumnName] < 0) throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
};
/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */ BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
    for(var index = 0; index < this._generatedMappings.length; ++index){
        var mapping = this._generatedMappings[index];
        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index + 1];
            if (mapping.generatedLine === nextMapping.generatedLine) {
                mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                continue;
            }
        }
        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
    }
};
/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */ BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
    };
    var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
            var source = util.getArg(mapping, 'source', null);
            if (source !== null) {
                source = this._sources.at(source);
                source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
            }
            var name = util.getArg(mapping, 'name', null);
            if (name !== null) name = this._names.at(name);
            return {
                source: source,
                line: util.getArg(mapping, 'originalLine', null),
                column: util.getArg(mapping, 'originalColumn', null),
                name: name
            };
        }
    }
    return {
        source: null,
        line: null,
        column: null,
        name: null
    };
};
/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */ BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) return false;
    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
    });
};
/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */ BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) return null;
    var index = this._findSourceIndex(aSource);
    if (index >= 0) return this.sourcesContent[index];
    var relativeSource = aSource;
    if (this.sourceRoot != null) relativeSource = util.relative(this.sourceRoot, relativeSource);
    var url;
    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
    }
    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) return null;
    else throw new Error('"' + relativeSource + '" is not in the SourceMap.');
};
/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */ BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) return {
        line: null,
        column: null,
        lastColumn: null
    };
    var needle = {
        source: source,
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
    };
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) return {
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
    }
    return {
        line: null,
        column: null,
        lastColumn: null
    };
};
exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */ function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') sourceMap = util.parseSourceMapInput(aSourceMap);
    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');
    if (version != this._version) throw new Error('Unsupported version: ' + version);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    var lastOffset = {
        line: -1,
        column: 0
    };
    this._sections = sections.map(function(s) {
        if (s.url) // The url field will require support for asynchronicity.
        // See https://github.com/mozilla/source-map/issues/16
        throw new Error('Support for url field in sections not implemented.');
        var offset = util.getArg(s, 'offset');
        var offsetLine = util.getArg(offset, 'line');
        var offsetColumn = util.getArg(offset, 'column');
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) throw new Error('Section offsets must be ordered and non-overlapping.');
        lastOffset = offset;
        return {
            generatedOffset: {
                // The offset fields are 0-based, but we use 1-based indices when
                // encoding/decoding from VLQ.
                generatedLine: offsetLine + 1,
                generatedColumn: offsetColumn + 1
            },
            consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
        };
    });
}
IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
/**
 * The version of the source mapping spec that we are consuming.
 */ IndexedSourceMapConsumer.prototype._version = 3;
/**
 * The list of original sources.
 */ Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
    get: function() {
        var sources = [];
        for(var i = 0; i < this._sections.length; i++)for(var j = 0; j < this._sections[i].consumer.sources.length; j++)sources.push(this._sections[i].consumer.sources[j]);
        return sources;
    }
});
/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */ IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
    };
    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections, function(needle1, section) {
        var cmp = needle1.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) return cmp;
        return needle1.generatedColumn - section.generatedOffset.generatedColumn;
    });
    var section = this._sections[sectionIndex];
    if (!section) return {
        source: null,
        line: null,
        column: null,
        name: null
    };
    return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
    });
};
/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */ IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
    });
};
/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */ IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for(var i = 0; i < this._sections.length; i++){
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) return content;
    }
    if (nullOnMissing) return null;
    else throw new Error('"' + aSource + '" is not in the SourceMap.');
};
/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */ IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for(var i = 0; i < this._sections.length; i++){
        var section = this._sections[i];
        // Only consider this section if the requested source is in the list of
        // sources of the consumer.
        if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) continue;
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
            var ret = {
                line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
                column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
            };
            return ret;
        }
    }
    return {
        line: null,
        column: null
    };
};
/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */ IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for(var i = 0; i < this._sections.length; i++){
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for(var j = 0; j < sectionMappings.length; j++){
            var mapping = sectionMappings[j];
            var source = section.consumer._sources.at(mapping.source);
            source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
            this._sources.add(source);
            source = this._sources.indexOf(source);
            var name = null;
            if (mapping.name) {
                name = section.consumer._names.at(mapping.name);
                this._names.add(name);
                name = this._names.indexOf(name);
            }
            // The mappings coming from the consumer for the section have
            // generated positions relative to the start of the section, so we
            // need to offset them to be relative to the start of the concatenated
            // generated file.
            var adjustedMapping = {
                source: source,
                generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
                generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
                originalLine: mapping.originalLine,
                originalColumn: mapping.originalColumn,
                name: name
            };
            this.__generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === 'number') this.__originalMappings.push(adjustedMapping);
        }
    }
    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
};
exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

},{"./util":"3jSHP","./binary-search":"6Gg6F","./array-set":"6FVPd","./base64-vlq":"3fFko","./quick-sort":"4e5ED"}],"6Gg6F":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;
/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */ function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) // Found the element we are looking for.
    return mid;
    else if (cmp > 0) {
        // Our needle is greater than aHaystack[mid].
        if (aHigh - mid > 1) // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        // The exact needle element was not found in this haystack. Determine if
        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) return aHigh < aHaystack.length ? aHigh : -1;
        else return mid;
    } else {
        // Our needle is less than aHaystack[mid].
        if (mid - aLow > 1) // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) return mid;
        else return aLow < 0 ? -1 : aLow;
    }
}
/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */ exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) return -1;
    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) return -1;
    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    while(index - 1 >= 0){
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) break;
        --index;
    }
    return index;
};

},{}],"4e5ED":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ // It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.
/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */ function swap(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
}
/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */ function randomIntInRange(low, high) {
    return Math.round(low + Math.random() * (high - low));
}
/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */ function doQuickSort(ary, comparator, p, r) {
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.
    if (p < r) {
        // (1) Partitioning.
        //
        // The partitioning chooses a pivot between `p` and `r` and moves all
        // elements that are less than or equal to the pivot to the before it, and
        // all the elements that are greater than it after it. The effect is that
        // once partition is done, the pivot is in the exact place it will be when
        // the array is put in sorted order, and it will not need to be moved
        // again. This runs in O(n) time.
        // Always choose a random pivot so that an input array which is reverse
        // sorted does not cause O(n^2) running time.
        var pivotIndex = randomIntInRange(p, r);
        var i = p - 1;
        swap(ary, pivotIndex, r);
        var pivot = ary[r];
        // Immediately after `j` is incremented in this loop, the following hold
        // true:
        //
        //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
        //
        //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
        for(var j = p; j < r; j++)if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap(ary, i, j);
        }
        swap(ary, i + 1, j);
        var q = i + 1;
        // (2) Recurse on each half.
        doQuickSort(ary, comparator, p, q - 1);
        doQuickSort(ary, comparator, q + 1, r);
    }
}
/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */ exports.quickSort = function(ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
};

},{}],"awwZV":[function(require,module,exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
var util = require('./util');
// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;
// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;
// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";
/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */ function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {
    };
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
}
/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */ SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();
    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
        var lineContents = getNextLine();
        // The last line of a file might not have a newline.
        var newLine = getNextLine() || "";
        function getNextLine() {
            return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;
        }
        return lineContents + newLine;
    };
    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;
    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;
    aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
            // We add the code from "lastMapping" to "mapping":
            // First check if there is a new line in between.
            if (lastGeneratedLine < mapping.generatedLine) {
                // Associate first line with "lastMapping"
                addMappingWithCode(lastMapping, shiftNextLine());
                lastGeneratedLine++;
                lastGeneratedColumn = 0;
            // The remaining code is added without mapping
            } else {
                // There is no new line in between.
                // Associate the code between "lastGeneratedColumn" and
                // "mapping.generatedColumn" with "lastMapping"
                var nextLine = remainingLines[remainingLinesIndex] || '';
                var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
                remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
                lastGeneratedColumn = mapping.generatedColumn;
                addMappingWithCode(lastMapping, code);
                // No more remaining code, continue
                lastMapping = mapping;
                return;
            }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while(lastGeneratedLine < mapping.generatedLine){
            node.add(shiftNextLine());
            lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
            var nextLine = remainingLines[remainingLinesIndex] || '';
            node.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
        // and add the remaining lines without any mapping
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }
    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
            if (aRelativePath != null) sourceFile = util.join(aRelativePath, sourceFile);
            node.setSourceContent(sourceFile, content);
        }
    });
    function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
            node.add(code);
        } else {
            var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
            node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
    }
    return node;
};
/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */ SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) aChunk.forEach(function(chunk) {
        this.add(chunk);
    }, this);
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) this.children.push(aChunk);
    } else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    return this;
};
/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */ SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) for(var i = aChunk.length - 1; i >= 0; i--)this.prepend(aChunk[i]);
    else if (aChunk[isSourceNode] || typeof aChunk === "string") this.children.unshift(aChunk);
    else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    return this;
};
/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */ SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for(var i = 0, len = this.children.length; i < len; i++){
        chunk = this.children[i];
        if (chunk[isSourceNode]) chunk.walk(aFn);
        else if (chunk !== '') aFn(chunk, {
            source: this.source,
            line: this.line,
            column: this.column,
            name: this.name
        });
    }
};
/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */ SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
        newChildren = [];
        for(i = 0; i < len - 1; i++){
            newChildren.push(this.children[i]);
            newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
    }
    return this;
};
/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */ SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) lastChild.replaceRight(aPattern, aReplacement);
    else if (typeof lastChild === 'string') this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    else this.children.push(''.replace(aPattern, aReplacement));
    return this;
};
/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */ SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
};
/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */ SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
    for(var i = 0, len = this.children.length; i < len; i++)if (this.children[i][isSourceNode]) this.children[i].walkSourceContents(aFn);
    var sources = Object.keys(this.sourceContents);
    for(var i = 0, len = sources.length; i < len; i++)aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
};
/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */ SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function(chunk) {
        str += chunk;
    });
    return str;
};
/**
 * Returns the string representation of this source node along with a source
 * map.
 */ SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
        code: "",
        line: 1,
        column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
            if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) map.addMapping({
                source: original.source,
                original: {
                    line: original.line,
                    column: original.column
                },
                generated: {
                    line: generated.line,
                    column: generated.column
                },
                name: original.name
            });
            lastOriginalSource = original.source;
            lastOriginalLine = original.line;
            lastOriginalColumn = original.column;
            lastOriginalName = original.name;
            sourceMappingActive = true;
        } else if (sourceMappingActive) {
            map.addMapping({
                generated: {
                    line: generated.line,
                    column: generated.column
                }
            });
            lastOriginalSource = null;
            sourceMappingActive = false;
        }
        for(var idx = 0, length = chunk.length; idx < length; idx++)if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            // Mappings end at eol
            if (idx + 1 === length) {
                lastOriginalSource = null;
                sourceMappingActive = false;
            } else if (sourceMappingActive) map.addMapping({
                source: original.source,
                original: {
                    line: original.line,
                    column: original.column
                },
                generated: {
                    line: generated.line,
                    column: generated.column
                },
                name: original.name
            });
        } else generated.column++;
    });
    this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
    });
    return {
        code: generated.code,
        map: map
    };
};
exports.SourceNode = SourceNode;

},{"./source-map-generator":"3cXrd","./util":"3jSHP"}],"3hO6w":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
const beforeExpr = true;
const startsExpr = true;
const isLoop = true;
const isAssign = true;
const prefix = true;
const postfix = true;
class TokenType {
    constructor(label, conf = {
    }){
        this.label = void 0;
        this.keyword = void 0;
        this.beforeExpr = void 0;
        this.startsExpr = void 0;
        this.rightAssociative = void 0;
        this.isLoop = void 0;
        this.isAssign = void 0;
        this.prefix = void 0;
        this.postfix = void 0;
        this.binop = void 0;
        this.updateContext = void 0;
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.rightAssociative = !!conf.rightAssociative;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop != null ? conf.binop : null;
        this.updateContext = null;
    }
}
const keywords$1 = new Map();
function createKeyword(name, options = {
}) {
    options.keyword = name;
    const token = new TokenType(name, options);
    keywords$1.set(name, token);
    return token;
}
function createBinop(name, binop) {
    return new TokenType(name, {
        beforeExpr,
        binop
    });
}
const types$1 = {
    num: new TokenType("num", {
        startsExpr
    }),
    bigint: new TokenType("bigint", {
        startsExpr
    }),
    decimal: new TokenType("decimal", {
        startsExpr
    }),
    regexp: new TokenType("regexp", {
        startsExpr
    }),
    string: new TokenType("string", {
        startsExpr
    }),
    name: new TokenType("name", {
        startsExpr
    }),
    privateName: new TokenType("#name", {
        startsExpr
    }),
    eof: new TokenType("eof"),
    bracketL: new TokenType("[", {
        beforeExpr,
        startsExpr
    }),
    bracketHashL: new TokenType("#[", {
        beforeExpr,
        startsExpr
    }),
    bracketBarL: new TokenType("[|", {
        beforeExpr,
        startsExpr
    }),
    bracketR: new TokenType("]"),
    bracketBarR: new TokenType("|]"),
    braceL: new TokenType("{", {
        beforeExpr,
        startsExpr
    }),
    braceBarL: new TokenType("{|", {
        beforeExpr,
        startsExpr
    }),
    braceHashL: new TokenType("#{", {
        beforeExpr,
        startsExpr
    }),
    braceR: new TokenType("}"),
    braceBarR: new TokenType("|}"),
    parenL: new TokenType("(", {
        beforeExpr,
        startsExpr
    }),
    parenR: new TokenType(")"),
    comma: new TokenType(",", {
        beforeExpr
    }),
    semi: new TokenType(";", {
        beforeExpr
    }),
    colon: new TokenType(":", {
        beforeExpr
    }),
    doubleColon: new TokenType("::", {
        beforeExpr
    }),
    dot: new TokenType("."),
    question: new TokenType("?", {
        beforeExpr
    }),
    questionDot: new TokenType("?."),
    arrow: new TokenType("=>", {
        beforeExpr
    }),
    template: new TokenType("template"),
    ellipsis: new TokenType("...", {
        beforeExpr
    }),
    backQuote: new TokenType("`", {
        startsExpr
    }),
    dollarBraceL: new TokenType("${", {
        beforeExpr,
        startsExpr
    }),
    at: new TokenType("@"),
    hash: new TokenType("#", {
        startsExpr
    }),
    interpreterDirective: new TokenType("#!..."),
    eq: new TokenType("=", {
        beforeExpr,
        isAssign
    }),
    assign: new TokenType("_=", {
        beforeExpr,
        isAssign
    }),
    incDec: new TokenType("++/--", {
        prefix,
        postfix,
        startsExpr
    }),
    bang: new TokenType("!", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    tilde: new TokenType("~", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    pipeline: createBinop("|>", 0),
    nullishCoalescing: createBinop("??", 1),
    logicalOR: createBinop("||", 1),
    logicalAND: createBinop("&&", 2),
    bitwiseOR: createBinop("|", 3),
    bitwiseXOR: createBinop("^", 4),
    bitwiseAND: createBinop("&", 5),
    equality: createBinop("==/!=/===/!==", 6),
    relational: createBinop("</>/<=/>=", 7),
    bitShift: createBinop("<</>>/>>>", 8),
    plusMin: new TokenType("+/-", {
        beforeExpr,
        binop: 9,
        prefix,
        startsExpr
    }),
    modulo: new TokenType("%", {
        beforeExpr,
        binop: 10,
        startsExpr
    }),
    star: new TokenType("*", {
        binop: 10
    }),
    slash: createBinop("/", 10),
    exponent: new TokenType("**", {
        beforeExpr,
        binop: 11,
        rightAssociative: true
    }),
    _break: createKeyword("break"),
    _case: createKeyword("case", {
        beforeExpr
    }),
    _catch: createKeyword("catch"),
    _continue: createKeyword("continue"),
    _debugger: createKeyword("debugger"),
    _default: createKeyword("default", {
        beforeExpr
    }),
    _do: createKeyword("do", {
        isLoop,
        beforeExpr
    }),
    _else: createKeyword("else", {
        beforeExpr
    }),
    _finally: createKeyword("finally"),
    _for: createKeyword("for", {
        isLoop
    }),
    _function: createKeyword("function", {
        startsExpr
    }),
    _if: createKeyword("if"),
    _return: createKeyword("return", {
        beforeExpr
    }),
    _switch: createKeyword("switch"),
    _throw: createKeyword("throw", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    _try: createKeyword("try"),
    _var: createKeyword("var"),
    _const: createKeyword("const"),
    _while: createKeyword("while", {
        isLoop
    }),
    _with: createKeyword("with"),
    _new: createKeyword("new", {
        beforeExpr,
        startsExpr
    }),
    _this: createKeyword("this", {
        startsExpr
    }),
    _super: createKeyword("super", {
        startsExpr
    }),
    _class: createKeyword("class", {
        startsExpr
    }),
    _extends: createKeyword("extends", {
        beforeExpr
    }),
    _export: createKeyword("export"),
    _import: createKeyword("import", {
        startsExpr
    }),
    _null: createKeyword("null", {
        startsExpr
    }),
    _true: createKeyword("true", {
        startsExpr
    }),
    _false: createKeyword("false", {
        startsExpr
    }),
    _in: createKeyword("in", {
        beforeExpr,
        binop: 7
    }),
    _instanceof: createKeyword("instanceof", {
        beforeExpr,
        binop: 7
    }),
    _typeof: createKeyword("typeof", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    _void: createKeyword("void", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    _delete: createKeyword("delete", {
        beforeExpr,
        prefix,
        startsExpr
    })
};
const lineBreak = /\r\n?|[\n\u2028\u2029]/;
const lineBreakG = new RegExp(lineBreak.source, "g");
function isNewLine(code) {
    switch(code){
        case 10:
        case 13:
        case 8232:
        case 8233:
            return true;
        default:
            return false;
    }
}
const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
function isWhitespace(code) {
    switch(code){
        case 9:
        case 11:
        case 12:
        case 32:
        case 160:
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
            return true;
        default:
            return false;
    }
}
class Position {
    constructor(line, col){
        this.line = void 0;
        this.column = void 0;
        this.line = line;
        this.column = col;
    }
}
class SourceLocation {
    constructor(start1, end1){
        this.start = void 0;
        this.end = void 0;
        this.filename = void 0;
        this.identifierName = void 0;
        this.start = start1;
        this.end = end1;
    }
}
function getLineInfo(input, offset) {
    let line1 = 1;
    let lineStart = 0;
    let match;
    lineBreakG.lastIndex = 0;
    while((match = lineBreakG.exec(input)) && match.index < offset){
        line1++;
        lineStart = lineBreakG.lastIndex;
    }
    return new Position(line1, offset - lineStart);
}
class BaseParser {
    constructor(){
        this.sawUnambiguousESM = false;
        this.ambiguousScriptDifferentAst = false;
    }
    hasPlugin(name) {
        return this.plugins.has(name);
    }
    getPluginOption(plugin, name) {
        if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];
    }
}
function last(stack) {
    return stack[stack.length - 1];
}
class CommentsParser extends BaseParser {
    addComment(comment) {
        if (this.filename) comment.loc.filename = this.filename;
        this.state.trailingComments.push(comment);
        this.state.leadingComments.push(comment);
    }
    adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {
        if (this.state.leadingComments.length === 0) return;
        let lastElement = null;
        let i = elements.length;
        while(lastElement === null && i > 0)lastElement = elements[--i];
        if (lastElement === null) return;
        for(let j = 0; j < this.state.leadingComments.length; j++)if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {
            this.state.leadingComments.splice(j, 1);
            j--;
        }
        const newTrailingComments = [];
        for(let i1 = 0; i1 < this.state.leadingComments.length; i1++){
            const leadingComment = this.state.leadingComments[i1];
            if (leadingComment.end < node.end) {
                newTrailingComments.push(leadingComment);
                if (!takeAllComments) {
                    this.state.leadingComments.splice(i1, 1);
                    i1--;
                }
            } else {
                if (node.trailingComments === undefined) node.trailingComments = [];
                node.trailingComments.push(leadingComment);
            }
        }
        if (takeAllComments) this.state.leadingComments = [];
        if (newTrailingComments.length > 0) lastElement.trailingComments = newTrailingComments;
        else if (lastElement.trailingComments !== undefined) lastElement.trailingComments = [];
    }
    processComment(node) {
        if (node.type === "Program" && node.body.length > 0) return;
        const stack = this.state.commentStack;
        let firstChild, lastChild, trailingComments, i, j;
        if (this.state.trailingComments.length > 0) {
            if (this.state.trailingComments[0].start >= node.end) {
                trailingComments = this.state.trailingComments;
                this.state.trailingComments = [];
            } else this.state.trailingComments.length = 0;
        } else if (stack.length > 0) {
            const lastInStack = last(stack);
            if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
                trailingComments = lastInStack.trailingComments;
                delete lastInStack.trailingComments;
            }
        }
        if (stack.length > 0 && last(stack).start >= node.start) firstChild = stack.pop();
        while(stack.length > 0 && last(stack).start >= node.start)lastChild = stack.pop();
        if (!lastChild && firstChild) lastChild = firstChild;
        if (firstChild) switch(node.type){
            case "ObjectExpression":
                this.adjustCommentsAfterTrailingComma(node, node.properties);
                break;
            case "ObjectPattern":
                this.adjustCommentsAfterTrailingComma(node, node.properties, true);
                break;
            case "CallExpression":
                this.adjustCommentsAfterTrailingComma(node, node.arguments);
                break;
            case "ArrayExpression":
                this.adjustCommentsAfterTrailingComma(node, node.elements);
                break;
            case "ArrayPattern":
                this.adjustCommentsAfterTrailingComma(node, node.elements, true);
                break;
        }
        else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === "ImportSpecifier" && node.type !== "ImportSpecifier" || this.state.commentPreviousNode.type === "ExportSpecifier" && node.type !== "ExportSpecifier")) this.adjustCommentsAfterTrailingComma(node, [
            this.state.commentPreviousNode
        ]);
        if (lastChild) {
            if (lastChild.leadingComments) {
                if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {
                    node.leadingComments = lastChild.leadingComments;
                    delete lastChild.leadingComments;
                } else {
                    for(i = lastChild.leadingComments.length - 2; i >= 0; --i)if (lastChild.leadingComments[i].end <= node.start) {
                        node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
                        break;
                    }
                }
            }
        } else if (this.state.leadingComments.length > 0) {
            if (last(this.state.leadingComments).end <= node.start) {
                if (this.state.commentPreviousNode) {
                    for(j = 0; j < this.state.leadingComments.length; j++)if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {
                        this.state.leadingComments.splice(j, 1);
                        j--;
                    }
                }
                if (this.state.leadingComments.length > 0) {
                    node.leadingComments = this.state.leadingComments;
                    this.state.leadingComments = [];
                }
            } else {
                for(i = 0; i < this.state.leadingComments.length; i++){
                    if (this.state.leadingComments[i].end > node.start) break;
                }
                const leadingComments = this.state.leadingComments.slice(0, i);
                if (leadingComments.length) node.leadingComments = leadingComments;
                trailingComments = this.state.leadingComments.slice(i);
                if (trailingComments.length === 0) trailingComments = null;
            }
        }
        this.state.commentPreviousNode = node;
        if (trailingComments) {
            if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) node.innerComments = trailingComments;
            else {
                const firstTrailingCommentIndex = trailingComments.findIndex((comment)=>comment.end >= node.end
                );
                if (firstTrailingCommentIndex > 0) {
                    node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);
                    node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);
                } else node.trailingComments = trailingComments;
            }
        }
        stack.push(node);
    }
}
const ErrorCodes = Object.freeze({
    SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
    SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
});
const ErrorMessages = makeErrorTemplates({
    AccessorIsGenerator: "A %0ter cannot be a generator.",
    ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
    AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
    AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
    AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
    AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
    AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
    BadGetterArity: "A 'get' accesor must not have any formal parameters.",
    BadSetterArity: "A 'set' accesor must have exactly one formal parameter.",
    BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.",
    ConstructorClassField: "Classes may not have a field named 'constructor'.",
    ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
    ConstructorIsAccessor: "Class constructor may not be an accessor.",
    ConstructorIsAsync: "Constructor can't be an async function.",
    ConstructorIsGenerator: "Constructor can't be a generator.",
    DeclarationMissingInitializer: "'%0' require an initialization value.",
    DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.",
    DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
    DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.",
    DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
    DecoratorStaticBlock: "Decorators can't be used with a static block.",
    DeletePrivateField: "Deleting a private field is not allowed.",
    DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
    DuplicateConstructor: "Duplicate constructor in the same class.",
    DuplicateDefaultExport: "Only one default export allowed per module.",
    DuplicateExport: "`%0` has already been exported. Exported identifiers must be unique.",
    DuplicateProto: "Redefinition of __proto__ property.",
    DuplicateRegExpFlags: "Duplicate regular expression flag.",
    ElementAfterRest: "Rest element must be last element.",
    EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
    ExportBindingIsString: "A string literal cannot be used as an exported binding without `from`.\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?",
    ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
    ForInOfLoopInitializer: "'%0' loop variable declaration may not have an initializer.",
    ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
    ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
    GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
    IllegalBreakContinue: "Unsyntactic %0.",
    IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
    IllegalReturn: "'return' outside of function.",
    ImportBindingIsString: 'A string literal cannot be used as an imported binding.\n- Did you mean `import { "%0" as foo }`?',
    ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
    ImportCallArity: "`import()` requires exactly %0.",
    ImportCallNotNewExpression: "Cannot use new with import(...).",
    ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
    InvalidBigIntLiteral: "Invalid BigIntLiteral.",
    InvalidCodePoint: "Code point out of bounds.",
    InvalidDecimal: "Invalid decimal.",
    InvalidDigit: "Expected number in radix %0.",
    InvalidEscapeSequence: "Bad character escape sequence.",
    InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
    InvalidEscapedReservedWord: "Escape sequence in keyword %0.",
    InvalidIdentifier: "Invalid identifier %0.",
    InvalidLhs: "Invalid left-hand side in %0.",
    InvalidLhsBinding: "Binding invalid left-hand side in %0.",
    InvalidNumber: "Invalid number.",
    InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
    InvalidOrUnexpectedToken: "Unexpected character '%0'.",
    InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
    InvalidPrivateFieldResolution: "Private name #%0 is not defined.",
    InvalidPropertyBindingPattern: "Binding member expression.",
    InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
    InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
    LabelRedeclaration: "Label '%0' is already declared.",
    LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
    LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
    MalformedRegExpFlags: "Invalid regular expression flag.",
    MissingClassName: "A class name is required.",
    MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
    MissingSemicolon: "Missing semicolon.",
    MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
    MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
    ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
    ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
    ModuleAttributesWithDuplicateKeys: 'Duplicate key "%0" is not allowed in module attributes.',
    ModuleExportNameHasLoneSurrogate: "An export name cannot include a lone surrogate, found '\\u%0'.",
    ModuleExportUndefined: "Export '%0' is not defined.",
    MultipleDefaultsInSwitch: "Multiple default clauses.",
    NewlineAfterThrow: "Illegal newline after throw.",
    NoCatchOrFinally: "Missing catch or finally clause.",
    NumberIdentifier: "Identifier directly after number.",
    NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
    ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
    OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
    OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
    OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
    ParamDupe: "Argument name clash.",
    PatternHasAccessor: "Object pattern can't contain getter or setter.",
    PatternHasMethod: "Object pattern can't contain methods.",
    PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
    PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
    PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
    PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
    PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
    PrimaryTopicRequiresSmartPipeline: "Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.",
    PrivateInExpectedIn: "Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).",
    PrivateNameRedeclaration: "Duplicate private name #%0.",
    RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    RecordNoProto: "'__proto__' is not allowed in Record expressions.",
    RestTrailingComma: "Unexpected trailing comma after rest element.",
    SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
    StaticPrototype: "Classes may not have static property named prototype.",
    StrictDelete: "Deleting local variable in strict mode.",
    StrictEvalArguments: "Assigning to '%0' in strict mode.",
    StrictEvalArgumentsBinding: "Binding '%0' in strict mode.",
    StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
    StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
    StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
    StrictWith: "'with' in strict mode.",
    SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
    SuperPrivateField: "Private fields can't be accessed on super.",
    TrailingDecorator: "Decorators must be attached to a class element.",
    TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
    UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
    UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
    UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
    UnexpectedKeyword: "Unexpected keyword '%0'.",
    UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
    UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
    UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
    UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
    UnexpectedPrivateField: "Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\n or a property of member expression (i.e. this.#p).",
    UnexpectedReservedWord: "Unexpected reserved word '%0'.",
    UnexpectedSuper: "'super' is only allowed in object methods and classes.",
    UnexpectedToken: "Unexpected token '%0'.",
    UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
    UnsupportedBind: "Binding should be performed on object property.",
    UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
    UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
    UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
    UnsupportedMetaProperty: "The only valid meta property for %0 is %0.%1.",
    UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
    UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
    UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
    UnterminatedComment: "Unterminated comment.",
    UnterminatedRegExp: "Unterminated regular expression.",
    UnterminatedString: "Unterminated string constant.",
    UnterminatedTemplate: "Unterminated template.",
    VarRedeclaration: "Identifier '%0' has already been declared.",
    YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
    YieldInParameter: "Yield expression is not allowed in formal parameters.",
    ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
}, ErrorCodes.SyntaxError);
const SourceTypeModuleErrorMessages = makeErrorTemplates({
    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: "module"'`,
    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: "module"'`
}, ErrorCodes.SourceTypeModuleError);
function makeErrorTemplates(messages, code) {
    const templates = {
    };
    Object.keys(messages).forEach((reasonCode)=>{
        templates[reasonCode] = Object.freeze({
            code,
            reasonCode,
            template: messages[reasonCode]
        });
    });
    return Object.freeze(templates);
}
class ParserError extends CommentsParser {
    getLocationForPosition(pos) {
        let loc;
        if (pos === this.state.start) loc = this.state.startLoc;
        else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;
        else if (pos === this.state.end) loc = this.state.endLoc;
        else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;
        else loc = getLineInfo(this.input, pos);
        return loc;
    }
    raise(pos, { code , reasonCode , template  }, ...params) {
        return this.raiseWithData(pos, {
            code,
            reasonCode
        }, template, ...params);
    }
    raiseOverwrite(pos, { code , template  }, ...params) {
        const loc = this.getLocationForPosition(pos);
        const message = template.replace(/%(\d+)/g, (_, i)=>params[i]
        ) + ` (${loc.line}:${loc.column})`;
        if (this.options.errorRecovery) {
            const errors = this.state.errors;
            for(let i = errors.length - 1; i >= 0; i--){
                const error = errors[i];
                if (error.pos === pos) return Object.assign(error, {
                    message
                });
                else if (error.pos < pos) break;
            }
        }
        return this._raise({
            code,
            loc,
            pos
        }, message);
    }
    raiseWithData(pos, data, errorTemplate, ...params) {
        const loc = this.getLocationForPosition(pos);
        const message = errorTemplate.replace(/%(\d+)/g, (_, i)=>params[i]
        ) + ` (${loc.line}:${loc.column})`;
        return this._raise(Object.assign({
            loc,
            pos
        }, data), message);
    }
    _raise(errorContext, message) {
        const err = new SyntaxError(message);
        Object.assign(err, errorContext);
        if (this.options.errorRecovery) {
            if (!this.isLookahead) this.state.errors.push(err);
            return err;
        } else throw err;
    }
}
var estree = (superClass)=>class extends superClass {
        parseRegExpLiteral({ pattern , flags  }) {
            let regex = null;
            try {
                regex = new RegExp(pattern, flags);
            } catch (e) {
            }
            const node = this.estreeParseLiteral(regex);
            node.regex = {
                pattern,
                flags
            };
            return node;
        }
        parseBigIntLiteral(value) {
            let bigInt;
            try {
                bigInt = BigInt(value);
            } catch (_unused) {
                bigInt = null;
            }
            const node = this.estreeParseLiteral(bigInt);
            node.bigint = String(node.value || value);
            return node;
        }
        parseDecimalLiteral(value) {
            const decimal = null;
            const node = this.estreeParseLiteral(decimal);
            node.decimal = String(node.value || value);
            return node;
        }
        estreeParseLiteral(value) {
            return this.parseLiteral(value, "Literal");
        }
        parseStringLiteral(value) {
            return this.estreeParseLiteral(value);
        }
        parseNumericLiteral(value) {
            return this.estreeParseLiteral(value);
        }
        parseNullLiteral() {
            return this.estreeParseLiteral(null);
        }
        parseBooleanLiteral(value) {
            return this.estreeParseLiteral(value);
        }
        directiveToStmt(directive) {
            const directiveLiteral = directive.value;
            const stmt = this.startNodeAt(directive.start, directive.loc.start);
            const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);
            expression.value = directiveLiteral.extra.expressionValue;
            expression.raw = directiveLiteral.extra.raw;
            stmt.expression = this.finishNodeAt(expression, "Literal", directiveLiteral.end, directiveLiteral.loc.end);
            stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
            return this.finishNodeAt(stmt, "ExpressionStatement", directive.end, directive.loc.end);
        }
        initFunction(node, isAsync) {
            super.initFunction(node, isAsync);
            node.expression = false;
        }
        checkDeclaration(node) {
            if (node != null && this.isObjectProperty(node)) this.checkDeclaration(node.value);
            else super.checkDeclaration(node);
        }
        getObjectOrClassMethodParams(method) {
            return method.value.params;
        }
        isValidDirective(stmt) {
            var _stmt$expression$extr;
            return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
        }
        stmtToDirective(stmt) {
            const directive = super.stmtToDirective(stmt);
            const value = stmt.expression.value;
            this.addExtra(directive.value, "expressionValue", value);
            return directive;
        }
        parseBlockBody(node, ...args) {
            super.parseBlockBody(node, ...args);
            const directiveStatements = node.directives.map((d)=>this.directiveToStmt(d)
            );
            node.body = directiveStatements.concat(node.body);
            delete node.directives;
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
            if (method.typeParameters) {
                method.value.typeParameters = method.typeParameters;
                delete method.typeParameters;
            }
            classBody.body.push(method);
        }
        parseMaybePrivateName(...args) {
            const node = super.parseMaybePrivateName(...args);
            if (node.type === "PrivateName" && this.getPluginOption("estree", "classFeatures")) return this.convertPrivateNameToPrivateIdentifier(node);
            return node;
        }
        convertPrivateNameToPrivateIdentifier(node) {
            const name = super.getPrivateNameSV(node);
            delete node.id;
            node.name = name;
            node.type = "PrivateIdentifier";
            return node;
        }
        isPrivateName(node) {
            if (!this.getPluginOption("estree", "classFeatures")) return super.isPrivateName(node);
            return node.type === "PrivateIdentifier";
        }
        getPrivateNameSV(node) {
            if (!this.getPluginOption("estree", "classFeatures")) return super.getPrivateNameSV(node);
            return node.name;
        }
        parseLiteral(value, type) {
            const node = super.parseLiteral(value, type);
            node.raw = node.extra.raw;
            delete node.extra;
            return node;
        }
        parseFunctionBody(node, allowExpression, isMethod = false) {
            super.parseFunctionBody(node, allowExpression, isMethod);
            node.expression = node.body.type !== "BlockStatement";
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            let funcNode = this.startNode();
            funcNode.kind = node.kind;
            funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
            funcNode.type = "FunctionExpression";
            delete funcNode.kind;
            node.value = funcNode;
            if (type === "ClassPrivateMethod") node.computed = false;
            type = "MethodDefinition";
            return this.finishNode(node, type);
        }
        parseClassProperty(...args) {
            const propertyNode = super.parseClassProperty(...args);
            if (this.getPluginOption("estree", "classFeatures")) propertyNode.type = "PropertyDefinition";
            return propertyNode;
        }
        parseClassPrivateProperty(...args) {
            const propertyNode = super.parseClassPrivateProperty(...args);
            if (this.getPluginOption("estree", "classFeatures")) {
                propertyNode.type = "PropertyDefinition";
                propertyNode.computed = false;
            }
            return propertyNode;
        }
        parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
            if (node) {
                node.type = "Property";
                if (node.kind === "method") node.kind = "init";
                node.shorthand = false;
            }
            return node;
        }
        parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
            const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
            if (node) {
                node.kind = "init";
                node.type = "Property";
            }
            return node;
        }
        toAssignable(node, isLHS = false) {
            if (node != null && this.isObjectProperty(node)) {
                this.toAssignable(node.value, isLHS);
                return node;
            }
            return super.toAssignable(node, isLHS);
        }
        toAssignableObjectExpressionProp(prop, ...args) {
            if (prop.kind === "get" || prop.kind === "set") this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);
            else if (prop.method) this.raise(prop.key.start, ErrorMessages.PatternHasMethod);
            else super.toAssignableObjectExpressionProp(prop, ...args);
        }
        finishCallExpression(node, optional) {
            super.finishCallExpression(node, optional);
            if (node.callee.type === "Import") {
                node.type = "ImportExpression";
                node.source = node.arguments[0];
                if (this.hasPlugin("importAssertions")) {
                    var _node$arguments$;
                    node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
                }
                delete node.arguments;
                delete node.callee;
            }
            return node;
        }
        toReferencedArguments(node) {
            if (node.type === "ImportExpression") return;
            super.toReferencedArguments(node);
        }
        parseExport(node) {
            super.parseExport(node);
            switch(node.type){
                case "ExportAllDeclaration":
                    node.exported = null;
                    break;
                case "ExportNamedDeclaration":
                    if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
                        node.type = "ExportAllDeclaration";
                        node.exported = node.specifiers[0].exported;
                        delete node.specifiers;
                    }
                    break;
            }
            return node;
        }
        parseSubscript(base, startPos, startLoc, noCalls, state) {
            const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);
            if (state.optionalChainMember) {
                if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") node.type = node.type.substring(8);
                if (state.stop) {
                    const chain = this.startNodeAtNode(node);
                    chain.expression = node;
                    return this.finishNode(chain, "ChainExpression");
                }
            } else if (node.type === "MemberExpression" || node.type === "CallExpression") node.optional = false;
            return node;
        }
        hasPropertyAsPrivateName(node) {
            if (node.type === "ChainExpression") node = node.expression;
            return super.hasPropertyAsPrivateName(node);
        }
        isOptionalChain(node) {
            return node.type === "ChainExpression";
        }
        isObjectProperty(node) {
            return node.type === "Property" && node.kind === "init" && !node.method;
        }
        isObjectMethod(node) {
            return node.method || node.kind === "get" || node.kind === "set";
        }
    }
;
class TokContext {
    constructor(token1, isExpr, preserveSpace){
        this.token = void 0;
        this.isExpr = void 0;
        this.preserveSpace = void 0;
        this.token = token1;
        this.isExpr = !!isExpr;
        this.preserveSpace = !!preserveSpace;
    }
}
const types = {
    braceStatement: new TokContext("{", false),
    braceExpression: new TokContext("{", true),
    recordExpression: new TokContext("#{", true),
    templateQuasi: new TokContext("${", false),
    parenStatement: new TokContext("(", false),
    parenExpression: new TokContext("(", true),
    template: new TokContext("`", true, true),
    functionExpression: new TokContext("function", true),
    functionStatement: new TokContext("function", false)
};
types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
    if (this.state.context.length === 1) {
        this.state.exprAllowed = true;
        return;
    }
    let out = this.state.context.pop();
    if (out === types.braceStatement && this.curContext().token === "function") out = this.state.context.pop();
    this.state.exprAllowed = !out.isExpr;
};
types$1.name.updateContext = function(prevType) {
    let allowed = false;
    if (prevType !== types$1.dot) {
        if (this.state.value === "of" && !this.state.exprAllowed && prevType !== types$1._function && prevType !== types$1._class) allowed = true;
    }
    this.state.exprAllowed = allowed;
};
types$1.braceL.updateContext = function(prevType) {
    this.state.context.push(this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression);
    this.state.exprAllowed = true;
};
types$1.dollarBraceL.updateContext = function() {
    this.state.context.push(types.templateQuasi);
    this.state.exprAllowed = true;
};
types$1.parenL.updateContext = function(prevType) {
    const statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
    this.state.context.push(statementParens ? types.parenStatement : types.parenExpression);
    this.state.exprAllowed = true;
};
types$1.incDec.updateContext = function() {
};
types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
    if (prevType.beforeExpr && prevType !== types$1.semi && prevType !== types$1._else && !(prevType === types$1._return && this.hasPrecedingLineBreak()) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) this.state.context.push(types.functionExpression);
    else this.state.context.push(types.functionStatement);
    this.state.exprAllowed = false;
};
types$1.backQuote.updateContext = function() {
    if (this.curContext() === types.template) this.state.context.pop();
    else this.state.context.push(types.template);
    this.state.exprAllowed = false;
};
types$1.braceHashL.updateContext = function() {
    this.state.context.push(types.recordExpression);
    this.state.exprAllowed = true;
};
let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [
    0,
    11,
    2,
    25,
    2,
    18,
    2,
    1,
    2,
    14,
    3,
    13,
    35,
    122,
    70,
    52,
    268,
    28,
    4,
    48,
    48,
    31,
    14,
    29,
    6,
    37,
    11,
    29,
    3,
    35,
    5,
    7,
    2,
    4,
    43,
    157,
    19,
    35,
    5,
    35,
    5,
    39,
    9,
    51,
    157,
    310,
    10,
    21,
    11,
    7,
    153,
    5,
    3,
    0,
    2,
    43,
    2,
    1,
    4,
    0,
    3,
    22,
    11,
    22,
    10,
    30,
    66,
    18,
    2,
    1,
    11,
    21,
    11,
    25,
    71,
    55,
    7,
    1,
    65,
    0,
    16,
    3,
    2,
    2,
    2,
    28,
    43,
    28,
    4,
    28,
    36,
    7,
    2,
    27,
    28,
    53,
    11,
    21,
    11,
    18,
    14,
    17,
    111,
    72,
    56,
    50,
    14,
    50,
    14,
    35,
    349,
    41,
    7,
    1,
    79,
    28,
    11,
    0,
    9,
    21,
    107,
    20,
    28,
    22,
    13,
    52,
    76,
    44,
    33,
    24,
    27,
    35,
    30,
    0,
    3,
    0,
    9,
    34,
    4,
    0,
    13,
    47,
    15,
    3,
    22,
    0,
    2,
    0,
    36,
    17,
    2,
    24,
    85,
    6,
    2,
    0,
    2,
    3,
    2,
    14,
    2,
    9,
    8,
    46,
    39,
    7,
    3,
    1,
    3,
    21,
    2,
    6,
    2,
    1,
    2,
    4,
    4,
    0,
    19,
    0,
    13,
    4,
    159,
    52,
    19,
    3,
    21,
    2,
    31,
    47,
    21,
    1,
    2,
    0,
    185,
    46,
    42,
    3,
    37,
    47,
    21,
    0,
    60,
    42,
    14,
    0,
    72,
    26,
    230,
    43,
    117,
    63,
    32,
    7,
    3,
    0,
    3,
    7,
    2,
    1,
    2,
    23,
    16,
    0,
    2,
    0,
    95,
    7,
    3,
    38,
    17,
    0,
    2,
    0,
    29,
    0,
    11,
    39,
    8,
    0,
    22,
    0,
    12,
    45,
    20,
    0,
    35,
    56,
    264,
    8,
    2,
    36,
    18,
    0,
    50,
    29,
    113,
    6,
    2,
    1,
    2,
    37,
    22,
    0,
    26,
    5,
    2,
    1,
    2,
    31,
    15,
    0,
    328,
    18,
    190,
    0,
    80,
    921,
    103,
    110,
    18,
    195,
    2749,
    1070,
    4050,
    582,
    8634,
    568,
    8,
    30,
    114,
    29,
    19,
    47,
    17,
    3,
    32,
    20,
    6,
    18,
    689,
    63,
    129,
    74,
    6,
    0,
    67,
    12,
    65,
    1,
    2,
    0,
    29,
    6135,
    9,
    1237,
    43,
    8,
    8952,
    286,
    50,
    2,
    18,
    3,
    9,
    395,
    2309,
    106,
    6,
    12,
    4,
    8,
    8,
    9,
    5991,
    84,
    2,
    70,
    2,
    1,
    3,
    0,
    3,
    1,
    3,
    3,
    2,
    11,
    2,
    0,
    2,
    6,
    2,
    64,
    2,
    3,
    3,
    7,
    2,
    6,
    2,
    27,
    2,
    3,
    2,
    4,
    2,
    0,
    4,
    6,
    2,
    339,
    3,
    24,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    7,
    2357,
    44,
    11,
    6,
    17,
    0,
    370,
    43,
    1301,
    196,
    60,
    67,
    8,
    0,
    1205,
    3,
    2,
    26,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    9,
    2,
    3,
    2,
    0,
    2,
    0,
    7,
    0,
    5,
    0,
    2,
    0,
    2,
    0,
    2,
    2,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    1,
    2,
    0,
    3,
    3,
    2,
    6,
    2,
    3,
    2,
    3,
    2,
    0,
    2,
    9,
    2,
    16,
    6,
    2,
    2,
    4,
    2,
    16,
    4421,
    42717,
    35,
    4148,
    12,
    221,
    3,
    5761,
    15,
    7472,
    3104,
    541,
    1507,
    4938
];
const astralIdentifierCodes = [
    509,
    0,
    227,
    0,
    150,
    4,
    294,
    9,
    1368,
    2,
    2,
    1,
    6,
    3,
    41,
    2,
    5,
    0,
    166,
    1,
    574,
    3,
    9,
    9,
    370,
    1,
    154,
    10,
    176,
    2,
    54,
    14,
    32,
    9,
    16,
    3,
    46,
    10,
    54,
    9,
    7,
    2,
    37,
    13,
    2,
    9,
    6,
    1,
    45,
    0,
    13,
    2,
    49,
    13,
    9,
    3,
    2,
    11,
    83,
    11,
    7,
    0,
    161,
    11,
    6,
    9,
    7,
    3,
    56,
    1,
    2,
    6,
    3,
    1,
    3,
    2,
    10,
    0,
    11,
    1,
    3,
    6,
    4,
    4,
    193,
    17,
    10,
    9,
    5,
    0,
    82,
    19,
    13,
    9,
    214,
    6,
    3,
    8,
    28,
    1,
    83,
    16,
    16,
    9,
    82,
    12,
    9,
    9,
    84,
    14,
    5,
    9,
    243,
    14,
    166,
    9,
    71,
    5,
    2,
    1,
    3,
    3,
    2,
    0,
    2,
    1,
    13,
    9,
    120,
    6,
    3,
    6,
    4,
    0,
    29,
    9,
    41,
    6,
    2,
    3,
    9,
    0,
    10,
    10,
    47,
    15,
    406,
    7,
    2,
    7,
    17,
    9,
    57,
    21,
    2,
    13,
    123,
    5,
    4,
    0,
    2,
    1,
    2,
    6,
    2,
    0,
    9,
    9,
    49,
    4,
    2,
    1,
    2,
    4,
    9,
    9,
    330,
    3,
    19306,
    9,
    135,
    4,
    60,
    6,
    26,
    9,
    1014,
    0,
    2,
    54,
    8,
    3,
    82,
    0,
    12,
    1,
    19628,
    1,
    5319,
    4,
    4,
    5,
    9,
    7,
    3,
    6,
    31,
    3,
    149,
    2,
    1418,
    49,
    513,
    54,
    5,
    49,
    9,
    0,
    15,
    0,
    23,
    4,
    2,
    14,
    1361,
    6,
    2,
    16,
    3,
    6,
    2,
    1,
    2,
    4,
    262,
    6,
    10,
    9,
    419,
    13,
    1495,
    6,
    110,
    6,
    6,
    9,
    4759,
    9,
    787719,
    239
];
function isInAstralSet(code, set) {
    let pos = 65536;
    for(let i = 0, length = set.length; i < length; i += 2){
        pos += set[i];
        if (pos > code) return false;
        pos += set[i + 1];
        if (pos >= code) return true;
    }
    return false;
}
function isIdentifierStart(code) {
    if (code < 65) return code === 36;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
    return isInAstralSet(code, astralIdentifierStartCodes);
}
function isIdentifierChar(code) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
const reservedWords = {
    keyword: [
        "break",
        "case",
        "catch",
        "continue",
        "debugger",
        "default",
        "do",
        "else",
        "finally",
        "for",
        "function",
        "if",
        "return",
        "switch",
        "throw",
        "try",
        "var",
        "const",
        "while",
        "with",
        "new",
        "this",
        "super",
        "class",
        "extends",
        "export",
        "import",
        "null",
        "true",
        "false",
        "in",
        "instanceof",
        "typeof",
        "void",
        "delete"
    ],
    strict: [
        "implements",
        "interface",
        "let",
        "package",
        "private",
        "protected",
        "public",
        "static",
        "yield"
    ],
    strictBind: [
        "eval",
        "arguments"
    ]
};
const keywords = new Set(reservedWords.keyword);
const reservedWordsStrictSet = new Set(reservedWords.strict);
const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
    return keywords.has(word);
}
function isIteratorStart(current, next) {
    return current === 64 && next === 64;
}
const SCOPE_OTHER = 0, SCOPE_PROGRAM = 1, SCOPE_FUNCTION = 2, SCOPE_ARROW = 4, SCOPE_SIMPLE_CATCH = 8, SCOPE_SUPER = 16, SCOPE_DIRECT_SUPER = 32, SCOPE_CLASS = 64, SCOPE_STATIC_BLOCK = 128, SCOPE_TS_MODULE = 256, SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
const BIND_KIND_VALUE = 1, BIND_KIND_TYPE = 2, BIND_SCOPE_VAR = 4, BIND_SCOPE_LEXICAL = 8, BIND_SCOPE_FUNCTION = 16, BIND_FLAGS_NONE = 64, BIND_FLAGS_CLASS = 128, BIND_FLAGS_TS_ENUM = 256, BIND_FLAGS_TS_CONST_ENUM = 512, BIND_FLAGS_TS_EXPORT_ONLY = 1024, BIND_FLAGS_FLOW_DECLARE_FN = 2048;
const BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS, BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0, BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0, BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0, BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS, BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0, BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM, BIND_TS_AMBIENT = 0 | BIND_FLAGS_TS_EXPORT_ONLY, BIND_NONE = 0 | BIND_FLAGS_NONE, BIND_OUTSIDE = BIND_KIND_VALUE | 0 | BIND_FLAGS_NONE, BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM, BIND_TS_NAMESPACE = 0 | BIND_FLAGS_TS_EXPORT_ONLY, BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
const CLASS_ELEMENT_FLAG_STATIC = 4, CLASS_ELEMENT_KIND_GETTER = 2, CLASS_ELEMENT_KIND_SETTER = 1, CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
const CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC, CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC, CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER, CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER, CLASS_ELEMENT_OTHER = 0;
class Scope {
    constructor(flags1){
        this.flags = void 0;
        this.var = [];
        this.lexical = [];
        this.functions = [];
        this.flags = flags1;
    }
}
class ScopeHandler {
    constructor(raise, inModule1){
        this.scopeStack = [];
        this.undefinedExports = new Map();
        this.undefinedPrivateNames = new Map();
        this.raise = raise;
        this.inModule = inModule1;
    }
    get inFunction() {
        return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
    }
    get allowSuper() {
        return (this.currentThisScope().flags & SCOPE_SUPER) > 0;
    }
    get allowDirectSuper() {
        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
    }
    get inClass() {
        return (this.currentThisScope().flags & SCOPE_CLASS) > 0;
    }
    get inStaticBlock() {
        return (this.currentThisScope().flags & SCOPE_STATIC_BLOCK) > 0;
    }
    get inNonArrowFunction() {
        return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;
    }
    get treatFunctionsAsVar() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
    }
    createScope(flags) {
        return new Scope(flags);
    }
    enter(flags) {
        this.scopeStack.push(this.createScope(flags));
    }
    exit() {
        this.scopeStack.pop();
    }
    treatFunctionsAsVarInScope(scope) {
        return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);
    }
    declareName(name, bindingType, pos) {
        let scope = this.currentScope();
        if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {
            this.checkRedeclarationInScope(scope, name, bindingType, pos);
            if (bindingType & BIND_SCOPE_FUNCTION) scope.functions.push(name);
            else scope.lexical.push(name);
            if (bindingType & BIND_SCOPE_LEXICAL) this.maybeExportDefined(scope, name);
        } else if (bindingType & BIND_SCOPE_VAR) for(let i = this.scopeStack.length - 1; i >= 0; --i){
            scope = this.scopeStack[i];
            this.checkRedeclarationInScope(scope, name, bindingType, pos);
            scope.var.push(name);
            this.maybeExportDefined(scope, name);
            if (scope.flags & SCOPE_VAR) break;
        }
        if (this.inModule && scope.flags & SCOPE_PROGRAM) this.undefinedExports.delete(name);
    }
    maybeExportDefined(scope, name) {
        if (this.inModule && scope.flags & SCOPE_PROGRAM) this.undefinedExports.delete(name);
    }
    checkRedeclarationInScope(scope, name, bindingType, pos) {
        if (this.isRedeclaredInScope(scope, name, bindingType)) this.raise(pos, ErrorMessages.VarRedeclaration, name);
    }
    isRedeclaredInScope(scope, name, bindingType) {
        if (!(bindingType & BIND_KIND_VALUE)) return false;
        if (bindingType & BIND_SCOPE_LEXICAL) return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
        if (bindingType & BIND_SCOPE_FUNCTION) return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;
        return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;
    }
    checkLocalExport(id) {
        if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) this.undefinedExports.set(id.name, id.start);
    }
    currentScope() {
        return this.scopeStack[this.scopeStack.length - 1];
    }
    currentVarScope() {
        for(let i = this.scopeStack.length - 1;; i--){
            const scope = this.scopeStack[i];
            if (scope.flags & SCOPE_VAR) return scope;
        }
    }
    currentThisScope() {
        for(let i = this.scopeStack.length - 1;; i--){
            const scope = this.scopeStack[i];
            if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) return scope;
        }
    }
}
class FlowScope extends Scope {
    constructor(...args2){
        super(...args2);
        this.declareFunctions = [];
    }
}
class FlowScopeHandler extends ScopeHandler {
    createScope(flags) {
        return new FlowScope(flags);
    }
    declareName(name, bindingType, pos) {
        const scope = this.currentScope();
        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
            this.checkRedeclarationInScope(scope, name, bindingType, pos);
            this.maybeExportDefined(scope, name);
            scope.declareFunctions.push(name);
            return;
        }
        super.declareName(...arguments);
    }
    isRedeclaredInScope(scope, name, bindingType) {
        if (super.isRedeclaredInScope(...arguments)) return true;
        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) return !scope.declareFunctions.includes(name) && (scope.lexical.includes(name) || scope.functions.includes(name));
        return false;
    }
    checkLocalExport(id) {
        if (this.scopeStack[0].declareFunctions.indexOf(id.name) === -1) super.checkLocalExport(id);
    }
}
const reservedTypes = new Set([
    "_",
    "any",
    "bool",
    "boolean",
    "empty",
    "extends",
    "false",
    "interface",
    "mixed",
    "null",
    "number",
    "static",
    "string",
    "true",
    "typeof",
    "void"
]);
const FlowErrors = makeErrorTemplates({
    AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
    AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
    AssignReservedType: "Cannot overwrite reserved type %0.",
    DeclareClassElement: "The `declare` modifier can only appear on class fields.",
    DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
    DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
    EnumBooleanMemberNotInitialized: "Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.",
    EnumDuplicateMemberName: "Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.",
    EnumInconsistentMemberValues: "Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.",
    EnumInvalidExplicitType: "Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
    EnumInvalidExplicitTypeUnknownSupplied: "Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
    EnumInvalidMemberInitializerPrimaryType: "Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.",
    EnumInvalidMemberInitializerSymbolType: "Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.",
    EnumInvalidMemberInitializerUnknownType: "The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.",
    EnumInvalidMemberName: "Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.",
    EnumNumberMemberNotInitialized: "Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.",
    EnumStringMemberInconsistentlyInitailized: "String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.",
    GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
    ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
    InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
    InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
    InexactVariance: "Explicit inexact syntax cannot have variance.",
    InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
    MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
    NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
    NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
    OptionalBindingPattern: "A binding pattern parameter cannot be optional in an implementation signature.",
    SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
    SpreadVariance: "Spread properties cannot have variance.",
    ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
    ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
    ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
    ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
    ThisParamNoDefault: "The `this` parameter may not have a default value.",
    TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
    UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
    UnexpectedReservedType: "Unexpected reserved type %0.",
    UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
    UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
    UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
    UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
    UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
    UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
    UnsupportedDeclareExportKind: "`declare export %0` is not supported. Use `%1` instead.",
    UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
    UnterminatedFlowComment: "Unterminated flow-comment."
}, ErrorCodes.SyntaxError);
function isEsModuleType(bodyElement) {
    return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
}
function hasTypeImportKind(node) {
    return node.importKind === "type" || node.importKind === "typeof";
}
function isMaybeDefaultImport(state) {
    return (state.type === types$1.name || !!state.type.keyword) && state.value !== "from";
}
const exportSuggestions = {
    const: "declare export var",
    let: "declare export var",
    type: "export type",
    interface: "export interface"
};
function partition(list, test) {
    const list1 = [];
    const list2 = [];
    for(let i = 0; i < list.length; i++)(test(list[i], i, list) ? list1 : list2).push(list[i]);
    return [
        list1,
        list2
    ];
}
const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
var flow = (superClass)=>class extends superClass {
        constructor(...args1){
            super(...args1);
            this.flowPragma = undefined;
        }
        getScopeHandler() {
            return FlowScopeHandler;
        }
        shouldParseTypes() {
            return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
        }
        shouldParseEnums() {
            return !!this.getPluginOption("flow", "enums");
        }
        finishToken(type, val) {
            if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {
                if (this.flowPragma === undefined) this.flowPragma = null;
            }
            return super.finishToken(type, val);
        }
        addComment(comment) {
            if (this.flowPragma === undefined) {
                const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
                if (!matches) ;
                else if (matches[1] === "flow") this.flowPragma = "flow";
                else if (matches[1] === "noflow") this.flowPragma = "noflow";
                else throw new Error("Unexpected flow pragma");
            }
            return super.addComment(comment);
        }
        flowParseTypeInitialiser(tok) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            this.expect(tok || types$1.colon);
            const type = this.flowParseType();
            this.state.inType = oldInType;
            return type;
        }
        flowParsePredicate() {
            const node = this.startNode();
            const moduloPos = this.state.start;
            this.next();
            this.expectContextual("checks");
            if (this.state.lastTokStart > moduloPos + 1) this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);
            if (this.eat(types$1.parenL)) {
                node.value = this.parseExpression();
                this.expect(types$1.parenR);
                return this.finishNode(node, "DeclaredPredicate");
            } else return this.finishNode(node, "InferredPredicate");
        }
        flowParseTypeAndPredicateInitialiser() {
            const oldInType = this.state.inType;
            this.state.inType = true;
            this.expect(types$1.colon);
            let type = null;
            let predicate = null;
            if (this.match(types$1.modulo)) {
                this.state.inType = oldInType;
                predicate = this.flowParsePredicate();
            } else {
                type = this.flowParseType();
                this.state.inType = oldInType;
                if (this.match(types$1.modulo)) predicate = this.flowParsePredicate();
            }
            return [
                type,
                predicate
            ];
        }
        flowParseDeclareClass(node) {
            this.next();
            this.flowParseInterfaceish(node, true);
            return this.finishNode(node, "DeclareClass");
        }
        flowParseDeclareFunction(node) {
            this.next();
            const id = node.id = this.parseIdentifier();
            const typeNode = this.startNode();
            const typeContainer = this.startNode();
            if (this.isRelational("<")) typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
            else typeNode.typeParameters = null;
            this.expect(types$1.parenL);
            const tmp = this.flowParseFunctionTypeParams();
            typeNode.params = tmp.params;
            typeNode.rest = tmp.rest;
            typeNode.this = tmp._this;
            this.expect(types$1.parenR);
            [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
            typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
            id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
            this.resetEndLocation(id);
            this.semicolon();
            this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);
            return this.finishNode(node, "DeclareFunction");
        }
        flowParseDeclare(node, insideModule) {
            if (this.match(types$1._class)) return this.flowParseDeclareClass(node);
            else if (this.match(types$1._function)) return this.flowParseDeclareFunction(node);
            else if (this.match(types$1._var)) return this.flowParseDeclareVariable(node);
            else if (this.eatContextual("module")) {
                if (this.match(types$1.dot)) return this.flowParseDeclareModuleExports(node);
                else {
                    if (insideModule) this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);
                    return this.flowParseDeclareModule(node);
                }
            } else if (this.isContextual("type")) return this.flowParseDeclareTypeAlias(node);
            else if (this.isContextual("opaque")) return this.flowParseDeclareOpaqueType(node);
            else if (this.isContextual("interface")) return this.flowParseDeclareInterface(node);
            else if (this.match(types$1._export)) return this.flowParseDeclareExportDeclaration(node, insideModule);
            else throw this.unexpected();
        }
        flowParseDeclareVariable(node) {
            this.next();
            node.id = this.flowParseTypeAnnotatableIdentifier(true);
            this.scope.declareName(node.id.name, BIND_VAR, node.id.start);
            this.semicolon();
            return this.finishNode(node, "DeclareVariable");
        }
        flowParseDeclareModule(node) {
            this.scope.enter(SCOPE_OTHER);
            if (this.match(types$1.string)) node.id = this.parseExprAtom();
            else node.id = this.parseIdentifier();
            const bodyNode = node.body = this.startNode();
            const body = bodyNode.body = [];
            this.expect(types$1.braceL);
            while(!this.match(types$1.braceR)){
                let bodyNode1 = this.startNode();
                if (this.match(types$1._import)) {
                    this.next();
                    if (!this.isContextual("type") && !this.match(types$1._typeof)) this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);
                    this.parseImport(bodyNode1);
                } else {
                    this.expectContextual("declare", FlowErrors.UnsupportedStatementInDeclareModule);
                    bodyNode1 = this.flowParseDeclare(bodyNode1, true);
                }
                body.push(bodyNode1);
            }
            this.scope.exit();
            this.expect(types$1.braceR);
            this.finishNode(bodyNode, "BlockStatement");
            let kind = null;
            let hasModuleExport = false;
            body.forEach((bodyElement)=>{
                if (isEsModuleType(bodyElement)) {
                    if (kind === "CommonJS") this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);
                    kind = "ES";
                } else if (bodyElement.type === "DeclareModuleExports") {
                    if (hasModuleExport) this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);
                    if (kind === "ES") this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);
                    kind = "CommonJS";
                    hasModuleExport = true;
                }
            });
            node.kind = kind || "CommonJS";
            return this.finishNode(node, "DeclareModule");
        }
        flowParseDeclareExportDeclaration(node, insideModule) {
            this.expect(types$1._export);
            if (this.eat(types$1._default)) {
                if (this.match(types$1._function) || this.match(types$1._class)) node.declaration = this.flowParseDeclare(this.startNode());
                else {
                    node.declaration = this.flowParseType();
                    this.semicolon();
                }
                node.default = true;
                return this.finishNode(node, "DeclareExportDeclaration");
            } else {
                if (this.match(types$1._const) || this.isLet() || (this.isContextual("type") || this.isContextual("interface")) && !insideModule) {
                    const label1 = this.state.value;
                    const suggestion = exportSuggestions[label1];
                    throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label1, suggestion);
                }
                if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual("opaque")) {
                    node.declaration = this.flowParseDeclare(this.startNode());
                    node.default = false;
                    return this.finishNode(node, "DeclareExportDeclaration");
                } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual("interface") || this.isContextual("type") || this.isContextual("opaque")) {
                    node = this.parseExport(node);
                    if (node.type === "ExportNamedDeclaration") {
                        node.type = "ExportDeclaration";
                        node.default = false;
                        delete node.exportKind;
                    }
                    node.type = "Declare" + node.type;
                    return node;
                }
            }
            throw this.unexpected();
        }
        flowParseDeclareModuleExports(node) {
            this.next();
            this.expectContextual("exports");
            node.typeAnnotation = this.flowParseTypeAnnotation();
            this.semicolon();
            return this.finishNode(node, "DeclareModuleExports");
        }
        flowParseDeclareTypeAlias(node) {
            this.next();
            this.flowParseTypeAlias(node);
            node.type = "DeclareTypeAlias";
            return node;
        }
        flowParseDeclareOpaqueType(node) {
            this.next();
            this.flowParseOpaqueType(node, true);
            node.type = "DeclareOpaqueType";
            return node;
        }
        flowParseDeclareInterface(node) {
            this.next();
            this.flowParseInterfaceish(node);
            return this.finishNode(node, "DeclareInterface");
        }
        flowParseInterfaceish(node, isClass = false) {
            node.id = this.flowParseRestrictedIdentifier(!isClass, true);
            this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);
            if (this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterDeclaration();
            else node.typeParameters = null;
            node.extends = [];
            node.implements = [];
            node.mixins = [];
            if (this.eat(types$1._extends)) do node.extends.push(this.flowParseInterfaceExtends());
            while (!isClass && this.eat(types$1.comma))
            if (this.isContextual("mixins")) {
                this.next();
                do node.mixins.push(this.flowParseInterfaceExtends());
                while (this.eat(types$1.comma))
            }
            if (this.isContextual("implements")) {
                this.next();
                do node.implements.push(this.flowParseInterfaceExtends());
                while (this.eat(types$1.comma))
            }
            node.body = this.flowParseObjectType({
                allowStatic: isClass,
                allowExact: false,
                allowSpread: false,
                allowProto: isClass,
                allowInexact: false
            });
        }
        flowParseInterfaceExtends() {
            const node = this.startNode();
            node.id = this.flowParseQualifiedTypeIdentifier();
            if (this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterInstantiation();
            else node.typeParameters = null;
            return this.finishNode(node, "InterfaceExtends");
        }
        flowParseInterface(node) {
            this.flowParseInterfaceish(node);
            return this.finishNode(node, "InterfaceDeclaration");
        }
        checkNotUnderscore(word) {
            if (word === "_") this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);
        }
        checkReservedType(word, startLoc, declaration) {
            if (!reservedTypes.has(word)) return;
            this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);
        }
        flowParseRestrictedIdentifier(liberal, declaration) {
            this.checkReservedType(this.state.value, this.state.start, declaration);
            return this.parseIdentifier(liberal);
        }
        flowParseTypeAlias(node) {
            node.id = this.flowParseRestrictedIdentifier(false, true);
            this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);
            if (this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterDeclaration();
            else node.typeParameters = null;
            node.right = this.flowParseTypeInitialiser(types$1.eq);
            this.semicolon();
            return this.finishNode(node, "TypeAlias");
        }
        flowParseOpaqueType(node, declare) {
            this.expectContextual("type");
            node.id = this.flowParseRestrictedIdentifier(true, true);
            this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);
            if (this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterDeclaration();
            else node.typeParameters = null;
            node.supertype = null;
            if (this.match(types$1.colon)) node.supertype = this.flowParseTypeInitialiser(types$1.colon);
            node.impltype = null;
            if (!declare) node.impltype = this.flowParseTypeInitialiser(types$1.eq);
            this.semicolon();
            return this.finishNode(node, "OpaqueType");
        }
        flowParseTypeParameter(requireDefault = false) {
            const nodeStart = this.state.start;
            const node = this.startNode();
            const variance = this.flowParseVariance();
            const ident = this.flowParseTypeAnnotatableIdentifier();
            node.name = ident.name;
            node.variance = variance;
            node.bound = ident.typeAnnotation;
            if (this.match(types$1.eq)) {
                this.eat(types$1.eq);
                node.default = this.flowParseType();
            } else if (requireDefault) this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);
            return this.finishNode(node, "TypeParameter");
        }
        flowParseTypeParameterDeclaration() {
            const oldInType = this.state.inType;
            const node = this.startNode();
            node.params = [];
            this.state.inType = true;
            if (this.isRelational("<") || this.match(types$1.jsxTagStart)) this.next();
            else this.unexpected();
            let defaultRequired = false;
            do {
                const typeParameter = this.flowParseTypeParameter(defaultRequired);
                node.params.push(typeParameter);
                if (typeParameter.default) defaultRequired = true;
                if (!this.isRelational(">")) this.expect(types$1.comma);
            }while (!this.isRelational(">"))
            this.expectRelational(">");
            this.state.inType = oldInType;
            return this.finishNode(node, "TypeParameterDeclaration");
        }
        flowParseTypeParameterInstantiation() {
            const node = this.startNode();
            const oldInType = this.state.inType;
            node.params = [];
            this.state.inType = true;
            this.expectRelational("<");
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = false;
            while(!this.isRelational(">")){
                node.params.push(this.flowParseType());
                if (!this.isRelational(">")) this.expect(types$1.comma);
            }
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            this.expectRelational(">");
            this.state.inType = oldInType;
            return this.finishNode(node, "TypeParameterInstantiation");
        }
        flowParseTypeParameterInstantiationCallOrNew() {
            const node = this.startNode();
            const oldInType = this.state.inType;
            node.params = [];
            this.state.inType = true;
            this.expectRelational("<");
            while(!this.isRelational(">")){
                node.params.push(this.flowParseTypeOrImplicitInstantiation());
                if (!this.isRelational(">")) this.expect(types$1.comma);
            }
            this.expectRelational(">");
            this.state.inType = oldInType;
            return this.finishNode(node, "TypeParameterInstantiation");
        }
        flowParseInterfaceType() {
            const node = this.startNode();
            this.expectContextual("interface");
            node.extends = [];
            if (this.eat(types$1._extends)) do node.extends.push(this.flowParseInterfaceExtends());
            while (this.eat(types$1.comma))
            node.body = this.flowParseObjectType({
                allowStatic: false,
                allowExact: false,
                allowSpread: false,
                allowProto: false,
                allowInexact: false
            });
            return this.finishNode(node, "InterfaceTypeAnnotation");
        }
        flowParseObjectPropertyKey() {
            return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);
        }
        flowParseObjectTypeIndexer(node, isStatic, variance) {
            node.static = isStatic;
            if (this.lookahead().type === types$1.colon) {
                node.id = this.flowParseObjectPropertyKey();
                node.key = this.flowParseTypeInitialiser();
            } else {
                node.id = null;
                node.key = this.flowParseType();
            }
            this.expect(types$1.bracketR);
            node.value = this.flowParseTypeInitialiser();
            node.variance = variance;
            return this.finishNode(node, "ObjectTypeIndexer");
        }
        flowParseObjectTypeInternalSlot(node, isStatic) {
            node.static = isStatic;
            node.id = this.flowParseObjectPropertyKey();
            this.expect(types$1.bracketR);
            this.expect(types$1.bracketR);
            if (this.isRelational("<") || this.match(types$1.parenL)) {
                node.method = true;
                node.optional = false;
                node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));
            } else {
                node.method = false;
                if (this.eat(types$1.question)) node.optional = true;
                node.value = this.flowParseTypeInitialiser();
            }
            return this.finishNode(node, "ObjectTypeInternalSlot");
        }
        flowParseObjectTypeMethodish(node) {
            node.params = [];
            node.rest = null;
            node.typeParameters = null;
            node.this = null;
            if (this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterDeclaration();
            this.expect(types$1.parenL);
            if (this.match(types$1._this)) {
                node.this = this.flowParseFunctionTypeParam(true);
                node.this.name = null;
                if (!this.match(types$1.parenR)) this.expect(types$1.comma);
            }
            while(!this.match(types$1.parenR) && !this.match(types$1.ellipsis)){
                node.params.push(this.flowParseFunctionTypeParam(false));
                if (!this.match(types$1.parenR)) this.expect(types$1.comma);
            }
            if (this.eat(types$1.ellipsis)) node.rest = this.flowParseFunctionTypeParam(false);
            this.expect(types$1.parenR);
            node.returnType = this.flowParseTypeInitialiser();
            return this.finishNode(node, "FunctionTypeAnnotation");
        }
        flowParseObjectTypeCallProperty(node, isStatic) {
            const valueNode = this.startNode();
            node.static = isStatic;
            node.value = this.flowParseObjectTypeMethodish(valueNode);
            return this.finishNode(node, "ObjectTypeCallProperty");
        }
        flowParseObjectType({ allowStatic , allowExact , allowSpread , allowProto , allowInexact  }) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const nodeStart = this.startNode();
            nodeStart.callProperties = [];
            nodeStart.properties = [];
            nodeStart.indexers = [];
            nodeStart.internalSlots = [];
            let endDelim;
            let exact;
            let inexact = false;
            if (allowExact && this.match(types$1.braceBarL)) {
                this.expect(types$1.braceBarL);
                endDelim = types$1.braceBarR;
                exact = true;
            } else {
                this.expect(types$1.braceL);
                endDelim = types$1.braceR;
                exact = false;
            }
            nodeStart.exact = exact;
            while(!this.match(endDelim)){
                let isStatic = false;
                let protoStart = null;
                let inexactStart = null;
                const node = this.startNode();
                if (allowProto && this.isContextual("proto")) {
                    const lookahead = this.lookahead();
                    if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {
                        this.next();
                        protoStart = this.state.start;
                        allowStatic = false;
                    }
                }
                if (allowStatic && this.isContextual("static")) {
                    const lookahead = this.lookahead();
                    if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {
                        this.next();
                        isStatic = true;
                    }
                }
                const variance = this.flowParseVariance();
                if (this.eat(types$1.bracketL)) {
                    if (protoStart != null) this.unexpected(protoStart);
                    if (this.eat(types$1.bracketL)) {
                        if (variance) this.unexpected(variance.start);
                        nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
                    } else nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
                } else if (this.match(types$1.parenL) || this.isRelational("<")) {
                    if (protoStart != null) this.unexpected(protoStart);
                    if (variance) this.unexpected(variance.start);
                    nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
                } else {
                    let kind = "init";
                    if (this.isContextual("get") || this.isContextual("set")) {
                        const lookahead = this.lookahead();
                        if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {
                            kind = this.state.value;
                            this.next();
                        }
                    }
                    const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
                    if (propOrInexact === null) {
                        inexact = true;
                        inexactStart = this.state.lastTokStart;
                    } else nodeStart.properties.push(propOrInexact);
                }
                this.flowObjectTypeSemicolon();
                if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);
            }
            this.expect(endDelim);
            if (allowSpread) nodeStart.inexact = inexact;
            const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
            this.state.inType = oldInType;
            return out;
        }
        flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {
            if (this.eat(types$1.ellipsis)) {
                const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);
                if (isInexactToken) {
                    if (!allowSpread) this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);
                    else if (!allowInexact) this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);
                    if (variance) this.raise(variance.start, FlowErrors.InexactVariance);
                    return null;
                }
                if (!allowSpread) this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);
                if (protoStart != null) this.unexpected(protoStart);
                if (variance) this.raise(variance.start, FlowErrors.SpreadVariance);
                node.argument = this.flowParseType();
                return this.finishNode(node, "ObjectTypeSpreadProperty");
            } else {
                node.key = this.flowParseObjectPropertyKey();
                node.static = isStatic;
                node.proto = protoStart != null;
                node.kind = kind;
                let optional = false;
                if (this.isRelational("<") || this.match(types$1.parenL)) {
                    node.method = true;
                    if (protoStart != null) this.unexpected(protoStart);
                    if (variance) this.unexpected(variance.start);
                    node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));
                    if (kind === "get" || kind === "set") this.flowCheckGetterSetterParams(node);
                    if (!allowSpread && node.key.name === "constructor" && node.value.this) this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);
                } else {
                    if (kind !== "init") this.unexpected();
                    node.method = false;
                    if (this.eat(types$1.question)) optional = true;
                    node.value = this.flowParseTypeInitialiser();
                    node.variance = variance;
                }
                node.optional = optional;
                return this.finishNode(node, "ObjectTypeProperty");
            }
        }
        flowCheckGetterSetterParams(property) {
            const paramCount = property.kind === "get" ? 0 : 1;
            const start1 = property.start;
            const length = property.value.params.length + (property.value.rest ? 1 : 0);
            if (property.value.this) this.raise(property.value.this.start, property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);
            if (length !== paramCount) {
                if (property.kind === "get") this.raise(start1, ErrorMessages.BadGetterArity);
                else this.raise(start1, ErrorMessages.BadSetterArity);
            }
            if (property.kind === "set" && property.value.rest) this.raise(start1, ErrorMessages.BadSetterRestParameter);
        }
        flowObjectTypeSemicolon() {
            if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) this.unexpected();
        }
        flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
            startPos = startPos || this.state.start;
            startLoc = startLoc || this.state.startLoc;
            let node = id || this.flowParseRestrictedIdentifier(true);
            while(this.eat(types$1.dot)){
                const node2 = this.startNodeAt(startPos, startLoc);
                node2.qualification = node;
                node2.id = this.flowParseRestrictedIdentifier(true);
                node = this.finishNode(node2, "QualifiedTypeIdentifier");
            }
            return node;
        }
        flowParseGenericType(startPos, startLoc, id) {
            const node = this.startNodeAt(startPos, startLoc);
            node.typeParameters = null;
            node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);
            if (this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterInstantiation();
            return this.finishNode(node, "GenericTypeAnnotation");
        }
        flowParseTypeofType() {
            const node = this.startNode();
            this.expect(types$1._typeof);
            node.argument = this.flowParsePrimaryType();
            return this.finishNode(node, "TypeofTypeAnnotation");
        }
        flowParseTupleType() {
            const node = this.startNode();
            node.types = [];
            this.expect(types$1.bracketL);
            while(this.state.pos < this.length && !this.match(types$1.bracketR)){
                node.types.push(this.flowParseType());
                if (this.match(types$1.bracketR)) break;
                this.expect(types$1.comma);
            }
            this.expect(types$1.bracketR);
            return this.finishNode(node, "TupleTypeAnnotation");
        }
        flowParseFunctionTypeParam(first) {
            let name = null;
            let optional = false;
            let typeAnnotation = null;
            const node = this.startNode();
            const lh = this.lookahead();
            const isThis = this.state.type === types$1._this;
            if (lh.type === types$1.colon || lh.type === types$1.question) {
                if (isThis && !first) this.raise(node.start, FlowErrors.ThisParamMustBeFirst);
                name = this.parseIdentifier(isThis);
                if (this.eat(types$1.question)) {
                    optional = true;
                    if (isThis) this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);
                }
                typeAnnotation = this.flowParseTypeInitialiser();
            } else typeAnnotation = this.flowParseType();
            node.name = name;
            node.optional = optional;
            node.typeAnnotation = typeAnnotation;
            return this.finishNode(node, "FunctionTypeParam");
        }
        reinterpretTypeAsFunctionTypeParam(type) {
            const node = this.startNodeAt(type.start, type.loc.start);
            node.name = null;
            node.optional = false;
            node.typeAnnotation = type;
            return this.finishNode(node, "FunctionTypeParam");
        }
        flowParseFunctionTypeParams(params = []) {
            let rest = null;
            let _this = null;
            if (this.match(types$1._this)) {
                _this = this.flowParseFunctionTypeParam(true);
                _this.name = null;
                if (!this.match(types$1.parenR)) this.expect(types$1.comma);
            }
            while(!this.match(types$1.parenR) && !this.match(types$1.ellipsis)){
                params.push(this.flowParseFunctionTypeParam(false));
                if (!this.match(types$1.parenR)) this.expect(types$1.comma);
            }
            if (this.eat(types$1.ellipsis)) rest = this.flowParseFunctionTypeParam(false);
            return {
                params,
                rest,
                _this
            };
        }
        flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
            switch(id.name){
                case "any":
                    return this.finishNode(node, "AnyTypeAnnotation");
                case "bool":
                case "boolean":
                    return this.finishNode(node, "BooleanTypeAnnotation");
                case "mixed":
                    return this.finishNode(node, "MixedTypeAnnotation");
                case "empty":
                    return this.finishNode(node, "EmptyTypeAnnotation");
                case "number":
                    return this.finishNode(node, "NumberTypeAnnotation");
                case "string":
                    return this.finishNode(node, "StringTypeAnnotation");
                case "symbol":
                    return this.finishNode(node, "SymbolTypeAnnotation");
                default:
                    this.checkNotUnderscore(id.name);
                    return this.flowParseGenericType(startPos, startLoc, id);
            }
        }
        flowParsePrimaryType() {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            const node = this.startNode();
            let tmp;
            let type;
            let isGroupedType = false;
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            switch(this.state.type){
                case types$1.name:
                    if (this.isContextual("interface")) return this.flowParseInterfaceType();
                    return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
                case types$1.braceL:
                    return this.flowParseObjectType({
                        allowStatic: false,
                        allowExact: false,
                        allowSpread: true,
                        allowProto: false,
                        allowInexact: true
                    });
                case types$1.braceBarL:
                    return this.flowParseObjectType({
                        allowStatic: false,
                        allowExact: true,
                        allowSpread: true,
                        allowProto: false,
                        allowInexact: false
                    });
                case types$1.bracketL:
                    this.state.noAnonFunctionType = false;
                    type = this.flowParseTupleType();
                    this.state.noAnonFunctionType = oldNoAnonFunctionType;
                    return type;
                case types$1.relational:
                    if (this.state.value === "<") {
                        node.typeParameters = this.flowParseTypeParameterDeclaration();
                        this.expect(types$1.parenL);
                        tmp = this.flowParseFunctionTypeParams();
                        node.params = tmp.params;
                        node.rest = tmp.rest;
                        node.this = tmp._this;
                        this.expect(types$1.parenR);
                        this.expect(types$1.arrow);
                        node.returnType = this.flowParseType();
                        return this.finishNode(node, "FunctionTypeAnnotation");
                    }
                    break;
                case types$1.parenL:
                    this.next();
                    if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {
                        if (this.match(types$1.name) || this.match(types$1._this)) {
                            const token1 = this.lookahead().type;
                            isGroupedType = token1 !== types$1.question && token1 !== types$1.colon;
                        } else isGroupedType = true;
                    }
                    if (isGroupedType) {
                        this.state.noAnonFunctionType = false;
                        type = this.flowParseType();
                        this.state.noAnonFunctionType = oldNoAnonFunctionType;
                        if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {
                            this.expect(types$1.parenR);
                            return type;
                        } else this.eat(types$1.comma);
                    }
                    if (type) tmp = this.flowParseFunctionTypeParams([
                        this.reinterpretTypeAsFunctionTypeParam(type)
                    ]);
                    else tmp = this.flowParseFunctionTypeParams();
                    node.params = tmp.params;
                    node.rest = tmp.rest;
                    node.this = tmp._this;
                    this.expect(types$1.parenR);
                    this.expect(types$1.arrow);
                    node.returnType = this.flowParseType();
                    node.typeParameters = null;
                    return this.finishNode(node, "FunctionTypeAnnotation");
                case types$1.string:
                    return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
                case types$1._true:
                case types$1._false:
                    node.value = this.match(types$1._true);
                    this.next();
                    return this.finishNode(node, "BooleanLiteralTypeAnnotation");
                case types$1.plusMin:
                    if (this.state.value === "-") {
                        this.next();
                        if (this.match(types$1.num)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                        if (this.match(types$1.bigint)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                        throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);
                    }
                    throw this.unexpected();
                case types$1.num:
                    return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
                case types$1.bigint:
                    return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
                case types$1._void:
                    this.next();
                    return this.finishNode(node, "VoidTypeAnnotation");
                case types$1._null:
                    this.next();
                    return this.finishNode(node, "NullLiteralTypeAnnotation");
                case types$1._this:
                    this.next();
                    return this.finishNode(node, "ThisTypeAnnotation");
                case types$1.star:
                    this.next();
                    return this.finishNode(node, "ExistsTypeAnnotation");
                default:
                    if (this.state.type.keyword === "typeof") return this.flowParseTypeofType();
                    else if (this.state.type.keyword) {
                        const label1 = this.state.type.label;
                        this.next();
                        return super.createIdentifier(node, label1);
                    }
            }
            throw this.unexpected();
        }
        flowParsePostfixType() {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            let type = this.flowParsePrimaryType();
            let seenOptionalIndexedAccess = false;
            while((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()){
                const node = this.startNodeAt(startPos, startLoc);
                const optional = this.eat(types$1.questionDot);
                seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
                this.expect(types$1.bracketL);
                if (!optional && this.match(types$1.bracketR)) {
                    node.elementType = type;
                    this.next();
                    type = this.finishNode(node, "ArrayTypeAnnotation");
                } else {
                    node.objectType = type;
                    node.indexType = this.flowParseType();
                    this.expect(types$1.bracketR);
                    if (seenOptionalIndexedAccess) {
                        node.optional = optional;
                        type = this.finishNode(node, "OptionalIndexedAccessType");
                    } else type = this.finishNode(node, "IndexedAccessType");
                }
            }
            return type;
        }
        flowParsePrefixType() {
            const node = this.startNode();
            if (this.eat(types$1.question)) {
                node.typeAnnotation = this.flowParsePrefixType();
                return this.finishNode(node, "NullableTypeAnnotation");
            } else return this.flowParsePostfixType();
        }
        flowParseAnonFunctionWithoutParens() {
            const param = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {
                const node = this.startNodeAt(param.start, param.loc.start);
                node.params = [
                    this.reinterpretTypeAsFunctionTypeParam(param)
                ];
                node.rest = null;
                node.this = null;
                node.returnType = this.flowParseType();
                node.typeParameters = null;
                return this.finishNode(node, "FunctionTypeAnnotation");
            }
            return param;
        }
        flowParseIntersectionType() {
            const node = this.startNode();
            this.eat(types$1.bitwiseAND);
            const type = this.flowParseAnonFunctionWithoutParens();
            node.types = [
                type
            ];
            while(this.eat(types$1.bitwiseAND))node.types.push(this.flowParseAnonFunctionWithoutParens());
            return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
        }
        flowParseUnionType() {
            const node = this.startNode();
            this.eat(types$1.bitwiseOR);
            const type = this.flowParseIntersectionType();
            node.types = [
                type
            ];
            while(this.eat(types$1.bitwiseOR))node.types.push(this.flowParseIntersectionType());
            return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
        }
        flowParseType() {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const type = this.flowParseUnionType();
            this.state.inType = oldInType;
            this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;
            return type;
        }
        flowParseTypeOrImplicitInstantiation() {
            if (this.state.type === types$1.name && this.state.value === "_") {
                const startPos = this.state.start;
                const startLoc = this.state.startLoc;
                const node = this.parseIdentifier();
                return this.flowParseGenericType(startPos, startLoc, node);
            } else return this.flowParseType();
        }
        flowParseTypeAnnotation() {
            const node = this.startNode();
            node.typeAnnotation = this.flowParseTypeInitialiser();
            return this.finishNode(node, "TypeAnnotation");
        }
        flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
            const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            if (this.match(types$1.colon)) {
                ident.typeAnnotation = this.flowParseTypeAnnotation();
                this.resetEndLocation(ident);
            }
            return ident;
        }
        typeCastToParameter(node) {
            node.expression.typeAnnotation = node.typeAnnotation;
            this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);
            return node.expression;
        }
        flowParseVariance() {
            let variance = null;
            if (this.match(types$1.plusMin)) {
                variance = this.startNode();
                if (this.state.value === "+") variance.kind = "plus";
                else variance.kind = "minus";
                this.next();
                this.finishNode(variance, "Variance");
            }
            return variance;
        }
        parseFunctionBody(node, allowExpressionBody, isMethod = false) {
            if (allowExpressionBody) return this.forwardNoArrowParamsConversionAt(node, ()=>super.parseFunctionBody(node, true, isMethod)
            );
            return super.parseFunctionBody(node, false, isMethod);
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
            if (this.match(types$1.colon)) {
                const typeNode = this.startNode();
                [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
                node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
            }
            super.parseFunctionBodyAndFinish(node, type, isMethod);
        }
        parseStatement(context, topLevel) {
            if (this.state.strict && this.match(types$1.name) && this.state.value === "interface") {
                const lookahead = this.lookahead();
                if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {
                    const node = this.startNode();
                    this.next();
                    return this.flowParseInterface(node);
                }
            } else if (this.shouldParseEnums() && this.isContextual("enum")) {
                const node = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(node);
            }
            const stmt = super.parseStatement(context, topLevel);
            if (this.flowPragma === undefined && !this.isValidDirective(stmt)) this.flowPragma = null;
            return stmt;
        }
        parseExpressionStatement(node, expr) {
            if (expr.type === "Identifier") {
                if (expr.name === "declare") {
                    if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) return this.flowParseDeclare(node);
                } else if (this.match(types$1.name)) {
                    if (expr.name === "interface") return this.flowParseInterface(node);
                    else if (expr.name === "type") return this.flowParseTypeAlias(node);
                    else if (expr.name === "opaque") return this.flowParseOpaqueType(node, false);
                }
            }
            return super.parseExpressionStatement(node, expr);
        }
        shouldParseExportDeclaration() {
            return this.isContextual("type") || this.isContextual("interface") || this.isContextual("opaque") || this.shouldParseEnums() && this.isContextual("enum") || super.shouldParseExportDeclaration();
        }
        isExportDefaultSpecifier() {
            if (this.match(types$1.name) && (this.state.value === "type" || this.state.value === "interface" || this.state.value === "opaque" || this.shouldParseEnums() && this.state.value === "enum")) return false;
            return super.isExportDefaultSpecifier();
        }
        parseExportDefaultExpression() {
            if (this.shouldParseEnums() && this.isContextual("enum")) {
                const node = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(node);
            }
            return super.parseExportDefaultExpression();
        }
        parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {
            if (!this.match(types$1.question)) return expr;
            if (refNeedsArrowPos) {
                const result = this.tryParse(()=>super.parseConditional(expr, startPos, startLoc)
                );
                if (!result.node) {
                    refNeedsArrowPos.start = result.error.pos || this.state.start;
                    return expr;
                }
                if (result.error) this.state = result.failState;
                return result.node;
            }
            this.expect(types$1.question);
            const state = this.state.clone();
            const originalNoArrowAt = this.state.noArrowAt;
            const node = this.startNodeAt(startPos, startLoc);
            let { consequent , failed  } = this.tryParseConditionalConsequent();
            let [valid, invalid] = this.getArrowLikeExpressions(consequent);
            if (failed || invalid.length > 0) {
                const noArrowAt = [
                    ...originalNoArrowAt
                ];
                if (invalid.length > 0) {
                    this.state = state;
                    this.state.noArrowAt = noArrowAt;
                    for(let i = 0; i < invalid.length; i++)noArrowAt.push(invalid[i].start);
                    ({ consequent , failed  } = this.tryParseConditionalConsequent());
                    [valid, invalid] = this.getArrowLikeExpressions(consequent);
                }
                if (failed && valid.length > 1) this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);
                if (failed && valid.length === 1) {
                    this.state = state;
                    this.state.noArrowAt = noArrowAt.concat(valid[0].start);
                    ({ consequent , failed  } = this.tryParseConditionalConsequent());
                }
            }
            this.getArrowLikeExpressions(consequent, true);
            this.state.noArrowAt = originalNoArrowAt;
            this.expect(types$1.colon);
            node.test = expr;
            node.consequent = consequent;
            node.alternate = this.forwardNoArrowParamsConversionAt(node, ()=>this.parseMaybeAssign(undefined, undefined, undefined)
            );
            return this.finishNode(node, "ConditionalExpression");
        }
        tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            const consequent = this.parseMaybeAssignAllowIn();
            const failed = !this.match(types$1.colon);
            this.state.noArrowParamsConversionAt.pop();
            return {
                consequent,
                failed
            };
        }
        getArrowLikeExpressions(node, disallowInvalid) {
            const stack = [
                node
            ];
            const arrows = [];
            while(stack.length !== 0){
                const node = stack.pop();
                if (node.type === "ArrowFunctionExpression") {
                    if (node.typeParameters || !node.returnType) this.finishArrowValidation(node);
                    else arrows.push(node);
                    stack.push(node.body);
                } else if (node.type === "ConditionalExpression") {
                    stack.push(node.consequent);
                    stack.push(node.alternate);
                }
            }
            if (disallowInvalid) {
                arrows.forEach((node)=>this.finishArrowValidation(node)
                );
                return [
                    arrows,
                    []
                ];
            }
            return partition(arrows, (node)=>node.params.every((param)=>this.isAssignable(param, true)
                )
            );
        }
        finishArrowValidation(node) {
            var _node$extra;
            this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);
            this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
            super.checkParams(node, false, true);
            this.scope.exit();
        }
        forwardNoArrowParamsConversionAt(node, parse) {
            let result;
            if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
                this.state.noArrowParamsConversionAt.push(this.state.start);
                result = parse();
                this.state.noArrowParamsConversionAt.pop();
            } else result = parse();
            return result;
        }
        parseParenItem(node, startPos, startLoc) {
            node = super.parseParenItem(node, startPos, startLoc);
            if (this.eat(types$1.question)) {
                node.optional = true;
                this.resetEndLocation(node);
            }
            if (this.match(types$1.colon)) {
                const typeCastNode = this.startNodeAt(startPos, startLoc);
                typeCastNode.expression = node;
                typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
                return this.finishNode(typeCastNode, "TypeCastExpression");
            }
            return node;
        }
        assertModuleNodeAllowed(node) {
            if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") return;
            super.assertModuleNodeAllowed(node);
        }
        parseExport(node) {
            const decl = super.parseExport(node);
            if (decl.type === "ExportNamedDeclaration" || decl.type === "ExportAllDeclaration") decl.exportKind = decl.exportKind || "value";
            return decl;
        }
        parseExportDeclaration(node) {
            if (this.isContextual("type")) {
                node.exportKind = "type";
                const declarationNode = this.startNode();
                this.next();
                if (this.match(types$1.braceL)) {
                    node.specifiers = this.parseExportSpecifiers();
                    this.parseExportFrom(node);
                    return null;
                } else return this.flowParseTypeAlias(declarationNode);
            } else if (this.isContextual("opaque")) {
                node.exportKind = "type";
                const declarationNode = this.startNode();
                this.next();
                return this.flowParseOpaqueType(declarationNode, false);
            } else if (this.isContextual("interface")) {
                node.exportKind = "type";
                const declarationNode = this.startNode();
                this.next();
                return this.flowParseInterface(declarationNode);
            } else if (this.shouldParseEnums() && this.isContextual("enum")) {
                node.exportKind = "value";
                const declarationNode = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(declarationNode);
            } else return super.parseExportDeclaration(node);
        }
        eatExportStar(node) {
            if (super.eatExportStar(...arguments)) return true;
            if (this.isContextual("type") && this.lookahead().type === types$1.star) {
                node.exportKind = "type";
                this.next();
                this.next();
                return true;
            }
            return false;
        }
        maybeParseExportNamespaceSpecifier(node) {
            const pos = this.state.start;
            const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
            if (hasNamespace && node.exportKind === "type") this.unexpected(pos);
            return hasNamespace;
        }
        parseClassId(node, isStatement, optionalId) {
            super.parseClassId(node, isStatement, optionalId);
            if (this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        parseClassMember(classBody, member, state) {
            const pos = this.state.start;
            if (this.isContextual("declare")) {
                if (this.parseClassMemberFromModifier(classBody, member)) return;
                member.declare = true;
            }
            super.parseClassMember(classBody, member, state);
            if (member.declare) {
                if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") this.raise(pos, FlowErrors.DeclareClassElement);
                else if (member.value) this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);
            }
        }
        isIterator(word) {
            return word === "iterator" || word === "asyncIterator";
        }
        readIterator() {
            const word = super.readWord1();
            const fullWord = "@@" + word;
            if (!this.isIterator(word) || !this.state.inType) this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);
            this.finishToken(types$1.name, fullWord);
        }
        getTokenFromCode(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (code === 123 && next === 124) return this.finishOp(types$1.braceBarL, 2);
            else if (this.state.inType && (code === 62 || code === 60)) return this.finishOp(types$1.relational, 1);
            else if (this.state.inType && code === 63) {
                if (next === 46) return this.finishOp(types$1.questionDot, 2);
                return this.finishOp(types$1.question, 1);
            } else if (isIteratorStart(code, next)) {
                this.state.pos += 2;
                return this.readIterator();
            } else return super.getTokenFromCode(code);
        }
        isAssignable(node, isBinding) {
            switch(node.type){
                case "Identifier":
                case "ObjectPattern":
                case "ArrayPattern":
                case "AssignmentPattern":
                    return true;
                case "ObjectExpression":
                    {
                        const last1 = node.properties.length - 1;
                        return node.properties.every((prop, i)=>{
                            return prop.type !== "ObjectMethod" && (i === last1 || prop.type === "SpreadElement") && this.isAssignable(prop);
                        });
                    }
                case "ObjectProperty":
                    return this.isAssignable(node.value);
                case "SpreadElement":
                    return this.isAssignable(node.argument);
                case "ArrayExpression":
                    return node.elements.every((element)=>this.isAssignable(element)
                    );
                case "AssignmentExpression":
                    return node.operator === "=";
                case "ParenthesizedExpression":
                case "TypeCastExpression":
                    return this.isAssignable(node.expression);
                case "MemberExpression":
                case "OptionalMemberExpression":
                    return !isBinding;
                default:
                    return false;
            }
        }
        toAssignable(node, isLHS = false) {
            if (node.type === "TypeCastExpression") return super.toAssignable(this.typeCastToParameter(node), isLHS);
            else return super.toAssignable(node, isLHS);
        }
        toAssignableList(exprList, trailingCommaPos, isLHS) {
            for(let i = 0; i < exprList.length; i++){
                const expr = exprList[i];
                if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") exprList[i] = this.typeCastToParameter(expr);
            }
            return super.toAssignableList(exprList, trailingCommaPos, isLHS);
        }
        toReferencedList(exprList, isParenthesizedExpr) {
            for(let i = 0; i < exprList.length; i++){
                var _expr$extra;
                const expr = exprList[i];
                if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);
            }
            return exprList;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            if (canBePattern && !this.state.maybeInArrowParameters) this.toReferencedList(node.elements);
            return node;
        }
        checkLVal(expr, ...args) {
            if (expr.type !== "TypeCastExpression") return super.checkLVal(expr, ...args);
        }
        parseClassProperty(node) {
            if (this.match(types$1.colon)) node.typeAnnotation = this.flowParseTypeAnnotation();
            return super.parseClassProperty(node);
        }
        parseClassPrivateProperty(node) {
            if (this.match(types$1.colon)) node.typeAnnotation = this.flowParseTypeAnnotation();
            return super.parseClassPrivateProperty(node);
        }
        isClassMethod() {
            return this.isRelational("<") || super.isClassMethod();
        }
        isClassProperty() {
            return this.match(types$1.colon) || super.isClassProperty();
        }
        isNonstaticConstructor(method) {
            return !this.match(types$1.colon) && super.isNonstaticConstructor(method);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            if (method.variance) this.unexpected(method.variance.start);
            delete method.variance;
            if (this.isRelational("<")) method.typeParameters = this.flowParseTypeParameterDeclaration();
            super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
            if (method.params && isConstructor) {
                const params = method.params;
                if (params.length > 0 && this.isThisParam(params[0])) this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);
            } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
                const params = method.value.params;
                if (params.length > 0 && this.isThisParam(params[0])) this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);
            }
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            if (method.variance) this.unexpected(method.variance.start);
            delete method.variance;
            if (this.isRelational("<")) method.typeParameters = this.flowParseTypeParameterDeclaration();
            super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
        }
        parseClassSuper(node) {
            super.parseClassSuper(node);
            if (node.superClass && this.isRelational("<")) node.superTypeParameters = this.flowParseTypeParameterInstantiation();
            if (this.isContextual("implements")) {
                this.next();
                const implemented = node.implements = [];
                do {
                    const node = this.startNode();
                    node.id = this.flowParseRestrictedIdentifier(true);
                    if (this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterInstantiation();
                    else node.typeParameters = null;
                    implemented.push(this.finishNode(node, "ClassImplements"));
                }while (this.eat(types$1.comma))
            }
        }
        checkGetterSetterParams(method) {
            super.checkGetterSetterParams(method);
            const params = this.getObjectOrClassMethodParams(method);
            if (params.length > 0) {
                const param = params[0];
                if (this.isThisParam(param) && method.kind === "get") this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);
                else if (this.isThisParam(param)) this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);
            }
        }
        parsePropertyName(node, isPrivateNameAllowed) {
            const variance = this.flowParseVariance();
            const key = super.parsePropertyName(node, isPrivateNameAllowed);
            node.variance = variance;
            return key;
        }
        parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            if (prop.variance) this.unexpected(prop.variance.start);
            delete prop.variance;
            let typeParameters;
            if (this.isRelational("<") && !isAccessor) {
                typeParameters = this.flowParseTypeParameterDeclaration();
                if (!this.match(types$1.parenL)) this.unexpected();
            }
            super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
            if (typeParameters) (prop.value || prop).typeParameters = typeParameters;
        }
        parseAssignableListItemTypes(param) {
            if (this.eat(types$1.question)) {
                if (param.type !== "Identifier") this.raise(param.start, FlowErrors.OptionalBindingPattern);
                if (this.isThisParam(param)) this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);
                param.optional = true;
            }
            if (this.match(types$1.colon)) param.typeAnnotation = this.flowParseTypeAnnotation();
            else if (this.isThisParam(param)) this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);
            if (this.match(types$1.eq) && this.isThisParam(param)) this.raise(param.start, FlowErrors.ThisParamNoDefault);
            this.resetEndLocation(param);
            return param;
        }
        parseMaybeDefault(startPos, startLoc, left) {
            const node = super.parseMaybeDefault(startPos, startLoc, left);
            if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);
            return node;
        }
        shouldParseDefaultImport(node) {
            if (!hasTypeImportKind(node)) return super.shouldParseDefaultImport(node);
            return isMaybeDefaultImport(this.state);
        }
        parseImportSpecifierLocal(node, specifier, type, contextDescription) {
            specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
            this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
            node.specifiers.push(this.finishNode(specifier, type));
        }
        maybeParseDefaultImportSpecifier(node) {
            node.importKind = "value";
            let kind = null;
            if (this.match(types$1._typeof)) kind = "typeof";
            else if (this.isContextual("type")) kind = "type";
            if (kind) {
                const lh = this.lookahead();
                if (kind === "type" && lh.type === types$1.star) this.unexpected(lh.start);
                if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {
                    this.next();
                    node.importKind = kind;
                }
            }
            return super.maybeParseDefaultImportSpecifier(node);
        }
        parseImportSpecifier(node) {
            const specifier = this.startNode();
            const firstIdentIsString = this.match(types$1.string);
            const firstIdent = this.parseModuleExportName();
            let specifierTypeKind = null;
            if (firstIdent.type === "Identifier") {
                if (firstIdent.name === "type") specifierTypeKind = "type";
                else if (firstIdent.name === "typeof") specifierTypeKind = "typeof";
            }
            let isBinding = false;
            if (this.isContextual("as") && !this.isLookaheadContextual("as")) {
                const as_ident = this.parseIdentifier(true);
                if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {
                    specifier.imported = as_ident;
                    specifier.importKind = specifierTypeKind;
                    specifier.local = as_ident.__clone();
                } else {
                    specifier.imported = firstIdent;
                    specifier.importKind = null;
                    specifier.local = this.parseIdentifier();
                }
            } else if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {
                specifier.imported = this.parseIdentifier(true);
                specifier.importKind = specifierTypeKind;
                if (this.eatContextual("as")) specifier.local = this.parseIdentifier();
                else {
                    isBinding = true;
                    specifier.local = specifier.imported.__clone();
                }
            } else {
                if (firstIdentIsString) throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);
                isBinding = true;
                specifier.imported = firstIdent;
                specifier.importKind = null;
                specifier.local = specifier.imported.__clone();
            }
            const nodeIsTypeImport = hasTypeImportKind(node);
            const specifierIsTypeImport = hasTypeImportKind(specifier);
            if (nodeIsTypeImport && specifierIsTypeImport) this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);
            if (nodeIsTypeImport || specifierIsTypeImport) this.checkReservedType(specifier.local.name, specifier.local.start, true);
            if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) this.checkReservedWord(specifier.local.name, specifier.start, true, true);
            this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
            node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
        }
        parseBindingAtom() {
            switch(this.state.type){
                case types$1._this:
                    return this.parseIdentifier(true);
                default:
                    return super.parseBindingAtom();
            }
        }
        parseFunctionParams(node, allowModifiers) {
            const kind = node.kind;
            if (kind !== "get" && kind !== "set" && this.isRelational("<")) node.typeParameters = this.flowParseTypeParameterDeclaration();
            super.parseFunctionParams(node, allowModifiers);
        }
        parseVarId(decl, kind) {
            super.parseVarId(decl, kind);
            if (this.match(types$1.colon)) {
                decl.id.typeAnnotation = this.flowParseTypeAnnotation();
                this.resetEndLocation(decl.id);
            }
        }
        parseAsyncArrowFromCallExpression(node, call) {
            if (this.match(types$1.colon)) {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                node.returnType = this.flowParseTypeAnnotation();
                this.state.noAnonFunctionType = oldNoAnonFunctionType;
            }
            return super.parseAsyncArrowFromCallExpression(node, call);
        }
        shouldParseAsyncArrow() {
            return this.match(types$1.colon) || super.shouldParseAsyncArrow();
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {
            var _jsx;
            let state = null;
            let jsx;
            if (this.hasPlugin("jsx") && (this.match(types$1.jsxTagStart) || this.isRelational("<"))) {
                state = this.state.clone();
                jsx = this.tryParse(()=>super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos)
                , state);
                if (!jsx.error) return jsx.node;
                const { context  } = this.state;
                if (context[context.length - 1] === types.j_oTag) context.length -= 2;
                else if (context[context.length - 1] === types.j_expr) context.length -= 1;
            }
            if ((_jsx = jsx) != null && _jsx.error || this.isRelational("<")) {
                var _jsx2, _jsx3;
                state = state || this.state.clone();
                let typeParameters;
                const arrow = this.tryParse((abort)=>{
                    var _arrowExpression$extr;
                    typeParameters = this.flowParseTypeParameterDeclaration();
                    const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, ()=>{
                        const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);
                        this.resetStartLocationFromNode(result, typeParameters);
                        return result;
                    });
                    if (arrowExpression.type !== "ArrowFunctionExpression" && (_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();
                    const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);
                    expr.typeParameters = typeParameters;
                    this.resetStartLocationFromNode(expr, typeParameters);
                    return arrowExpression;
                }, state);
                let arrowExpression = null;
                if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
                    if (!arrow.error && !arrow.aborted) {
                        if (arrow.node.async) this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);
                        return arrow.node;
                    }
                    arrowExpression = arrow.node;
                }
                if ((_jsx2 = jsx) != null && _jsx2.node) {
                    this.state = jsx.failState;
                    return jsx.node;
                }
                if (arrowExpression) {
                    this.state = arrow.failState;
                    return arrowExpression;
                }
                if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
                if (arrow.thrown) throw arrow.error;
                throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);
            }
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);
        }
        parseArrow(node) {
            if (this.match(types$1.colon)) {
                const result = this.tryParse(()=>{
                    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                    this.state.noAnonFunctionType = true;
                    const typeNode = this.startNode();
                    [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
                    this.state.noAnonFunctionType = oldNoAnonFunctionType;
                    if (this.canInsertSemicolon()) this.unexpected();
                    if (!this.match(types$1.arrow)) this.unexpected();
                    return typeNode;
                });
                if (result.thrown) return null;
                if (result.error) this.state = result.failState;
                node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(node);
        }
        shouldParseArrow() {
            return this.match(types$1.colon) || super.shouldParseArrow();
        }
        setArrowFunctionParameters(node, params) {
            if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) node.params = params;
            else super.setArrowFunctionParameters(node, params);
        }
        checkParams(node, allowDuplicates, isArrowFunction) {
            if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) return;
            for(let i = 0; i < node.params.length; i++)if (this.isThisParam(node.params[i]) && i > 0) this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);
            return super.checkParams(...arguments);
        }
        parseParenAndDistinguishExpression(canBeArrow) {
            return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
        }
        parseSubscripts(base, startPos, startLoc, noCalls) {
            if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startPos) !== -1) {
                this.next();
                const node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);
                base = this.finishNode(node, "CallExpression");
            } else if (base.type === "Identifier" && base.name === "async" && this.isRelational("<")) {
                const state = this.state.clone();
                const arrow = this.tryParse((abort)=>this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort()
                , state);
                if (!arrow.error && !arrow.aborted) return arrow.node;
                const result = this.tryParse(()=>super.parseSubscripts(base, startPos, startLoc, noCalls)
                , state);
                if (result.node && !result.error) return result.node;
                if (arrow.node) {
                    this.state = arrow.failState;
                    return arrow.node;
                }
                if (result.node) {
                    this.state = result.failState;
                    return result.node;
                }
                throw arrow.error || result.error;
            }
            return super.parseSubscripts(base, startPos, startLoc, noCalls);
        }
        parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {
            if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {
                subscriptState.optionalChainMember = true;
                if (noCalls) {
                    subscriptState.stop = true;
                    return base;
                }
                this.next();
                const node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                node.typeArguments = this.flowParseTypeParameterInstantiation();
                this.expect(types$1.parenL);
                node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);
                node.optional = true;
                return this.finishCallExpression(node, true);
            } else if (!noCalls && this.shouldParseTypes() && this.isRelational("<")) {
                const node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                const result = this.tryParse(()=>{
                    node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
                    this.expect(types$1.parenL);
                    node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);
                    if (subscriptState.optionalChainMember) node.optional = false;
                    return this.finishCallExpression(node, subscriptState.optionalChainMember);
                });
                if (result.node) {
                    if (result.error) this.state = result.failState;
                    return result.node;
                }
            }
            return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);
        }
        parseNewArguments(node) {
            let targs = null;
            if (this.shouldParseTypes() && this.isRelational("<")) targs = this.tryParse(()=>this.flowParseTypeParameterInstantiationCallOrNew()
            ).node;
            node.typeArguments = targs;
            super.parseNewArguments(node);
        }
        parseAsyncArrowWithTypeParameters(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            this.parseFunctionParams(node);
            if (!this.parseArrow(node)) return;
            return this.parseArrowExpression(node, undefined, true);
        }
        readToken_mult_modulo(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (code === 42 && next === 47 && this.state.hasFlowComment) {
                this.state.hasFlowComment = false;
                this.state.pos += 2;
                this.nextToken();
                return;
            }
            super.readToken_mult_modulo(code);
        }
        readToken_pipe_amp(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (code === 124 && next === 125) {
                this.finishOp(types$1.braceBarR, 2);
                return;
            }
            super.readToken_pipe_amp(code);
        }
        parseTopLevel(file, program) {
            const fileNode = super.parseTopLevel(file, program);
            if (this.state.hasFlowComment) this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);
            return fileNode;
        }
        skipBlockComment() {
            if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
                if (this.state.hasFlowComment) this.unexpected(null, FlowErrors.NestedFlowComment);
                this.hasFlowCommentCompletion();
                this.state.pos += this.skipFlowComment();
                this.state.hasFlowComment = true;
                return;
            }
            if (this.state.hasFlowComment) {
                const end1 = this.input.indexOf("*-/", this.state.pos += 2);
                if (end1 === -1) throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);
                this.state.pos = end1 + 3;
                return;
            }
            super.skipBlockComment();
        }
        skipFlowComment() {
            const { pos  } = this.state;
            let shiftToFirstNonWhiteSpace = 2;
            while([
                32,
                9
            ].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)))shiftToFirstNonWhiteSpace++;
            const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
            const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
            if (ch2 === 58 && ch3 === 58) return shiftToFirstNonWhiteSpace + 2;
            if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") return shiftToFirstNonWhiteSpace + 12;
            if (ch2 === 58 && ch3 !== 58) return shiftToFirstNonWhiteSpace;
            return false;
        }
        hasFlowCommentCompletion() {
            const end1 = this.input.indexOf("*/", this.state.pos);
            if (end1 === -1) throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);
        }
        flowEnumErrorBooleanMemberNotInitialized(pos, { enumName , memberName  }) {
            this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);
        }
        flowEnumErrorInvalidMemberName(pos, { enumName , memberName  }) {
            const suggestion = memberName[0].toUpperCase() + memberName.slice(1);
            this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);
        }
        flowEnumErrorDuplicateMemberName(pos, { enumName , memberName  }) {
            this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);
        }
        flowEnumErrorInconsistentMemberValues(pos, { enumName  }) {
            this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);
        }
        flowEnumErrorInvalidExplicitType(pos, { enumName , suppliedType  }) {
            return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);
        }
        flowEnumErrorInvalidMemberInitializer(pos, { enumName , explicitType , memberName  }) {
            let message = null;
            switch(explicitType){
                case "boolean":
                case "number":
                case "string":
                    message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;
                    break;
                case "symbol":
                    message = FlowErrors.EnumInvalidMemberInitializerSymbolType;
                    break;
                default:
                    message = FlowErrors.EnumInvalidMemberInitializerUnknownType;
            }
            return this.raise(pos, message, enumName, memberName, explicitType);
        }
        flowEnumErrorNumberMemberNotInitialized(pos, { enumName , memberName  }) {
            this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);
        }
        flowEnumErrorStringMemberInconsistentlyInitailized(pos, { enumName  }) {
            this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);
        }
        flowEnumMemberInit() {
            const startPos = this.state.start;
            const endOfInit = ()=>this.match(types$1.comma) || this.match(types$1.braceR)
            ;
            switch(this.state.type){
                case types$1.num:
                    {
                        const literal = this.parseNumericLiteral(this.state.value);
                        if (endOfInit()) return {
                            type: "number",
                            pos: literal.start,
                            value: literal
                        };
                        return {
                            type: "invalid",
                            pos: startPos
                        };
                    }
                case types$1.string:
                    {
                        const literal = this.parseStringLiteral(this.state.value);
                        if (endOfInit()) return {
                            type: "string",
                            pos: literal.start,
                            value: literal
                        };
                        return {
                            type: "invalid",
                            pos: startPos
                        };
                    }
                case types$1._true:
                case types$1._false:
                    {
                        const literal = this.parseBooleanLiteral(this.match(types$1._true));
                        if (endOfInit()) return {
                            type: "boolean",
                            pos: literal.start,
                            value: literal
                        };
                        return {
                            type: "invalid",
                            pos: startPos
                        };
                    }
                default:
                    return {
                        type: "invalid",
                        pos: startPos
                    };
            }
        }
        flowEnumMemberRaw() {
            const pos = this.state.start;
            const id = this.parseIdentifier(true);
            const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {
                type: "none",
                pos
            };
            return {
                id,
                init
            };
        }
        flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {
            const { explicitType  } = context;
            if (explicitType === null) return;
            if (explicitType !== expectedType) this.flowEnumErrorInvalidMemberInitializer(pos, context);
        }
        flowEnumMembers({ enumName , explicitType  }) {
            const seenNames = new Set();
            const members = {
                booleanMembers: [],
                numberMembers: [],
                stringMembers: [],
                defaultedMembers: []
            };
            let hasUnknownMembers = false;
            while(!this.match(types$1.braceR)){
                if (this.eat(types$1.ellipsis)) {
                    hasUnknownMembers = true;
                    break;
                }
                const memberNode = this.startNode();
                const { id , init  } = this.flowEnumMemberRaw();
                const memberName = id.name;
                if (memberName === "") continue;
                if (/^[a-z]/.test(memberName)) this.flowEnumErrorInvalidMemberName(id.start, {
                    enumName,
                    memberName
                });
                if (seenNames.has(memberName)) this.flowEnumErrorDuplicateMemberName(id.start, {
                    enumName,
                    memberName
                });
                seenNames.add(memberName);
                const context = {
                    enumName,
                    explicitType,
                    memberName
                };
                memberNode.id = id;
                switch(init.type){
                    case "boolean":
                        this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "boolean");
                        memberNode.init = init.value;
                        members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                        break;
                    case "number":
                        this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "number");
                        memberNode.init = init.value;
                        members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                        break;
                    case "string":
                        this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "string");
                        memberNode.init = init.value;
                        members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                        break;
                    case "invalid":
                        throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);
                    case "none":
                        switch(explicitType){
                            case "boolean":
                                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);
                                break;
                            case "number":
                                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);
                                break;
                            default:
                                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                        }
                }
                if (!this.match(types$1.braceR)) this.expect(types$1.comma);
            }
            return {
                members,
                hasUnknownMembers
            };
        }
        flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName  }) {
            if (initializedMembers.length === 0) return defaultedMembers;
            else if (defaultedMembers.length === 0) return initializedMembers;
            else if (defaultedMembers.length > initializedMembers.length) {
                for (const member of initializedMembers)this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {
                    enumName
                });
                return defaultedMembers;
            } else {
                for (const member of defaultedMembers)this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {
                    enumName
                });
                return initializedMembers;
            }
        }
        flowEnumParseExplicitType({ enumName  }) {
            if (this.eatContextual("of")) {
                if (!this.match(types$1.name)) throw this.flowEnumErrorInvalidExplicitType(this.state.start, {
                    enumName,
                    suppliedType: null
                });
                const { value  } = this.state;
                this.next();
                if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") this.flowEnumErrorInvalidExplicitType(this.state.start, {
                    enumName,
                    suppliedType: value
                });
                return value;
            }
            return null;
        }
        flowEnumBody(node, { enumName , nameLoc  }) {
            const explicitType = this.flowEnumParseExplicitType({
                enumName
            });
            this.expect(types$1.braceL);
            const { members , hasUnknownMembers  } = this.flowEnumMembers({
                enumName,
                explicitType
            });
            node.hasUnknownMembers = hasUnknownMembers;
            switch(explicitType){
                case "boolean":
                    node.explicitType = true;
                    node.members = members.booleanMembers;
                    this.expect(types$1.braceR);
                    return this.finishNode(node, "EnumBooleanBody");
                case "number":
                    node.explicitType = true;
                    node.members = members.numberMembers;
                    this.expect(types$1.braceR);
                    return this.finishNode(node, "EnumNumberBody");
                case "string":
                    node.explicitType = true;
                    node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                        enumName
                    });
                    this.expect(types$1.braceR);
                    return this.finishNode(node, "EnumStringBody");
                case "symbol":
                    node.members = members.defaultedMembers;
                    this.expect(types$1.braceR);
                    return this.finishNode(node, "EnumSymbolBody");
                default:
                    {
                        const empty = ()=>{
                            node.members = [];
                            this.expect(types$1.braceR);
                            return this.finishNode(node, "EnumStringBody");
                        };
                        node.explicitType = false;
                        const boolsLen = members.booleanMembers.length;
                        const numsLen = members.numberMembers.length;
                        const strsLen = members.stringMembers.length;
                        const defaultedLen = members.defaultedMembers.length;
                        if (!boolsLen && !numsLen && !strsLen && !defaultedLen) return empty();
                        else if (!boolsLen && !numsLen) {
                            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                                enumName
                            });
                            this.expect(types$1.braceR);
                            return this.finishNode(node, "EnumStringBody");
                        } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                            for (const member of members.defaultedMembers)this.flowEnumErrorBooleanMemberNotInitialized(member.start, {
                                enumName,
                                memberName: member.id.name
                            });
                            node.members = members.booleanMembers;
                            this.expect(types$1.braceR);
                            return this.finishNode(node, "EnumBooleanBody");
                        } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                            for (const member of members.defaultedMembers)this.flowEnumErrorNumberMemberNotInitialized(member.start, {
                                enumName,
                                memberName: member.id.name
                            });
                            node.members = members.numberMembers;
                            this.expect(types$1.braceR);
                            return this.finishNode(node, "EnumNumberBody");
                        } else {
                            this.flowEnumErrorInconsistentMemberValues(nameLoc, {
                                enumName
                            });
                            return empty();
                        }
                    }
            }
        }
        flowParseEnumDeclaration(node) {
            const id = this.parseIdentifier();
            node.id = id;
            node.body = this.flowEnumBody(this.startNode(), {
                enumName: id.name,
                nameLoc: id.start
            });
            return this.finishNode(node, "EnumDeclaration");
        }
        updateContext(prevType) {
            if (this.match(types$1.name) && this.state.value === "of" && prevType === types$1.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === "interface") this.state.exprAllowed = false;
            else super.updateContext(prevType);
        }
        isLookaheadToken_lt() {
            const next = this.nextTokenStart();
            if (this.input.charCodeAt(next) === 60) {
                const afterNext = this.input.charCodeAt(next + 1);
                return afterNext !== 60 && afterNext !== 61;
            }
            return false;
        }
        maybeUnwrapTypeCastExpression(node) {
            return node.type === "TypeCastExpression" ? node.expression : node;
        }
    }
;
const entities = {
    quot: "\u0022",
    amp: "&",
    apos: "\u0027",
    lt: "<",
    gt: ">",
    nbsp: "\u00A0",
    iexcl: "\u00A1",
    cent: "\u00A2",
    pound: "\u00A3",
    curren: "\u00A4",
    yen: "\u00A5",
    brvbar: "\u00A6",
    sect: "\u00A7",
    uml: "\u00A8",
    copy: "\u00A9",
    ordf: "\u00AA",
    laquo: "\u00AB",
    not: "\u00AC",
    shy: "\u00AD",
    reg: "\u00AE",
    macr: "\u00AF",
    deg: "\u00B0",
    plusmn: "\u00B1",
    sup2: "\u00B2",
    sup3: "\u00B3",
    acute: "\u00B4",
    micro: "\u00B5",
    para: "\u00B6",
    middot: "\u00B7",
    cedil: "\u00B8",
    sup1: "\u00B9",
    ordm: "\u00BA",
    raquo: "\u00BB",
    frac14: "\u00BC",
    frac12: "\u00BD",
    frac34: "\u00BE",
    iquest: "\u00BF",
    Agrave: "\u00C0",
    Aacute: "\u00C1",
    Acirc: "\u00C2",
    Atilde: "\u00C3",
    Auml: "\u00C4",
    Aring: "\u00C5",
    AElig: "\u00C6",
    Ccedil: "\u00C7",
    Egrave: "\u00C8",
    Eacute: "\u00C9",
    Ecirc: "\u00CA",
    Euml: "\u00CB",
    Igrave: "\u00CC",
    Iacute: "\u00CD",
    Icirc: "\u00CE",
    Iuml: "\u00CF",
    ETH: "\u00D0",
    Ntilde: "\u00D1",
    Ograve: "\u00D2",
    Oacute: "\u00D3",
    Ocirc: "\u00D4",
    Otilde: "\u00D5",
    Ouml: "\u00D6",
    times: "\u00D7",
    Oslash: "\u00D8",
    Ugrave: "\u00D9",
    Uacute: "\u00DA",
    Ucirc: "\u00DB",
    Uuml: "\u00DC",
    Yacute: "\u00DD",
    THORN: "\u00DE",
    szlig: "\u00DF",
    agrave: "\u00E0",
    aacute: "\u00E1",
    acirc: "\u00E2",
    atilde: "\u00E3",
    auml: "\u00E4",
    aring: "\u00E5",
    aelig: "\u00E6",
    ccedil: "\u00E7",
    egrave: "\u00E8",
    eacute: "\u00E9",
    ecirc: "\u00EA",
    euml: "\u00EB",
    igrave: "\u00EC",
    iacute: "\u00ED",
    icirc: "\u00EE",
    iuml: "\u00EF",
    eth: "\u00F0",
    ntilde: "\u00F1",
    ograve: "\u00F2",
    oacute: "\u00F3",
    ocirc: "\u00F4",
    otilde: "\u00F5",
    ouml: "\u00F6",
    divide: "\u00F7",
    oslash: "\u00F8",
    ugrave: "\u00F9",
    uacute: "\u00FA",
    ucirc: "\u00FB",
    uuml: "\u00FC",
    yacute: "\u00FD",
    thorn: "\u00FE",
    yuml: "\u00FF",
    OElig: "\u0152",
    oelig: "\u0153",
    Scaron: "\u0160",
    scaron: "\u0161",
    Yuml: "\u0178",
    fnof: "\u0192",
    circ: "\u02C6",
    tilde: "\u02DC",
    Alpha: "\u0391",
    Beta: "\u0392",
    Gamma: "\u0393",
    Delta: "\u0394",
    Epsilon: "\u0395",
    Zeta: "\u0396",
    Eta: "\u0397",
    Theta: "\u0398",
    Iota: "\u0399",
    Kappa: "\u039A",
    Lambda: "\u039B",
    Mu: "\u039C",
    Nu: "\u039D",
    Xi: "\u039E",
    Omicron: "\u039F",
    Pi: "\u03A0",
    Rho: "\u03A1",
    Sigma: "\u03A3",
    Tau: "\u03A4",
    Upsilon: "\u03A5",
    Phi: "\u03A6",
    Chi: "\u03A7",
    Psi: "\u03A8",
    Omega: "\u03A9",
    alpha: "\u03B1",
    beta: "\u03B2",
    gamma: "\u03B3",
    delta: "\u03B4",
    epsilon: "\u03B5",
    zeta: "\u03B6",
    eta: "\u03B7",
    theta: "\u03B8",
    iota: "\u03B9",
    kappa: "\u03BA",
    lambda: "\u03BB",
    mu: "\u03BC",
    nu: "\u03BD",
    xi: "\u03BE",
    omicron: "\u03BF",
    pi: "\u03C0",
    rho: "\u03C1",
    sigmaf: "\u03C2",
    sigma: "\u03C3",
    tau: "\u03C4",
    upsilon: "\u03C5",
    phi: "\u03C6",
    chi: "\u03C7",
    psi: "\u03C8",
    omega: "\u03C9",
    thetasym: "\u03D1",
    upsih: "\u03D2",
    piv: "\u03D6",
    ensp: "\u2002",
    emsp: "\u2003",
    thinsp: "\u2009",
    zwnj: "\u200C",
    zwj: "\u200D",
    lrm: "\u200E",
    rlm: "\u200F",
    ndash: "\u2013",
    mdash: "\u2014",
    lsquo: "\u2018",
    rsquo: "\u2019",
    sbquo: "\u201A",
    ldquo: "\u201C",
    rdquo: "\u201D",
    bdquo: "\u201E",
    dagger: "\u2020",
    Dagger: "\u2021",
    bull: "\u2022",
    hellip: "\u2026",
    permil: "\u2030",
    prime: "\u2032",
    Prime: "\u2033",
    lsaquo: "\u2039",
    rsaquo: "\u203A",
    oline: "\u203E",
    frasl: "\u2044",
    euro: "\u20AC",
    image: "\u2111",
    weierp: "\u2118",
    real: "\u211C",
    trade: "\u2122",
    alefsym: "\u2135",
    larr: "\u2190",
    uarr: "\u2191",
    rarr: "\u2192",
    darr: "\u2193",
    harr: "\u2194",
    crarr: "\u21B5",
    lArr: "\u21D0",
    uArr: "\u21D1",
    rArr: "\u21D2",
    dArr: "\u21D3",
    hArr: "\u21D4",
    forall: "\u2200",
    part: "\u2202",
    exist: "\u2203",
    empty: "\u2205",
    nabla: "\u2207",
    isin: "\u2208",
    notin: "\u2209",
    ni: "\u220B",
    prod: "\u220F",
    sum: "\u2211",
    minus: "\u2212",
    lowast: "\u2217",
    radic: "\u221A",
    prop: "\u221D",
    infin: "\u221E",
    ang: "\u2220",
    and: "\u2227",
    or: "\u2228",
    cap: "\u2229",
    cup: "\u222A",
    int: "\u222B",
    there4: "\u2234",
    sim: "\u223C",
    cong: "\u2245",
    asymp: "\u2248",
    ne: "\u2260",
    equiv: "\u2261",
    le: "\u2264",
    ge: "\u2265",
    sub: "\u2282",
    sup: "\u2283",
    nsub: "\u2284",
    sube: "\u2286",
    supe: "\u2287",
    oplus: "\u2295",
    otimes: "\u2297",
    perp: "\u22A5",
    sdot: "\u22C5",
    lceil: "\u2308",
    rceil: "\u2309",
    lfloor: "\u230A",
    rfloor: "\u230B",
    lang: "\u2329",
    rang: "\u232A",
    loz: "\u25CA",
    spades: "\u2660",
    clubs: "\u2663",
    hearts: "\u2665",
    diams: "\u2666"
};
class State {
    constructor(){
        this.strict = void 0;
        this.curLine = void 0;
        this.startLoc = void 0;
        this.endLoc = void 0;
        this.errors = [];
        this.potentialArrowAt = -1;
        this.noArrowAt = [];
        this.noArrowParamsConversionAt = [];
        this.maybeInArrowParameters = false;
        this.inPipeline = false;
        this.inType = false;
        this.noAnonFunctionType = false;
        this.inPropertyName = false;
        this.hasFlowComment = false;
        this.isAmbientContext = false;
        this.inAbstractClass = false;
        this.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
        };
        this.soloAwait = false;
        this.inFSharpPipelineDirectBody = false;
        this.labels = [];
        this.decoratorStack = [
            []
        ];
        this.comments = [];
        this.trailingComments = [];
        this.leadingComments = [];
        this.commentStack = [];
        this.commentPreviousNode = null;
        this.pos = 0;
        this.lineStart = 0;
        this.type = types$1.eof;
        this.value = null;
        this.start = 0;
        this.end = 0;
        this.lastTokEndLoc = null;
        this.lastTokStartLoc = null;
        this.lastTokStart = 0;
        this.lastTokEnd = 0;
        this.context = [
            types.braceStatement
        ];
        this.exprAllowed = true;
        this.containsEsc = false;
        this.strictErrors = new Map();
        this.exportedIdentifiers = [];
        this.tokensLength = 0;
    }
    init(options) {
        this.strict = options.strictMode === false ? false : options.sourceType === "module";
        this.curLine = options.startLine;
        this.startLoc = this.endLoc = this.curPosition();
    }
    curPosition() {
        return new Position(this.curLine, this.pos - this.lineStart);
    }
    clone(skipArrays) {
        const state = new State();
        const keys = Object.keys(this);
        for(let i = 0, length = keys.length; i < length; i++){
            const key = keys[i];
            let val = this[key];
            if (!skipArrays && Array.isArray(val)) val = val.slice();
            state[key] = val;
        }
        return state;
    }
}
const HEX_NUMBER = /^[\da-fA-F]+$/;
const DECIMAL_NUMBER = /^\d+$/;
const JsxErrors = makeErrorTemplates({
    AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
    MissingClosingTagElement: "Expected corresponding JSX closing tag for <%0>.",
    MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
    UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
    UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
    UnterminatedJsxContent: "Unterminated JSX contents.",
    UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
}, ErrorCodes.SyntaxError);
types.j_oTag = new TokContext("<tag", false);
types.j_cTag = new TokContext("</tag", false);
types.j_expr = new TokContext("<tag>...</tag>", true, true);
types$1.jsxName = new TokenType("jsxName");
types$1.jsxText = new TokenType("jsxText", {
    beforeExpr: true
});
types$1.jsxTagStart = new TokenType("jsxTagStart", {
    startsExpr: true
});
types$1.jsxTagEnd = new TokenType("jsxTagEnd");
types$1.jsxTagStart.updateContext = function() {
    this.state.context.push(types.j_expr);
    this.state.context.push(types.j_oTag);
    this.state.exprAllowed = false;
};
types$1.jsxTagEnd.updateContext = function(prevType) {
    const out = this.state.context.pop();
    if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {
        this.state.context.pop();
        this.state.exprAllowed = this.curContext() === types.j_expr;
    } else this.state.exprAllowed = true;
};
function isFragment(object) {
    return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
}
function getQualifiedJSXName(object) {
    if (object.type === "JSXIdentifier") return object.name;
    if (object.type === "JSXNamespacedName") return object.namespace.name + ":" + object.name.name;
    if (object.type === "JSXMemberExpression") return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    throw new Error("Node had unexpected type: " + object.type);
}
var jsx = (superClass)=>class extends superClass {
        jsxReadToken() {
            let out = "";
            let chunkStart = this.state.pos;
            for(;;){
                if (this.state.pos >= this.length) throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);
                const ch = this.input.charCodeAt(this.state.pos);
                switch(ch){
                    case 60:
                    case 123:
                        if (this.state.pos === this.state.start) {
                            if (ch === 60 && this.state.exprAllowed) {
                                ++this.state.pos;
                                return this.finishToken(types$1.jsxTagStart);
                            }
                            return super.getTokenFromCode(ch);
                        }
                        out += this.input.slice(chunkStart, this.state.pos);
                        return this.finishToken(types$1.jsxText, out);
                    case 38:
                        out += this.input.slice(chunkStart, this.state.pos);
                        out += this.jsxReadEntity();
                        chunkStart = this.state.pos;
                        break;
                    case 62:
                    case 125:
                    default:
                        if (isNewLine(ch)) {
                            out += this.input.slice(chunkStart, this.state.pos);
                            out += this.jsxReadNewLine(true);
                            chunkStart = this.state.pos;
                        } else ++this.state.pos;
                }
            }
        }
        jsxReadNewLine(normalizeCRLF) {
            const ch = this.input.charCodeAt(this.state.pos);
            let out;
            ++this.state.pos;
            if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
                ++this.state.pos;
                out = normalizeCRLF ? "\n" : "\r\n";
            } else out = String.fromCharCode(ch);
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            return out;
        }
        jsxReadString(quote) {
            let out = "";
            let chunkStart = ++this.state.pos;
            for(;;){
                if (this.state.pos >= this.length) throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
                const ch = this.input.charCodeAt(this.state.pos);
                if (ch === quote) break;
                if (ch === 38) {
                    out += this.input.slice(chunkStart, this.state.pos);
                    out += this.jsxReadEntity();
                    chunkStart = this.state.pos;
                } else if (isNewLine(ch)) {
                    out += this.input.slice(chunkStart, this.state.pos);
                    out += this.jsxReadNewLine(false);
                    chunkStart = this.state.pos;
                } else ++this.state.pos;
            }
            out += this.input.slice(chunkStart, this.state.pos++);
            return this.finishToken(types$1.string, out);
        }
        jsxReadEntity() {
            let str = "";
            let count = 0;
            let entity;
            let ch = this.input[this.state.pos];
            const startPos = ++this.state.pos;
            while(this.state.pos < this.length && (count++) < 10){
                ch = this.input[this.state.pos++];
                if (ch === ";") {
                    if (str[0] === "#") {
                        if (str[1] === "x") {
                            str = str.substr(2);
                            if (HEX_NUMBER.test(str)) entity = String.fromCodePoint(parseInt(str, 16));
                        } else {
                            str = str.substr(1);
                            if (DECIMAL_NUMBER.test(str)) entity = String.fromCodePoint(parseInt(str, 10));
                        }
                    } else entity = entities[str];
                    break;
                }
                str += ch;
            }
            if (!entity) {
                this.state.pos = startPos;
                return "&";
            }
            return entity;
        }
        jsxReadWord() {
            let ch;
            const start1 = this.state.pos;
            do ch = this.input.charCodeAt(++this.state.pos);
            while (isIdentifierChar(ch) || ch === 45)
            return this.finishToken(types$1.jsxName, this.input.slice(start1, this.state.pos));
        }
        jsxParseIdentifier() {
            const node = this.startNode();
            if (this.match(types$1.jsxName)) node.name = this.state.value;
            else if (this.state.type.keyword) node.name = this.state.type.keyword;
            else this.unexpected();
            this.next();
            return this.finishNode(node, "JSXIdentifier");
        }
        jsxParseNamespacedName() {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            const name = this.jsxParseIdentifier();
            if (!this.eat(types$1.colon)) return name;
            const node = this.startNodeAt(startPos, startLoc);
            node.namespace = name;
            node.name = this.jsxParseIdentifier();
            return this.finishNode(node, "JSXNamespacedName");
        }
        jsxParseElementName() {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            let node = this.jsxParseNamespacedName();
            if (node.type === "JSXNamespacedName") return node;
            while(this.eat(types$1.dot)){
                const newNode = this.startNodeAt(startPos, startLoc);
                newNode.object = node;
                newNode.property = this.jsxParseIdentifier();
                node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
        }
        jsxParseAttributeValue() {
            let node;
            switch(this.state.type){
                case types$1.braceL:
                    node = this.startNode();
                    this.next();
                    node = this.jsxParseExpressionContainer(node);
                    if (node.expression.type === "JSXEmptyExpression") this.raise(node.start, JsxErrors.AttributeIsEmpty);
                    return node;
                case types$1.jsxTagStart:
                case types$1.string:
                    return this.parseExprAtom();
                default:
                    throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);
            }
        }
        jsxParseEmptyExpression() {
            const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.state.start, this.state.startLoc);
        }
        jsxParseSpreadChild(node) {
            this.next();
            node.expression = this.parseExpression();
            this.expect(types$1.braceR);
            return this.finishNode(node, "JSXSpreadChild");
        }
        jsxParseExpressionContainer(node) {
            if (this.match(types$1.braceR)) node.expression = this.jsxParseEmptyExpression();
            else {
                const expression = this.parseExpression();
                node.expression = expression;
            }
            this.expect(types$1.braceR);
            return this.finishNode(node, "JSXExpressionContainer");
        }
        jsxParseAttribute() {
            const node = this.startNode();
            if (this.eat(types$1.braceL)) {
                this.expect(types$1.ellipsis);
                node.argument = this.parseMaybeAssignAllowIn();
                this.expect(types$1.braceR);
                return this.finishNode(node, "JSXSpreadAttribute");
            }
            node.name = this.jsxParseNamespacedName();
            node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;
            return this.finishNode(node, "JSXAttribute");
        }
        jsxParseOpeningElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            if (this.match(types$1.jsxTagEnd)) {
                this.expect(types$1.jsxTagEnd);
                return this.finishNode(node, "JSXOpeningFragment");
            }
            node.name = this.jsxParseElementName();
            return this.jsxParseOpeningElementAfterName(node);
        }
        jsxParseOpeningElementAfterName(node) {
            const attributes = [];
            while(!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd))attributes.push(this.jsxParseAttribute());
            node.attributes = attributes;
            node.selfClosing = this.eat(types$1.slash);
            this.expect(types$1.jsxTagEnd);
            return this.finishNode(node, "JSXOpeningElement");
        }
        jsxParseClosingElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            if (this.match(types$1.jsxTagEnd)) {
                this.expect(types$1.jsxTagEnd);
                return this.finishNode(node, "JSXClosingFragment");
            }
            node.name = this.jsxParseElementName();
            this.expect(types$1.jsxTagEnd);
            return this.finishNode(node, "JSXClosingElement");
        }
        jsxParseElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            const children = [];
            const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
                contents: for(;;)switch(this.state.type){
                    case types$1.jsxTagStart:
                        startPos = this.state.start;
                        startLoc = this.state.startLoc;
                        this.next();
                        if (this.eat(types$1.slash)) {
                            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
                            break contents;
                        }
                        children.push(this.jsxParseElementAt(startPos, startLoc));
                        break;
                    case types$1.jsxText:
                        children.push(this.parseExprAtom());
                        break;
                    case types$1.braceL:
                        {
                            const node1 = this.startNode();
                            this.next();
                            if (this.match(types$1.ellipsis)) children.push(this.jsxParseSpreadChild(node1));
                            else children.push(this.jsxParseExpressionContainer(node1));
                            break;
                        }
                    default:
                        throw this.unexpected();
                }
                if (isFragment(openingElement) && !isFragment(closingElement)) this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);
                else if (!isFragment(openingElement) && isFragment(closingElement)) this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));
                else if (!isFragment(openingElement) && !isFragment(closingElement)) {
                    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));
                }
            }
            if (isFragment(openingElement)) {
                node.openingFragment = openingElement;
                node.closingFragment = closingElement;
            } else {
                node.openingElement = openingElement;
                node.closingElement = closingElement;
            }
            node.children = children;
            if (this.isRelational("<")) throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);
            return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
        }
        jsxParseElement() {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            this.next();
            return this.jsxParseElementAt(startPos, startLoc);
        }
        parseExprAtom(refExpressionErrors) {
            if (this.match(types$1.jsxText)) return this.parseLiteral(this.state.value, "JSXText");
            else if (this.match(types$1.jsxTagStart)) return this.jsxParseElement();
            else if (this.isRelational("<") && this.input.charCodeAt(this.state.pos) !== 33) {
                this.finishToken(types$1.jsxTagStart);
                return this.jsxParseElement();
            } else return super.parseExprAtom(refExpressionErrors);
        }
        createLookaheadState(state) {
            const lookaheadState = super.createLookaheadState(state);
            lookaheadState.inPropertyName = state.inPropertyName;
            return lookaheadState;
        }
        getTokenFromCode(code) {
            if (this.state.inPropertyName) return super.getTokenFromCode(code);
            const context = this.curContext();
            if (context === types.j_expr) return this.jsxReadToken();
            if (context === types.j_oTag || context === types.j_cTag) {
                if (isIdentifierStart(code)) return this.jsxReadWord();
                if (code === 62) {
                    ++this.state.pos;
                    return this.finishToken(types$1.jsxTagEnd);
                }
                if ((code === 34 || code === 39) && context === types.j_oTag) return this.jsxReadString(code);
            }
            if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {
                ++this.state.pos;
                return this.finishToken(types$1.jsxTagStart);
            }
            return super.getTokenFromCode(code);
        }
        updateContext(prevType) {
            if (this.match(types$1.braceL)) {
                const curContext = this.curContext();
                if (curContext === types.j_oTag) this.state.context.push(types.braceExpression);
                else if (curContext === types.j_expr) this.state.context.push(types.templateQuasi);
                else super.updateContext(prevType);
                this.state.exprAllowed = true;
            } else if (this.match(types$1.slash) && prevType === types$1.jsxTagStart) {
                this.state.context.length -= 2;
                this.state.context.push(types.j_cTag);
                this.state.exprAllowed = false;
            } else return super.updateContext(prevType);
        }
    }
;
class TypeScriptScope extends Scope {
    constructor(...args1){
        super(...args1);
        this.types = [];
        this.enums = [];
        this.constEnums = [];
        this.classes = [];
        this.exportOnlyBindings = [];
    }
}
class TypeScriptScopeHandler extends ScopeHandler {
    createScope(flags) {
        return new TypeScriptScope(flags);
    }
    declareName(name, bindingType, pos) {
        const scope = this.currentScope();
        if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
            this.maybeExportDefined(scope, name);
            scope.exportOnlyBindings.push(name);
            return;
        }
        super.declareName(...arguments);
        if (bindingType & BIND_KIND_TYPE) {
            if (!(bindingType & BIND_KIND_VALUE)) {
                this.checkRedeclarationInScope(scope, name, bindingType, pos);
                this.maybeExportDefined(scope, name);
            }
            scope.types.push(name);
        }
        if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);
        if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);
        if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);
    }
    isRedeclaredInScope(scope, name, bindingType) {
        if (scope.enums.indexOf(name) > -1) {
            if (bindingType & BIND_FLAGS_TS_ENUM) {
                const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
                const wasConst = scope.constEnums.indexOf(name) > -1;
                return isConst !== wasConst;
            }
            return true;
        }
        if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {
            if (scope.lexical.indexOf(name) > -1) return !!(bindingType & BIND_KIND_VALUE);
            else return false;
        }
        if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) return true;
        return super.isRedeclaredInScope(...arguments);
    }
    checkLocalExport(id) {
        if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) super.checkLocalExport(id);
    }
}
const PARAM = 0, PARAM_YIELD = 1, PARAM_AWAIT = 2, PARAM_RETURN = 4, PARAM_IN = 8;
class ProductionParameterHandler {
    constructor(){
        this.stacks = [];
    }
    enter(flags) {
        this.stacks.push(flags);
    }
    exit() {
        this.stacks.pop();
    }
    currentFlags() {
        return this.stacks[this.stacks.length - 1];
    }
    get hasAwait() {
        return (this.currentFlags() & PARAM_AWAIT) > 0;
    }
    get hasYield() {
        return (this.currentFlags() & PARAM_YIELD) > 0;
    }
    get hasReturn() {
        return (this.currentFlags() & PARAM_RETURN) > 0;
    }
    get hasIn() {
        return (this.currentFlags() & PARAM_IN) > 0;
    }
}
function functionFlags(isAsync, isGenerator) {
    return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
}
function nonNull(x) {
    if (x == null) throw new Error(`Unexpected ${x} value.`);
    return x;
}
function assert(x) {
    if (!x) throw new Error("Assert fail");
}
const TSErrors = makeErrorTemplates({
    AbstractMethodHasImplementation: "Method '%0' cannot have an implementation because it is marked abstract.",
    AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
    AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
    ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
    ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
    ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
    DeclareAccessor: "'declare' is not allowed in %0ters.",
    DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
    DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
    DuplicateAccessibilityModifier: "Accessibility modifier already seen.",
    DuplicateModifier: "Duplicate modifier: '%0'.",
    EmptyHeritageClauseType: "'%0' list cannot be empty.",
    EmptyTypeArguments: "Type argument list cannot be empty.",
    EmptyTypeParameters: "Type parameter list cannot be empty.",
    ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
    ImportAliasHasImportType: "An import alias can not use 'import type'.",
    IncompatibleModifiers: "'%0' modifier cannot be used with '%1' modifier.",
    IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
    IndexSignatureHasAccessibility: "Index signatures cannot have an accessibility modifier ('%0').",
    IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
    IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
    IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
    InvalidModifierOnTypeMember: "'%0' modifier cannot appear on a type member.",
    InvalidModifiersOrder: "'%0' modifier must precede '%1' modifier.",
    InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
    MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.",
    NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
    NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
    OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
    OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
    PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
    PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
    PrivateElementHasAccessibility: "Private elements cannot have an accessibility modifier ('%0').",
    ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
    SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
    SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
    SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
    StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
    TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
    UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
    UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
    UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
    UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
    UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
    UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
    UnsupportedSignatureParameterKind: "Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0."
}, ErrorCodes.SyntaxError);
function keywordTypeFromName(value) {
    switch(value){
        case "any":
            return "TSAnyKeyword";
        case "boolean":
            return "TSBooleanKeyword";
        case "bigint":
            return "TSBigIntKeyword";
        case "never":
            return "TSNeverKeyword";
        case "number":
            return "TSNumberKeyword";
        case "object":
            return "TSObjectKeyword";
        case "string":
            return "TSStringKeyword";
        case "symbol":
            return "TSSymbolKeyword";
        case "undefined":
            return "TSUndefinedKeyword";
        case "unknown":
            return "TSUnknownKeyword";
        default:
            return undefined;
    }
}
function tsIsAccessModifier(modifier) {
    return modifier === "private" || modifier === "public" || modifier === "protected";
}
var typescript = (superClass)=>class extends superClass {
        getScopeHandler() {
            return TypeScriptScopeHandler;
        }
        tsIsIdentifier() {
            return this.match(types$1.name);
        }
        tsTokenCanFollowModifier() {
            return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
        }
        tsNextTokenCanFollowModifier() {
            this.next();
            return this.tsTokenCanFollowModifier();
        }
        tsParseModifier(allowedModifiers) {
            if (!this.match(types$1.name)) return undefined;
            const modifier = this.state.value;
            if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return modifier;
            return undefined;
        }
        tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {
            const enforceOrder = (pos, modifier, before, after)=>{
                if (modifier === before && modified[after]) this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);
            };
            const incompatible = (pos, modifier, mod1, mod2)=>{
                if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);
            };
            for(;;){
                const startPos = this.state.start;
                const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));
                if (!modifier) break;
                if (tsIsAccessModifier(modifier)) {
                    if (modified.accessibility) this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);
                    else {
                        enforceOrder(startPos, modifier, modifier, "override");
                        enforceOrder(startPos, modifier, modifier, "static");
                        modified.accessibility = modifier;
                    }
                } else {
                    if (Object.hasOwnProperty.call(modified, modifier)) this.raise(startPos, TSErrors.DuplicateModifier, modifier);
                    else {
                        enforceOrder(startPos, modifier, "static", "readonly");
                        enforceOrder(startPos, modifier, "static", "override");
                        enforceOrder(startPos, modifier, "override", "readonly");
                        enforceOrder(startPos, modifier, "abstract", "override");
                        incompatible(startPos, modifier, "declare", "override");
                        incompatible(startPos, modifier, "static", "abstract");
                    }
                    modified[modifier] = true;
                }
                if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) this.raise(startPos, errorTemplate, modifier);
            }
        }
        tsIsListTerminator(kind) {
            switch(kind){
                case "EnumMembers":
                case "TypeMembers":
                    return this.match(types$1.braceR);
                case "HeritageClauseElement":
                    return this.match(types$1.braceL);
                case "TupleElementTypes":
                    return this.match(types$1.bracketR);
                case "TypeParametersOrArguments":
                    return this.isRelational(">");
            }
            throw new Error("Unreachable");
        }
        tsParseList(kind, parseElement) {
            const result = [];
            while(!this.tsIsListTerminator(kind))result.push(parseElement());
            return result;
        }
        tsParseDelimitedList(kind, parseElement) {
            return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));
        }
        tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {
            const result = [];
            for(;;){
                if (this.tsIsListTerminator(kind)) break;
                const element = parseElement();
                if (element == null) return undefined;
                result.push(element);
                if (this.eat(types$1.comma)) continue;
                if (this.tsIsListTerminator(kind)) break;
                if (expectSuccess) this.expect(types$1.comma);
                return undefined;
            }
            return result;
        }
        tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {
            if (!skipFirstToken) {
                if (bracket) this.expect(types$1.bracketL);
                else this.expectRelational("<");
            }
            const result = this.tsParseDelimitedList(kind, parseElement);
            if (bracket) this.expect(types$1.bracketR);
            else this.expectRelational(">");
            return result;
        }
        tsParseImportType() {
            const node = this.startNode();
            this.expect(types$1._import);
            this.expect(types$1.parenL);
            if (!this.match(types$1.string)) this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);
            node.argument = this.parseExprAtom();
            this.expect(types$1.parenR);
            if (this.eat(types$1.dot)) node.qualifier = this.tsParseEntityName(true);
            if (this.isRelational("<")) node.typeParameters = this.tsParseTypeArguments();
            return this.finishNode(node, "TSImportType");
        }
        tsParseEntityName(allowReservedWords) {
            let entity = this.parseIdentifier();
            while(this.eat(types$1.dot)){
                const node = this.startNodeAtNode(entity);
                node.left = entity;
                node.right = this.parseIdentifier(allowReservedWords);
                entity = this.finishNode(node, "TSQualifiedName");
            }
            return entity;
        }
        tsParseTypeReference() {
            const node = this.startNode();
            node.typeName = this.tsParseEntityName(false);
            if (!this.hasPrecedingLineBreak() && this.isRelational("<")) node.typeParameters = this.tsParseTypeArguments();
            return this.finishNode(node, "TSTypeReference");
        }
        tsParseThisTypePredicate(lhs) {
            this.next();
            const node = this.startNodeAtNode(lhs);
            node.parameterName = lhs;
            node.typeAnnotation = this.tsParseTypeAnnotation(false);
            node.asserts = false;
            return this.finishNode(node, "TSTypePredicate");
        }
        tsParseThisTypeNode() {
            const node = this.startNode();
            this.next();
            return this.finishNode(node, "TSThisType");
        }
        tsParseTypeQuery() {
            const node = this.startNode();
            this.expect(types$1._typeof);
            if (this.match(types$1._import)) node.exprName = this.tsParseImportType();
            else node.exprName = this.tsParseEntityName(true);
            return this.finishNode(node, "TSTypeQuery");
        }
        tsParseTypeParameter() {
            const node = this.startNode();
            node.name = this.parseIdentifierName(node.start);
            node.constraint = this.tsEatThenParseType(types$1._extends);
            node.default = this.tsEatThenParseType(types$1.eq);
            return this.finishNode(node, "TSTypeParameter");
        }
        tsTryParseTypeParameters() {
            if (this.isRelational("<")) return this.tsParseTypeParameters();
        }
        tsParseTypeParameters() {
            const node = this.startNode();
            if (this.isRelational("<") || this.match(types$1.jsxTagStart)) this.next();
            else this.unexpected();
            node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this), false, true);
            if (node.params.length === 0) this.raise(node.start, TSErrors.EmptyTypeParameters);
            return this.finishNode(node, "TSTypeParameterDeclaration");
        }
        tsTryNextParseConstantContext() {
            if (this.lookahead().type === types$1._const) {
                this.next();
                return this.tsParseTypeReference();
            }
            return null;
        }
        tsFillSignature(returnToken, signature) {
            const returnTokenRequired = returnToken === types$1.arrow;
            signature.typeParameters = this.tsTryParseTypeParameters();
            this.expect(types$1.parenL);
            signature.parameters = this.tsParseBindingListForSignature();
            if (returnTokenRequired) signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
            else if (this.match(returnToken)) signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        }
        tsParseBindingListForSignature() {
            return this.parseBindingList(types$1.parenR, 41).map((pattern)=>{
                if (pattern.type !== "Identifier" && pattern.type !== "RestElement" && pattern.type !== "ObjectPattern" && pattern.type !== "ArrayPattern") this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);
                return pattern;
            });
        }
        tsParseTypeMemberSemicolon() {
            if (!this.eat(types$1.comma) && !this.isLineTerminator()) this.expect(types$1.semi);
        }
        tsParseSignatureMember(kind, node) {
            this.tsFillSignature(types$1.colon, node);
            this.tsParseTypeMemberSemicolon();
            return this.finishNode(node, kind);
        }
        tsIsUnambiguouslyIndexSignature() {
            this.next();
            return this.eat(types$1.name) && this.match(types$1.colon);
        }
        tsTryParseIndexSignature(node) {
            if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) return undefined;
            this.expect(types$1.bracketL);
            const id = this.parseIdentifier();
            id.typeAnnotation = this.tsParseTypeAnnotation();
            this.resetEndLocation(id);
            this.expect(types$1.bracketR);
            node.parameters = [
                id
            ];
            const type = this.tsTryParseTypeAnnotation();
            if (type) node.typeAnnotation = type;
            this.tsParseTypeMemberSemicolon();
            return this.finishNode(node, "TSIndexSignature");
        }
        tsParsePropertyOrMethodSignature(node, readonly) {
            if (this.eat(types$1.question)) node.optional = true;
            const nodeAny = node;
            if (this.match(types$1.parenL) || this.isRelational("<")) {
                if (readonly) this.raise(node.start, TSErrors.ReadonlyForMethodSignature);
                const method = nodeAny;
                if (method.kind && this.isRelational("<")) this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);
                this.tsFillSignature(types$1.colon, method);
                this.tsParseTypeMemberSemicolon();
                if (method.kind === "get") {
                    if (method.parameters.length > 0) {
                        this.raise(this.state.pos, ErrorMessages.BadGetterArity);
                        if (this.isThisParam(method.parameters[0])) this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);
                    }
                } else if (method.kind === "set") {
                    if (method.parameters.length !== 1) this.raise(this.state.pos, ErrorMessages.BadSetterArity);
                    else {
                        const firstParameter = method.parameters[0];
                        if (this.isThisParam(firstParameter)) this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);
                        if (firstParameter.type === "Identifier" && firstParameter.optional) this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);
                        if (firstParameter.type === "RestElement") this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);
                    }
                    if (method.typeAnnotation) this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);
                } else method.kind = "method";
                return this.finishNode(method, "TSMethodSignature");
            } else {
                const property = nodeAny;
                if (readonly) property.readonly = true;
                const type = this.tsTryParseTypeAnnotation();
                if (type) property.typeAnnotation = type;
                this.tsParseTypeMemberSemicolon();
                return this.finishNode(property, "TSPropertySignature");
            }
        }
        tsParseTypeMember() {
            const node = this.startNode();
            if (this.match(types$1.parenL) || this.isRelational("<")) return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
            if (this.match(types$1._new)) {
                const id = this.startNode();
                this.next();
                if (this.match(types$1.parenL) || this.isRelational("<")) return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
                else {
                    node.key = this.createIdentifier(id, "new");
                    return this.tsParsePropertyOrMethodSignature(node, false);
                }
            }
            this.tsParseModifiers(node, [
                "readonly"
            ], [
                "declare",
                "abstract",
                "private",
                "protected",
                "public",
                "static",
                "override"
            ], TSErrors.InvalidModifierOnTypeMember);
            const idx = this.tsTryParseIndexSignature(node);
            if (idx) return idx;
            this.parsePropertyName(node, false);
            if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
                node.kind = node.key.name;
                this.parsePropertyName(node, false);
            }
            return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
        }
        tsParseTypeLiteral() {
            const node = this.startNode();
            node.members = this.tsParseObjectTypeMembers();
            return this.finishNode(node, "TSTypeLiteral");
        }
        tsParseObjectTypeMembers() {
            this.expect(types$1.braceL);
            const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            this.expect(types$1.braceR);
            return members;
        }
        tsIsStartOfMappedType() {
            this.next();
            if (this.eat(types$1.plusMin)) return this.isContextual("readonly");
            if (this.isContextual("readonly")) this.next();
            if (!this.match(types$1.bracketL)) return false;
            this.next();
            if (!this.tsIsIdentifier()) return false;
            this.next();
            return this.match(types$1._in);
        }
        tsParseMappedTypeParameter() {
            const node = this.startNode();
            node.name = this.parseIdentifierName(node.start);
            node.constraint = this.tsExpectThenParseType(types$1._in);
            return this.finishNode(node, "TSTypeParameter");
        }
        tsParseMappedType() {
            const node = this.startNode();
            this.expect(types$1.braceL);
            if (this.match(types$1.plusMin)) {
                node.readonly = this.state.value;
                this.next();
                this.expectContextual("readonly");
            } else if (this.eatContextual("readonly")) node.readonly = true;
            this.expect(types$1.bracketL);
            node.typeParameter = this.tsParseMappedTypeParameter();
            node.nameType = this.eatContextual("as") ? this.tsParseType() : null;
            this.expect(types$1.bracketR);
            if (this.match(types$1.plusMin)) {
                node.optional = this.state.value;
                this.next();
                this.expect(types$1.question);
            } else if (this.eat(types$1.question)) node.optional = true;
            node.typeAnnotation = this.tsTryParseType();
            this.semicolon();
            this.expect(types$1.braceR);
            return this.finishNode(node, "TSMappedType");
        }
        tsParseTupleType() {
            const node = this.startNode();
            node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let seenOptionalElement = false;
            let labeledElements = null;
            node.elementTypes.forEach((elementNode)=>{
                var _labeledElements;
                let { type  } = elementNode;
                if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);
                seenOptionalElement = seenOptionalElement || type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType";
                if (type === "TSRestType") {
                    elementNode = elementNode.typeAnnotation;
                    type = elementNode.type;
                }
                const isLabeled = type === "TSNamedTupleMember";
                labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;
                if (labeledElements !== isLabeled) this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);
            });
            return this.finishNode(node, "TSTupleType");
        }
        tsParseTupleElementType() {
            const { start: startPos , startLoc  } = this.state;
            const rest = this.eat(types$1.ellipsis);
            let type = this.tsParseType();
            const optional = this.eat(types$1.question);
            const labeled = this.eat(types$1.colon);
            if (labeled) {
                const labeledNode = this.startNodeAtNode(type);
                labeledNode.optional = optional;
                if (type.type === "TSTypeReference" && !type.typeParameters && type.typeName.type === "Identifier") labeledNode.label = type.typeName;
                else {
                    this.raise(type.start, TSErrors.InvalidTupleMemberLabel);
                    labeledNode.label = type;
                }
                labeledNode.elementType = this.tsParseType();
                type = this.finishNode(labeledNode, "TSNamedTupleMember");
            } else if (optional) {
                const optionalTypeNode = this.startNodeAtNode(type);
                optionalTypeNode.typeAnnotation = type;
                type = this.finishNode(optionalTypeNode, "TSOptionalType");
            }
            if (rest) {
                const restNode = this.startNodeAt(startPos, startLoc);
                restNode.typeAnnotation = type;
                type = this.finishNode(restNode, "TSRestType");
            }
            return type;
        }
        tsParseParenthesizedType() {
            const node = this.startNode();
            this.expect(types$1.parenL);
            node.typeAnnotation = this.tsParseType();
            this.expect(types$1.parenR);
            return this.finishNode(node, "TSParenthesizedType");
        }
        tsParseFunctionOrConstructorType(type, abstract) {
            const node = this.startNode();
            if (type === "TSConstructorType") {
                node.abstract = !!abstract;
                if (abstract) this.next();
                this.next();
            }
            this.tsFillSignature(types$1.arrow, node);
            return this.finishNode(node, type);
        }
        tsParseLiteralTypeNode() {
            const node = this.startNode();
            node.literal = (()=>{
                switch(this.state.type){
                    case types$1.num:
                    case types$1.bigint:
                    case types$1.string:
                    case types$1._true:
                    case types$1._false:
                        return this.parseExprAtom();
                    default:
                        throw this.unexpected();
                }
            })();
            return this.finishNode(node, "TSLiteralType");
        }
        tsParseTemplateLiteralType() {
            const node = this.startNode();
            node.literal = this.parseTemplate(false);
            return this.finishNode(node, "TSLiteralType");
        }
        parseTemplateSubstitution() {
            if (this.state.inType) return this.tsParseType();
            return super.parseTemplateSubstitution();
        }
        tsParseThisTypeOrThisTypePredicate() {
            const thisKeyword = this.tsParseThisTypeNode();
            if (this.isContextual("is") && !this.hasPrecedingLineBreak()) return this.tsParseThisTypePredicate(thisKeyword);
            else return thisKeyword;
        }
        tsParseNonArrayType() {
            switch(this.state.type){
                case types$1.name:
                case types$1._void:
                case types$1._null:
                    {
                        const type = this.match(types$1._void) ? "TSVoidKeyword" : this.match(types$1._null) ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
                        if (type !== undefined && this.lookaheadCharCode() !== 46) {
                            const node = this.startNode();
                            this.next();
                            return this.finishNode(node, type);
                        }
                        return this.tsParseTypeReference();
                    }
                case types$1.string:
                case types$1.num:
                case types$1.bigint:
                case types$1._true:
                case types$1._false:
                    return this.tsParseLiteralTypeNode();
                case types$1.plusMin:
                    if (this.state.value === "-") {
                        const node = this.startNode();
                        const nextToken = this.lookahead();
                        if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) throw this.unexpected();
                        node.literal = this.parseMaybeUnary();
                        return this.finishNode(node, "TSLiteralType");
                    }
                    break;
                case types$1._this:
                    return this.tsParseThisTypeOrThisTypePredicate();
                case types$1._typeof:
                    return this.tsParseTypeQuery();
                case types$1._import:
                    return this.tsParseImportType();
                case types$1.braceL:
                    return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
                case types$1.bracketL:
                    return this.tsParseTupleType();
                case types$1.parenL:
                    return this.tsParseParenthesizedType();
                case types$1.backQuote:
                    return this.tsParseTemplateLiteralType();
            }
            throw this.unexpected();
        }
        tsParseArrayTypeOrHigher() {
            let type = this.tsParseNonArrayType();
            while(!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL))if (this.match(types$1.bracketR)) {
                const node = this.startNodeAtNode(type);
                node.elementType = type;
                this.expect(types$1.bracketR);
                type = this.finishNode(node, "TSArrayType");
            } else {
                const node = this.startNodeAtNode(type);
                node.objectType = type;
                node.indexType = this.tsParseType();
                this.expect(types$1.bracketR);
                type = this.finishNode(node, "TSIndexedAccessType");
            }
            return type;
        }
        tsParseTypeOperator(operator) {
            const node = this.startNode();
            this.expectContextual(operator);
            node.operator = operator;
            node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
            if (operator === "readonly") this.tsCheckTypeAnnotationForReadOnly(node);
            return this.finishNode(node, "TSTypeOperator");
        }
        tsCheckTypeAnnotationForReadOnly(node) {
            switch(node.typeAnnotation.type){
                case "TSTupleType":
                case "TSArrayType":
                    return;
                default:
                    this.raise(node.start, TSErrors.UnexpectedReadonly);
            }
        }
        tsParseInferType() {
            const node = this.startNode();
            this.expectContextual("infer");
            const typeParameter = this.startNode();
            typeParameter.name = this.parseIdentifierName(typeParameter.start);
            node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
            return this.finishNode(node, "TSInferType");
        }
        tsParseTypeOperatorOrHigher() {
            const operator = [
                "keyof",
                "unique",
                "readonly"
            ].find((kw)=>this.isContextual(kw)
            );
            return operator ? this.tsParseTypeOperator(operator) : this.isContextual("infer") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();
        }
        tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
            const node = this.startNode();
            const hasLeadingOperator = this.eat(operator);
            const types1 = [];
            do types1.push(parseConstituentType());
            while (this.eat(operator))
            if (types1.length === 1 && !hasLeadingOperator) return types1[0];
            node.types = types1;
            return this.finishNode(node, kind);
        }
        tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);
        }
        tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);
        }
        tsIsStartOfFunctionType() {
            if (this.isRelational("<")) return true;
            return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
        }
        tsSkipParameterStart() {
            if (this.match(types$1.name) || this.match(types$1._this)) {
                this.next();
                return true;
            }
            if (this.match(types$1.braceL)) {
                let braceStackCounter = 1;
                this.next();
                while(braceStackCounter > 0){
                    if (this.match(types$1.braceL)) ++braceStackCounter;
                    else if (this.match(types$1.braceR)) --braceStackCounter;
                    this.next();
                }
                return true;
            }
            if (this.match(types$1.bracketL)) {
                let braceStackCounter = 1;
                this.next();
                while(braceStackCounter > 0){
                    if (this.match(types$1.bracketL)) ++braceStackCounter;
                    else if (this.match(types$1.bracketR)) --braceStackCounter;
                    this.next();
                }
                return true;
            }
            return false;
        }
        tsIsUnambiguouslyStartOfFunctionType() {
            this.next();
            if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) return true;
            if (this.tsSkipParameterStart()) {
                if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) return true;
                if (this.match(types$1.parenR)) {
                    this.next();
                    if (this.match(types$1.arrow)) return true;
                }
            }
            return false;
        }
        tsParseTypeOrTypePredicateAnnotation(returnToken) {
            return this.tsInType(()=>{
                const t = this.startNode();
                this.expect(returnToken);
                const node = this.startNode();
                const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
                if (asserts && this.match(types$1._this)) {
                    let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
                    if (thisTypePredicate.type === "TSThisType") {
                        node.parameterName = thisTypePredicate;
                        node.asserts = true;
                        node.typeAnnotation = null;
                        thisTypePredicate = this.finishNode(node, "TSTypePredicate");
                    } else {
                        this.resetStartLocationFromNode(thisTypePredicate, node);
                        thisTypePredicate.asserts = true;
                    }
                    t.typeAnnotation = thisTypePredicate;
                    return this.finishNode(t, "TSTypeAnnotation");
                }
                const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
                if (!typePredicateVariable) {
                    if (!asserts) return this.tsParseTypeAnnotation(false, t);
                    node.parameterName = this.parseIdentifier();
                    node.asserts = asserts;
                    node.typeAnnotation = null;
                    t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
                    return this.finishNode(t, "TSTypeAnnotation");
                }
                const type = this.tsParseTypeAnnotation(false);
                node.parameterName = typePredicateVariable;
                node.typeAnnotation = type;
                node.asserts = asserts;
                t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
                return this.finishNode(t, "TSTypeAnnotation");
            });
        }
        tsTryParseTypeOrTypePredicateAnnotation() {
            return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;
        }
        tsTryParseTypeAnnotation() {
            return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;
        }
        tsTryParseType() {
            return this.tsEatThenParseType(types$1.colon);
        }
        tsParseTypePredicatePrefix() {
            const id = this.parseIdentifier();
            if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
                this.next();
                return id;
            }
        }
        tsParseTypePredicateAsserts() {
            if (!this.match(types$1.name) || this.state.value !== "asserts" || this.hasPrecedingLineBreak()) return false;
            const containsEsc = this.state.containsEsc;
            this.next();
            if (!this.match(types$1.name) && !this.match(types$1._this)) return false;
            if (containsEsc) this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, "asserts");
            return true;
        }
        tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
            this.tsInType(()=>{
                if (eatColon) this.expect(types$1.colon);
                t.typeAnnotation = this.tsParseType();
            });
            return this.finishNode(t, "TSTypeAnnotation");
        }
        tsParseType() {
            assert(this.state.inType);
            const type = this.tsParseNonConditionalType();
            if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) return type;
            const node = this.startNodeAtNode(type);
            node.checkType = type;
            node.extendsType = this.tsParseNonConditionalType();
            this.expect(types$1.question);
            node.trueType = this.tsParseType();
            this.expect(types$1.colon);
            node.falseType = this.tsParseType();
            return this.finishNode(node, "TSConditionalType");
        }
        isAbstractConstructorSignature() {
            return this.isContextual("abstract") && this.lookahead().type === types$1._new;
        }
        tsParseNonConditionalType() {
            if (this.tsIsStartOfFunctionType()) return this.tsParseFunctionOrConstructorType("TSFunctionType");
            if (this.match(types$1._new)) return this.tsParseFunctionOrConstructorType("TSConstructorType");
            else if (this.isAbstractConstructorSignature()) return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
            return this.tsParseUnionTypeOrHigher();
        }
        tsParseTypeAssertion() {
            const node = this.startNode();
            const _const = this.tsTryNextParseConstantContext();
            node.typeAnnotation = _const || this.tsNextThenParseType();
            this.expectRelational(">");
            node.expression = this.parseMaybeUnary();
            return this.finishNode(node, "TSTypeAssertion");
        }
        tsParseHeritageClause(descriptor) {
            const originalStart = this.state.start;
            const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", this.tsParseExpressionWithTypeArguments.bind(this));
            if (!delimitedList.length) this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);
            return delimitedList;
        }
        tsParseExpressionWithTypeArguments() {
            const node = this.startNode();
            node.expression = this.tsParseEntityName(false);
            if (this.isRelational("<")) node.typeParameters = this.tsParseTypeArguments();
            return this.finishNode(node, "TSExpressionWithTypeArguments");
        }
        tsParseInterfaceDeclaration(node) {
            node.id = this.parseIdentifier();
            this.checkLVal(node.id, "typescript interface declaration", BIND_TS_INTERFACE);
            node.typeParameters = this.tsTryParseTypeParameters();
            if (this.eat(types$1._extends)) node.extends = this.tsParseHeritageClause("extends");
            const body = this.startNode();
            body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
            node.body = this.finishNode(body, "TSInterfaceBody");
            return this.finishNode(node, "TSInterfaceDeclaration");
        }
        tsParseTypeAliasDeclaration(node) {
            node.id = this.parseIdentifier();
            this.checkLVal(node.id, "typescript type alias", BIND_TS_TYPE);
            node.typeParameters = this.tsTryParseTypeParameters();
            node.typeAnnotation = this.tsInType(()=>{
                this.expect(types$1.eq);
                if (this.isContextual("intrinsic") && this.lookahead().type !== types$1.dot) {
                    const node = this.startNode();
                    this.next();
                    return this.finishNode(node, "TSIntrinsicKeyword");
                }
                return this.tsParseType();
            });
            this.semicolon();
            return this.finishNode(node, "TSTypeAliasDeclaration");
        }
        tsInNoContext(cb) {
            const oldContext = this.state.context;
            this.state.context = [
                oldContext[0]
            ];
            try {
                return cb();
            } finally{
                this.state.context = oldContext;
            }
        }
        tsInType(cb) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            try {
                return cb();
            } finally{
                this.state.inType = oldInType;
            }
        }
        tsEatThenParseType(token) {
            return !this.match(token) ? undefined : this.tsNextThenParseType();
        }
        tsExpectThenParseType(token) {
            return this.tsDoThenParseType(()=>this.expect(token)
            );
        }
        tsNextThenParseType() {
            return this.tsDoThenParseType(()=>this.next()
            );
        }
        tsDoThenParseType(cb) {
            return this.tsInType(()=>{
                cb();
                return this.tsParseType();
            });
        }
        tsParseEnumMember() {
            const node = this.startNode();
            node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);
            if (this.eat(types$1.eq)) node.initializer = this.parseMaybeAssignAllowIn();
            return this.finishNode(node, "TSEnumMember");
        }
        tsParseEnumDeclaration(node, isConst) {
            if (isConst) node.const = true;
            node.id = this.parseIdentifier();
            this.checkLVal(node.id, "typescript enum declaration", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);
            this.expect(types$1.braceL);
            node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
            this.expect(types$1.braceR);
            return this.finishNode(node, "TSEnumDeclaration");
        }
        tsParseModuleBlock() {
            const node = this.startNode();
            this.scope.enter(SCOPE_OTHER);
            this.expect(types$1.braceL);
            this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);
            this.scope.exit();
            return this.finishNode(node, "TSModuleBlock");
        }
        tsParseModuleOrNamespaceDeclaration(node, nested = false) {
            node.id = this.parseIdentifier();
            if (!nested) this.checkLVal(node.id, "module or namespace declaration", BIND_TS_NAMESPACE);
            if (this.eat(types$1.dot)) {
                const inner = this.startNode();
                this.tsParseModuleOrNamespaceDeclaration(inner, true);
                node.body = inner;
            } else {
                this.scope.enter(SCOPE_TS_MODULE);
                this.prodParam.enter(PARAM);
                node.body = this.tsParseModuleBlock();
                this.prodParam.exit();
                this.scope.exit();
            }
            return this.finishNode(node, "TSModuleDeclaration");
        }
        tsParseAmbientExternalModuleDeclaration(node) {
            if (this.isContextual("global")) {
                node.global = true;
                node.id = this.parseIdentifier();
            } else if (this.match(types$1.string)) node.id = this.parseExprAtom();
            else this.unexpected();
            if (this.match(types$1.braceL)) {
                this.scope.enter(SCOPE_TS_MODULE);
                this.prodParam.enter(PARAM);
                node.body = this.tsParseModuleBlock();
                this.prodParam.exit();
                this.scope.exit();
            } else this.semicolon();
            return this.finishNode(node, "TSModuleDeclaration");
        }
        tsParseImportEqualsDeclaration(node, isExport) {
            node.isExport = isExport || false;
            node.id = this.parseIdentifier();
            this.checkLVal(node.id, "import equals declaration", BIND_LEXICAL);
            this.expect(types$1.eq);
            const moduleReference = this.tsParseModuleReference();
            if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);
            node.moduleReference = moduleReference;
            this.semicolon();
            return this.finishNode(node, "TSImportEqualsDeclaration");
        }
        tsIsExternalModuleReference() {
            return this.isContextual("require") && this.lookaheadCharCode() === 40;
        }
        tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
        }
        tsParseExternalModuleReference() {
            const node = this.startNode();
            this.expectContextual("require");
            this.expect(types$1.parenL);
            if (!this.match(types$1.string)) throw this.unexpected();
            node.expression = this.parseExprAtom();
            this.expect(types$1.parenR);
            return this.finishNode(node, "TSExternalModuleReference");
        }
        tsLookAhead(f) {
            const state = this.state.clone();
            const res = f();
            this.state = state;
            return res;
        }
        tsTryParseAndCatch(f) {
            const result = this.tryParse((abort)=>f() || abort()
            );
            if (result.aborted || !result.node) return undefined;
            if (result.error) this.state = result.failState;
            return result.node;
        }
        tsTryParse(f) {
            const state = this.state.clone();
            const result = f();
            if (result !== undefined && result !== false) return result;
            else {
                this.state = state;
                return undefined;
            }
        }
        tsTryParseDeclare(nany) {
            if (this.isLineTerminator()) return;
            let starttype = this.state.type;
            let kind;
            if (this.isContextual("let")) {
                starttype = types$1._var;
                kind = "let";
            }
            return this.tsInAmbientContext(()=>{
                switch(starttype){
                    case types$1._function:
                        nany.declare = true;
                        return this.parseFunctionStatement(nany, false, true);
                    case types$1._class:
                        nany.declare = true;
                        return this.parseClass(nany, true, false);
                    case types$1._const:
                        if (this.match(types$1._const) && this.isLookaheadContextual("enum")) {
                            this.expect(types$1._const);
                            this.expectContextual("enum");
                            return this.tsParseEnumDeclaration(nany, true);
                        }
                    case types$1._var:
                        kind = kind || this.state.value;
                        return this.parseVarStatement(nany, kind);
                    case types$1.name:
                        {
                            const value = this.state.value;
                            if (value === "global") return this.tsParseAmbientExternalModuleDeclaration(nany);
                            else return this.tsParseDeclaration(nany, value, true);
                        }
                }
            });
        }
        tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true);
        }
        tsParseExpressionStatement(node, expr) {
            switch(expr.name){
                case "declare":
                    {
                        const declaration = this.tsTryParseDeclare(node);
                        if (declaration) {
                            declaration.declare = true;
                            return declaration;
                        }
                        break;
                    }
                case "global":
                    if (this.match(types$1.braceL)) {
                        this.scope.enter(SCOPE_TS_MODULE);
                        this.prodParam.enter(PARAM);
                        const mod = node;
                        mod.global = true;
                        mod.id = expr;
                        mod.body = this.tsParseModuleBlock();
                        this.scope.exit();
                        this.prodParam.exit();
                        return this.finishNode(mod, "TSModuleDeclaration");
                    }
                    break;
                default:
                    return this.tsParseDeclaration(node, expr.name, false);
            }
        }
        tsParseDeclaration(node, value, next) {
            switch(value){
                case "abstract":
                    if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) return this.tsParseAbstractDeclaration(node);
                    break;
                case "enum":
                    if (next || this.match(types$1.name)) {
                        if (next) this.next();
                        return this.tsParseEnumDeclaration(node, false);
                    }
                    break;
                case "interface":
                    if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) return this.tsParseInterfaceDeclaration(node);
                    break;
                case "module":
                    if (this.tsCheckLineTerminator(next)) {
                        if (this.match(types$1.string)) return this.tsParseAmbientExternalModuleDeclaration(node);
                        else if (this.match(types$1.name)) return this.tsParseModuleOrNamespaceDeclaration(node);
                    }
                    break;
                case "namespace":
                    if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) return this.tsParseModuleOrNamespaceDeclaration(node);
                    break;
                case "type":
                    if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) return this.tsParseTypeAliasDeclaration(node);
                    break;
            }
        }
        tsCheckLineTerminator(next) {
            if (next) {
                if (this.hasFollowingLineBreak()) return false;
                this.next();
                return true;
            }
            return !this.isLineTerminator();
        }
        tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
            if (!this.isRelational("<")) return undefined;
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            const res = this.tsTryParseAndCatch(()=>{
                const node = this.startNodeAt(startPos, startLoc);
                node.typeParameters = this.tsParseTypeParameters();
                super.parseFunctionParams(node);
                node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
                this.expect(types$1.arrow);
                return node;
            });
            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
            if (!res) return undefined;
            return this.parseArrowExpression(res, null, true);
        }
        tsParseTypeArguments() {
            const node = this.startNode();
            node.params = this.tsInType(()=>this.tsInNoContext(()=>{
                    this.expectRelational("<");
                    return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
                })
            );
            if (node.params.length === 0) this.raise(node.start, TSErrors.EmptyTypeArguments);
            this.state.exprAllowed = false;
            this.expectRelational(">");
            return this.finishNode(node, "TSTypeParameterInstantiation");
        }
        tsIsDeclarationStart() {
            if (this.match(types$1.name)) switch(this.state.value){
                case "abstract":
                case "declare":
                case "enum":
                case "interface":
                case "module":
                case "namespace":
                case "type":
                    return true;
            }
            return false;
        }
        isExportDefaultSpecifier() {
            if (this.tsIsDeclarationStart()) return false;
            return super.isExportDefaultSpecifier();
        }
        parseAssignableListItem(allowModifiers, decorators) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            let accessibility;
            let readonly = false;
            if (allowModifiers !== undefined) {
                accessibility = this.parseAccessModifier();
                readonly = !!this.tsParseModifier([
                    "readonly"
                ]);
                if (allowModifiers === false && (accessibility || readonly)) this.raise(startPos, TSErrors.UnexpectedParameterModifier);
            }
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left);
            const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
            if (accessibility || readonly) {
                const pp = this.startNodeAt(startPos, startLoc);
                if (decorators.length) pp.decorators = decorators;
                if (accessibility) pp.accessibility = accessibility;
                if (readonly) pp.readonly = readonly;
                if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);
                pp.parameter = elt;
                return this.finishNode(pp, "TSParameterProperty");
            }
            if (decorators.length) left.decorators = decorators;
            return elt;
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
            if (this.match(types$1.colon)) node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);
            const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" ? "TSDeclareMethod" : undefined;
            if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {
                this.finishNode(node, bodilessType);
                return;
            }
            if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
                this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);
                if (node.declare) {
                    super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
                    return;
                }
            }
            super.parseFunctionBodyAndFinish(node, type, isMethod);
        }
        registerFunctionStatementId(node) {
            if (!node.body && node.id) this.checkLVal(node.id, "function name", BIND_TS_AMBIENT);
            else super.registerFunctionStatementId(...arguments);
        }
        tsCheckForInvalidTypeCasts(items) {
            items.forEach((node)=>{
                if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);
            });
        }
        toReferencedList(exprList, isInParens) {
            this.tsCheckForInvalidTypeCasts(exprList);
            return exprList;
        }
        parseArrayLike(...args) {
            const node = super.parseArrayLike(...args);
            if (node.type === "ArrayExpression") this.tsCheckForInvalidTypeCasts(node.elements);
            return node;
        }
        parseSubscript(base, startPos, startLoc, noCalls, state) {
            if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {
                this.state.exprAllowed = false;
                this.next();
                const nonNullExpression = this.startNodeAt(startPos, startLoc);
                nonNullExpression.expression = base;
                return this.finishNode(nonNullExpression, "TSNonNullExpression");
            }
            if (this.isRelational("<")) {
                const result = this.tsTryParseAndCatch(()=>{
                    if (!noCalls && this.atPossibleAsyncArrow(base)) {
                        const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);
                        if (asyncArrowFn) return asyncArrowFn;
                    }
                    const node = this.startNodeAt(startPos, startLoc);
                    node.callee = base;
                    const typeArguments = this.tsParseTypeArguments();
                    if (typeArguments) {
                        if (!noCalls && this.eat(types$1.parenL)) {
                            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);
                            this.tsCheckForInvalidTypeCasts(node.arguments);
                            node.typeParameters = typeArguments;
                            if (state.optionalChainMember) node.optional = false;
                            return this.finishCallExpression(node, state.optionalChainMember);
                        } else if (this.match(types$1.backQuote)) {
                            const result1 = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
                            result1.typeParameters = typeArguments;
                            return result1;
                        }
                    }
                    this.unexpected();
                });
                if (result) return result;
            }
            return super.parseSubscript(base, startPos, startLoc, noCalls, state);
        }
        parseNewArguments(node) {
            if (this.isRelational("<")) {
                const typeParameters = this.tsTryParseAndCatch(()=>{
                    const args3 = this.tsParseTypeArguments();
                    if (!this.match(types$1.parenL)) this.unexpected();
                    return args3;
                });
                if (typeParameters) node.typeParameters = typeParameters;
            }
            super.parseNewArguments(node);
        }
        parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
            if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual("as")) {
                const node = this.startNodeAt(leftStartPos, leftStartLoc);
                node.expression = left;
                const _const = this.tsTryNextParseConstantContext();
                if (_const) node.typeAnnotation = _const;
                else node.typeAnnotation = this.tsNextThenParseType();
                this.finishNode(node, "TSAsExpression");
                this.reScan_lt_gt();
                return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
            }
            return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        }
        checkDuplicateExports() {
        }
        parseImport(node) {
            node.importKind = "value";
            if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {
                let ahead = this.lookahead();
                if (this.isContextual("type") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === "from") && ahead.type !== types$1.eq) {
                    node.importKind = "type";
                    this.next();
                    ahead = this.lookahead();
                }
                if (this.match(types$1.name) && ahead.type === types$1.eq) return this.tsParseImportEqualsDeclaration(node);
            }
            const importNode = super.parseImport(node);
            if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);
            return importNode;
        }
        parseExport(node) {
            if (this.match(types$1._import)) {
                this.next();
                if (this.isContextual("type") && this.lookaheadCharCode() !== 61) {
                    node.importKind = "type";
                    this.next();
                } else node.importKind = "value";
                return this.tsParseImportEqualsDeclaration(node, true);
            } else if (this.eat(types$1.eq)) {
                const assign = node;
                assign.expression = this.parseExpression();
                this.semicolon();
                return this.finishNode(assign, "TSExportAssignment");
            } else if (this.eatContextual("as")) {
                const decl = node;
                this.expectContextual("namespace");
                decl.id = this.parseIdentifier();
                this.semicolon();
                return this.finishNode(decl, "TSNamespaceExportDeclaration");
            } else {
                if (this.isContextual("type") && this.lookahead().type === types$1.braceL) {
                    this.next();
                    node.exportKind = "type";
                } else node.exportKind = "value";
                return super.parseExport(node);
            }
        }
        isAbstractClass() {
            return this.isContextual("abstract") && this.lookahead().type === types$1._class;
        }
        parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
                const cls = this.startNode();
                this.next();
                cls.abstract = true;
                this.parseClass(cls, true, true);
                return cls;
            }
            if (this.state.value === "interface") {
                const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);
                if (result) return result;
            }
            return super.parseExportDefaultExpression();
        }
        parseStatementContent(context, topLevel) {
            if (this.state.type === types$1._const) {
                const ahead = this.lookahead();
                if (ahead.type === types$1.name && ahead.value === "enum") {
                    const node = this.startNode();
                    this.expect(types$1._const);
                    this.expectContextual("enum");
                    return this.tsParseEnumDeclaration(node, true);
                }
            }
            return super.parseStatementContent(context, topLevel);
        }
        parseAccessModifier() {
            return this.tsParseModifier([
                "public",
                "protected",
                "private"
            ]);
        }
        tsHasSomeModifiers(member, modifiers) {
            return modifiers.some((modifier)=>{
                if (tsIsAccessModifier(modifier)) return member.accessibility === modifier;
                return !!member[modifier];
            });
        }
        parseClassMember(classBody, member, state) {
            const invalidModifersForStaticBlocks = [
                "declare",
                "private",
                "public",
                "protected",
                "override",
                "abstract",
                "readonly"
            ];
            this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([
                "static"
            ]));
            const callParseClassMemberWithIsStatic = ()=>{
                const isStatic = !!member.static;
                if (isStatic && this.eat(types$1.braceL)) {
                    if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);
                    this.parseClassStaticBlock(classBody, member);
                } else this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
            };
            if (member.declare) this.tsInAmbientContext(callParseClassMemberWithIsStatic);
            else callParseClassMemberWithIsStatic();
        }
        parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const idx = this.tsTryParseIndexSignature(member);
            if (idx) {
                classBody.body.push(idx);
                if (member.abstract) this.raise(member.start, TSErrors.IndexSignatureHasAbstract);
                if (member.accessibility) this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);
                if (member.declare) this.raise(member.start, TSErrors.IndexSignatureHasDeclare);
                if (member.override) this.raise(member.start, TSErrors.IndexSignatureHasOverride);
                return;
            }
            if (!this.state.inAbstractClass && member.abstract) this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);
            if (member.override) {
                if (!state.hadSuperClass) this.raise(member.start, TSErrors.OverrideNotInSubClass);
            }
            super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
        }
        parsePostMemberNameModifiers(methodOrProp) {
            const optional = this.eat(types$1.question);
            if (optional) methodOrProp.optional = true;
            if (methodOrProp.readonly && this.match(types$1.parenL)) this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);
            if (methodOrProp.declare && this.match(types$1.parenL)) this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);
        }
        parseExpressionStatement(node, expr) {
            const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr) : undefined;
            return decl || super.parseExpressionStatement(node, expr);
        }
        shouldParseExportDeclaration() {
            if (this.tsIsDeclarationStart()) return true;
            return super.shouldParseExportDeclaration();
        }
        parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {
            if (!refNeedsArrowPos || !this.match(types$1.question)) return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);
            const result = this.tryParse(()=>super.parseConditional(expr, startPos, startLoc)
            );
            if (!result.node) {
                refNeedsArrowPos.start = result.error.pos || this.state.start;
                return expr;
            }
            if (result.error) this.state = result.failState;
            return result.node;
        }
        parseParenItem(node, startPos, startLoc) {
            node = super.parseParenItem(node, startPos, startLoc);
            if (this.eat(types$1.question)) {
                node.optional = true;
                this.resetEndLocation(node);
            }
            if (this.match(types$1.colon)) {
                const typeCastNode = this.startNodeAt(startPos, startLoc);
                typeCastNode.expression = node;
                typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
                return this.finishNode(typeCastNode, "TSTypeCastExpression");
            }
            return node;
        }
        parseExportDeclaration(node) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            const isDeclare = this.eatContextual("declare");
            if (isDeclare && (this.isContextual("declare") || !this.shouldParseExportDeclaration())) throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);
            let declaration;
            if (this.match(types$1.name)) declaration = this.tsTryParseExportDeclaration();
            if (!declaration) declaration = super.parseExportDeclaration(node);
            if (declaration && (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare)) node.exportKind = "type";
            if (declaration && isDeclare) {
                this.resetStartLocation(declaration, startPos, startLoc);
                declaration.declare = true;
            }
            return declaration;
        }
        parseClassId(node, isStatement, optionalId) {
            if ((!isStatement || optionalId) && this.isContextual("implements")) return;
            super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);
            const typeParameters = this.tsTryParseTypeParameters();
            if (typeParameters) node.typeParameters = typeParameters;
        }
        parseClassPropertyAnnotation(node) {
            if (!node.optional && this.eat(types$1.bang)) node.definite = true;
            const type = this.tsTryParseTypeAnnotation();
            if (type) node.typeAnnotation = type;
        }
        parseClassProperty(node) {
            this.parseClassPropertyAnnotation(node);
            if (this.state.isAmbientContext && this.match(types$1.eq)) this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);
            return super.parseClassProperty(node);
        }
        parseClassPrivateProperty(node) {
            if (node.abstract) this.raise(node.start, TSErrors.PrivateElementHasAbstract);
            if (node.accessibility) this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);
            this.parseClassPropertyAnnotation(node);
            return super.parseClassPrivateProperty(node);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            const typeParameters = this.tsTryParseTypeParameters();
            if (typeParameters && isConstructor) this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);
            if (method.declare && (method.kind === "get" || method.kind === "set")) this.raise(method.start, TSErrors.DeclareAccessor, method.kind);
            if (typeParameters) method.typeParameters = typeParameters;
            super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const typeParameters = this.tsTryParseTypeParameters();
            if (typeParameters) method.typeParameters = typeParameters;
            super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
        }
        parseClassSuper(node) {
            super.parseClassSuper(node);
            if (node.superClass && this.isRelational("<")) node.superTypeParameters = this.tsParseTypeArguments();
            if (this.eatContextual("implements")) node.implements = this.tsParseHeritageClause("implements");
        }
        parseObjPropValue(prop, ...args) {
            const typeParameters = this.tsTryParseTypeParameters();
            if (typeParameters) prop.typeParameters = typeParameters;
            super.parseObjPropValue(prop, ...args);
        }
        parseFunctionParams(node, allowModifiers) {
            const typeParameters = this.tsTryParseTypeParameters();
            if (typeParameters) node.typeParameters = typeParameters;
            super.parseFunctionParams(node, allowModifiers);
        }
        parseVarId(decl, kind) {
            super.parseVarId(decl, kind);
            if (decl.id.type === "Identifier" && this.eat(types$1.bang)) decl.definite = true;
            const type = this.tsTryParseTypeAnnotation();
            if (type) {
                decl.id.typeAnnotation = type;
                this.resetEndLocation(decl.id);
            }
        }
        parseAsyncArrowFromCallExpression(node, call) {
            if (this.match(types$1.colon)) node.returnType = this.tsParseTypeAnnotation();
            return super.parseAsyncArrowFromCallExpression(node, call);
        }
        parseMaybeAssign(...args) {
            var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;
            let state;
            let jsx1;
            let typeCast;
            if (this.hasPlugin("jsx") && (this.match(types$1.jsxTagStart) || this.isRelational("<"))) {
                state = this.state.clone();
                jsx1 = this.tryParse(()=>super.parseMaybeAssign(...args)
                , state);
                if (!jsx1.error) return jsx1.node;
                const { context  } = this.state;
                if (context[context.length - 1] === types.j_oTag) context.length -= 2;
                else if (context[context.length - 1] === types.j_expr) context.length -= 1;
            }
            if (!((_jsx = jsx1) != null && _jsx.error) && !this.isRelational("<")) return super.parseMaybeAssign(...args);
            let typeParameters;
            state = state || this.state.clone();
            const arrow = this.tryParse((abort)=>{
                var _expr$extra, _typeParameters;
                typeParameters = this.tsParseTypeParameters();
                const expr = super.parseMaybeAssign(...args);
                if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) abort();
                if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) this.resetStartLocationFromNode(expr, typeParameters);
                expr.typeParameters = typeParameters;
                return expr;
            }, state);
            if (!arrow.error && !arrow.aborted) return arrow.node;
            if (!jsx1) {
                assert(!this.hasPlugin("jsx"));
                typeCast = this.tryParse(()=>super.parseMaybeAssign(...args)
                , state);
                if (!typeCast.error) return typeCast.node;
            }
            if ((_jsx2 = jsx1) != null && _jsx2.node) {
                this.state = jsx1.failState;
                return jsx1.node;
            }
            if (arrow.node) {
                this.state = arrow.failState;
                return arrow.node;
            }
            if ((_typeCast = typeCast) != null && _typeCast.node) {
                this.state = typeCast.failState;
                return typeCast.node;
            }
            if ((_jsx3 = jsx1) != null && _jsx3.thrown) throw jsx1.error;
            if (arrow.thrown) throw arrow.error;
            if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;
            throw ((_jsx4 = jsx1) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);
        }
        parseMaybeUnary(refExpressionErrors) {
            if (!this.hasPlugin("jsx") && this.isRelational("<")) return this.tsParseTypeAssertion();
            else return super.parseMaybeUnary(refExpressionErrors);
        }
        parseArrow(node) {
            if (this.match(types$1.colon)) {
                const result = this.tryParse((abort)=>{
                    const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);
                    if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();
                    return returnType;
                });
                if (result.aborted) return;
                if (!result.thrown) {
                    if (result.error) this.state = result.failState;
                    node.returnType = result.node;
                }
            }
            return super.parseArrow(node);
        }
        parseAssignableListItemTypes(param) {
            if (this.eat(types$1.question)) {
                if (param.type !== "Identifier" && !this.state.isAmbientContext && !this.state.inType) this.raise(param.start, TSErrors.PatternIsOptional);
                param.optional = true;
            }
            const type = this.tsTryParseTypeAnnotation();
            if (type) param.typeAnnotation = type;
            this.resetEndLocation(param);
            return param;
        }
        toAssignable(node, isLHS = false) {
            switch(node.type){
                case "TSTypeCastExpression":
                    return super.toAssignable(this.typeCastToParameter(node), isLHS);
                case "TSParameterProperty":
                    return super.toAssignable(node, isLHS);
                case "ParenthesizedExpression":
                    return this.toAssignableParenthesizedExpression(node, isLHS);
                case "TSAsExpression":
                case "TSNonNullExpression":
                case "TSTypeAssertion":
                    node.expression = this.toAssignable(node.expression, isLHS);
                    return node;
                default:
                    return super.toAssignable(node, isLHS);
            }
        }
        toAssignableParenthesizedExpression(node, isLHS) {
            switch(node.expression.type){
                case "TSAsExpression":
                case "TSNonNullExpression":
                case "TSTypeAssertion":
                case "ParenthesizedExpression":
                    node.expression = this.toAssignable(node.expression, isLHS);
                    return node;
                default:
                    return super.toAssignable(node, isLHS);
            }
        }
        checkLVal(expr, contextDescription, ...args) {
            var _expr$extra2;
            switch(expr.type){
                case "TSTypeCastExpression":
                    return;
                case "TSParameterProperty":
                    this.checkLVal(expr.parameter, "parameter property", ...args);
                    return;
                case "TSAsExpression":
                case "TSTypeAssertion":
                    if (!args[0] && contextDescription !== "parenthesized expression" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {
                        this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);
                        break;
                    }
                    this.checkLVal(expr.expression, "parenthesized expression", ...args);
                    return;
                case "TSNonNullExpression":
                    this.checkLVal(expr.expression, contextDescription, ...args);
                    return;
                default:
                    super.checkLVal(expr, contextDescription, ...args);
                    return;
            }
        }
        parseBindingAtom() {
            switch(this.state.type){
                case types$1._this:
                    return this.parseIdentifier(true);
                default:
                    return super.parseBindingAtom();
            }
        }
        parseMaybeDecoratorArguments(expr) {
            if (this.isRelational("<")) {
                const typeArguments = this.tsParseTypeArguments();
                if (this.match(types$1.parenL)) {
                    const call = super.parseMaybeDecoratorArguments(expr);
                    call.typeParameters = typeArguments;
                    return call;
                }
                this.unexpected(this.state.start, types$1.parenL);
            }
            return super.parseMaybeDecoratorArguments(expr);
        }
        checkCommaAfterRest(close) {
            if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) this.next();
            else super.checkCommaAfterRest(close);
        }
        isClassMethod() {
            return this.isRelational("<") || super.isClassMethod();
        }
        isClassProperty() {
            return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();
        }
        parseMaybeDefault(...args) {
            const node = super.parseMaybeDefault(...args);
            if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);
            return node;
        }
        getTokenFromCode(code) {
            if (this.state.inType && (code === 62 || code === 60)) return this.finishOp(types$1.relational, 1);
            else return super.getTokenFromCode(code);
        }
        reScan_lt_gt() {
            if (this.match(types$1.relational)) {
                const code = this.input.charCodeAt(this.state.start);
                if (code === 60 || code === 62) {
                    this.state.pos -= 1;
                    this.readToken_lt_gt(code);
                }
            }
        }
        toAssignableList(exprList) {
            for(let i = 0; i < exprList.length; i++){
                const expr = exprList[i];
                if (!expr) continue;
                switch(expr.type){
                    case "TSTypeCastExpression":
                        exprList[i] = this.typeCastToParameter(expr);
                        break;
                    case "TSAsExpression":
                    case "TSTypeAssertion":
                        if (!this.state.maybeInArrowParameters) exprList[i] = this.typeCastToParameter(expr);
                        else this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);
                        break;
                }
            }
            return super.toAssignableList(...arguments);
        }
        typeCastToParameter(node) {
            node.expression.typeAnnotation = node.typeAnnotation;
            this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);
            return node.expression;
        }
        shouldParseArrow() {
            return this.match(types$1.colon) || super.shouldParseArrow();
        }
        shouldParseAsyncArrow() {
            return this.match(types$1.colon) || super.shouldParseAsyncArrow();
        }
        canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
        }
        jsxParseOpeningElementAfterName(node) {
            if (this.isRelational("<")) {
                const typeArguments = this.tsTryParseAndCatch(()=>this.tsParseTypeArguments()
                );
                if (typeArguments) node.typeParameters = typeArguments;
            }
            return super.jsxParseOpeningElementAfterName(node);
        }
        getGetterSetterExpectedParamCount(method) {
            const baseCount = super.getGetterSetterExpectedParamCount(method);
            const params = this.getObjectOrClassMethodParams(method);
            const firstParam = params[0];
            const hasContextParam = firstParam && this.isThisParam(firstParam);
            return hasContextParam ? baseCount + 1 : baseCount;
        }
        parseCatchClauseParam() {
            const param = super.parseCatchClauseParam();
            const type = this.tsTryParseTypeAnnotation();
            if (type) {
                param.typeAnnotation = type;
                this.resetEndLocation(param);
            }
            return param;
        }
        tsInAmbientContext(cb) {
            const oldIsAmbientContext = this.state.isAmbientContext;
            this.state.isAmbientContext = true;
            try {
                return cb();
            } finally{
                this.state.isAmbientContext = oldIsAmbientContext;
            }
        }
        parseClass(node, ...args) {
            const oldInAbstractClass = this.state.inAbstractClass;
            this.state.inAbstractClass = !!node.abstract;
            try {
                return super.parseClass(node, ...args);
            } finally{
                this.state.inAbstractClass = oldInAbstractClass;
            }
        }
        tsParseAbstractDeclaration(node) {
            if (this.match(types$1._class)) {
                node.abstract = true;
                return this.parseClass(node, true, false);
            } else if (this.isContextual("interface")) {
                if (!this.hasFollowingLineBreak()) {
                    node.abstract = true;
                    this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);
                    this.next();
                    return this.tsParseInterfaceDeclaration(node);
                }
            } else this.unexpected(null, types$1._class);
        }
        parseMethod(...args) {
            const method = super.parseMethod(...args);
            if (method.abstract) {
                const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
                if (hasBody) {
                    const { key  } = method;
                    this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === "Identifier" ? key.name : `[${this.input.slice(key.start, key.end)}]`);
                }
            }
            return method;
        }
        shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
        }
        parse() {
            if (this.shouldParseAsAmbientContext()) this.state.isAmbientContext = true;
            return super.parse();
        }
        getExpression() {
            if (this.shouldParseAsAmbientContext()) this.state.isAmbientContext = true;
            return super.getExpression();
        }
    }
;
types$1.placeholder = new TokenType("%%", {
    startsExpr: true
});
const PlaceHolderErrors = makeErrorTemplates({
    ClassNameIsRequired: "A class name is required."
}, ErrorCodes.SyntaxError);
var placeholders = (superClass)=>class extends superClass {
        parsePlaceholder(expectedNode) {
            if (this.match(types$1.placeholder)) {
                const node = this.startNode();
                this.next();
                this.assertNoSpace("Unexpected space in placeholder.");
                node.name = super.parseIdentifier(true);
                this.assertNoSpace("Unexpected space in placeholder.");
                this.expect(types$1.placeholder);
                return this.finishPlaceholder(node, expectedNode);
            }
        }
        finishPlaceholder(node, expectedNode) {
            const isFinished = !!(node.expectedNode && node.type === "Placeholder");
            node.expectedNode = expectedNode;
            return isFinished ? node : this.finishNode(node, "Placeholder");
        }
        getTokenFromCode(code) {
            if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) return this.finishOp(types$1.placeholder, 2);
            return super.getTokenFromCode(...arguments);
        }
        parseExprAtom() {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(...arguments);
        }
        parseIdentifier() {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(...arguments);
        }
        checkReservedWord(word) {
            if (word !== undefined) super.checkReservedWord(...arguments);
        }
        parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom(...arguments);
        }
        checkLVal(expr) {
            if (expr.type !== "Placeholder") super.checkLVal(...arguments);
        }
        toAssignable(node) {
            if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
                node.expectedNode = "Pattern";
                return node;
            }
            return super.toAssignable(...arguments);
        }
        isLet(context) {
            if (super.isLet(context)) return true;
            if (!this.isContextual("let")) return false;
            if (context) return false;
            const nextToken = this.lookahead();
            if (nextToken.type === types$1.placeholder) return true;
            return false;
        }
        verifyBreakContinue(node) {
            if (node.label && node.label.type === "Placeholder") return;
            super.verifyBreakContinue(...arguments);
        }
        parseExpressionStatement(node, expr) {
            if (expr.type !== "Placeholder" || expr.extra && expr.extra.parenthesized) return super.parseExpressionStatement(...arguments);
            if (this.match(types$1.colon)) {
                const stmt = node;
                stmt.label = this.finishPlaceholder(expr, "Identifier");
                this.next();
                stmt.body = this.parseStatement("label");
                return this.finishNode(stmt, "LabeledStatement");
            }
            this.semicolon();
            node.name = expr.name;
            return this.finishPlaceholder(node, "Statement");
        }
        parseBlock() {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(...arguments);
        }
        parseFunctionId() {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(...arguments);
        }
        parseClass(node, isStatement, optionalId) {
            const type = isStatement ? "ClassDeclaration" : "ClassExpression";
            this.next();
            this.takeDecorators(node);
            const oldStrict = this.state.strict;
            const placeholder = this.parsePlaceholder("Identifier");
            if (placeholder) {
                if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) node.id = placeholder;
                else if (optionalId || !isStatement) {
                    node.id = null;
                    node.body = this.finishPlaceholder(placeholder, "ClassBody");
                    return this.finishNode(node, type);
                } else this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);
            } else this.parseClassId(node, isStatement, optionalId);
            this.parseClassSuper(node);
            node.body = this.parsePlaceholder("ClassBody") || this.parseClassBody(!!node.superClass, oldStrict);
            return this.finishNode(node, type);
        }
        parseExport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder) return super.parseExport(...arguments);
            if (!this.isContextual("from") && !this.match(types$1.comma)) {
                node.specifiers = [];
                node.source = null;
                node.declaration = this.finishPlaceholder(placeholder, "Declaration");
                return this.finishNode(node, "ExportNamedDeclaration");
            }
            this.expectPlugin("exportDefaultFrom");
            const specifier = this.startNode();
            specifier.exported = placeholder;
            node.specifiers = [
                this.finishNode(specifier, "ExportDefaultSpecifier")
            ];
            return super.parseExport(node);
        }
        isExportDefaultSpecifier() {
            if (this.match(types$1._default)) {
                const next = this.nextTokenStart();
                if (this.isUnparsedContextual(next, "from")) {
                    if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) return true;
                }
            }
            return super.isExportDefaultSpecifier();
        }
        maybeParseExportDefaultSpecifier(node) {
            if (node.specifiers && node.specifiers.length > 0) return true;
            return super.maybeParseExportDefaultSpecifier(...arguments);
        }
        checkExport(node) {
            const { specifiers  } = node;
            if (specifiers != null && specifiers.length) node.specifiers = specifiers.filter((node)=>node.exported.type === "Placeholder"
            );
            super.checkExport(node);
            node.specifiers = specifiers;
        }
        parseImport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder) return super.parseImport(...arguments);
            node.specifiers = [];
            if (!this.isContextual("from") && !this.match(types$1.comma)) {
                node.source = this.finishPlaceholder(placeholder, "StringLiteral");
                this.semicolon();
                return this.finishNode(node, "ImportDeclaration");
            }
            const specifier = this.startNodeAtNode(placeholder);
            specifier.local = placeholder;
            this.finishNode(specifier, "ImportDefaultSpecifier");
            node.specifiers.push(specifier);
            if (this.eat(types$1.comma)) {
                const hasStarImport = this.maybeParseStarImportSpecifier(node);
                if (!hasStarImport) this.parseNamedImportSpecifiers(node);
            }
            this.expectContextual("from");
            node.source = this.parseImportSource();
            this.semicolon();
            return this.finishNode(node, "ImportDeclaration");
        }
        parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource(...arguments);
        }
    }
;
var v8intrinsic = (superClass)=>class extends superClass {
        parseV8Intrinsic() {
            if (this.match(types$1.modulo)) {
                const v8IntrinsicStart = this.state.start;
                const node = this.startNode();
                this.eat(types$1.modulo);
                if (this.match(types$1.name)) {
                    const name = this.parseIdentifierName(this.state.start);
                    const identifier = this.createIdentifier(node, name);
                    identifier.type = "V8IntrinsicIdentifier";
                    if (this.match(types$1.parenL)) return identifier;
                }
                this.unexpected(v8IntrinsicStart);
            }
        }
        parseExprAtom() {
            return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
        }
    }
;
function hasPlugin(plugins, name) {
    return plugins.some((plugin)=>{
        if (Array.isArray(plugin)) return plugin[0] === name;
        else return plugin === name;
    });
}
function getPluginOption(plugins, name, option) {
    const plugin = plugins.find((plugin1)=>{
        if (Array.isArray(plugin1)) return plugin1[0] === name;
        else return plugin1 === name;
    });
    if (plugin && Array.isArray(plugin)) return plugin[1][option];
    return null;
}
const PIPELINE_PROPOSALS = [
    "minimal",
    "smart",
    "fsharp"
];
const RECORD_AND_TUPLE_SYNTAX_TYPES = [
    "hash",
    "bar"
];
function validatePlugins(plugins) {
    if (hasPlugin(plugins, "decorators")) {
        if (hasPlugin(plugins, "decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
        const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
        if (decoratorsBeforeExport == null) throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.");
        else if (typeof decoratorsBeforeExport !== "boolean") throw new Error("'decoratorsBeforeExport' must be a boolean.");
    }
    if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) throw new Error("Cannot combine flow and typescript plugins.");
    if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
    if (hasPlugin(plugins, "pipelineOperator") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, "pipelineOperator", "proposal"))) throw new Error("'pipelineOperator' requires 'proposal' option whose value should be one of: " + PIPELINE_PROPOSALS.map((p)=>`'${p}'`
    ).join(", "));
    if (hasPlugin(plugins, "moduleAttributes")) {
        if (hasPlugin(plugins, "importAssertions")) throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
        const moduleAttributesVerionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");
        if (moduleAttributesVerionPluginOption !== "may-2020") throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
    }
    if (hasPlugin(plugins, "recordAndTuple") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p)=>`'${p}'`
    ).join(", "));
    if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
        const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
        error.missingPlugins = "doExpressions";
        throw error;
    }
}
const mixinPlugins = {
    estree,
    jsx,
    flow,
    typescript,
    v8intrinsic,
    placeholders
};
const mixinPluginNames = Object.keys(mixinPlugins);
const defaultOptions = {
    sourceType: "script",
    sourceFilename: undefined,
    startLine: 1,
    allowAwaitOutsideFunction: false,
    allowReturnOutsideFunction: false,
    allowImportExportEverywhere: false,
    allowSuperOutsideMethod: false,
    allowUndeclaredExports: false,
    plugins: [],
    strictMode: null,
    ranges: false,
    tokens: false,
    createParenthesizedExpressions: false,
    errorRecovery: false
};
function getOptions(opts) {
    const options = {
    };
    for (const key of Object.keys(defaultOptions))options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];
    return options;
}
var _isDigit = function isDigit(code) {
    return code >= 48 && code <= 57;
};
const VALID_REGEX_FLAGS = new Set([
    "g",
    "m",
    "s",
    "i",
    "y",
    "u"
]);
const forbiddenNumericSeparatorSiblings = {
    decBinOct: [
        46,
        66,
        69,
        79,
        95,
        98,
        101,
        111
    ],
    hex: [
        46,
        88,
        95,
        120
    ]
};
const allowedNumericSeparatorSiblings = {
};
allowedNumericSeparatorSiblings.bin = [
    48,
    49
];
allowedNumericSeparatorSiblings.oct = [
    ...allowedNumericSeparatorSiblings.bin,
    50,
    51,
    52,
    53,
    54,
    55
];
allowedNumericSeparatorSiblings.dec = [
    ...allowedNumericSeparatorSiblings.oct,
    56,
    57
];
allowedNumericSeparatorSiblings.hex = [
    ...allowedNumericSeparatorSiblings.dec,
    65,
    66,
    67,
    68,
    69,
    70,
    97,
    98,
    99,
    100,
    101,
    102
];
class Token {
    constructor(state1){
        this.type = state1.type;
        this.value = state1.value;
        this.start = state1.start;
        this.end = state1.end;
        this.loc = new SourceLocation(state1.startLoc, state1.endLoc);
    }
}
class Tokenizer extends ParserError {
    constructor(options, input){
        super();
        this.isLookahead = void 0;
        this.tokens = [];
        this.state = new State();
        this.state.init(options);
        this.input = input;
        this.length = input.length;
        this.isLookahead = false;
    }
    pushToken(token) {
        this.tokens.length = this.state.tokensLength;
        this.tokens.push(token);
        ++this.state.tokensLength;
    }
    next() {
        this.checkKeywordEscapes();
        if (this.options.tokens) this.pushToken(new Token(this.state));
        this.state.lastTokEnd = this.state.end;
        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
    }
    eat(type) {
        if (this.match(type)) {
            this.next();
            return true;
        } else return false;
    }
    match(type) {
        return this.state.type === type;
    }
    createLookaheadState(state) {
        return {
            pos: state.pos,
            value: null,
            type: state.type,
            start: state.start,
            end: state.end,
            lastTokEnd: state.end,
            context: [
                this.curContext()
            ],
            exprAllowed: state.exprAllowed,
            inType: state.inType
        };
    }
    lookahead() {
        const old = this.state;
        this.state = this.createLookaheadState(old);
        this.isLookahead = true;
        this.nextToken();
        this.isLookahead = false;
        const curr = this.state;
        this.state = old;
        return curr;
    }
    nextTokenStart() {
        return this.nextTokenStartSince(this.state.pos);
    }
    nextTokenStartSince(pos) {
        skipWhiteSpace.lastIndex = pos;
        const skip = skipWhiteSpace.exec(this.input);
        return pos + skip[0].length;
    }
    lookaheadCharCode() {
        return this.input.charCodeAt(this.nextTokenStart());
    }
    codePointAtPos(pos) {
        let cp = this.input.charCodeAt(pos);
        if ((cp & 64512) === 55296 && (++pos) < this.input.length) {
            const trail = this.input.charCodeAt(pos);
            if ((trail & 64512) === 56320) cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
        }
        return cp;
    }
    setStrict(strict) {
        this.state.strict = strict;
        if (strict) {
            this.state.strictErrors.forEach((message, pos)=>this.raise(pos, message)
            );
            this.state.strictErrors.clear();
        }
    }
    curContext() {
        return this.state.context[this.state.context.length - 1];
    }
    nextToken() {
        const curContext = this.curContext();
        if (!curContext.preserveSpace) this.skipSpace();
        this.state.start = this.state.pos;
        if (!this.isLookahead) this.state.startLoc = this.state.curPosition();
        if (this.state.pos >= this.length) {
            this.finishToken(types$1.eof);
            return;
        }
        if (curContext === types.template) this.readTmplToken();
        else this.getTokenFromCode(this.codePointAtPos(this.state.pos));
    }
    pushComment(block, text, start, end, startLoc, endLoc) {
        const comment = {
            type: block ? "CommentBlock" : "CommentLine",
            value: text,
            start: start,
            end: end,
            loc: new SourceLocation(startLoc, endLoc)
        };
        if (this.options.tokens) this.pushToken(comment);
        this.state.comments.push(comment);
        this.addComment(comment);
    }
    skipBlockComment() {
        let startLoc;
        if (!this.isLookahead) startLoc = this.state.curPosition();
        const start2 = this.state.pos;
        const end2 = this.input.indexOf("*/", this.state.pos + 2);
        if (end2 === -1) throw this.raise(start2, ErrorMessages.UnterminatedComment);
        this.state.pos = end2 + 2;
        lineBreakG.lastIndex = start2;
        let match;
        while((match = lineBreakG.exec(this.input)) && match.index < this.state.pos){
            ++this.state.curLine;
            this.state.lineStart = match.index + match[0].length;
        }
        if (this.isLookahead) return;
        this.pushComment(true, this.input.slice(start2 + 2, end2), start2, this.state.pos, startLoc, this.state.curPosition());
    }
    skipLineComment(startSkip) {
        const start2 = this.state.pos;
        let startLoc;
        if (!this.isLookahead) startLoc = this.state.curPosition();
        let ch = this.input.charCodeAt(this.state.pos += startSkip);
        if (this.state.pos < this.length) while(!isNewLine(ch) && (++this.state.pos) < this.length)ch = this.input.charCodeAt(this.state.pos);
        if (this.isLookahead) return;
        this.pushComment(false, this.input.slice(start2 + startSkip, this.state.pos), start2, this.state.pos, startLoc, this.state.curPosition());
    }
    skipSpace() {
        loop: while(this.state.pos < this.length){
            const ch = this.input.charCodeAt(this.state.pos);
            switch(ch){
                case 32:
                case 160:
                case 9:
                    ++this.state.pos;
                    break;
                case 13:
                    if (this.input.charCodeAt(this.state.pos + 1) === 10) ++this.state.pos;
                case 10:
                case 8232:
                case 8233:
                    ++this.state.pos;
                    ++this.state.curLine;
                    this.state.lineStart = this.state.pos;
                    break;
                case 47:
                    switch(this.input.charCodeAt(this.state.pos + 1)){
                        case 42:
                            this.skipBlockComment();
                            break;
                        case 47:
                            this.skipLineComment(2);
                            break;
                        default:
                            break loop;
                    }
                    break;
                default:
                    if (isWhitespace(ch)) ++this.state.pos;
                    else break loop;
            }
        }
    }
    finishToken(type, val) {
        this.state.end = this.state.pos;
        const prevType = this.state.type;
        this.state.type = type;
        this.state.value = val;
        if (!this.isLookahead) {
            this.state.endLoc = this.state.curPosition();
            this.updateContext(prevType);
        }
    }
    readToken_numberSign() {
        if (this.state.pos === 0 && this.readToken_interpreter()) return;
        const nextPos = this.state.pos + 1;
        const next = this.codePointAtPos(nextPos);
        if (next >= 48 && next <= 57) throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);
        if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
            this.expectPlugin("recordAndTuple");
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "hash") throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);
            if (next === 123) this.finishToken(types$1.braceHashL);
            else this.finishToken(types$1.bracketHashL);
            this.state.pos += 2;
        } else if (isIdentifierStart(next)) {
            ++this.state.pos;
            this.finishToken(types$1.privateName, this.readWord1(next));
        } else if (next === 92) {
            ++this.state.pos;
            this.finishToken(types$1.privateName, this.readWord1());
        } else this.finishOp(types$1.hash, 1);
    }
    readToken_dot() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next >= 48 && next <= 57) {
            this.readNumber(true);
            return;
        }
        if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
            this.state.pos += 3;
            this.finishToken(types$1.ellipsis);
        } else {
            ++this.state.pos;
            this.finishToken(types$1.dot);
        }
    }
    readToken_slash() {
        if (this.state.exprAllowed && !this.state.inType) {
            ++this.state.pos;
            this.readRegexp();
            return;
        }
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) this.finishOp(types$1.assign, 2);
        else this.finishOp(types$1.slash, 1);
    }
    readToken_interpreter() {
        if (this.state.pos !== 0 || this.length < 2) return false;
        let ch = this.input.charCodeAt(this.state.pos + 1);
        if (ch !== 33) return false;
        const start2 = this.state.pos;
        this.state.pos += 1;
        while(!isNewLine(ch) && (++this.state.pos) < this.length)ch = this.input.charCodeAt(this.state.pos);
        const value = this.input.slice(start2 + 2, this.state.pos);
        this.finishToken(types$1.interpreterDirective, value);
        return true;
    }
    readToken_mult_modulo(code) {
        let type = code === 42 ? types$1.star : types$1.modulo;
        let width = 1;
        let next = this.input.charCodeAt(this.state.pos + 1);
        const exprAllowed = this.state.exprAllowed;
        if (code === 42 && next === 42) {
            width++;
            next = this.input.charCodeAt(this.state.pos + 2);
            type = types$1.exponent;
        }
        if (next === 61 && !exprAllowed) {
            width++;
            type = types$1.assign;
        }
        this.finishOp(type, width);
    }
    readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
            if (this.input.charCodeAt(this.state.pos + 2) === 61) this.finishOp(types$1.assign, 3);
            else this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
            return;
        }
        if (code === 124) {
            if (next === 62) {
                this.finishOp(types$1.pipeline, 2);
                return;
            }
            if (this.hasPlugin("recordAndTuple") && next === 125) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);
                this.finishOp(types$1.braceBarR, 2);
                return;
            }
            if (this.hasPlugin("recordAndTuple") && next === 93) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);
                this.finishOp(types$1.bracketBarR, 2);
                return;
            }
        }
        if (next === 61) {
            this.finishOp(types$1.assign, 2);
            return;
        }
        this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
    }
    readToken_caret() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) this.finishOp(types$1.assign, 2);
        else this.finishOp(types$1.bitwiseXOR, 1);
    }
    readToken_plus_min(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
            if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {
                this.skipLineComment(3);
                this.skipSpace();
                this.nextToken();
                return;
            }
            this.finishOp(types$1.incDec, 2);
            return;
        }
        if (next === 61) this.finishOp(types$1.assign, 2);
        else this.finishOp(types$1.plusMin, 1);
    }
    readToken_lt_gt(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        let size = 1;
        if (next === code) {
            size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
            if (this.input.charCodeAt(this.state.pos + size) === 61) {
                this.finishOp(types$1.assign, size + 1);
                return;
            }
            this.finishOp(types$1.bitShift, size);
            return;
        }
        if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
            this.skipLineComment(4);
            this.skipSpace();
            this.nextToken();
            return;
        }
        if (next === 61) size = 2;
        this.finishOp(types$1.relational, size);
    }
    readToken_eq_excl(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
            this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
            return;
        }
        if (code === 61 && next === 62) {
            this.state.pos += 2;
            this.finishToken(types$1.arrow);
            return;
        }
        this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);
    }
    readToken_question() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        const next2 = this.input.charCodeAt(this.state.pos + 2);
        if (next === 63) {
            if (next2 === 61) this.finishOp(types$1.assign, 3);
            else this.finishOp(types$1.nullishCoalescing, 2);
        } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
            this.state.pos += 2;
            this.finishToken(types$1.questionDot);
        } else {
            ++this.state.pos;
            this.finishToken(types$1.question);
        }
    }
    getTokenFromCode(code) {
        switch(code){
            case 46:
                this.readToken_dot();
                return;
            case 40:
                ++this.state.pos;
                this.finishToken(types$1.parenL);
                return;
            case 41:
                ++this.state.pos;
                this.finishToken(types$1.parenR);
                return;
            case 59:
                ++this.state.pos;
                this.finishToken(types$1.semi);
                return;
            case 44:
                ++this.state.pos;
                this.finishToken(types$1.comma);
                return;
            case 91:
                if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                    if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);
                    this.finishToken(types$1.bracketBarL);
                    this.state.pos += 2;
                } else {
                    ++this.state.pos;
                    this.finishToken(types$1.bracketL);
                }
                return;
            case 93:
                ++this.state.pos;
                this.finishToken(types$1.bracketR);
                return;
            case 123:
                if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                    if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);
                    this.finishToken(types$1.braceBarL);
                    this.state.pos += 2;
                } else {
                    ++this.state.pos;
                    this.finishToken(types$1.braceL);
                }
                return;
            case 125:
                ++this.state.pos;
                this.finishToken(types$1.braceR);
                return;
            case 58:
                if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) this.finishOp(types$1.doubleColon, 2);
                else {
                    ++this.state.pos;
                    this.finishToken(types$1.colon);
                }
                return;
            case 63:
                this.readToken_question();
                return;
            case 96:
                ++this.state.pos;
                this.finishToken(types$1.backQuote);
                return;
            case 48:
                {
                    const next = this.input.charCodeAt(this.state.pos + 1);
                    if (next === 120 || next === 88) {
                        this.readRadixNumber(16);
                        return;
                    }
                    if (next === 111 || next === 79) {
                        this.readRadixNumber(8);
                        return;
                    }
                    if (next === 98 || next === 66) {
                        this.readRadixNumber(2);
                        return;
                    }
                }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
                this.readNumber(false);
                return;
            case 34:
            case 39:
                this.readString(code);
                return;
            case 47:
                this.readToken_slash();
                return;
            case 37:
            case 42:
                this.readToken_mult_modulo(code);
                return;
            case 124:
            case 38:
                this.readToken_pipe_amp(code);
                return;
            case 94:
                this.readToken_caret();
                return;
            case 43:
            case 45:
                this.readToken_plus_min(code);
                return;
            case 60:
            case 62:
                this.readToken_lt_gt(code);
                return;
            case 61:
            case 33:
                this.readToken_eq_excl(code);
                return;
            case 126:
                this.finishOp(types$1.tilde, 1);
                return;
            case 64:
                ++this.state.pos;
                this.finishToken(types$1.at);
                return;
            case 35:
                this.readToken_numberSign();
                return;
            case 92:
                this.readWord();
                return;
            default:
                if (isIdentifierStart(code)) {
                    this.readWord(code);
                    return;
                }
        }
        throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));
    }
    finishOp(type, size) {
        const str = this.input.slice(this.state.pos, this.state.pos + size);
        this.state.pos += size;
        this.finishToken(type, str);
    }
    readRegexp() {
        const start2 = this.state.pos;
        let escaped, inClass;
        for(;;){
            if (this.state.pos >= this.length) throw this.raise(start2, ErrorMessages.UnterminatedRegExp);
            const ch = this.input.charAt(this.state.pos);
            if (lineBreak.test(ch)) throw this.raise(start2, ErrorMessages.UnterminatedRegExp);
            if (escaped) escaped = false;
            else {
                if (ch === "[") inClass = true;
                else if (ch === "]" && inClass) inClass = false;
                else if (ch === "/" && !inClass) break;
                escaped = ch === "\\";
            }
            ++this.state.pos;
        }
        const content = this.input.slice(start2, this.state.pos);
        ++this.state.pos;
        let mods = "";
        while(this.state.pos < this.length){
            const char = this.input[this.state.pos];
            const charCode = this.codePointAtPos(this.state.pos);
            if (VALID_REGEX_FLAGS.has(char)) {
                if (mods.indexOf(char) > -1) this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);
            } else if (isIdentifierChar(charCode) || charCode === 92) this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);
            else break;
            ++this.state.pos;
            mods += char;
        }
        this.finishToken(types$1.regexp, {
            pattern: content,
            flags: mods
        });
    }
    readInt(radix, len, forceLen, allowNumSeparator = true) {
        const start2 = this.state.pos;
        const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
        const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;
        let invalid = false;
        let total = 0;
        for(let i = 0, e = len == null ? Infinity : len; i < e; ++i){
            const code = this.input.charCodeAt(this.state.pos);
            let val;
            if (code === 95) {
                const prev = this.input.charCodeAt(this.state.pos - 1);
                const next = this.input.charCodeAt(this.state.pos + 1);
                if (allowedSiblings.indexOf(next) === -1) this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);
                else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);
                if (!allowNumSeparator) this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);
                ++this.state.pos;
                continue;
            }
            if (code >= 97) val = code - 97 + 10;
            else if (code >= 65) val = code - 65 + 10;
            else if (_isDigit(code)) val = code - 48;
            else val = Infinity;
            if (val >= radix) {
                if (this.options.errorRecovery && val <= 9) {
                    val = 0;
                    this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);
                } else if (forceLen) {
                    val = 0;
                    invalid = true;
                } else break;
            }
            ++this.state.pos;
            total = total * radix + val;
        }
        if (this.state.pos === start2 || len != null && this.state.pos - start2 !== len || invalid) return null;
        return total;
    }
    readRadixNumber(radix) {
        const start2 = this.state.pos;
        let isBigInt = false;
        this.state.pos += 2;
        const val = this.readInt(radix);
        if (val == null) this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);
        const next = this.input.charCodeAt(this.state.pos);
        if (next === 110) {
            ++this.state.pos;
            isBigInt = true;
        } else if (next === 109) throw this.raise(start2, ErrorMessages.InvalidDecimal);
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
        if (isBigInt) {
            const str = this.input.slice(start2, this.state.pos).replace(/[_n]/g, "");
            this.finishToken(types$1.bigint, str);
            return;
        }
        this.finishToken(types$1.num, val);
    }
    readNumber(startsWithDot) {
        const start2 = this.state.pos;
        let isFloat = false;
        let isBigInt = false;
        let isDecimal = false;
        let hasExponent = false;
        let isOctal = false;
        if (!startsWithDot && this.readInt(10) === null) this.raise(start2, ErrorMessages.InvalidNumber);
        const hasLeadingZero = this.state.pos - start2 >= 2 && this.input.charCodeAt(start2) === 48;
        if (hasLeadingZero) {
            const integer = this.input.slice(start2, this.state.pos);
            this.recordStrictModeErrors(start2, ErrorMessages.StrictOctalLiteral);
            if (!this.state.strict) {
                const underscorePos = integer.indexOf("_");
                if (underscorePos > 0) this.raise(underscorePos + start2, ErrorMessages.ZeroDigitNumericSeparator);
            }
            isOctal = hasLeadingZero && !/[89]/.test(integer);
        }
        let next = this.input.charCodeAt(this.state.pos);
        if (next === 46 && !isOctal) {
            ++this.state.pos;
            this.readInt(10);
            isFloat = true;
            next = this.input.charCodeAt(this.state.pos);
        }
        if ((next === 69 || next === 101) && !isOctal) {
            next = this.input.charCodeAt(++this.state.pos);
            if (next === 43 || next === 45) ++this.state.pos;
            if (this.readInt(10) === null) this.raise(start2, ErrorMessages.InvalidOrMissingExponent);
            isFloat = true;
            hasExponent = true;
            next = this.input.charCodeAt(this.state.pos);
        }
        if (next === 110) {
            if (isFloat || hasLeadingZero) this.raise(start2, ErrorMessages.InvalidBigIntLiteral);
            ++this.state.pos;
            isBigInt = true;
        }
        if (next === 109) {
            this.expectPlugin("decimal", this.state.pos);
            if (hasExponent || hasLeadingZero) this.raise(start2, ErrorMessages.InvalidDecimal);
            ++this.state.pos;
            isDecimal = true;
        }
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
        const str = this.input.slice(start2, this.state.pos).replace(/[_mn]/g, "");
        if (isBigInt) {
            this.finishToken(types$1.bigint, str);
            return;
        }
        if (isDecimal) {
            this.finishToken(types$1.decimal, str);
            return;
        }
        const val = isOctal ? parseInt(str, 8) : parseFloat(str);
        this.finishToken(types$1.num, val);
    }
    readCodePoint(throwOnInvalid) {
        const ch = this.input.charCodeAt(this.state.pos);
        let code;
        if (ch === 123) {
            const codePos = ++this.state.pos;
            code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, true, throwOnInvalid);
            ++this.state.pos;
            if (code !== null && code > 1114111) {
                if (throwOnInvalid) this.raise(codePos, ErrorMessages.InvalidCodePoint);
                else return null;
            }
        } else code = this.readHexChar(4, false, throwOnInvalid);
        return code;
    }
    readString(quote) {
        let out = "", chunkStart = ++this.state.pos;
        for(;;){
            if (this.state.pos >= this.length) throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
            const ch = this.input.charCodeAt(this.state.pos);
            if (ch === quote) break;
            if (ch === 92) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.readEscapedChar(false);
                chunkStart = this.state.pos;
            } else if (ch === 8232 || ch === 8233) {
                ++this.state.pos;
                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
            } else if (isNewLine(ch)) throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
            else ++this.state.pos;
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        this.finishToken(types$1.string, out);
    }
    readTmplToken() {
        let out = "", chunkStart = this.state.pos, containsInvalid = false;
        for(;;){
            if (this.state.pos >= this.length) throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);
            const ch = this.input.charCodeAt(this.state.pos);
            if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
                if (this.state.pos === this.state.start && this.match(types$1.template)) {
                    if (ch === 36) {
                        this.state.pos += 2;
                        this.finishToken(types$1.dollarBraceL);
                        return;
                    } else {
                        ++this.state.pos;
                        this.finishToken(types$1.backQuote);
                        return;
                    }
                }
                out += this.input.slice(chunkStart, this.state.pos);
                this.finishToken(types$1.template, containsInvalid ? null : out);
                return;
            }
            if (ch === 92) {
                out += this.input.slice(chunkStart, this.state.pos);
                const escaped = this.readEscapedChar(true);
                if (escaped === null) containsInvalid = true;
                else out += escaped;
                chunkStart = this.state.pos;
            } else if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                ++this.state.pos;
                switch(ch){
                    case 13:
                        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
                    case 10:
                        out += "\n";
                        break;
                    default:
                        out += String.fromCharCode(ch);
                        break;
                }
                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
                chunkStart = this.state.pos;
            } else ++this.state.pos;
        }
    }
    recordStrictModeErrors(pos, message) {
        if (this.state.strict && !this.state.strictErrors.has(pos)) this.raise(pos, message);
        else this.state.strictErrors.set(pos, message);
    }
    readEscapedChar(inTemplate) {
        const throwOnInvalid = !inTemplate;
        const ch = this.input.charCodeAt(++this.state.pos);
        ++this.state.pos;
        switch(ch){
            case 110:
                return "\n";
            case 114:
                return "\r";
            case 120:
                {
                    const code = this.readHexChar(2, false, throwOnInvalid);
                    return code === null ? null : String.fromCharCode(code);
                }
            case 117:
                {
                    const code = this.readCodePoint(throwOnInvalid);
                    return code === null ? null : String.fromCodePoint(code);
                }
            case 116:
                return "\t";
            case 98:
                return "\b";
            case 118:
                return "\u000b";
            case 102:
                return "\f";
            case 13:
                if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
            case 10:
                this.state.lineStart = this.state.pos;
                ++this.state.curLine;
            case 8232:
            case 8233:
                return "";
            case 56:
            case 57:
                if (inTemplate) return null;
                else this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);
            default:
                if (ch >= 48 && ch <= 55) {
                    const codePos = this.state.pos - 1;
                    const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);
                    let octalStr = match[0];
                    let octal = parseInt(octalStr, 8);
                    if (octal > 255) {
                        octalStr = octalStr.slice(0, -1);
                        octal = parseInt(octalStr, 8);
                    }
                    this.state.pos += octalStr.length - 1;
                    const next = this.input.charCodeAt(this.state.pos);
                    if (octalStr !== "0" || next === 56 || next === 57) {
                        if (inTemplate) return null;
                        else this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);
                    }
                    return String.fromCharCode(octal);
                }
                return String.fromCharCode(ch);
        }
    }
    readHexChar(len, forceLen, throwOnInvalid) {
        const codePos = this.state.pos;
        const n = this.readInt(16, len, forceLen, false);
        if (n === null) {
            if (throwOnInvalid) this.raise(codePos, ErrorMessages.InvalidEscapeSequence);
            else this.state.pos = codePos - 1;
        }
        return n;
    }
    readWord1(firstCode) {
        this.state.containsEsc = false;
        let word = "";
        const start2 = this.state.pos;
        let chunkStart = this.state.pos;
        if (firstCode !== undefined) this.state.pos += firstCode <= 65535 ? 1 : 2;
        while(this.state.pos < this.length){
            const ch = this.codePointAtPos(this.state.pos);
            if (isIdentifierChar(ch)) this.state.pos += ch <= 65535 ? 1 : 2;
            else if (ch === 92) {
                this.state.containsEsc = true;
                word += this.input.slice(chunkStart, this.state.pos);
                const escStart = this.state.pos;
                const identifierCheck = this.state.pos === start2 ? isIdentifierStart : isIdentifierChar;
                if (this.input.charCodeAt(++this.state.pos) !== 117) {
                    this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);
                    chunkStart = this.state.pos - 1;
                    continue;
                }
                ++this.state.pos;
                const esc = this.readCodePoint(true);
                if (esc !== null) {
                    if (!identifierCheck(esc)) this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);
                    word += String.fromCodePoint(esc);
                }
                chunkStart = this.state.pos;
            } else break;
        }
        return word + this.input.slice(chunkStart, this.state.pos);
    }
    readWord(firstCode) {
        const word = this.readWord1(firstCode);
        const type = keywords$1.get(word) || types$1.name;
        this.finishToken(type, word);
    }
    checkKeywordEscapes() {
        const kw = this.state.type.keyword;
        if (kw && this.state.containsEsc) this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);
    }
    braceIsBlock(prevType) {
        const parent = this.curContext();
        if (parent === types.functionExpression || parent === types.functionStatement) return true;
        if (prevType === types$1.colon && (parent === types.braceStatement || parent === types.braceExpression)) return !parent.isExpr;
        if (prevType === types$1._return || prevType === types$1.name && this.state.exprAllowed) return this.hasPrecedingLineBreak();
        if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) return true;
        if (prevType === types$1.braceL) return parent === types.braceStatement;
        if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) return false;
        if (prevType === types$1.relational) return true;
        return !this.state.exprAllowed;
    }
    updateContext(prevType) {
        const type = this.state.type;
        let update;
        if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) this.state.exprAllowed = false;
        else if (update = type.updateContext) update.call(this, prevType);
        else this.state.exprAllowed = type.beforeExpr;
    }
}
class ClassScope {
    constructor(){
        this.privateNames = new Set();
        this.loneAccessors = new Map();
        this.undefinedPrivateNames = new Map();
    }
}
class ClassScopeHandler {
    constructor(raise1){
        this.stack = [];
        this.undefinedPrivateNames = new Map();
        this.raise = raise1;
    }
    current() {
        return this.stack[this.stack.length - 1];
    }
    enter() {
        this.stack.push(new ClassScope());
    }
    exit() {
        const oldClassScope = this.stack.pop();
        const current = this.current();
        for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)){
            if (current) {
                if (!current.undefinedPrivateNames.has(name)) current.undefinedPrivateNames.set(name, pos);
            } else this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);
        }
    }
    declarePrivateName(name, elementType, pos) {
        const classScope = this.current();
        let redefined = classScope.privateNames.has(name);
        if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
            const accessor = redefined && classScope.loneAccessors.get(name);
            if (accessor) {
                const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
                const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
                const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
                const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
                redefined = oldKind === newKind || oldStatic !== newStatic;
                if (!redefined) classScope.loneAccessors.delete(name);
            } else if (!redefined) classScope.loneAccessors.set(name, elementType);
        }
        if (redefined) this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);
        classScope.privateNames.add(name);
        classScope.undefinedPrivateNames.delete(name);
    }
    usePrivateName(name, pos) {
        let classScope;
        for (classScope of this.stack){
            if (classScope.privateNames.has(name)) return;
        }
        if (classScope) classScope.undefinedPrivateNames.set(name, pos);
        else this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);
    }
}
const kExpression = 0, kMaybeArrowParameterDeclaration = 1, kMaybeAsyncArrowParameterDeclaration = 2, kParameterDeclaration = 3;
class ExpressionScope {
    constructor(type2 = kExpression){
        this.type = void 0;
        this.type = type2;
    }
    canBeArrowParameterDeclaration() {
        return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
    }
    isCertainlyParameterDeclaration() {
        return this.type === kParameterDeclaration;
    }
}
class ArrowHeadParsingScope extends ExpressionScope {
    constructor(type1){
        super(type1);
        this.errors = new Map();
    }
    recordDeclarationError(pos, template) {
        this.errors.set(pos, template);
    }
    clearDeclarationError(pos) {
        this.errors.delete(pos);
    }
    iterateErrors(iterator) {
        this.errors.forEach(iterator);
    }
}
class ExpressionScopeHandler {
    constructor(raise2){
        this.stack = [
            new ExpressionScope()
        ];
        this.raise = raise2;
    }
    enter(scope) {
        this.stack.push(scope);
    }
    exit() {
        this.stack.pop();
    }
    recordParameterInitializerError(pos, template) {
        const { stack  } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while(!scope.isCertainlyParameterDeclaration()){
            if (scope.canBeArrowParameterDeclaration()) scope.recordDeclarationError(pos, template);
            else return;
            scope = stack[--i];
        }
        this.raise(pos, template);
    }
    recordParenthesizedIdentifierError(pos, template) {
        const { stack  } = this;
        const scope = stack[stack.length - 1];
        if (scope.isCertainlyParameterDeclaration()) this.raise(pos, template);
        else if (scope.canBeArrowParameterDeclaration()) scope.recordDeclarationError(pos, template);
        else return;
    }
    recordAsyncArrowParametersError(pos, template) {
        const { stack  } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while(scope.canBeArrowParameterDeclaration()){
            if (scope.type === kMaybeAsyncArrowParameterDeclaration) scope.recordDeclarationError(pos, template);
            scope = stack[--i];
        }
    }
    validateAsPattern() {
        const { stack  } = this;
        const currentScope = stack[stack.length - 1];
        if (!currentScope.canBeArrowParameterDeclaration()) return;
        currentScope.iterateErrors((template, pos)=>{
            this.raise(pos, template);
            let i = stack.length - 2;
            let scope = stack[i];
            while(scope.canBeArrowParameterDeclaration()){
                scope.clearDeclarationError(pos);
                scope = stack[--i];
            }
        });
    }
}
function newParameterDeclarationScope() {
    return new ExpressionScope(kParameterDeclaration);
}
function newArrowHeadScope() {
    return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
}
function newAsyncArrowScope() {
    return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);
}
function newExpressionScope() {
    return new ExpressionScope();
}
class UtilParser extends Tokenizer {
    addExtra(node, key, val) {
        if (!node) return;
        const extra = node.extra = node.extra || {
        };
        extra[key] = val;
    }
    isRelational(op) {
        return this.match(types$1.relational) && this.state.value === op;
    }
    expectRelational(op) {
        if (this.isRelational(op)) this.next();
        else this.unexpected(null, types$1.relational);
    }
    isContextual(name) {
        return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;
    }
    isUnparsedContextual(nameStart, name) {
        const nameEnd = nameStart + name.length;
        if (this.input.slice(nameStart, nameEnd) === name) {
            const nextCh = this.input.charCodeAt(nameEnd);
            return !(isIdentifierChar(nextCh) || (nextCh & 64512) === 55296);
        }
        return false;
    }
    isLookaheadContextual(name) {
        const next = this.nextTokenStart();
        return this.isUnparsedContextual(next, name);
    }
    eatContextual(name) {
        return this.isContextual(name) && this.eat(types$1.name);
    }
    expectContextual(name, template) {
        if (!this.eatContextual(name)) this.unexpected(null, template);
    }
    canInsertSemicolon() {
        return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();
    }
    hasPrecedingLineBreak() {
        return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
    }
    hasFollowingLineBreak() {
        return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));
    }
    isLineTerminator() {
        return this.eat(types$1.semi) || this.canInsertSemicolon();
    }
    semicolon(allowAsi = true) {
        if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;
        this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);
    }
    expect(type, pos) {
        this.eat(type) || this.unexpected(pos, type);
    }
    assertNoSpace(message = "Unexpected space.") {
        if (this.state.start > this.state.lastTokEnd) this.raise(this.state.lastTokEnd, {
            code: ErrorCodes.SyntaxError,
            reasonCode: "UnexpectedSpace",
            template: message
        });
    }
    unexpected(pos, messageOrType = {
        code: ErrorCodes.SyntaxError,
        reasonCode: "UnexpectedToken",
        template: "Unexpected token"
    }) {
        if (messageOrType instanceof TokenType) messageOrType = {
            code: ErrorCodes.SyntaxError,
            reasonCode: "UnexpectedToken",
            template: `Unexpected token, expected "${messageOrType.label}"`
        };
        throw this.raise(pos != null ? pos : this.state.start, messageOrType);
    }
    expectPlugin(name, pos) {
        if (!this.hasPlugin(name)) throw this.raiseWithData(pos != null ? pos : this.state.start, {
            missingPlugin: [
                name
            ]
        }, `This experimental syntax requires enabling the parser plugin: '${name}'`);
        return true;
    }
    expectOnePlugin(names, pos) {
        if (!names.some((n)=>this.hasPlugin(n)
        )) throw this.raiseWithData(pos != null ? pos : this.state.start, {
            missingPlugin: names
        }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(", ")}'`);
    }
    tryParse(fn, oldState = this.state.clone()) {
        const abortSignal = {
            node: null
        };
        try {
            const node = fn((node1 = null)=>{
                abortSignal.node = node1;
                throw abortSignal;
            });
            if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                this.state = oldState;
                this.state.tokensLength = failState.tokensLength;
                return {
                    node,
                    error: failState.errors[oldState.errors.length],
                    thrown: false,
                    aborted: false,
                    failState
                };
            }
            return {
                node,
                error: null,
                thrown: false,
                aborted: false,
                failState: null
            };
        } catch (error) {
            const failState = this.state;
            this.state = oldState;
            if (error instanceof SyntaxError) return {
                node: null,
                error,
                thrown: true,
                aborted: false,
                failState
            };
            if (error === abortSignal) return {
                node: abortSignal.node,
                error: null,
                thrown: false,
                aborted: true,
                failState
            };
            throw error;
        }
    }
    checkExpressionErrors(refExpressionErrors, andThrow) {
        if (!refExpressionErrors) return false;
        const { shorthandAssign , doubleProto  } = refExpressionErrors;
        if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
        if (shorthandAssign >= 0) this.unexpected(shorthandAssign);
        if (doubleProto >= 0) this.raise(doubleProto, ErrorMessages.DuplicateProto);
    }
    isLiteralPropertyName() {
        return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);
    }
    isPrivateName(node) {
        return node.type === "PrivateName";
    }
    getPrivateNameSV(node) {
        return node.id.name;
    }
    hasPropertyAsPrivateName(node) {
        return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
    }
    isOptionalChain(node) {
        return node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression";
    }
    isObjectProperty(node) {
        return node.type === "ObjectProperty";
    }
    isObjectMethod(node) {
        return node.type === "ObjectMethod";
    }
    initializeScopes(inModule = this.options.sourceType === "module") {
        const oldLabels = this.state.labels;
        this.state.labels = [];
        const oldExportedIdentifiers = this.state.exportedIdentifiers;
        this.state.exportedIdentifiers = [];
        const oldInModule = this.inModule;
        this.inModule = inModule;
        const oldScope = this.scope;
        const ScopeHandler1 = this.getScopeHandler();
        this.scope = new ScopeHandler1(this.raise.bind(this), this.inModule);
        const oldProdParam = this.prodParam;
        this.prodParam = new ProductionParameterHandler();
        const oldClassScope = this.classScope;
        this.classScope = new ClassScopeHandler(this.raise.bind(this));
        const oldExpressionScope = this.expressionScope;
        this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));
        return ()=>{
            this.state.labels = oldLabels;
            this.state.exportedIdentifiers = oldExportedIdentifiers;
            this.inModule = oldInModule;
            this.scope = oldScope;
            this.prodParam = oldProdParam;
            this.classScope = oldClassScope;
            this.expressionScope = oldExpressionScope;
        };
    }
    enterInitialScopes() {
        let paramFlags = PARAM;
        if (this.hasPlugin("topLevelAwait") && this.inModule) paramFlags |= PARAM_AWAIT;
        this.scope.enter(SCOPE_PROGRAM);
        this.prodParam.enter(paramFlags);
    }
}
class ExpressionErrors {
    constructor(){
        this.shorthandAssign = -1;
        this.doubleProto = -1;
    }
}
class Node1 {
    constructor(parser, pos1, loc1){
        this.type = void 0;
        this.start = void 0;
        this.end = void 0;
        this.loc = void 0;
        this.range = void 0;
        this.leadingComments = void 0;
        this.trailingComments = void 0;
        this.innerComments = void 0;
        this.extra = void 0;
        this.type = "";
        this.start = pos1;
        this.end = 0;
        this.loc = new SourceLocation(loc1);
        if (parser != null && parser.options.ranges) this.range = [
            pos1,
            0
        ];
        if (parser != null && parser.filename) this.loc.filename = parser.filename;
    }
    __clone() {
        const newNode = new Node1();
        const keys = Object.keys(this);
        for(let i = 0, length = keys.length; i < length; i++){
            const key = keys[i];
            if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") newNode[key] = this[key];
        }
        return newNode;
    }
}
class NodeUtils extends UtilParser {
    startNode() {
        return new Node1(this, this.state.start, this.state.startLoc);
    }
    startNodeAt(pos, loc) {
        return new Node1(this, pos, loc);
    }
    startNodeAtNode(type) {
        return this.startNodeAt(type.start, type.loc.start);
    }
    finishNode(node, type) {
        return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
    }
    finishNodeAt(node, type, pos, loc) {
        node.type = type;
        node.end = pos;
        node.loc.end = loc;
        if (this.options.ranges) node.range[1] = pos;
        this.processComment(node);
        return node;
    }
    resetStartLocation(node, start, startLoc) {
        node.start = start;
        node.loc.start = startLoc;
        if (this.options.ranges) node.range[0] = start;
    }
    resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {
        node.end = end;
        node.loc.end = endLoc;
        if (this.options.ranges) node.range[1] = end;
    }
    resetStartLocationFromNode(node, locationNode) {
        this.resetStartLocation(node, locationNode.start, locationNode.loc.start);
    }
}
const unwrapParenthesizedExpression = (node)=>{
    return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
};
class LValParser extends NodeUtils {
    toAssignable(node, isLHS = false) {
        var _node$extra, _node$extra3;
        let parenthesized = undefined;
        if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
            parenthesized = unwrapParenthesizedExpression(node);
            if (isLHS) {
                if (parenthesized.type === "Identifier") this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);
                else if (parenthesized.type !== "MemberExpression") this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);
            } else this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);
        }
        switch(node.type){
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
                break;
            case "ObjectExpression":
                node.type = "ObjectPattern";
                for(let i = 0, length = node.properties.length, last1 = length - 1; i < length; i++){
                    var _node$extra2;
                    const prop = node.properties[i];
                    const isLast = i === last1;
                    this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
                    if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) this.raiseRestNotLast(node.extra.trailingComma);
                }
                break;
            case "ObjectProperty":
                this.toAssignable(node.value, isLHS);
                break;
            case "SpreadElement":
                {
                    this.checkToRestConversion(node);
                    node.type = "RestElement";
                    const arg = node.argument;
                    this.toAssignable(arg, isLHS);
                    break;
                }
            case "ArrayExpression":
                node.type = "ArrayPattern";
                this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);
                break;
            case "AssignmentExpression":
                if (node.operator !== "=") this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);
                node.type = "AssignmentPattern";
                delete node.operator;
                this.toAssignable(node.left, isLHS);
                break;
            case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
                break;
        }
        return node;
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
        if (prop.type === "ObjectMethod") {
            const error = prop.kind === "get" || prop.kind === "set" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;
            this.raise(prop.key.start, error);
        } else if (prop.type === "SpreadElement" && !isLast) this.raiseRestNotLast(prop.start);
        else this.toAssignable(prop, isLHS);
    }
    toAssignableList(exprList, trailingCommaPos, isLHS) {
        let end2 = exprList.length;
        if (end2) {
            const last1 = exprList[end2 - 1];
            if ((last1 == null ? void 0 : last1.type) === "RestElement") --end2;
            else if ((last1 == null ? void 0 : last1.type) === "SpreadElement") {
                last1.type = "RestElement";
                let arg = last1.argument;
                this.toAssignable(arg, isLHS);
                arg = unwrapParenthesizedExpression(arg);
                if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern" && arg.type !== "ObjectPattern") this.unexpected(arg.start);
                if (trailingCommaPos) this.raiseTrailingCommaAfterRest(trailingCommaPos);
                --end2;
            }
        }
        for(let i = 0; i < end2; i++){
            const elt = exprList[i];
            if (elt) {
                this.toAssignable(elt, isLHS);
                if (elt.type === "RestElement") this.raiseRestNotLast(elt.start);
            }
        }
        return exprList;
    }
    toReferencedList(exprList, isParenthesizedExpr) {
        return exprList;
    }
    toReferencedListDeep(exprList, isParenthesizedExpr) {
        this.toReferencedList(exprList, isParenthesizedExpr);
        for (const expr of exprList)if ((expr == null ? void 0 : expr.type) === "ArrayExpression") this.toReferencedListDeep(expr.elements);
    }
    parseSpread(refExpressionErrors, refNeedsArrowPos) {
        const node = this.startNode();
        this.next();
        node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);
        return this.finishNode(node, "SpreadElement");
    }
    parseRestBinding() {
        const node = this.startNode();
        this.next();
        node.argument = this.parseBindingAtom();
        return this.finishNode(node, "RestElement");
    }
    parseBindingAtom() {
        switch(this.state.type){
            case types$1.bracketL:
                {
                    const node = this.startNode();
                    this.next();
                    node.elements = this.parseBindingList(types$1.bracketR, 93, true);
                    return this.finishNode(node, "ArrayPattern");
                }
            case types$1.braceL:
                return this.parseObjectLike(types$1.braceR, true);
        }
        return this.parseIdentifier();
    }
    parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
        const elts = [];
        let first = true;
        while(!this.eat(close)){
            if (first) first = false;
            else this.expect(types$1.comma);
            if (allowEmpty && this.match(types$1.comma)) elts.push(null);
            else if (this.eat(close)) break;
            else if (this.match(types$1.ellipsis)) {
                elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));
                this.checkCommaAfterRest(closeCharCode);
                this.expect(close);
                break;
            } else {
                const decorators = [];
                if (this.match(types$1.at) && this.hasPlugin("decorators")) this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);
                while(this.match(types$1.at))decorators.push(this.parseDecorator());
                elts.push(this.parseAssignableListItem(allowModifiers, decorators));
            }
        }
        return elts;
    }
    parseAssignableListItem(allowModifiers, decorators) {
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
        if (decorators.length) left.decorators = decorators;
        return elt;
    }
    parseAssignableListItemTypes(param) {
        return param;
    }
    parseMaybeDefault(startPos, startLoc, left) {
        var _startLoc, _startPos, _left;
        startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;
        startPos = (_startPos = startPos) != null ? _startPos : this.state.start;
        left = (_left = left) != null ? _left : this.parseBindingAtom();
        if (!this.eat(types$1.eq)) return left;
        const node = this.startNodeAt(startPos, startLoc);
        node.left = left;
        node.right = this.parseMaybeAssignAllowIn();
        return this.finishNode(node, "AssignmentPattern");
    }
    checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {
        switch(expr.type){
            case "Identifier":
                {
                    const { name  } = expr;
                    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);
                    if (checkClashes) {
                        if (checkClashes.has(name)) this.raise(expr.start, ErrorMessages.ParamDupe);
                        else checkClashes.add(name);
                    }
                    if (disallowLetBinding && name === "let") this.raise(expr.start, ErrorMessages.LetInLexicalBinding);
                    if (!(bindingType & BIND_NONE)) this.scope.declareName(name, bindingType, expr.start);
                    break;
                }
            case "MemberExpression":
                if (bindingType !== BIND_NONE) this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);
                break;
            case "ObjectPattern":
                for (let prop of expr.properties){
                    if (this.isObjectProperty(prop)) prop = prop.value;
                    else if (this.isObjectMethod(prop)) continue;
                    this.checkLVal(prop, "object destructuring pattern", bindingType, checkClashes, disallowLetBinding);
                }
                break;
            case "ArrayPattern":
                for (const elem of expr.elements)if (elem) this.checkLVal(elem, "array destructuring pattern", bindingType, checkClashes, disallowLetBinding);
                break;
            case "AssignmentPattern":
                this.checkLVal(expr.left, "assignment pattern", bindingType, checkClashes);
                break;
            case "RestElement":
                this.checkLVal(expr.argument, "rest element", bindingType, checkClashes);
                break;
            case "ParenthesizedExpression":
                this.checkLVal(expr.expression, "parenthesized expression", bindingType, checkClashes);
                break;
            default:
                this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);
        }
    }
    checkToRestConversion(node) {
        if (node.argument.type !== "Identifier" && node.argument.type !== "MemberExpression") this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);
    }
    checkCommaAfterRest(close) {
        if (this.match(types$1.comma)) {
            if (this.lookaheadCharCode() === close) this.raiseTrailingCommaAfterRest(this.state.start);
            else this.raiseRestNotLast(this.state.start);
        }
    }
    raiseRestNotLast(pos) {
        throw this.raise(pos, ErrorMessages.ElementAfterRest);
    }
    raiseTrailingCommaAfterRest(pos) {
        this.raise(pos, ErrorMessages.RestTrailingComma);
    }
}
class ExpressionParser extends LValParser {
    checkProto(prop, isRecord, protoRef, refExpressionErrors) {
        if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) return;
        const key = prop.key;
        const name = key.type === "Identifier" ? key.name : key.value;
        if (name === "__proto__") {
            if (isRecord) {
                this.raise(key.start, ErrorMessages.RecordNoProto);
                return;
            }
            if (protoRef.used) {
                if (refExpressionErrors) {
                    if (refExpressionErrors.doubleProto === -1) refExpressionErrors.doubleProto = key.start;
                } else this.raise(key.start, ErrorMessages.DuplicateProto);
            }
            protoRef.used = true;
        }
    }
    shouldExitDescending(expr, potentialArrowAt) {
        return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
    }
    getExpression() {
        let paramFlags = PARAM;
        if (this.hasPlugin("topLevelAwait") && this.inModule) paramFlags |= PARAM_AWAIT;
        this.scope.enter(SCOPE_PROGRAM);
        this.prodParam.enter(paramFlags);
        this.nextToken();
        const expr = this.parseExpression();
        if (!this.match(types$1.eof)) this.unexpected();
        expr.comments = this.state.comments;
        expr.errors = this.state.errors;
        if (this.options.tokens) expr.tokens = this.tokens;
        return expr;
    }
    parseExpression(disallowIn, refExpressionErrors) {
        if (disallowIn) return this.disallowInAnd(()=>this.parseExpressionBase(refExpressionErrors)
        );
        return this.allowInAnd(()=>this.parseExpressionBase(refExpressionErrors)
        );
    }
    parseExpressionBase(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const expr = this.parseMaybeAssign(refExpressionErrors);
        if (this.match(types$1.comma)) {
            const node = this.startNodeAt(startPos, startLoc);
            node.expressions = [
                expr
            ];
            while(this.eat(types$1.comma))node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
            this.toReferencedList(node.expressions);
            return this.finishNode(node, "SequenceExpression");
        }
        return expr;
    }
    parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {
        return this.disallowInAnd(()=>this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos)
        );
    }
    parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {
        return this.allowInAnd(()=>this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos)
        );
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        if (this.isContextual("yield")) {
            if (this.prodParam.hasYield) {
                this.state.exprAllowed = true;
                let left = this.parseYield();
                if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
                return left;
            }
        }
        let ownExpressionErrors;
        if (refExpressionErrors) ownExpressionErrors = false;
        else {
            refExpressionErrors = new ExpressionErrors();
            ownExpressionErrors = true;
        }
        if (this.match(types$1.parenL) || this.match(types$1.name)) this.state.potentialArrowAt = this.state.start;
        let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);
        if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
        if (this.state.type.isAssign) {
            const node = this.startNodeAt(startPos, startLoc);
            const operator = this.state.value;
            node.operator = operator;
            if (this.match(types$1.eq)) {
                node.left = this.toAssignable(left, true);
                refExpressionErrors.doubleProto = -1;
            } else node.left = left;
            if (refExpressionErrors.shorthandAssign >= node.left.start) refExpressionErrors.shorthandAssign = -1;
            this.checkLVal(left, "assignment expression");
            this.next();
            node.right = this.parseMaybeAssign();
            return this.finishNode(node, "AssignmentExpression");
        } else if (ownExpressionErrors) this.checkExpressionErrors(refExpressionErrors, true);
        return left;
    }
    parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprOps(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) return expr;
        return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);
    }
    parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {
        if (this.eat(types$1.question)) {
            const node = this.startNodeAt(startPos, startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssignAllowIn();
            this.expect(types$1.colon);
            node.alternate = this.parseMaybeAssign();
            return this.finishNode(node, "ConditionalExpression");
        }
        return expr;
    }
    parseExprOps(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseMaybeUnary(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) return expr;
        return this.parseExprOp(expr, startPos, startLoc, -1);
    }
    parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
        let prec = this.state.type.binop;
        if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {
            if (prec > minPrec) {
                const op = this.state.type;
                if (op === types$1.pipeline) {
                    this.expectPlugin("pipelineOperator");
                    if (this.state.inFSharpPipelineDirectBody) return left;
                    this.state.inPipeline = true;
                    this.checkPipelineAtInfixOperator(left, leftStartPos);
                }
                const node = this.startNodeAt(leftStartPos, leftStartLoc);
                node.left = left;
                node.operator = this.state.value;
                const logical = op === types$1.logicalOR || op === types$1.logicalAND;
                const coalesce = op === types$1.nullishCoalescing;
                if (coalesce) prec = types$1.logicalAND.binop;
                this.next();
                if (op === types$1.pipeline && this.getPluginOption("pipelineOperator", "proposal") === "minimal") {
                    if (this.match(types$1.name) && this.state.value === "await" && this.prodParam.hasAwait) throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);
                }
                node.right = this.parseExprOpRightExpr(op, prec);
                this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
                const nextOp = this.state.type;
                if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);
                return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
            }
        }
        return left;
    }
    parseExprOpRightExpr(op, prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        switch(op){
            case types$1.pipeline:
                switch(this.getPluginOption("pipelineOperator", "proposal")){
                    case "smart":
                        return this.withTopicPermittingContext(()=>{
                            return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
                        });
                    case "fsharp":
                        return this.withSoloAwaitPermittingContext(()=>{
                            return this.parseFSharpPipelineBody(prec);
                        });
                }
            default:
                return this.parseExprOpBaseRightExpr(op, prec);
        }
    }
    parseExprOpBaseRightExpr(op, prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);
    }
    checkExponentialAfterUnary(node) {
        if (this.match(types$1.exponent)) this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const isAwait = this.isContextual("await");
        if (isAwait && this.isAwaitAllowed()) {
            this.next();
            const expr = this.parseAwait(startPos, startLoc);
            if (!sawUnary) this.checkExponentialAfterUnary(expr);
            return expr;
        }
        if (this.isContextual("module") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) return this.parseModuleExpression();
        const update = this.match(types$1.incDec);
        const node = this.startNode();
        if (this.state.type.prefix) {
            node.operator = this.state.value;
            node.prefix = true;
            if (this.match(types$1._throw)) this.expectPlugin("throwExpressions");
            const isDelete = this.match(types$1._delete);
            this.next();
            node.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(refExpressionErrors, true);
            if (this.state.strict && isDelete) {
                const arg = node.argument;
                if (arg.type === "Identifier") this.raise(node.start, ErrorMessages.StrictDelete);
                else if (this.hasPropertyAsPrivateName(arg)) this.raise(node.start, ErrorMessages.DeletePrivateField);
            }
            if (!update) {
                if (!sawUnary) this.checkExponentialAfterUnary(node);
                return this.finishNode(node, "UnaryExpression");
            }
        }
        const expr = this.parseUpdate(node, update, refExpressionErrors);
        if (isAwait) {
            const startsExpr1 = this.hasPlugin("v8intrinsic") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);
            if (startsExpr1 && !this.isAmbiguousAwait()) {
                this.raiseOverwrite(startPos, this.hasPlugin("topLevelAwait") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);
                return this.parseAwait(startPos, startLoc);
            }
        }
        return expr;
    }
    parseUpdate(node, update, refExpressionErrors) {
        if (update) {
            this.checkLVal(node.argument, "prefix operation");
            return this.finishNode(node, "UpdateExpression");
        }
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let expr = this.parseExprSubscripts(refExpressionErrors);
        if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
        while(this.state.type.postfix && !this.canInsertSemicolon()){
            const node = this.startNodeAt(startPos, startLoc);
            node.operator = this.state.value;
            node.prefix = false;
            node.argument = expr;
            this.checkLVal(expr, "postfix operation");
            this.next();
            expr = this.finishNode(node, "UpdateExpression");
        }
        return expr;
    }
    parseExprSubscripts(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprAtom(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) return expr;
        return this.parseSubscripts(expr, startPos, startLoc);
    }
    parseSubscripts(base, startPos, startLoc, noCalls) {
        const state2 = {
            optionalChainMember: false,
            maybeAsyncArrow: this.atPossibleAsyncArrow(base),
            stop: false
        };
        do {
            base = this.parseSubscript(base, startPos, startLoc, noCalls, state2);
            state2.maybeAsyncArrow = false;
        }while (!state2.stop)
        return base;
    }
    parseSubscript(base, startPos, startLoc, noCalls, state) {
        if (!noCalls && this.eat(types$1.doubleColon)) return this.parseBind(base, startPos, startLoc, noCalls, state);
        else if (this.match(types$1.backQuote)) return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
        let optional = false;
        if (this.match(types$1.questionDot)) {
            if (noCalls && this.lookaheadCharCode() === 40) {
                state.stop = true;
                return base;
            }
            state.optionalChainMember = optional = true;
            this.next();
        }
        if (!noCalls && this.match(types$1.parenL)) return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);
        else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) return this.parseMember(base, startPos, startLoc, state, optional);
        else {
            state.stop = true;
            return base;
        }
    }
    parseMember(base, startPos, startLoc, state, optional) {
        const node = this.startNodeAt(startPos, startLoc);
        const computed = this.eat(types$1.bracketL);
        node.object = base;
        node.computed = computed;
        const privateName = !computed && this.match(types$1.privateName) && this.state.value;
        const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);
        if (privateName !== false) {
            if (node.object.type === "Super") this.raise(startPos, ErrorMessages.SuperPrivateField);
            this.classScope.usePrivateName(privateName, property.start);
        }
        node.property = property;
        if (computed) this.expect(types$1.bracketR);
        if (state.optionalChainMember) {
            node.optional = optional;
            return this.finishNode(node, "OptionalMemberExpression");
        } else return this.finishNode(node, "MemberExpression");
    }
    parseBind(base, startPos, startLoc, noCalls, state) {
        const node = this.startNodeAt(startPos, startLoc);
        node.object = base;
        node.callee = this.parseNoCallExpr();
        state.stop = true;
        return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
    }
    parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = true;
        this.next();
        let node = this.startNodeAt(startPos, startLoc);
        node.callee = base;
        if (state.maybeAsyncArrow) this.expressionScope.enter(newAsyncArrowScope());
        if (state.optionalChainMember) node.optional = optional;
        if (optional) node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);
        else node.arguments = this.parseCallExpressionArguments(types$1.parenR, state.maybeAsyncArrow, base.type === "Import", base.type !== "Super", node);
        this.finishCallExpression(node, state.optionalChainMember);
        if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
            state.stop = true;
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
        } else {
            if (state.maybeAsyncArrow) this.expressionScope.exit();
            this.toReferencedArguments(node);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node;
    }
    toReferencedArguments(node, isParenthesizedExpr) {
        this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
    }
    parseTaggedTemplateExpression(base, startPos, startLoc, state) {
        const node = this.startNodeAt(startPos, startLoc);
        node.tag = base;
        node.quasi = this.parseTemplate(true);
        if (state.optionalChainMember) this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);
        return this.finishNode(node, "TaggedTemplateExpression");
    }
    atPossibleAsyncArrow(base) {
        return base.type === "Identifier" && base.name === "async" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
    }
    finishCallExpression(node, optional) {
        if (node.callee.type === "Import") {
            if (node.arguments.length === 2) {
                if (!this.hasPlugin("moduleAttributes")) this.expectPlugin("importAssertions");
            }
            if (node.arguments.length === 0 || node.arguments.length > 2) this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? "one or two arguments" : "one argument");
            else {
                for (const arg of node.arguments)if (arg.type === "SpreadElement") this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);
            }
        }
        return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
    }
    parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {
        const elts = [];
        let first = true;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        while(!this.eat(close)){
            if (first) first = false;
            else {
                this.expect(types$1.comma);
                if (this.match(close)) {
                    if (dynamicImport && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);
                    if (nodeForExtra) this.addExtra(nodeForExtra, "trailingComma", this.state.lastTokStart);
                    this.next();
                    break;
                }
            }
            elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {
                start: 0
            } : undefined, allowPlaceholder));
        }
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return elts;
    }
    shouldParseAsyncArrow() {
        return this.match(types$1.arrow) && !this.canInsertSemicolon();
    }
    parseAsyncArrowFromCallExpression(node, call) {
        var _call$extra;
        this.expect(types$1.arrow);
        this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);
        return node;
    }
    parseNoCallExpr() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
    }
    parseExprAtom(refExpressionErrors) {
        if (this.state.type === types$1.slash) this.readRegexp();
        const canBeArrow = this.state.potentialArrowAt === this.state.start;
        let node;
        switch(this.state.type){
            case types$1._super:
                return this.parseSuper();
            case types$1._import:
                node = this.startNode();
                this.next();
                if (this.match(types$1.dot)) return this.parseImportMetaProperty(node);
                if (!this.match(types$1.parenL)) this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);
                return this.finishNode(node, "Import");
            case types$1._this:
                node = this.startNode();
                this.next();
                return this.finishNode(node, "ThisExpression");
            case types$1.name:
                {
                    const containsEsc = this.state.containsEsc;
                    const id = this.parseIdentifier();
                    if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
                        if (this.match(types$1._function)) {
                            const last1 = this.state.context.length - 1;
                            if (this.state.context[last1] !== types.functionStatement) throw new Error("Internal error");
                            this.state.context[last1] = types.functionExpression;
                            this.next();
                            return this.parseFunction(this.startNodeAtNode(id), undefined, true);
                        } else if (this.match(types$1.name)) {
                            if (this.lookaheadCharCode() === 61) return this.parseAsyncArrowUnaryFunction(id);
                            else return id;
                        } else if (this.match(types$1._do)) return this.parseDo(true);
                    }
                    if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {
                        this.next();
                        return this.parseArrowExpression(this.startNodeAtNode(id), [
                            id
                        ], false);
                    }
                    return id;
                }
            case types$1._do:
                return this.parseDo(false);
            case types$1.regexp:
                return this.parseRegExpLiteral(this.state.value);
            case types$1.num:
                return this.parseNumericLiteral(this.state.value);
            case types$1.bigint:
                return this.parseBigIntLiteral(this.state.value);
            case types$1.decimal:
                return this.parseDecimalLiteral(this.state.value);
            case types$1.string:
                return this.parseStringLiteral(this.state.value);
            case types$1._null:
                return this.parseNullLiteral();
            case types$1._true:
                return this.parseBooleanLiteral(true);
            case types$1._false:
                return this.parseBooleanLiteral(false);
            case types$1.parenL:
                return this.parseParenAndDistinguishExpression(canBeArrow);
            case types$1.bracketBarL:
            case types$1.bracketHashL:
                return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);
            case types$1.bracketL:
                return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);
            case types$1.braceBarL:
            case types$1.braceHashL:
                return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);
            case types$1.braceL:
                return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);
            case types$1._function:
                return this.parseFunctionOrFunctionSent();
            case types$1.at:
                this.parseDecorators();
            case types$1._class:
                node = this.startNode();
                this.takeDecorators(node);
                return this.parseClass(node, false);
            case types$1._new:
                return this.parseNewOrNewTarget();
            case types$1.backQuote:
                return this.parseTemplate(false);
            case types$1.doubleColon:
                {
                    node = this.startNode();
                    this.next();
                    node.object = null;
                    const callee = node.callee = this.parseNoCallExpr();
                    if (callee.type === "MemberExpression") return this.finishNode(node, "BindExpression");
                    else throw this.raise(callee.start, ErrorMessages.UnsupportedBind);
                }
            case types$1.privateName:
                {
                    const start2 = this.state.start;
                    const value = this.state.value;
                    node = this.parsePrivateName();
                    if (this.match(types$1._in)) {
                        this.expectPlugin("privateIn");
                        this.classScope.usePrivateName(value, node.start);
                    } else if (this.hasPlugin("privateIn")) this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, value);
                    else throw this.unexpected(start2);
                    return node;
                }
            case types$1.hash:
                if (this.state.inPipeline) {
                    node = this.startNode();
                    if (this.getPluginOption("pipelineOperator", "proposal") !== "smart") this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);
                    this.next();
                    if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);
                    this.registerTopicReference();
                    return this.finishNode(node, "PipelinePrimaryTopicReference");
                }
            case types$1.relational:
                if (this.state.value === "<") {
                    const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
                    if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) this.expectOnePlugin([
                        "jsx",
                        "flow",
                        "typescript"
                    ]);
                }
            default:
                throw this.unexpected();
        }
    }
    parseAsyncArrowUnaryFunction(id) {
        const node = this.startNodeAtNode(id);
        this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
        const params = [
            this.parseIdentifier()
        ];
        this.prodParam.exit();
        if (this.hasPrecedingLineBreak()) this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);
        this.expect(types$1.arrow);
        this.parseArrowExpression(node, params, true);
        return node;
    }
    parseDo(isAsync) {
        this.expectPlugin("doExpressions");
        if (isAsync) this.expectPlugin("asyncDoExpressions");
        const node = this.startNode();
        node.async = isAsync;
        this.next();
        const oldLabels = this.state.labels;
        this.state.labels = [];
        if (isAsync) {
            this.prodParam.enter(PARAM_AWAIT);
            node.body = this.parseBlock();
            this.prodParam.exit();
        } else node.body = this.parseBlock();
        this.state.labels = oldLabels;
        return this.finishNode(node, "DoExpression");
    }
    parseSuper() {
        const node = this.startNode();
        this.next();
        if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) this.raise(node.start, ErrorMessages.SuperNotAllowed);
        else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) this.raise(node.start, ErrorMessages.UnexpectedSuper);
        if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) this.raise(node.start, ErrorMessages.UnsupportedSuper);
        return this.finishNode(node, "Super");
    }
    parseMaybePrivateName(isPrivateNameAllowed) {
        const isPrivate = this.match(types$1.privateName);
        if (isPrivate) {
            if (!isPrivateNameAllowed) this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);
            return this.parsePrivateName();
        } else return this.parseIdentifier(true);
    }
    parsePrivateName() {
        const node = this.startNode();
        const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));
        const name = this.state.value;
        this.next();
        node.id = this.createIdentifier(id, name);
        return this.finishNode(node, "PrivateName");
    }
    parseFunctionOrFunctionSent() {
        const node = this.startNode();
        this.next();
        if (this.prodParam.hasYield && this.match(types$1.dot)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
            this.next();
            return this.parseMetaProperty(node, meta, "sent");
        }
        return this.parseFunction(node);
    }
    parseMetaProperty(node, meta, propertyName) {
        node.meta = meta;
        if (meta.name === "function" && propertyName === "sent") {
            if (this.isContextual(propertyName)) this.expectPlugin("functionSent");
            else if (!this.hasPlugin("functionSent")) this.unexpected();
        }
        const containsEsc = this.state.containsEsc;
        node.property = this.parseIdentifier(true);
        if (node.property.name !== propertyName || containsEsc) this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);
        return this.finishNode(node, "MetaProperty");
    }
    parseImportMetaProperty(node) {
        const id = this.createIdentifier(this.startNodeAtNode(node), "import");
        this.next();
        if (this.isContextual("meta")) {
            if (!this.inModule) this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);
            this.sawUnambiguousESM = true;
        }
        return this.parseMetaProperty(node, id, "meta");
    }
    parseLiteralAtNode(value, type, node) {
        this.addExtra(node, "rawValue", value);
        this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
        node.value = value;
        this.next();
        return this.finishNode(node, type);
    }
    parseLiteral(value, type) {
        const node = this.startNode();
        return this.parseLiteralAtNode(value, type, node);
    }
    parseStringLiteral(value) {
        return this.parseLiteral(value, "StringLiteral");
    }
    parseNumericLiteral(value) {
        return this.parseLiteral(value, "NumericLiteral");
    }
    parseBigIntLiteral(value) {
        return this.parseLiteral(value, "BigIntLiteral");
    }
    parseDecimalLiteral(value) {
        return this.parseLiteral(value, "DecimalLiteral");
    }
    parseRegExpLiteral(value) {
        const node = this.parseLiteral(value.value, "RegExpLiteral");
        node.pattern = value.pattern;
        node.flags = value.flags;
        return node;
    }
    parseBooleanLiteral(value) {
        const node = this.startNode();
        node.value = value;
        this.next();
        return this.finishNode(node, "BooleanLiteral");
    }
    parseNullLiteral() {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, "NullLiteral");
    }
    parseParenAndDistinguishExpression(canBeArrow) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let val;
        this.next();
        this.expressionScope.enter(newArrowHeadScope());
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.maybeInArrowParameters = true;
        this.state.inFSharpPipelineDirectBody = false;
        const innerStartPos = this.state.start;
        const innerStartLoc = this.state.startLoc;
        const exprList = [];
        const refExpressionErrors = new ExpressionErrors();
        const refNeedsArrowPos = {
            start: 0
        };
        let first = true;
        let spreadStart;
        let optionalCommaStart;
        while(!this.match(types$1.parenR)){
            if (first) first = false;
            else {
                this.expect(types$1.comma, refNeedsArrowPos.start || null);
                if (this.match(types$1.parenR)) {
                    optionalCommaStart = this.state.start;
                    break;
                }
            }
            if (this.match(types$1.ellipsis)) {
                const spreadNodeStartPos = this.state.start;
                const spreadNodeStartLoc = this.state.startLoc;
                spreadStart = this.state.start;
                exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));
                this.checkCommaAfterRest(41);
                break;
            } else exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));
        }
        const innerEndPos = this.state.lastTokEnd;
        const innerEndLoc = this.state.lastTokEndLoc;
        this.expect(types$1.parenR);
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let arrowNode = this.startNodeAt(startPos, startLoc);
        if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            this.parseArrowExpression(arrowNode, exprList, false);
            return arrowNode;
        }
        this.expressionScope.exit();
        if (!exprList.length) this.unexpected(this.state.lastTokStart);
        if (optionalCommaStart) this.unexpected(optionalCommaStart);
        if (spreadStart) this.unexpected(spreadStart);
        this.checkExpressionErrors(refExpressionErrors, true);
        if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);
        this.toReferencedListDeep(exprList, true);
        if (exprList.length > 1) {
            val = this.startNodeAt(innerStartPos, innerStartLoc);
            val.expressions = exprList;
            this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
        } else val = exprList[0];
        if (!this.options.createParenthesizedExpressions) {
            this.addExtra(val, "parenthesized", true);
            this.addExtra(val, "parenStart", startPos);
            return val;
        }
        const parenExpression = this.startNodeAt(startPos, startLoc);
        parenExpression.expression = val;
        this.finishNode(parenExpression, "ParenthesizedExpression");
        return parenExpression;
    }
    shouldParseArrow() {
        return !this.canInsertSemicolon();
    }
    parseArrow(node) {
        if (this.eat(types$1.arrow)) return node;
    }
    parseParenItem(node, startPos, startLoc) {
        return node;
    }
    parseNewOrNewTarget() {
        const node = this.startNode();
        this.next();
        if (this.match(types$1.dot)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
            this.next();
            const metaProp = this.parseMetaProperty(node, meta, "target");
            if (!this.scope.inNonArrowFunction && !this.scope.inClass) this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);
            return metaProp;
        }
        return this.parseNew(node);
    }
    parseNew(node) {
        node.callee = this.parseNoCallExpr();
        if (node.callee.type === "Import") this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);
        else if (this.isOptionalChain(node.callee)) this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);
        else if (this.eat(types$1.questionDot)) this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);
        this.parseNewArguments(node);
        return this.finishNode(node, "NewExpression");
    }
    parseNewArguments(node) {
        if (this.eat(types$1.parenL)) {
            const args3 = this.parseExprList(types$1.parenR);
            this.toReferencedList(args3);
            node.arguments = args3;
        } else node.arguments = [];
    }
    parseTemplateElement(isTagged) {
        const elem = this.startNode();
        if (this.state.value === null) {
            if (!isTagged) this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);
        }
        elem.value = {
            raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
            cooked: this.state.value
        };
        this.next();
        elem.tail = this.match(types$1.backQuote);
        return this.finishNode(elem, "TemplateElement");
    }
    parseTemplate(isTagged) {
        const node = this.startNode();
        this.next();
        node.expressions = [];
        let curElt = this.parseTemplateElement(isTagged);
        node.quasis = [
            curElt
        ];
        while(!curElt.tail){
            this.expect(types$1.dollarBraceL);
            node.expressions.push(this.parseTemplateSubstitution());
            this.expect(types$1.braceR);
            node.quasis.push(curElt = this.parseTemplateElement(isTagged));
        }
        this.next();
        return this.finishNode(node, "TemplateLiteral");
    }
    parseTemplateSubstitution() {
        return this.parseExpression();
    }
    parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
        if (isRecord) this.expectPlugin("recordAndTuple");
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const propHash = Object.create(null);
        let first = true;
        const node = this.startNode();
        node.properties = [];
        this.next();
        while(!this.match(close)){
            if (first) first = false;
            else {
                this.expect(types$1.comma);
                if (this.match(close)) {
                    this.addExtra(node, "trailingComma", this.state.lastTokStart);
                    break;
                }
            }
            const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);
            if (!isPattern) this.checkProto(prop, isRecord, propHash, refExpressionErrors);
            if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") this.raise(prop.start, ErrorMessages.InvalidRecordProperty);
            if (prop.shorthand) this.addExtra(prop, "shorthand", true);
            node.properties.push(prop);
        }
        this.state.exprAllowed = false;
        this.next();
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let type3 = "ObjectExpression";
        if (isPattern) type3 = "ObjectPattern";
        else if (isRecord) type3 = "RecordExpression";
        return this.finishNode(node, type3);
    }
    maybeAsyncOrAccessorProp(prop) {
        return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));
    }
    parsePropertyDefinition(isPattern, refExpressionErrors) {
        let decorators = [];
        if (this.match(types$1.at)) {
            if (this.hasPlugin("decorators")) this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);
            while(this.match(types$1.at))decorators.push(this.parseDecorator());
        }
        const prop = this.startNode();
        let isGenerator = false;
        let isAsync = false;
        let isAccessor = false;
        let startPos;
        let startLoc;
        if (this.match(types$1.ellipsis)) {
            if (decorators.length) this.unexpected();
            if (isPattern) {
                this.next();
                prop.argument = this.parseIdentifier();
                this.checkCommaAfterRest(125);
                return this.finishNode(prop, "RestElement");
            }
            return this.parseSpread();
        }
        if (decorators.length) {
            prop.decorators = decorators;
            decorators = [];
        }
        prop.method = false;
        if (isPattern || refExpressionErrors) {
            startPos = this.state.start;
            startLoc = this.state.startLoc;
        }
        if (!isPattern) isGenerator = this.eat(types$1.star);
        const containsEsc = this.state.containsEsc;
        const key = this.parsePropertyName(prop, false);
        if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
            const keyName = key.name;
            if (keyName === "async" && !this.hasPrecedingLineBreak()) {
                isAsync = true;
                isGenerator = this.eat(types$1.star);
                this.parsePropertyName(prop, false);
            }
            if (keyName === "get" || keyName === "set") {
                isAccessor = true;
                prop.kind = keyName;
                if (this.match(types$1.star)) {
                    isGenerator = true;
                    this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);
                    this.next();
                }
                this.parsePropertyName(prop, false);
            }
        }
        this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
        return prop;
    }
    getGetterSetterExpectedParamCount(method) {
        return method.kind === "get" ? 0 : 1;
    }
    getObjectOrClassMethodParams(method) {
        return method.params;
    }
    checkGetterSetterParams(method) {
        var _params;
        const paramCount = this.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        const start2 = method.start;
        if (params.length !== paramCount) {
            if (method.kind === "get") this.raise(start2, ErrorMessages.BadGetterArity);
            else this.raise(start2, ErrorMessages.BadSetterArity);
        }
        if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") this.raise(start2, ErrorMessages.BadSetterRestParameter);
    }
    parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        if (isAccessor) {
            this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
            this.checkGetterSetterParams(prop);
            return prop;
        }
        if (isAsync || isGenerator || this.match(types$1.parenL)) {
            if (isPattern) this.unexpected();
            prop.kind = "method";
            prop.method = true;
            return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
        }
    }
    parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
        prop.shorthand = false;
        if (this.eat(types$1.colon)) {
            prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
            return this.finishNode(prop, "ObjectProperty");
        }
        if (!prop.computed && prop.key.type === "Identifier") {
            this.checkReservedWord(prop.key.name, prop.key.start, true, false);
            if (isPattern) prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
            else if (this.match(types$1.eq) && refExpressionErrors) {
                if (refExpressionErrors.shorthandAssign === -1) refExpressionErrors.shorthandAssign = this.state.start;
                prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
            } else prop.value = prop.key.__clone();
            prop.shorthand = true;
            return this.finishNode(prop, "ObjectProperty");
        }
    }
    parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
        if (!node) this.unexpected();
        return node;
    }
    parsePropertyName(prop, isPrivateNameAllowed) {
        if (this.eat(types$1.bracketL)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssignAllowIn();
            this.expect(types$1.bracketR);
        } else {
            const oldInPropertyName = this.state.inPropertyName;
            this.state.inPropertyName = true;
            const type3 = this.state.type;
            prop.key = type3 === types$1.num || type3 === types$1.string || type3 === types$1.bigint || type3 === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);
            if (type3 !== types$1.privateName) prop.computed = false;
            this.state.inPropertyName = oldInPropertyName;
        }
        return prop.key;
    }
    initFunction(node, isAsync) {
        node.id = null;
        node.generator = false;
        node.async = !!isAsync;
    }
    parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        this.initFunction(node, isAsync);
        node.generator = !!isGenerator;
        const allowModifiers = isConstructor;
        this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
        this.prodParam.enter(functionFlags(isAsync, node.generator));
        this.parseFunctionParams(node, allowModifiers);
        this.parseFunctionBodyAndFinish(node, type, true);
        this.prodParam.exit();
        this.scope.exit();
        return node;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        if (isTuple) this.expectPlugin("recordAndTuple");
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const node = this.startNode();
        this.next();
        node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
    }
    parseArrowExpression(node, params, isAsync, trailingCommaPos) {
        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
        let flags2 = functionFlags(isAsync, false);
        if (!this.match(types$1.bracketL) && this.prodParam.hasIn) flags2 |= PARAM_IN;
        this.prodParam.enter(flags2);
        this.initFunction(node, isAsync);
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        if (params) {
            this.state.maybeInArrowParameters = true;
            this.setArrowFunctionParameters(node, params, trailingCommaPos);
        }
        this.state.maybeInArrowParameters = false;
        this.parseFunctionBody(node, true);
        this.prodParam.exit();
        this.scope.exit();
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return this.finishNode(node, "ArrowFunctionExpression");
    }
    setArrowFunctionParameters(node, params, trailingCommaPos) {
        node.params = this.toAssignableList(params, trailingCommaPos, false);
    }
    parseFunctionBodyAndFinish(node, type, isMethod = false) {
        this.parseFunctionBody(node, false, isMethod);
        this.finishNode(node, type);
    }
    parseFunctionBody(node, allowExpression, isMethod = false) {
        const isExpression = allowExpression && !this.match(types$1.braceL);
        this.expressionScope.enter(newExpressionScope());
        if (isExpression) {
            node.body = this.parseMaybeAssign();
            this.checkParams(node, false, allowExpression, false);
        } else {
            const oldStrict = this.state.strict;
            const oldLabels = this.state.labels;
            this.state.labels = [];
            this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);
            node.body = this.parseBlock(true, false, (hasStrictModeDirective)=>{
                const nonSimple = !this.isSimpleParamList(node.params);
                if (hasStrictModeDirective && nonSimple) {
                    const errorPos = (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.end : node.start;
                    this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);
                }
                const strictModeChanged = !oldStrict && this.state.strict;
                this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
                if (this.state.strict && node.id) this.checkLVal(node.id, "function name", BIND_OUTSIDE, undefined, undefined, strictModeChanged);
            });
            this.prodParam.exit();
            this.expressionScope.exit();
            this.state.labels = oldLabels;
        }
    }
    isSimpleParamList(params) {
        for(let i = 0, len = params.length; i < len; i++){
            if (params[i].type !== "Identifier") return false;
        }
        return true;
    }
    checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
        const checkClashes = new Set();
        for (const param of node.params)this.checkLVal(param, "function parameter list", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);
    }
    parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
        const elts = [];
        let first = true;
        while(!this.eat(close)){
            if (first) first = false;
            else {
                this.expect(types$1.comma);
                if (this.match(close)) {
                    if (nodeForExtra) this.addExtra(nodeForExtra, "trailingComma", this.state.lastTokStart);
                    this.next();
                    break;
                }
            }
            elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
        }
        return elts;
    }
    parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {
        let elt;
        if (this.match(types$1.comma)) {
            if (!allowEmpty) this.raise(this.state.pos, ErrorMessages.UnexpectedToken, ",");
            elt = null;
        } else if (this.match(types$1.ellipsis)) {
            const spreadNodeStartPos = this.state.start;
            const spreadNodeStartLoc = this.state.startLoc;
            elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);
        } else if (this.match(types$1.question)) {
            this.expectPlugin("partialApplication");
            if (!allowPlaceholder) this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);
            const node = this.startNode();
            this.next();
            elt = this.finishNode(node, "ArgumentPlaceholder");
        } else elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);
        return elt;
    }
    parseIdentifier(liberal) {
        const node = this.startNode();
        const name = this.parseIdentifierName(node.start, liberal);
        return this.createIdentifier(node, name);
    }
    createIdentifier(node, name) {
        node.name = name;
        node.loc.identifierName = name;
        return this.finishNode(node, "Identifier");
    }
    parseIdentifierName(pos, liberal) {
        let name;
        const { start: start2 , type: type3  } = this.state;
        if (type3 === types$1.name) name = this.state.value;
        else if (type3.keyword) {
            name = type3.keyword;
            const curContext = this.curContext();
            if ((type3 === types$1._class || type3 === types$1._function) && (curContext === types.functionStatement || curContext === types.functionExpression)) this.state.context.pop();
        } else throw this.unexpected();
        if (liberal) this.state.type = types$1.name;
        else this.checkReservedWord(name, start2, !!type3.keyword, false);
        this.next();
        return name;
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (this.prodParam.hasYield && word === "yield") {
            this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);
            return;
        }
        if (word === "await") {
            if (this.prodParam.hasAwait) {
                this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);
                return;
            } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {
                this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);
                return;
            } else this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);
        }
        if (this.scope.inClass && !this.scope.inNonArrowFunction && word === "arguments") {
            this.raise(startLoc, ErrorMessages.ArgumentsInClass);
            return;
        }
        if (checkKeywords && isKeyword(word)) {
            this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);
            return;
        }
        const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
        if (reservedTest(word, this.inModule)) this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);
    }
    isAwaitAllowed() {
        if (this.prodParam.hasAwait) return true;
        if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) return true;
        return false;
    }
    parseAwait(startPos, startLoc) {
        const node = this.startNodeAt(startPos, startLoc);
        this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);
        if (this.eat(types$1.star)) this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);
        if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
            if (this.isAmbiguousAwait()) this.ambiguousScriptDifferentAst = true;
            else this.sawUnambiguousESM = true;
        }
        if (!this.state.soloAwait) node.argument = this.parseMaybeUnary(null, true);
        return this.finishNode(node, "AwaitExpression");
    }
    isAmbiguousAwait() {
        return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin("v8intrinsic") && this.match(types$1.modulo);
    }
    parseYield() {
        const node = this.startNode();
        this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);
        this.next();
        if (this.match(types$1.semi) || !this.match(types$1.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {
            node.delegate = false;
            node.argument = null;
        } else {
            node.delegate = this.eat(types$1.star);
            node.argument = this.parseMaybeAssign();
        }
        return this.finishNode(node, "YieldExpression");
    }
    checkPipelineAtInfixOperator(left, leftStartPos) {
        if (this.getPluginOption("pipelineOperator", "proposal") === "smart") {
            if (left.type === "SequenceExpression") this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);
        }
    }
    parseSmartPipelineBody(childExpression, startPos, startLoc) {
        this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);
        return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);
    }
    checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {
        if (this.match(types$1.arrow)) throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);
        else if (childExpression.type === "SequenceExpression") this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);
    }
    parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {
        const bodyNode = this.startNodeAt(startPos, startLoc);
        const isSimpleReference = this.isSimpleReference(childExpression);
        if (isSimpleReference) bodyNode.callee = childExpression;
        else {
            if (!this.topicReferenceWasUsedInCurrentTopicContext()) this.raise(startPos, ErrorMessages.PipelineTopicUnused);
            bodyNode.expression = childExpression;
        }
        return this.finishNode(bodyNode, isSimpleReference ? "PipelineBareFunction" : "PipelineTopicExpression");
    }
    isSimpleReference(expression) {
        switch(expression.type){
            case "MemberExpression":
                return !expression.computed && this.isSimpleReference(expression.object);
            case "Identifier":
                return true;
            default:
                return false;
        }
    }
    withTopicPermittingContext(callback) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
            maxNumOfResolvableTopics: 1,
            maxTopicIndex: null
        };
        try {
            return callback();
        } finally{
            this.state.topicContext = outerContextTopicState;
        }
    }
    withTopicForbiddingContext(callback) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
        };
        try {
            return callback();
        } finally{
            this.state.topicContext = outerContextTopicState;
        }
    }
    withSoloAwaitPermittingContext(callback) {
        const outerContextSoloAwaitState = this.state.soloAwait;
        this.state.soloAwait = true;
        try {
            return callback();
        } finally{
            this.state.soloAwait = outerContextSoloAwaitState;
        }
    }
    allowInAnd(callback) {
        const flags2 = this.prodParam.currentFlags();
        const prodParamToSet = PARAM_IN & ~flags2;
        if (prodParamToSet) {
            this.prodParam.enter(flags2 | PARAM_IN);
            try {
                return callback();
            } finally{
                this.prodParam.exit();
            }
        }
        return callback();
    }
    disallowInAnd(callback) {
        const flags2 = this.prodParam.currentFlags();
        const prodParamToClear = PARAM_IN & flags2;
        if (prodParamToClear) {
            this.prodParam.enter(flags2 & ~PARAM_IN);
            try {
                return callback();
            } finally{
                this.prodParam.exit();
            }
        }
        return callback();
    }
    registerTopicReference() {
        this.state.topicContext.maxTopicIndex = 0;
    }
    primaryTopicReferenceIsAllowedInCurrentTopicContext() {
        return this.state.topicContext.maxNumOfResolvableTopics >= 1;
    }
    topicReferenceWasUsedInCurrentTopicContext() {
        return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
    }
    parseFSharpPipelineBody(prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        this.state.potentialArrowAt = this.state.start;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = true;
        const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return ret;
    }
    parseModuleExpression() {
        this.expectPlugin("moduleBlocks");
        const node = this.startNode();
        this.next();
        this.eat(types$1.braceL);
        const revertScopes = this.initializeScopes(true);
        this.enterInitialScopes();
        const program = this.startNode();
        try {
            node.body = this.parseProgram(program, types$1.braceR, "module");
        } finally{
            revertScopes();
        }
        this.eat(types$1.braceR);
        return this.finishNode(node, "ModuleExpression");
    }
}
const loopLabel = {
    kind: "loop"
}, switchLabel = {
    kind: "switch"
};
const FUNC_NO_FLAGS = 0, FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;
const loneSurrogate = /[\uD800-\uDFFF]/u;
const keywordRelationalOperator = /in(?:stanceof)?/y;
function babel7CompatTokens(tokens) {
    for(let i = 0; i < tokens.length; i++){
        const token2 = tokens[i];
        if (token2.type === types$1.privateName) {
            const { loc: loc2 , start: start2 , value , end: end2  } = token2;
            const hashEndPos = start2 + 1;
            const hashEndLoc = new Position(loc2.start.line, loc2.start.column + 1);
            tokens.splice(i, 1, new Token({
                type: types$1.hash,
                value: "#",
                start: start2,
                end: hashEndPos,
                startLoc: loc2.start,
                endLoc: hashEndLoc
            }), new Token({
                type: types$1.name,
                value: value,
                start: hashEndPos,
                end: end2,
                startLoc: hashEndLoc,
                endLoc: loc2.end
            }));
        }
    }
    return tokens;
}
class StatementParser extends ExpressionParser {
    parseTopLevel(file, program) {
        file.program = this.parseProgram(program);
        file.comments = this.state.comments;
        if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);
        return this.finishNode(file, "File");
    }
    parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {
        program.sourceType = sourceType;
        program.interpreter = this.parseInterpreterDirective();
        this.parseBlockBody(program, true, true, end);
        if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) for (const [name] of Array.from(this.scope.undefinedExports)){
            const pos2 = this.scope.undefinedExports.get(name);
            this.raise(pos2, ErrorMessages.ModuleExportUndefined, name);
        }
        return this.finishNode(program, "Program");
    }
    stmtToDirective(stmt) {
        const expr = stmt.expression;
        const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
        const directive = this.startNodeAt(stmt.start, stmt.loc.start);
        const raw = this.input.slice(expr.start, expr.end);
        const val = directiveLiteral.value = raw.slice(1, -1);
        this.addExtra(directiveLiteral, "raw", raw);
        this.addExtra(directiveLiteral, "rawValue", val);
        directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);
        return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
    }
    parseInterpreterDirective() {
        if (!this.match(types$1.interpreterDirective)) return null;
        const node = this.startNode();
        node.value = this.state.value;
        this.next();
        return this.finishNode(node, "InterpreterDirective");
    }
    isLet(context) {
        if (!this.isContextual("let")) return false;
        return this.isLetKeyword(context);
    }
    isLetKeyword(context) {
        const next = this.nextTokenStart();
        const nextCh = this.codePointAtPos(next);
        if (nextCh === 92 || nextCh === 91) return true;
        if (context) return false;
        if (nextCh === 123) return true;
        if (isIdentifierStart(nextCh)) {
            keywordRelationalOperator.lastIndex = next;
            const matched = keywordRelationalOperator.exec(this.input);
            if (matched !== null) {
                const endCh = this.codePointAtPos(next + matched[0].length);
                if (!isIdentifierChar(endCh) && endCh !== 92) return false;
            }
            return true;
        }
        return false;
    }
    parseStatement(context, topLevel) {
        if (this.match(types$1.at)) this.parseDecorators(true);
        return this.parseStatementContent(context, topLevel);
    }
    parseStatementContent(context, topLevel) {
        let starttype = this.state.type;
        const node = this.startNode();
        let kind;
        if (this.isLet(context)) {
            starttype = types$1._var;
            kind = "let";
        }
        switch(starttype){
            case types$1._break:
            case types$1._continue:
                return this.parseBreakContinueStatement(node, starttype.keyword);
            case types$1._debugger:
                return this.parseDebuggerStatement(node);
            case types$1._do:
                return this.parseDoStatement(node);
            case types$1._for:
                return this.parseForStatement(node);
            case types$1._function:
                if (this.lookaheadCharCode() === 46) break;
                if (context) {
                    if (this.state.strict) this.raise(this.state.start, ErrorMessages.StrictFunction);
                    else if (context !== "if" && context !== "label") this.raise(this.state.start, ErrorMessages.SloppyFunction);
                }
                return this.parseFunctionStatement(node, false, !context);
            case types$1._class:
                if (context) this.unexpected();
                return this.parseClass(node, true);
            case types$1._if:
                return this.parseIfStatement(node);
            case types$1._return:
                return this.parseReturnStatement(node);
            case types$1._switch:
                return this.parseSwitchStatement(node);
            case types$1._throw:
                return this.parseThrowStatement(node);
            case types$1._try:
                return this.parseTryStatement(node);
            case types$1._const:
            case types$1._var:
                kind = kind || this.state.value;
                if (context && kind !== "var") this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);
                return this.parseVarStatement(node, kind);
            case types$1._while:
                return this.parseWhileStatement(node);
            case types$1._with:
                return this.parseWithStatement(node);
            case types$1.braceL:
                return this.parseBlock();
            case types$1.semi:
                return this.parseEmptyStatement(node);
            case types$1._import:
                {
                    const nextTokenCharCode = this.lookaheadCharCode();
                    if (nextTokenCharCode === 40 || nextTokenCharCode === 46) break;
                }
            case types$1._export:
                {
                    if (!this.options.allowImportExportEverywhere && !topLevel) this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);
                    this.next();
                    let result;
                    if (starttype === types$1._import) {
                        result = this.parseImport(node);
                        if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) this.sawUnambiguousESM = true;
                    } else {
                        result = this.parseExport(node);
                        if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") this.sawUnambiguousESM = true;
                    }
                    this.assertModuleNodeAllowed(node);
                    return result;
                }
            default:
                if (this.isAsyncFunction()) {
                    if (context) this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);
                    this.next();
                    return this.parseFunctionStatement(node, true, !context);
                }
        }
        const maybeName = this.state.value;
        const expr = this.parseExpression();
        if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon)) return this.parseLabeledStatement(node, maybeName, expr, context);
        else return this.parseExpressionStatement(node, expr);
    }
    assertModuleNodeAllowed(node) {
        if (!this.options.allowImportExportEverywhere && !this.inModule) this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);
    }
    takeDecorators(node) {
        const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (decorators.length) {
            node.decorators = decorators;
            this.resetStartLocationFromNode(node, decorators[0]);
            this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];
        }
    }
    canHaveLeadingDecorator() {
        return this.match(types$1._class);
    }
    parseDecorators(allowExport) {
        const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        while(this.match(types$1.at)){
            const decorator = this.parseDecorator();
            currentContextDecorators.push(decorator);
        }
        if (this.match(types$1._export)) {
            if (!allowExport) this.unexpected();
            if (this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport")) this.raise(this.state.start, ErrorMessages.DecoratorExportClass);
        } else if (!this.canHaveLeadingDecorator()) throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);
    }
    parseDecorator() {
        this.expectOnePlugin([
            "decorators-legacy",
            "decorators"
        ]);
        const node = this.startNode();
        this.next();
        if (this.hasPlugin("decorators")) {
            this.state.decoratorStack.push([]);
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            let expr;
            if (this.eat(types$1.parenL)) {
                expr = this.parseExpression();
                this.expect(types$1.parenR);
            } else {
                expr = this.parseIdentifier(false);
                while(this.eat(types$1.dot)){
                    const node1 = this.startNodeAt(startPos, startLoc);
                    node1.object = expr;
                    node1.property = this.parseIdentifier(true);
                    node1.computed = false;
                    expr = this.finishNode(node1, "MemberExpression");
                }
            }
            node.expression = this.parseMaybeDecoratorArguments(expr);
            this.state.decoratorStack.pop();
        } else node.expression = this.parseExprSubscripts();
        return this.finishNode(node, "Decorator");
    }
    parseMaybeDecoratorArguments(expr) {
        if (this.eat(types$1.parenL)) {
            const node = this.startNodeAtNode(expr);
            node.callee = expr;
            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);
            this.toReferencedList(node.arguments);
            return this.finishNode(node, "CallExpression");
        }
        return expr;
    }
    parseBreakContinueStatement(node, keyword) {
        const isBreak = keyword === "break";
        this.next();
        if (this.isLineTerminator()) node.label = null;
        else {
            node.label = this.parseIdentifier();
            this.semicolon();
        }
        this.verifyBreakContinue(node, keyword);
        return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
    }
    verifyBreakContinue(node, keyword) {
        const isBreak = keyword === "break";
        let i;
        for(i = 0; i < this.state.labels.length; ++i){
            const lab = this.state.labels[i];
            if (node.label == null || lab.name === node.label.name) {
                if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
                if (node.label && isBreak) break;
            }
        }
        if (i === this.state.labels.length) this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);
    }
    parseDebuggerStatement(node) {
        this.next();
        this.semicolon();
        return this.finishNode(node, "DebuggerStatement");
    }
    parseHeaderExpression() {
        this.expect(types$1.parenL);
        const val = this.parseExpression();
        this.expect(types$1.parenR);
        return val;
    }
    parseDoStatement(node) {
        this.next();
        this.state.labels.push(loopLabel);
        node.body = this.withTopicForbiddingContext(()=>this.parseStatement("do")
        );
        this.state.labels.pop();
        this.expect(types$1._while);
        node.test = this.parseHeaderExpression();
        this.eat(types$1.semi);
        return this.finishNode(node, "DoWhileStatement");
    }
    parseForStatement(node) {
        this.next();
        this.state.labels.push(loopLabel);
        let awaitAt = -1;
        if (this.isAwaitAllowed() && this.eatContextual("await")) awaitAt = this.state.lastTokStart;
        this.scope.enter(SCOPE_OTHER);
        this.expect(types$1.parenL);
        if (this.match(types$1.semi)) {
            if (awaitAt > -1) this.unexpected(awaitAt);
            return this.parseFor(node, null);
        }
        const startsWithLet = this.isContextual("let");
        const isLet = startsWithLet && this.isLetKeyword();
        if (this.match(types$1._var) || this.match(types$1._const) || isLet) {
            const init = this.startNode();
            const kind = isLet ? "let" : this.state.value;
            this.next();
            this.parseVar(init, true, kind);
            this.finishNode(init, "VariableDeclaration");
            if ((this.match(types$1._in) || this.isContextual("of")) && init.declarations.length === 1) return this.parseForIn(node, init, awaitAt);
            if (awaitAt > -1) this.unexpected(awaitAt);
            return this.parseFor(node, init);
        }
        const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;
        const refExpressionErrors = new ExpressionErrors();
        const init = this.parseExpression(true, refExpressionErrors);
        const isForOf = this.isContextual("of");
        if (isForOf) {
            if (startsWithLet) this.raise(init.start, ErrorMessages.ForOfLet);
            else if (awaitAt === -1 && startsWithUnescapedName && init.type === "Identifier" && init.name === "async") this.raise(init.start, ErrorMessages.ForOfAsync);
        }
        if (isForOf || this.match(types$1._in)) {
            this.toAssignable(init, true);
            const description = isForOf ? "for-of statement" : "for-in statement";
            this.checkLVal(init, description);
            return this.parseForIn(node, init, awaitAt);
        } else this.checkExpressionErrors(refExpressionErrors, true);
        if (awaitAt > -1) this.unexpected(awaitAt);
        return this.parseFor(node, init);
    }
    parseFunctionStatement(node, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);
    }
    parseIfStatement(node) {
        this.next();
        node.test = this.parseHeaderExpression();
        node.consequent = this.parseStatement("if");
        node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
        return this.finishNode(node, "IfStatement");
    }
    parseReturnStatement(node) {
        if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) this.raise(this.state.start, ErrorMessages.IllegalReturn);
        this.next();
        if (this.isLineTerminator()) node.argument = null;
        else {
            node.argument = this.parseExpression();
            this.semicolon();
        }
        return this.finishNode(node, "ReturnStatement");
    }
    parseSwitchStatement(node) {
        this.next();
        node.discriminant = this.parseHeaderExpression();
        const cases = node.cases = [];
        this.expect(types$1.braceL);
        this.state.labels.push(switchLabel);
        this.scope.enter(SCOPE_OTHER);
        let cur;
        for(let sawDefault; !this.match(types$1.braceR);){
            if (this.match(types$1._case) || this.match(types$1._default)) {
                const isCase = this.match(types$1._case);
                if (cur) this.finishNode(cur, "SwitchCase");
                cases.push(cur = this.startNode());
                cur.consequent = [];
                this.next();
                if (isCase) cur.test = this.parseExpression();
                else {
                    if (sawDefault) this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);
                    sawDefault = true;
                    cur.test = null;
                }
                this.expect(types$1.colon);
            } else if (cur) cur.consequent.push(this.parseStatement(null));
            else this.unexpected();
        }
        this.scope.exit();
        if (cur) this.finishNode(cur, "SwitchCase");
        this.next();
        this.state.labels.pop();
        return this.finishNode(node, "SwitchStatement");
    }
    parseThrowStatement(node) {
        this.next();
        if (this.hasPrecedingLineBreak()) this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);
        node.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node, "ThrowStatement");
    }
    parseCatchClauseParam() {
        const param = this.parseBindingAtom();
        const simple = param.type === "Identifier";
        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);
        this.checkLVal(param, "catch clause", BIND_LEXICAL);
        return param;
    }
    parseTryStatement(node) {
        this.next();
        node.block = this.parseBlock();
        node.handler = null;
        if (this.match(types$1._catch)) {
            const clause = this.startNode();
            this.next();
            if (this.match(types$1.parenL)) {
                this.expect(types$1.parenL);
                clause.param = this.parseCatchClauseParam();
                this.expect(types$1.parenR);
            } else {
                clause.param = null;
                this.scope.enter(SCOPE_OTHER);
            }
            clause.body = this.withTopicForbiddingContext(()=>this.parseBlock(false, false)
            );
            this.scope.exit();
            node.handler = this.finishNode(clause, "CatchClause");
        }
        node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
        if (!node.handler && !node.finalizer) this.raise(node.start, ErrorMessages.NoCatchOrFinally);
        return this.finishNode(node, "TryStatement");
    }
    parseVarStatement(node, kind) {
        this.next();
        this.parseVar(node, false, kind);
        this.semicolon();
        return this.finishNode(node, "VariableDeclaration");
    }
    parseWhileStatement(node) {
        this.next();
        node.test = this.parseHeaderExpression();
        this.state.labels.push(loopLabel);
        node.body = this.withTopicForbiddingContext(()=>this.parseStatement("while")
        );
        this.state.labels.pop();
        return this.finishNode(node, "WhileStatement");
    }
    parseWithStatement(node) {
        if (this.state.strict) this.raise(this.state.start, ErrorMessages.StrictWith);
        this.next();
        node.object = this.parseHeaderExpression();
        node.body = this.withTopicForbiddingContext(()=>this.parseStatement("with")
        );
        return this.finishNode(node, "WithStatement");
    }
    parseEmptyStatement(node) {
        this.next();
        return this.finishNode(node, "EmptyStatement");
    }
    parseLabeledStatement(node, maybeName, expr, context) {
        for (const label1 of this.state.labels)if (label1.name === maybeName) this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);
        const kind = this.state.type.isLoop ? "loop" : this.match(types$1._switch) ? "switch" : null;
        for(let i = this.state.labels.length - 1; i >= 0; i--){
            const label2 = this.state.labels[i];
            if (label2.statementStart === node.start) {
                label2.statementStart = this.state.start;
                label2.kind = kind;
            } else break;
        }
        this.state.labels.push({
            name: maybeName,
            kind: kind,
            statementStart: this.state.start
        });
        node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.state.labels.pop();
        node.label = expr;
        return this.finishNode(node, "LabeledStatement");
    }
    parseExpressionStatement(node, expr) {
        node.expression = expr;
        this.semicolon();
        return this.finishNode(node, "ExpressionStatement");
    }
    parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
        const node = this.startNode();
        if (allowDirectives) this.state.strictErrors.clear();
        this.expect(types$1.braceL);
        if (createNewLexicalScope) this.scope.enter(SCOPE_OTHER);
        this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);
        if (createNewLexicalScope) this.scope.exit();
        return this.finishNode(node, "BlockStatement");
    }
    isValidDirective(stmt) {
        return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
    }
    parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
        const body = node.body = [];
        const directives = node.directives = [];
        this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
    }
    parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
        const oldStrict = this.state.strict;
        let hasStrictModeDirective = false;
        let parsedNonDirective = false;
        while(!this.match(end)){
            const stmt = this.parseStatement(null, topLevel);
            if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                    const directive = this.stmtToDirective(stmt);
                    directives.push(directive);
                    if (!hasStrictModeDirective && directive.value.value === "use strict") {
                        hasStrictModeDirective = true;
                        this.setStrict(true);
                    }
                    continue;
                }
                parsedNonDirective = true;
                this.state.strictErrors.clear();
            }
            body.push(stmt);
        }
        if (afterBlockParse) afterBlockParse.call(this, hasStrictModeDirective);
        if (!oldStrict) this.setStrict(false);
        this.next();
    }
    parseFor(node, init) {
        node.init = init;
        this.semicolon(false);
        node.test = this.match(types$1.semi) ? null : this.parseExpression();
        this.semicolon(false);
        node.update = this.match(types$1.parenR) ? null : this.parseExpression();
        this.expect(types$1.parenR);
        node.body = this.withTopicForbiddingContext(()=>this.parseStatement("for")
        );
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node, "ForStatement");
    }
    parseForIn(node, init, awaitAt) {
        const isForIn = this.match(types$1._in);
        this.next();
        if (isForIn) {
            if (awaitAt > -1) this.unexpected(awaitAt);
        } else node.await = awaitAt > -1;
        if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? "for-in" : "for-of");
        else if (init.type === "AssignmentPattern") this.raise(init.start, ErrorMessages.InvalidLhs, "for-loop");
        node.left = init;
        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
        this.expect(types$1.parenR);
        node.body = this.withTopicForbiddingContext(()=>this.parseStatement("for")
        );
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
    }
    parseVar(node, isFor, kind) {
        const declarations = node.declarations = [];
        const isTypescript = this.hasPlugin("typescript");
        node.kind = kind;
        for(;;){
            const decl = this.startNode();
            this.parseVarId(decl, kind);
            if (this.eat(types$1.eq)) decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
            else {
                if (kind === "const" && !(this.match(types$1._in) || this.isContextual("of"))) {
                    if (!isTypescript) this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, "Const declarations");
                } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(types$1._in) || this.isContextual("of")))) this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, "Complex binding patterns");
                decl.init = null;
            }
            declarations.push(this.finishNode(decl, "VariableDeclarator"));
            if (!this.eat(types$1.comma)) break;
        }
        return node;
    }
    parseVarId(decl, kind) {
        decl.id = this.parseBindingAtom();
        this.checkLVal(decl.id, "variable declaration", kind === "var" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== "var");
    }
    parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {
        const isStatement = statement & FUNC_STATEMENT;
        const isHangingStatement = statement & FUNC_HANGING_STATEMENT;
        const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);
        this.initFunction(node, isAsync);
        if (this.match(types$1.star) && isHangingStatement) this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);
        node.generator = this.eat(types$1.star);
        if (isStatement) node.id = this.parseFunctionId(requireId);
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = false;
        this.scope.enter(SCOPE_FUNCTION);
        this.prodParam.enter(functionFlags(isAsync, node.generator));
        if (!isStatement) node.id = this.parseFunctionId();
        this.parseFunctionParams(node, false);
        this.withTopicForbiddingContext(()=>{
            this.parseFunctionBodyAndFinish(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
        });
        this.prodParam.exit();
        this.scope.exit();
        if (isStatement && !isHangingStatement) this.registerFunctionStatementId(node);
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node;
    }
    parseFunctionId(requireId) {
        return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;
    }
    parseFunctionParams(node, allowModifiers) {
        this.expect(types$1.parenL);
        this.expressionScope.enter(newParameterDeclarationScope());
        node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);
        this.expressionScope.exit();
    }
    registerFunctionStatementId(node) {
        if (!node.id) return;
        this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);
    }
    parseClass(node, isStatement, optionalId) {
        this.next();
        this.takeDecorators(node);
        const oldStrict = this.state.strict;
        this.state.strict = true;
        this.parseClassId(node, isStatement, optionalId);
        this.parseClassSuper(node);
        node.body = this.parseClassBody(!!node.superClass, oldStrict);
        return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
    }
    isClassProperty() {
        return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);
    }
    isClassMethod() {
        return this.match(types$1.parenL);
    }
    isNonstaticConstructor(method) {
        return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
    }
    parseClassBody(hadSuperClass, oldStrict) {
        this.classScope.enter();
        const state2 = {
            hadConstructor: false,
            hadSuperClass
        };
        let decorators = [];
        const classBody = this.startNode();
        classBody.body = [];
        this.expect(types$1.braceL);
        this.withTopicForbiddingContext(()=>{
            while(!this.match(types$1.braceR)){
                if (this.eat(types$1.semi)) {
                    if (decorators.length > 0) throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);
                    continue;
                }
                if (this.match(types$1.at)) {
                    decorators.push(this.parseDecorator());
                    continue;
                }
                const member = this.startNode();
                if (decorators.length) {
                    member.decorators = decorators;
                    this.resetStartLocationFromNode(member, decorators[0]);
                    decorators = [];
                }
                this.parseClassMember(classBody, member, state2);
                if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) this.raise(member.start, ErrorMessages.DecoratorConstructor);
            }
        });
        this.state.strict = oldStrict;
        this.next();
        if (decorators.length) throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);
        this.classScope.exit();
        return this.finishNode(classBody, "ClassBody");
    }
    parseClassMemberFromModifier(classBody, member) {
        const key = this.parseIdentifier(true);
        if (this.isClassMethod()) {
            const method = member;
            method.kind = "method";
            method.computed = false;
            method.key = key;
            method.static = false;
            this.pushClassMethod(classBody, method, false, false, false, false);
            return true;
        } else if (this.isClassProperty()) {
            const prop = member;
            prop.computed = false;
            prop.key = key;
            prop.static = false;
            classBody.body.push(this.parseClassProperty(prop));
            return true;
        }
        return false;
    }
    parseClassMember(classBody, member, state) {
        const isStatic = this.isContextual("static");
        if (isStatic) {
            if (this.parseClassMemberFromModifier(classBody, member)) return;
            if (this.eat(types$1.braceL)) {
                this.parseClassStaticBlock(classBody, member);
                return;
            }
        }
        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
    }
    parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const publicMethod = member;
        const privateMethod = member;
        const publicProp = member;
        const privateProp = member;
        const method = publicMethod;
        const publicMember = publicMethod;
        member.static = isStatic;
        if (this.eat(types$1.star)) {
            method.kind = "method";
            const isPrivateName = this.match(types$1.privateName);
            this.parseClassElementName(method);
            if (isPrivateName) {
                this.pushClassPrivateMethod(classBody, privateMethod, true, false);
                return;
            }
            if (this.isNonstaticConstructor(publicMethod)) this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);
            this.pushClassMethod(classBody, publicMethod, true, false, false, false);
            return;
        }
        const containsEsc = this.state.containsEsc;
        const isPrivate = this.match(types$1.privateName);
        const key = this.parseClassElementName(member);
        const isSimple = key.type === "Identifier";
        const maybeQuestionTokenStart = this.state.start;
        this.parsePostMemberNameModifiers(publicMember);
        if (this.isClassMethod()) {
            method.kind = "method";
            if (isPrivate) {
                this.pushClassPrivateMethod(classBody, privateMethod, false, false);
                return;
            }
            const isConstructor = this.isNonstaticConstructor(publicMethod);
            let allowsDirectSuper = false;
            if (isConstructor) {
                publicMethod.kind = "constructor";
                if (state.hadConstructor && !this.hasPlugin("typescript")) this.raise(key.start, ErrorMessages.DuplicateConstructor);
                if (isConstructor && this.hasPlugin("typescript") && member.override) this.raise(key.start, ErrorMessages.OverrideOnConstructor);
                state.hadConstructor = true;
                allowsDirectSuper = state.hadSuperClass;
            }
            this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
        } else if (this.isClassProperty()) {
            if (isPrivate) this.pushClassPrivateProperty(classBody, privateProp);
            else this.pushClassProperty(classBody, publicProp);
        } else if (isSimple && key.name === "async" && !containsEsc && !this.isLineTerminator()) {
            const isGenerator = this.eat(types$1.star);
            if (publicMember.optional) this.unexpected(maybeQuestionTokenStart);
            method.kind = "method";
            const isPrivate1 = this.match(types$1.privateName);
            this.parseClassElementName(method);
            this.parsePostMemberNameModifiers(publicMember);
            if (isPrivate1) this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
            else {
                if (this.isNonstaticConstructor(publicMethod)) this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);
                this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
            }
        } else if (isSimple && (key.name === "get" || key.name === "set") && !containsEsc && !(this.match(types$1.star) && this.isLineTerminator())) {
            method.kind = key.name;
            const isPrivate1 = this.match(types$1.privateName);
            this.parseClassElementName(publicMethod);
            if (isPrivate1) this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            else {
                if (this.isNonstaticConstructor(publicMethod)) this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);
                this.pushClassMethod(classBody, publicMethod, false, false, false, false);
            }
            this.checkGetterSetterParams(publicMethod);
        } else if (this.isLineTerminator()) {
            if (isPrivate) this.pushClassPrivateProperty(classBody, privateProp);
            else this.pushClassProperty(classBody, publicProp);
        } else this.unexpected();
    }
    parseClassElementName(member) {
        const { type: type3 , value , start: start2  } = this.state;
        if ((type3 === types$1.name || type3 === types$1.string) && member.static && value === "prototype") this.raise(start2, ErrorMessages.StaticPrototype);
        if (type3 === types$1.privateName && value === "constructor") this.raise(start2, ErrorMessages.ConstructorClassPrivateField);
        return this.parsePropertyName(member, true);
    }
    parseClassStaticBlock(classBody, member) {
        var _member$decorators;
        this.expectPlugin("classStaticBlock", member.start);
        this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(PARAM);
        const body = member.body = [];
        this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);
        this.prodParam.exit();
        this.scope.exit();
        this.state.labels = oldLabels;
        classBody.body.push(this.finishNode(member, "StaticBlock"));
        if ((_member$decorators = member.decorators) != null && _member$decorators.length) this.raise(member.start, ErrorMessages.DecoratorStaticBlock);
    }
    pushClassProperty(classBody, prop) {
        if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) this.raise(prop.key.start, ErrorMessages.ConstructorClassField);
        classBody.body.push(this.parseClassProperty(prop));
    }
    pushClassPrivateProperty(classBody, prop) {
        const node = this.parseClassPrivateProperty(prop);
        classBody.body.push(node);
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
        classBody.body.push(node);
        const kind = node.kind === "get" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === "set" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);
    }
    parsePostMemberNameModifiers(methodOrProp) {
    }
    parseClassPrivateProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, "ClassPrivateProperty");
    }
    parseClassProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, "ClassProperty");
    }
    parseInitializer(node) {
        this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
        this.expressionScope.enter(newExpressionScope());
        this.prodParam.enter(PARAM);
        node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;
        this.expressionScope.exit();
        this.prodParam.exit();
        this.scope.exit();
    }
    parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {
        if (this.match(types$1.name)) {
            node.id = this.parseIdentifier();
            if (isStatement) this.checkLVal(node.id, "class name", bindingType);
        } else if (optionalId || !isStatement) node.id = null;
        else this.unexpected(null, ErrorMessages.MissingClassName);
    }
    parseClassSuper(node) {
        node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;
    }
    parseExport(node) {
        const hasDefault = this.maybeParseExportDefaultSpecifier(node);
        const parseAfterDefault = !hasDefault || this.eat(types$1.comma);
        const hasStar = parseAfterDefault && this.eatExportStar(node);
        const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
        const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));
        const isFromRequired = hasDefault || hasStar;
        if (hasStar && !hasNamespace) {
            if (hasDefault) this.unexpected();
            this.parseExportFrom(node, true);
            return this.finishNode(node, "ExportAllDeclaration");
        }
        const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
        if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) throw this.unexpected(null, types$1.braceL);
        let hasDeclaration;
        if (isFromRequired || hasSpecifiers) {
            hasDeclaration = false;
            this.parseExportFrom(node, isFromRequired);
        } else hasDeclaration = this.maybeParseExportDeclaration(node);
        if (isFromRequired || hasSpecifiers || hasDeclaration) {
            this.checkExport(node, true, false, !!node.source);
            return this.finishNode(node, "ExportNamedDeclaration");
        }
        if (this.eat(types$1._default)) {
            node.declaration = this.parseExportDefaultExpression();
            this.checkExport(node, true, true);
            return this.finishNode(node, "ExportDefaultDeclaration");
        }
        throw this.unexpected(null, types$1.braceL);
    }
    eatExportStar(node) {
        return this.eat(types$1.star);
    }
    maybeParseExportDefaultSpecifier(node) {
        if (this.isExportDefaultSpecifier()) {
            this.expectPlugin("exportDefaultFrom");
            const specifier = this.startNode();
            specifier.exported = this.parseIdentifier(true);
            node.specifiers = [
                this.finishNode(specifier, "ExportDefaultSpecifier")
            ];
            return true;
        }
        return false;
    }
    maybeParseExportNamespaceSpecifier(node) {
        if (this.isContextual("as")) {
            if (!node.specifiers) node.specifiers = [];
            const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
            this.next();
            specifier.exported = this.parseModuleExportName();
            node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
            return true;
        }
        return false;
    }
    maybeParseExportNamedSpecifiers(node) {
        if (this.match(types$1.braceL)) {
            if (!node.specifiers) node.specifiers = [];
            node.specifiers.push(...this.parseExportSpecifiers());
            node.source = null;
            node.declaration = null;
            return true;
        }
        return false;
    }
    maybeParseExportDeclaration(node) {
        if (this.shouldParseExportDeclaration()) {
            node.specifiers = [];
            node.source = null;
            node.declaration = this.parseExportDeclaration(node);
            return true;
        }
        return false;
    }
    isAsyncFunction() {
        if (!this.isContextual("async")) return false;
        const next = this.nextTokenStart();
        return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
    }
    parseExportDefaultExpression() {
        const expr = this.startNode();
        const isAsync = this.isAsyncFunction();
        if (this.match(types$1._function) || isAsync) {
            this.next();
            if (isAsync) this.next();
            return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);
        } else if (this.match(types$1._class)) return this.parseClass(expr, true, true);
        else if (this.match(types$1.at)) {
            if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport")) this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);
            this.parseDecorators(false);
            return this.parseClass(expr, true, true);
        } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);
        else {
            const res = this.parseMaybeAssignAllowIn();
            this.semicolon();
            return res;
        }
    }
    parseExportDeclaration(node) {
        return this.parseStatement(null);
    }
    isExportDefaultSpecifier() {
        if (this.match(types$1.name)) {
            const value = this.state.value;
            if (value === "async" && !this.state.containsEsc || value === "let") return false;
            if ((value === "type" || value === "interface") && !this.state.containsEsc) {
                const l = this.lookahead();
                if (l.type === types$1.name && l.value !== "from" || l.type === types$1.braceL) {
                    this.expectOnePlugin([
                        "flow",
                        "typescript"
                    ]);
                    return false;
                }
            }
        } else if (!this.match(types$1._default)) return false;
        const next = this.nextTokenStart();
        const hasFrom = this.isUnparsedContextual(next, "from");
        if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) return true;
        if (this.match(types$1._default) && hasFrom) {
            const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
            return nextAfterFrom === 34 || nextAfterFrom === 39;
        }
        return false;
    }
    parseExportFrom(node, expect) {
        if (this.eatContextual("from")) {
            node.source = this.parseImportSource();
            this.checkExport(node);
            const assertions = this.maybeParseImportAssertions();
            if (assertions) node.assertions = assertions;
        } else if (expect) this.unexpected();
        else node.source = null;
        this.semicolon();
    }
    shouldParseExportDeclaration() {
        if (this.match(types$1.at)) {
            this.expectOnePlugin([
                "decorators",
                "decorators-legacy"
            ]);
            if (this.hasPlugin("decorators")) {
                if (this.getPluginOption("decorators", "decoratorsBeforeExport")) this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);
                else return true;
            }
        }
        return this.state.type.keyword === "var" || this.state.type.keyword === "const" || this.state.type.keyword === "function" || this.state.type.keyword === "class" || this.isLet() || this.isAsyncFunction();
    }
    checkExport(node, checkNames, isDefault, isFrom) {
        if (checkNames) {
            if (isDefault) {
                this.checkDuplicateExports(node, "default");
                if (this.hasPlugin("exportDefaultFrom")) {
                    var _declaration$extra;
                    const declaration = node.declaration;
                    if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);
                }
            } else if (node.specifiers && node.specifiers.length) for (const specifier of node.specifiers){
                const { exported  } = specifier;
                const exportedName = exported.type === "Identifier" ? exported.name : exported.value;
                this.checkDuplicateExports(specifier, exportedName);
                if (!isFrom && specifier.local) {
                    const { local  } = specifier;
                    if (local.type !== "Identifier") this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);
                    else {
                        this.checkReservedWord(local.name, local.start, true, false);
                        this.scope.checkLocalExport(local);
                    }
                }
            }
            else if (node.declaration) {
                if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
                    const id = node.declaration.id;
                    if (!id) throw new Error("Assertion failure");
                    this.checkDuplicateExports(node, id.name);
                } else if (node.declaration.type === "VariableDeclaration") for (const declaration of node.declaration.declarations)this.checkDeclaration(declaration.id);
            }
        }
        const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (currentContextDecorators.length) throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);
    }
    checkDeclaration(node) {
        if (node.type === "Identifier") this.checkDuplicateExports(node, node.name);
        else if (node.type === "ObjectPattern") for (const prop of node.properties)this.checkDeclaration(prop);
        else if (node.type === "ArrayPattern") {
            for (const elem of node.elements)if (elem) this.checkDeclaration(elem);
        } else if (node.type === "ObjectProperty") this.checkDeclaration(node.value);
        else if (node.type === "RestElement") this.checkDeclaration(node.argument);
        else if (node.type === "AssignmentPattern") this.checkDeclaration(node.left);
    }
    checkDuplicateExports(node, name) {
        if (this.state.exportedIdentifiers.indexOf(name) > -1) this.raise(node.start, name === "default" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);
        this.state.exportedIdentifiers.push(name);
    }
    parseExportSpecifiers() {
        const nodes = [];
        let first = true;
        this.expect(types$1.braceL);
        while(!this.eat(types$1.braceR)){
            if (first) first = false;
            else {
                this.expect(types$1.comma);
                if (this.eat(types$1.braceR)) break;
            }
            const node = this.startNode();
            node.local = this.parseModuleExportName();
            node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local.__clone();
            nodes.push(this.finishNode(node, "ExportSpecifier"));
        }
        return nodes;
    }
    parseModuleExportName() {
        if (this.match(types$1.string)) {
            const result = this.parseStringLiteral(this.state.value);
            const surrogate = result.value.match(loneSurrogate);
            if (surrogate) this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));
            return result;
        }
        return this.parseIdentifier(true);
    }
    parseImport(node) {
        node.specifiers = [];
        if (!this.match(types$1.string)) {
            const hasDefault = this.maybeParseDefaultImportSpecifier(node);
            const parseNext = !hasDefault || this.eat(types$1.comma);
            const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
            if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
            this.expectContextual("from");
        }
        node.source = this.parseImportSource();
        const assertions = this.maybeParseImportAssertions();
        if (assertions) node.assertions = assertions;
        else {
            const attributes = this.maybeParseModuleAttributes();
            if (attributes) node.attributes = attributes;
        }
        this.semicolon();
        return this.finishNode(node, "ImportDeclaration");
    }
    parseImportSource() {
        if (!this.match(types$1.string)) this.unexpected();
        return this.parseExprAtom();
    }
    shouldParseDefaultImport(node) {
        return this.match(types$1.name);
    }
    parseImportSpecifierLocal(node, specifier, type, contextDescription) {
        specifier.local = this.parseIdentifier();
        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
        node.specifiers.push(this.finishNode(specifier, type));
    }
    parseAssertEntries() {
        const attrs = [];
        const attrNames = new Set();
        do {
            if (this.match(types$1.braceR)) break;
            const node = this.startNode();
            const keyName = this.state.value;
            if (this.match(types$1.string)) node.key = this.parseStringLiteral(keyName);
            else node.key = this.parseIdentifier(true);
            this.expect(types$1.colon);
            if (keyName !== "type") this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);
            if (attrNames.has(keyName)) this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);
            attrNames.add(keyName);
            if (!this.match(types$1.string)) throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);
            node.value = this.parseStringLiteral(this.state.value);
            this.finishNode(node, "ImportAttribute");
            attrs.push(node);
        }while (this.eat(types$1.comma))
        return attrs;
    }
    maybeParseModuleAttributes() {
        if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {
            this.expectPlugin("moduleAttributes");
            this.next();
        } else {
            if (this.hasPlugin("moduleAttributes")) return [];
            return null;
        }
        const attrs = [];
        const attributes = new Set();
        do {
            const node = this.startNode();
            node.key = this.parseIdentifier(true);
            if (node.key.name !== "type") this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);
            if (attributes.has(node.key.name)) this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);
            attributes.add(node.key.name);
            this.expect(types$1.colon);
            if (!this.match(types$1.string)) throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);
            node.value = this.parseStringLiteral(this.state.value);
            this.finishNode(node, "ImportAttribute");
            attrs.push(node);
        }while (this.eat(types$1.comma))
        return attrs;
    }
    maybeParseImportAssertions() {
        if (this.isContextual("assert") && !this.hasPrecedingLineBreak()) {
            this.expectPlugin("importAssertions");
            this.next();
        } else {
            if (this.hasPlugin("importAssertions")) return [];
            return null;
        }
        this.eat(types$1.braceL);
        const attrs = this.parseAssertEntries();
        this.eat(types$1.braceR);
        return attrs;
    }
    maybeParseDefaultImportSpecifier(node) {
        if (this.shouldParseDefaultImport(node)) {
            this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier", "default import specifier");
            return true;
        }
        return false;
    }
    maybeParseStarImportSpecifier(node) {
        if (this.match(types$1.star)) {
            const specifier = this.startNode();
            this.next();
            this.expectContextual("as");
            this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier", "import namespace specifier");
            return true;
        }
        return false;
    }
    parseNamedImportSpecifiers(node) {
        let first = true;
        this.expect(types$1.braceL);
        while(!this.eat(types$1.braceR)){
            if (first) first = false;
            else {
                if (this.eat(types$1.colon)) throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);
                this.expect(types$1.comma);
                if (this.eat(types$1.braceR)) break;
            }
            this.parseImportSpecifier(node);
        }
    }
    parseImportSpecifier(node) {
        const specifier = this.startNode();
        const importedIsString = this.match(types$1.string);
        specifier.imported = this.parseModuleExportName();
        if (this.eatContextual("as")) specifier.local = this.parseIdentifier();
        else {
            const { imported  } = specifier;
            if (importedIsString) throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);
            this.checkReservedWord(imported.name, specifier.start, true, true);
            specifier.local = imported.__clone();
        }
        this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
        node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
    }
    isThisParam(param) {
        return param.type === "Identifier" && param.name === "this";
    }
}
class Parser extends StatementParser {
    constructor(options1, input1){
        options1 = getOptions(options1);
        super(options1, input1);
        this.options = options1;
        this.initializeScopes();
        this.plugins = pluginsMap(this.options.plugins);
        this.filename = options1.sourceFilename;
    }
    getScopeHandler() {
        return ScopeHandler;
    }
    parse() {
        this.enterInitialScopes();
        const file = this.startNode();
        const program = this.startNode();
        this.nextToken();
        file.errors = null;
        this.parseTopLevel(file, program);
        file.errors = this.state.errors;
        return file;
    }
}
function pluginsMap(plugins) {
    const pluginMap = new Map();
    for (const plugin of plugins){
        const [name, options2] = Array.isArray(plugin) ? plugin : [
            plugin,
            {
            }
        ];
        if (!pluginMap.has(name)) pluginMap.set(name, options2 || {
        });
    }
    return pluginMap;
}
function parse(input2, options2) {
    var _options;
    if (((_options = options2) == null ? void 0 : _options.sourceType) === "unambiguous") {
        options2 = Object.assign({
        }, options2);
        try {
            options2.sourceType = "module";
            const parser1 = getParser(options2, input2);
            const ast = parser1.parse();
            if (parser1.sawUnambiguousESM) return ast;
            if (parser1.ambiguousScriptDifferentAst) try {
                options2.sourceType = "script";
                return getParser(options2, input2).parse();
            } catch (_unused) {
            }
            else ast.program.sourceType = "script";
            return ast;
        } catch (moduleError) {
            try {
                options2.sourceType = "script";
                return getParser(options2, input2).parse();
            } catch (_unused2) {
            }
            throw moduleError;
        }
    } else return getParser(options2, input2).parse();
}
function parseExpression(input2, options2) {
    const parser1 = getParser(options2, input2);
    if (parser1.options.strictMode) parser1.state.strict = true;
    return parser1.getExpression();
}
function getParser(options2, input2) {
    let cls = Parser;
    if (options2 != null && options2.plugins) {
        validatePlugins(options2.plugins);
        cls = getParserClass(options2.plugins);
    }
    return new cls(options2, input2);
}
const parserClassCache = {
};
function getParserClass(pluginsFromOptions) {
    const pluginList = mixinPluginNames.filter((name)=>hasPlugin(pluginsFromOptions, name)
    );
    const key = pluginList.join("/");
    let cls = parserClassCache[key];
    if (!cls) {
        cls = Parser;
        for (const plugin of pluginList)cls = mixinPlugins[plugin](cls);
        parserClassCache[key] = cls;
    }
    return cls;
}
exports.parse = parse;
exports.parseExpression = parseExpression;
exports.tokTypes = types$1;

},{}],"3xnkF":[function(require,module,exports) {
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define([
        'exports'
    ], factory) : (global = global || self, factory(global.estreeWalker = {
    }));
})(this, function(exports) {
    'use strict';
    // @ts-check
    /** @typedef { import('estree').BaseNode} BaseNode */ /** @typedef {{
		skip: () => void;
		remove: () => void;
		replace: (node: BaseNode) => void;
	}} WalkerContext */ class WalkerBase {
        constructor(){
            /** @type {boolean} */ this.should_skip = false;
            /** @type {boolean} */ this.should_remove = false;
            /** @type {BaseNode | null} */ this.replacement = null;
            /** @type {WalkerContext} */ this.context = {
                skip: ()=>this.should_skip = true
                ,
                remove: ()=>this.should_remove = true
                ,
                replace: (node)=>this.replacement = node
            };
        }
        /**
		 *
		 * @param {any} parent
		 * @param {string} prop
		 * @param {number} index
		 * @param {BaseNode} node
		 */ replace(parent, prop, index, node) {
            if (parent) {
                if (index !== null) parent[prop][index] = node;
                else parent[prop] = node;
            }
        }
        /**
		 *
		 * @param {any} parent
		 * @param {string} prop
		 * @param {number} index
		 */ remove(parent, prop, index) {
            if (parent) {
                if (index !== null) parent[prop].splice(index, 1);
                else delete parent[prop];
            }
        }
    }
    // @ts-check
    /** @typedef { import('estree').BaseNode} BaseNode */ /** @typedef { import('./walker.js').WalkerContext} WalkerContext */ /** @typedef {(
	 *    this: WalkerContext,
	 *    node: BaseNode,
	 *    parent: BaseNode,
	 *    key: string,
	 *    index: number
	 * ) => void} SyncHandler */ class SyncWalker extends WalkerBase {
        /**
		 *
		 * @param {SyncHandler} enter
		 * @param {SyncHandler} leave
		 */ constructor(enter, leave){
            super();
            /** @type {SyncHandler} */ this.enter = enter;
            /** @type {SyncHandler} */ this.leave = leave;
        }
        /**
		 *
		 * @param {BaseNode} node
		 * @param {BaseNode} parent
		 * @param {string} [prop]
		 * @param {number} [index]
		 * @returns {BaseNode}
		 */ visit(node, parent, prop, index) {
            if (node) {
                if (this.enter) {
                    const _should_skip = this.should_skip;
                    const _should_remove = this.should_remove;
                    const _replacement = this.replacement;
                    this.should_skip = false;
                    this.should_remove = false;
                    this.replacement = null;
                    this.enter.call(this.context, node, parent, prop, index);
                    if (this.replacement) {
                        node = this.replacement;
                        this.replace(parent, prop, index, node);
                    }
                    if (this.should_remove) this.remove(parent, prop, index);
                    const skipped = this.should_skip;
                    const removed = this.should_remove;
                    this.should_skip = _should_skip;
                    this.should_remove = _should_remove;
                    this.replacement = _replacement;
                    if (skipped) return node;
                    if (removed) return null;
                }
                for(const key in node){
                    const value = node[key];
                    if (typeof value !== "object") continue;
                    else if (Array.isArray(value)) for(let i = 0; i < value.length; i += 1){
                        if (value[i] !== null && typeof value[i].type === 'string') {
                            if (!this.visit(value[i], node, key, i)) // removed
                            i--;
                        }
                    }
                    else if (value !== null && typeof value.type === "string") this.visit(value, node, key, null);
                }
                if (this.leave) {
                    const _replacement = this.replacement;
                    const _should_remove = this.should_remove;
                    this.replacement = null;
                    this.should_remove = false;
                    this.leave.call(this.context, node, parent, prop, index);
                    if (this.replacement) {
                        node = this.replacement;
                        this.replace(parent, prop, index, node);
                    }
                    if (this.should_remove) this.remove(parent, prop, index);
                    const removed = this.should_remove;
                    this.replacement = _replacement;
                    this.should_remove = _should_remove;
                    if (removed) return null;
                }
            }
            return node;
        }
    }
    // @ts-check
    /** @typedef { import('estree').BaseNode} BaseNode */ /** @typedef { import('./walker').WalkerContext} WalkerContext */ /** @typedef {(
	 *    this: WalkerContext,
	 *    node: BaseNode,
	 *    parent: BaseNode,
	 *    key: string,
	 *    index: number
	 * ) => Promise<void>} AsyncHandler */ class AsyncWalker extends WalkerBase {
        /**
		 *
		 * @param {AsyncHandler} enter
		 * @param {AsyncHandler} leave
		 */ constructor(enter1, leave1){
            super();
            /** @type {AsyncHandler} */ this.enter = enter1;
            /** @type {AsyncHandler} */ this.leave = leave1;
        }
        /**
		 *
		 * @param {BaseNode} node
		 * @param {BaseNode} parent
		 * @param {string} [prop]
		 * @param {number} [index]
		 * @returns {Promise<BaseNode>}
		 */ async visit(node, parent, prop, index) {
            if (node) {
                if (this.enter) {
                    const _should_skip = this.should_skip;
                    const _should_remove = this.should_remove;
                    const _replacement = this.replacement;
                    this.should_skip = false;
                    this.should_remove = false;
                    this.replacement = null;
                    await this.enter.call(this.context, node, parent, prop, index);
                    if (this.replacement) {
                        node = this.replacement;
                        this.replace(parent, prop, index, node);
                    }
                    if (this.should_remove) this.remove(parent, prop, index);
                    const skipped = this.should_skip;
                    const removed = this.should_remove;
                    this.should_skip = _should_skip;
                    this.should_remove = _should_remove;
                    this.replacement = _replacement;
                    if (skipped) return node;
                    if (removed) return null;
                }
                for(const key in node){
                    const value = node[key];
                    if (typeof value !== "object") continue;
                    else if (Array.isArray(value)) for(let i = 0; i < value.length; i += 1){
                        if (value[i] !== null && typeof value[i].type === 'string') {
                            if (!await this.visit(value[i], node, key, i)) // removed
                            i--;
                        }
                    }
                    else if (value !== null && typeof value.type === "string") await this.visit(value, node, key, null);
                }
                if (this.leave) {
                    const _replacement = this.replacement;
                    const _should_remove = this.should_remove;
                    this.replacement = null;
                    this.should_remove = false;
                    await this.leave.call(this.context, node, parent, prop, index);
                    if (this.replacement) {
                        node = this.replacement;
                        this.replace(parent, prop, index, node);
                    }
                    if (this.should_remove) this.remove(parent, prop, index);
                    const removed = this.should_remove;
                    this.replacement = _replacement;
                    this.should_remove = _should_remove;
                    if (removed) return null;
                }
            }
            return node;
        }
    }
    // @ts-check
    /** @typedef { import('estree').BaseNode} BaseNode */ /** @typedef { import('./sync.js').SyncHandler} SyncHandler */ /** @typedef { import('./async.js').AsyncHandler} AsyncHandler */ /**
	 *
	 * @param {BaseNode} ast
	 * @param {{
	 *   enter?: SyncHandler
	 *   leave?: SyncHandler
	 * }} walker
	 * @returns {BaseNode}
	 */ function walk(ast, { enter: enter2 , leave: leave2  }) {
        const instance = new SyncWalker(enter2, leave2);
        return instance.visit(ast, null);
    }
    /**
	 *
	 * @param {BaseNode} ast
	 * @param {{
	 *   enter?: AsyncHandler
	 *   leave?: AsyncHandler
	 * }} walker
	 * @returns {Promise<BaseNode>}
	 */ async function asyncWalk(ast, { enter: enter2 , leave: leave2  }) {
        const instance = new AsyncWalker(enter2, leave2);
        return await instance.visit(ast, null);
    }
    exports.asyncWalk = asyncWalk;
    exports.walk = walk;
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
});

},{}],"4nkfb":[function(require,module,exports) {
'use strict';
module.exports = require('./dist/runtime-dom.cjs.js');

},{"./dist/runtime-dom.cjs.js":"6vPou"}],"6vPou":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var runtimeCore = require('@vue/runtime-core');
var shared = require('@vue/shared');
const svgNS = 'http://www.w3.org/2000/svg';
const doc = typeof document !== 'undefined' ? document : null;
let tempContainer;
let tempSVGContainer;
const nodeOps = {
    insert: (child, parent, anchor)=>{
        parent.insertBefore(child, anchor || null);
    },
    remove: (child)=>{
        const parent = child.parentNode;
        if (parent) parent.removeChild(child);
    },
    createElement: (tag, isSVG, is, props)=>{
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {
            is
        } : undefined);
        if (tag === 'select' && props && props.multiple != null) el.setAttribute('multiple', props.multiple);
        return el;
    },
    createText: (text)=>doc.createTextNode(text)
    ,
    createComment: (text)=>doc.createComment(text)
    ,
    setText: (node, text)=>{
        node.nodeValue = text;
    },
    setElementText: (el, text)=>{
        el.textContent = text;
    },
    parentNode: (node)=>node.parentNode
    ,
    nextSibling: (node)=>node.nextSibling
    ,
    querySelector: (selector)=>doc.querySelector(selector)
    ,
    setScopeId (el, id) {
        el.setAttribute(id, '');
    },
    cloneNode (el) {
        const cloned = el.cloneNode(true);
        // #3072
        // - in `patchDOMProp`, we store the actual value in the `el._value` property.
        // - normally, elements using `:value` bindings will not be hoisted, but if
        //   the bound value is a constant, e.g. `:value="true"` - they do get
        //   hoisted.
        // - in production, hoisted nodes are cloned when subsequent inserts, but
        //   cloneNode() does not copy the custom property we attached.
        // - This may need to account for other custom DOM properties we attach to
        //   elements in addition to `_value` in the future.
        if (`_value` in el) cloned._value = el._value;
        return cloned;
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent (content, parent, anchor, isSVG) {
        const temp = isSVG ? tempSVGContainer || (tempSVGContainer = doc.createElementNS(svgNS, 'svg')) : tempContainer || (tempContainer = doc.createElement('div'));
        temp.innerHTML = content;
        const first = temp.firstChild;
        let node = first;
        let last = node;
        while(node){
            last = node;
            nodeOps.insert(node, parent, anchor);
            node = temp.firstChild;
        }
        return [
            first,
            last
        ];
    }
};
// compiler should normalize class + :class bindings on the same element
// into a single binding ['staticClass', dynamic]
function patchClass(el, value, isSVG) {
    if (value == null) value = '';
    if (isSVG) el.setAttribute('class', value);
    else {
        // directly setting className should be faster than setAttribute in theory
        // if this is an element during a transition, take the temporary transition
        // classes into account.
        const transitionClasses = el._vtc;
        if (transitionClasses) value = (value ? [
            value,
            ...transitionClasses
        ] : [
            ...transitionClasses
        ]).join(' ');
        el.className = value;
    }
}
function patchStyle(el, prev, next) {
    const style = el.style;
    if (!next) el.removeAttribute('style');
    else if (shared.isString(next)) {
        if (prev !== next) {
            const current = style.display;
            style.cssText = next;
            // indicates that the `display` of the element is controlled by `v-show`,
            // so we always keep the current `display` value regardless of the `style` value,
            // thus handing over control to `v-show`.
            if ('_vod' in el) style.display = current;
        }
    } else {
        for(const key in next)setStyle(style, key, next[key]);
        if (prev && !shared.isString(prev)) {
            for(const key1 in prev)if (next[key1] == null) setStyle(style, key1, '');
        }
    }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
    if (shared.isArray(val)) val.forEach((v)=>setStyle(style, name, v)
    );
    else if (name.startsWith('--')) // custom property definition
    style.setProperty(name, val);
    else {
        const prefixed = autoPrefix(style, name);
        if (importantRE.test(val)) // !important
        style.setProperty(shared.hyphenate(prefixed), val.replace(importantRE, ''), 'important');
        else style[prefixed] = val;
    }
}
const prefixes = [
    'Webkit',
    'Moz',
    'ms'
];
const prefixCache = {
};
function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) return cached;
    let name = runtimeCore.camelize(rawName);
    if (name !== 'filter' && name in style) return prefixCache[rawName] = name;
    name = shared.capitalize(name);
    for(let i = 0; i < prefixes.length; i++){
        const prefixed = prefixes[i] + name;
        if (prefixed in style) return prefixCache[rawName] = prefixed;
    }
    return rawName;
}
const xlinkNS = 'http://www.w3.org/1999/xlink';
function patchAttr(el, key, value, isSVG, instance) {
    if (isSVG && key.startsWith('xlink:')) {
        if (value == null) el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        else el.setAttributeNS(xlinkNS, key, value);
    } else {
        // note we are only checking boolean attributes that don't have a
        // corresponding dom prop of the same name here.
        const isBoolean = shared.isSpecialBooleanAttr(key);
        if (value == null || isBoolean && value === false) el.removeAttribute(key);
        else el.setAttribute(key, isBoolean ? '' : value);
    }
}
// __UNSAFE__
// functions. The user is responsible for using them with only trusted content.
function patchDOMProp(el, key, value, // the following args are passed only due to potential innerHTML/textContent
// overriding existing VNodes, in which case the old tree must be properly
// unmounted.
prevChildren, parentComponent, parentSuspense, unmountChildren) {
    if (key === 'innerHTML' || key === 'textContent') {
        if (prevChildren) unmountChildren(prevChildren, parentComponent, parentSuspense);
        el[key] = value == null ? '' : value;
        return;
    }
    if (key === 'value' && el.tagName !== 'PROGRESS') {
        // store value as _value as well since
        // non-string values will be stringified.
        el._value = value;
        const newValue = value == null ? '' : value;
        if (el.value !== newValue) el.value = newValue;
        if (value == null) el.removeAttribute(key);
        return;
    }
    if (value === '' || value == null) {
        const type = typeof el[key];
        if (value === '' && type === 'boolean') {
            // e.g. <select multiple> compiles to { multiple: '' }
            el[key] = true;
            return;
        } else if (value == null && type === 'string') {
            // e.g. <div :id="null">
            el[key] = '';
            el.removeAttribute(key);
            return;
        } else if (type === 'number') {
            // e.g. <img :width="null">
            el[key] = 0;
            el.removeAttribute(key);
            return;
        }
    }
    // some properties perform value validation and throw
    try {
        el[key] = value;
    } catch (e) {
        runtimeCore.warn(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: ` + `value ${value} is invalid.`, e);
    }
}
// Async edge case fix requires storing an event listener's attach timestamp.
let _getNow = Date.now;
let skipTimestampCheck = false;
if (typeof window !== 'undefined') {
    // Determine what event timestamp the browser is using. Annoyingly, the
    // timestamp can either be hi-res (relative to page load) or low-res
    // (relative to UNIX epoch), so in order to compare time we have to use the
    // same timestamp type when saving the flush timestamp.
    if (_getNow() > document.createEvent('Event').timeStamp) // if the low-res timestamp which is bigger than the event timestamp
    // (which is evaluated AFTER) it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listeners as well.
    _getNow = ()=>performance.now()
    ;
    // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation
    // and does not fire microtasks in between event propagation, so safe to exclude.
    const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
    skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);
}
// To avoid the overhead of repeatedly calling performance.now(), we cache
// and use the same timestamp for all event listeners attached in the same tick.
let cachedNow = 0;
const p = Promise.resolve();
const reset = ()=>{
    cachedNow = 0;
};
const getNow = ()=>cachedNow || (p.then(reset), cachedNow = _getNow())
;
function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    // vei = vue event invokers
    const invokers = el._vei || (el._vei = {
    });
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) // patch
    existingInvoker.value = nextValue;
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            // add
            const invoker = invokers[rawName] = createInvoker(nextValue, instance);
            addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
            // remove
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = undefined;
        }
    }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {
        };
        let m;
        while(m = name.match(optionsModifierRE)){
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
        }
    }
    return [
        shared.hyphenate(name.slice(2)),
        options
    ];
}
function createInvoker(initialValue, instance) {
    const invoker = (e)=>{
        // async edge case #6566: inner click event triggers patch, event handler
        // attached to outer element during patch, and triggered again. This
        // happens because browsers fire microtask ticks between event propagation.
        // the solution is simple: we save the timestamp when a handler is attached,
        // and the handler would only fire if the event passed to it was fired
        // AFTER it was attached.
        const timeStamp = e.timeStamp || _getNow();
        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) runtimeCore.callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5/* NATIVE_EVENT_HANDLER */ , [
            e
        ]);
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
}
function patchStopImmediatePropagation(e, value) {
    if (shared.isArray(value)) {
        const originalStop = e.stopImmediatePropagation;
        e.stopImmediatePropagation = ()=>{
            originalStop.call(e);
            e._stopped = true;
        };
        return value.map((fn)=>(e1)=>!e1._stopped && fn(e1)
        );
    } else return value;
}
const nativeOnRE = /^on[a-z]/;
const forcePatchProp = (_, key)=>key === 'value'
;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren)=>{
    switch(key){
        // special
        case 'class':
            patchClass(el, nextValue, isSVG);
            break;
        case 'style':
            patchStyle(el, prevValue, nextValue);
            break;
        default:
            if (shared.isOn(key)) // ignore v-model listeners
            {
                if (!shared.isModelListener(key)) patchEvent(el, key, prevValue, nextValue, parentComponent);
            } else if (shouldSetAsProp(el, key, nextValue, isSVG)) patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
            else {
                // special case for <input v-model type="checkbox"> with
                // :true-value & :false-value
                // store value as dom properties since non-string values will be
                // stringified.
                if (key === 'true-value') el._trueValue = nextValue;
                else if (key === 'false-value') el._falseValue = nextValue;
                patchAttr(el, key, nextValue, isSVG);
            }
            break;
    }
};
function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
        // most keys must be set as attribute on svg elements to work
        // ...except innerHTML
        if (key === 'innerHTML') return true;
        // or native onclick with function values
        if (key in el && nativeOnRE.test(key) && shared.isFunction(value)) return true;
        return false;
    }
    // spellcheck and draggable are numerated attrs, however their
    // corresponding DOM properties are actually booleans - this leads to
    // setting it with a string "false" value leading it to be coerced to
    // `true`, so we need to always treat them as attributes.
    // Note that `contentEditable` doesn't have this problem: its DOM
    // property is also enumerated string values.
    if (key === 'spellcheck' || key === 'draggable') return false;
    // #1787, #2840 form property on form elements is readonly and must be set as
    // attribute.
    if (key === 'form') return false;
    // #1526 <input list> must be set as attribute
    if (key === 'list' && el.tagName === 'INPUT') return false;
    // #2766 <textarea type> must be set as attribute
    if (key === 'type' && el.tagName === 'TEXTAREA') return false;
    // native onclick with string value, must be set as attribute
    if (nativeOnRE.test(key) && shared.isString(value)) return false;
    return key in el;
}
function useCssModule(name = '$style') {
    /* istanbul ignore else */ {
        const instance = runtimeCore.getCurrentInstance();
        if (!instance) {
            runtimeCore.warn(`useCssModule must be called inside setup()`);
            return shared.EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
            runtimeCore.warn(`Current instance does not have CSS modules injected.`);
            return shared.EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
            runtimeCore.warn(`Current instance does not have CSS module named "${name}".`);
            return shared.EMPTY_OBJ;
        }
        return mod;
    }
}
/**
 * Runtime helper for SFC's CSS variable injection feature.
 * @private
 */ function useCssVars(getter) {
    return;
}
const TRANSITION = 'transition';
const ANIMATION = 'animation';
// DOM Transition is a higher-order-component based on the platform-agnostic
// base Transition component, with DOM-specific logic.
const Transition = (props, { slots  })=>runtimeCore.h(runtimeCore.BaseTransition, resolveTransitionProps(props), slots)
;
Transition.displayName = 'Transition';
const DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
        type: Boolean,
        default: true
    },
    duration: [
        String,
        Number,
        Object
    ],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /*#__PURE__*/ shared.extend({
}, runtimeCore.BaseTransition.props, DOMTransitionPropsValidators);
/**
 * #3227 Incoming hooks may be merged into arrays when wrapping Transition
 * with custom HOCs.
 */ const callHook = (hook, args = [])=>{
    if (shared.isArray(hook)) hook.forEach((h)=>h(...args)
    );
    else if (hook) hook(...args);
};
/**
 * Check if a hook expects a callback (2nd arg), which means the user
 * intends to explicitly control the end of the transition.
 */ const hasExplicitCallback = (hook)=>{
    return hook ? shared.isArray(hook) ? hook.some((h)=>h.length > 1
    ) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
    const baseProps = {
    };
    for(const key in rawProps)if (!(key in DOMTransitionPropsValidators)) baseProps[key] = rawProps[key];
    if (rawProps.css === false) return baseProps;
    const { name ='v' , type , duration , enterFromClass =`${name}-enter-from` , enterActiveClass =`${name}-enter-active` , enterToClass =`${name}-enter-to` , appearFromClass =enterFromClass , appearActiveClass =enterActiveClass , appearToClass =enterToClass , leaveFromClass =`${name}-leave-from` , leaveActiveClass =`${name}-leave-active` , leaveToClass =`${name}-leave-to`  } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const { onBeforeEnter , onEnter , onEnterCancelled , onLeave , onLeaveCancelled , onBeforeAppear =onBeforeEnter , onAppear =onEnter , onAppearCancelled =onEnterCancelled  } = baseProps;
    const finishEnter = (el, isAppear, done)=>{
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
    };
    const finishLeave = (el, done)=>{
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
    };
    const makeEnterHook = (isAppear)=>{
        return (el, done)=>{
            const hook = isAppear ? onAppear : onEnter;
            const resolve = ()=>finishEnter(el, isAppear, done)
            ;
            callHook(hook, [
                el,
                resolve
            ]);
            nextFrame(()=>{
                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) whenTransitionEnds(el, type, enterDuration, resolve);
            });
        };
    };
    return shared.extend(baseProps, {
        onBeforeEnter (el) {
            callHook(onBeforeEnter, [
                el
            ]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear (el) {
            callHook(onBeforeAppear, [
                el
            ]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave (el, done) {
            const resolve = ()=>finishLeave(el, done)
            ;
            addTransitionClass(el, leaveFromClass);
            // force reflow so *-leave-from classes immediately take effect (#2593)
            forceReflow();
            addTransitionClass(el, leaveActiveClass);
            nextFrame(()=>{
                removeTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveToClass);
                if (!hasExplicitCallback(onLeave)) whenTransitionEnds(el, type, leaveDuration, resolve);
            });
            callHook(onLeave, [
                el,
                resolve
            ]);
        },
        onEnterCancelled (el) {
            finishEnter(el, false);
            callHook(onEnterCancelled, [
                el
            ]);
        },
        onAppearCancelled (el) {
            finishEnter(el, true);
            callHook(onAppearCancelled, [
                el
            ]);
        },
        onLeaveCancelled (el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [
                el
            ]);
        }
    });
}
function normalizeDuration(duration) {
    if (duration == null) return null;
    else if (shared.isObject(duration)) return [
        NumberOf(duration.enter),
        NumberOf(duration.leave)
    ];
    else {
        const n = NumberOf(duration);
        return [
            n,
            n
        ];
    }
}
function NumberOf(val) {
    const res = shared.toNumber(val);
    validateDuration(res);
    return res;
}
function validateDuration(val) {
    if (typeof val !== 'number') runtimeCore.warn(`<transition> explicit duration is not a valid number - ` + `got ${JSON.stringify(val)}.`);
    else if (isNaN(val)) runtimeCore.warn(`<transition> explicit duration is NaN - ` + 'the duration expression might be incorrect.');
}
function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.add(c)
    );
    (el._vtc || (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.remove(c)
    );
    const { _vtc  } = el;
    if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) el._vtc = undefined;
    }
}
function nextFrame(cb) {
    requestAnimationFrame(()=>{
        requestAnimationFrame(cb);
    });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
    const id = el._endId = ++endId;
    const resolveIfNotStale = ()=>{
        if (id === el._endId) resolve();
    };
    if (explicitTimeout) return setTimeout(resolveIfNotStale, explicitTimeout);
    const { type , timeout , propCount  } = getTransitionInfo(el, expectedType);
    if (!type) return resolve();
    const endEvent = type + 'end';
    let ended = 0;
    const end = ()=>{
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
    };
    const onEnd = (e)=>{
        if (e.target === el && (++ended) >= propCount) end();
    };
    setTimeout(()=>{
        if (ended < propCount) end();
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    const getStyleProperties = (key)=>(styles[key] || '').split(', ')
    ;
    const transitionDelays = getStyleProperties(TRANSITION + 'Delay');
    const transitionDurations = getStyleProperties(TRANSITION + 'Duration');
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(ANIMATION + 'Delay');
    const animationDurations = getStyleProperties(ANIMATION + 'Duration');
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    /* istanbul ignore if */ if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);
    return {
        type,
        timeout,
        propCount,
        hasTransform
    };
}
function getTimeout(delays, durations) {
    while(delays.length < durations.length)delays = delays.concat(delays);
    return Math.max(...durations.map((d, i)=>toMs(d) + toMs(delays[i])
    ));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer
// numbers in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down
// (i.e. acting as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
// synchronously force layout to put elements into a certain state
function forceReflow() {
    return document.body.offsetHeight;
}
const positionMap = new WeakMap();
const newPositionMap = new WeakMap();
const TransitionGroupImpl = {
    name: 'TransitionGroup',
    props: /*#__PURE__*/ shared.extend({
    }, TransitionPropsValidators, {
        tag: String,
        moveClass: String
    }),
    setup (props, { slots  }) {
        const instance = runtimeCore.getCurrentInstance();
        const state = runtimeCore.useTransitionState();
        let prevChildren;
        let children;
        runtimeCore.onUpdated(()=>{
            // children is guaranteed to exist after initial render
            if (!prevChildren.length) return;
            const moveClass = props.moveClass || `${props.name || 'v'}-move`;
            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) return;
            // we divide the work into three loops to avoid mixing DOM reads and writes
            // in each iteration - which helps prevent layout thrashing.
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            // force reflow to put everything in position
            forceReflow();
            movedChildren.forEach((c)=>{
                const el = c.el;
                const style = el.style;
                addTransitionClass(el, moveClass);
                style.transform = style.webkitTransform = style.transitionDuration = '';
                const cb = el._moveCb = (e)=>{
                    if (e && e.target !== el) return;
                    if (!e || /transform$/.test(e.propertyName)) {
                        el.removeEventListener('transitionend', cb);
                        el._moveCb = null;
                        removeTransitionClass(el, moveClass);
                    }
                };
                el.addEventListener('transitionend', cb);
            });
        });
        return ()=>{
            const rawProps = runtimeCore.toRaw(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || runtimeCore.Fragment;
            prevChildren = children;
            children = slots.default ? runtimeCore.getTransitionRawChildren(slots.default()) : [];
            for(let i = 0; i < children.length; i++){
                const child = children[i];
                if (child.key != null) runtimeCore.setTransitionHooks(child, runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance));
                else runtimeCore.warn(`<TransitionGroup> children must be keyed.`);
            }
            if (prevChildren) for(let i1 = 0; i1 < prevChildren.length; i1++){
                const child = prevChildren[i1];
                runtimeCore.setTransitionHooks(child, runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance));
                positionMap.set(child, child.el.getBoundingClientRect());
            }
            return runtimeCore.createVNode(tag, null, children);
        };
    }
};
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
    const el = c.el;
    if (el._moveCb) el._moveCb();
    if (el._enterCb) el._enterCb();
}
function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = '0s';
        return c;
    }
}
function hasCSSTransform(el, root, moveClass) {
    // Detect whether an element with the move class applied has
    // CSS transitions. Since the element may be inside an entering
    // transition at this very moment, we make a clone of it and remove
    // all other transition classes applied to ensure only the move class
    // is applied.
    const clone = el.cloneNode();
    if (el._vtc) el._vtc.forEach((cls)=>{
        cls.split(/\s+/).forEach((c)=>c && clone.classList.remove(c)
        );
    });
    moveClass.split(/\s+/).forEach((c)=>c && clone.classList.add(c)
    );
    clone.style.display = 'none';
    const container = root.nodeType === 1 ? root : root.parentNode;
    container.appendChild(clone);
    const { hasTransform  } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
}
const getModelAssigner = (vnode)=>{
    const fn = vnode.props['onUpdate:modelValue'];
    return shared.isArray(fn) ? (value)=>shared.invokeArrayFns(fn, value)
     : fn;
};
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
        target.composing = false;
        trigger(target, 'input');
    }
}
function trigger(el, type) {
    const e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
}
// We are exporting the v-model runtime directly as vnode hooks so that it can
// be tree-shaken in case v-model is never used.
const vModelText = {
    created (el, { modifiers: { lazy , trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || el.type === 'number';
        addEventListener(el, lazy ? 'change' : 'input', (e)=>{
            if (e.target.composing) return;
            let domValue = el.value;
            if (trim) domValue = domValue.trim();
            else if (castToNumber) domValue = shared.toNumber(domValue);
            el._assign(domValue);
        });
        if (trim) addEventListener(el, 'change', ()=>{
            el.value = el.value.trim();
        });
        if (!lazy) {
            addEventListener(el, 'compositionstart', onCompositionStart);
            addEventListener(el, 'compositionend', onCompositionEnd);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            addEventListener(el, 'change', onCompositionEnd);
        }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted (el, { value  }) {
        el.value = value == null ? '' : value;
    },
    beforeUpdate (el, { value , modifiers: { trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        // avoid clearing unresolved text. #2302
        if (el.composing) return;
        if (document.activeElement === el) {
            if (trim && el.value.trim() === value) return;
            if ((number || el.type === 'number') && shared.toNumber(el.value) === value) return;
        }
        const newValue = value == null ? '' : value;
        if (el.value !== newValue) el.value = newValue;
    }
};
const vModelCheckbox = {
    created (el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', ()=>{
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el._assign;
            if (shared.isArray(modelValue)) {
                const index = shared.looseIndexOf(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) assign(modelValue.concat(elementValue));
                else if (!checked && found) {
                    const filtered = [
                        ...modelValue
                    ];
                    filtered.splice(index, 1);
                    assign(filtered);
                }
            } else if (shared.isSet(modelValue)) {
                const cloned = new Set(modelValue);
                if (checked) cloned.add(elementValue);
                else cloned.delete(elementValue);
                assign(cloned);
            } else assign(getCheckboxValue(el, checked));
        });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate (el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
    }
};
function setChecked(el, { value , oldValue  }, vnode) {
    el._modelValue = value;
    if (shared.isArray(value)) el.checked = shared.looseIndexOf(value, vnode.props.value) > -1;
    else if (shared.isSet(value)) el.checked = value.has(vnode.props.value);
    else if (value !== oldValue) el.checked = shared.looseEqual(value, getCheckboxValue(el, true));
}
const vModelRadio = {
    created (el, { value  }, vnode) {
        el.checked = shared.looseEqual(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', ()=>{
            el._assign(getValue(el));
        });
    },
    beforeUpdate (el, { value , oldValue  }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) el.checked = shared.looseEqual(value, vnode.props.value);
    }
};
const vModelSelect = {
    created (el, { value , modifiers: { number  }  }, vnode) {
        const isSetModel = shared.isSet(value);
        addEventListener(el, 'change', ()=>{
            const selectedVal = Array.prototype.filter.call(el.options, (o)=>o.selected
            ).map((o)=>number ? shared.toNumber(getValue(o)) : getValue(o)
            );
            el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
    },
    // set value in mounted & updated because <select> relies on its children
    // <option>s.
    mounted (el, { value  }) {
        setSelected(el, value);
    },
    beforeUpdate (el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
    },
    updated (el, { value  }) {
        setSelected(el, value);
    }
};
function setSelected(el, value) {
    const isMultiple = el.multiple;
    if (isMultiple && !shared.isArray(value) && !shared.isSet(value)) {
        runtimeCore.warn(`<select multiple v-model> expects an Array or Set value for its binding, ` + `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
        return;
    }
    for(let i = 0, l = el.options.length; i < l; i++){
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
            if (shared.isArray(value)) option.selected = shared.looseIndexOf(value, optionValue) > -1;
            else option.selected = value.has(optionValue);
        } else if (shared.looseEqual(getValue(option), value)) {
            if (el.selectedIndex !== i) el.selectedIndex = i;
            return;
        }
    }
    if (!isMultiple && el.selectedIndex !== -1) el.selectedIndex = -1;
}
// retrieve raw value set via :value bindings
function getValue(el) {
    return '_value' in el ? el._value : el.value;
}
// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings
function getCheckboxValue(el, checked) {
    const key = checked ? '_trueValue' : '_falseValue';
    return key in el ? el[key] : checked;
}
const vModelDynamic = {
    created (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'created');
    },
    mounted (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'mounted');
    },
    beforeUpdate (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');
    },
    updated (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'updated');
    }
};
function callModelHook(el, binding, vnode, prevVNode, hook) {
    let modelToUse;
    switch(el.tagName){
        case 'SELECT':
            modelToUse = vModelSelect;
            break;
        case 'TEXTAREA':
            modelToUse = vModelText;
            break;
        default:
            switch(vnode.props && vnode.props.type){
                case 'checkbox':
                    modelToUse = vModelCheckbox;
                    break;
                case 'radio':
                    modelToUse = vModelRadio;
                    break;
                default:
                    modelToUse = vModelText;
            }
    }
    const fn = modelToUse[hook];
    fn && fn(el, binding, vnode, prevVNode);
}
vModelText.getSSRProps = ({ value  })=>({
        value
    })
;
vModelRadio.getSSRProps = ({ value  }, vnode)=>{
    if (vnode.props && shared.looseEqual(vnode.props.value, value)) return {
        checked: true
    };
};
vModelCheckbox.getSSRProps = ({ value  }, vnode)=>{
    if (shared.isArray(value)) {
        if (vnode.props && shared.looseIndexOf(value, vnode.props.value) > -1) return {
            checked: true
        };
    } else if (shared.isSet(value)) {
        if (vnode.props && value.has(vnode.props.value)) return {
            checked: true
        };
    } else if (value) return {
        checked: true
    };
};
const systemModifiers = [
    'ctrl',
    'shift',
    'alt',
    'meta'
];
const modifierGuards = {
    stop: (e)=>e.stopPropagation()
    ,
    prevent: (e)=>e.preventDefault()
    ,
    self: (e)=>e.target !== e.currentTarget
    ,
    ctrl: (e)=>!e.ctrlKey
    ,
    shift: (e)=>!e.shiftKey
    ,
    alt: (e)=>!e.altKey
    ,
    meta: (e)=>!e.metaKey
    ,
    left: (e)=>'button' in e && e.button !== 0
    ,
    middle: (e)=>'button' in e && e.button !== 1
    ,
    right: (e)=>'button' in e && e.button !== 2
    ,
    exact: (e, modifiers)=>systemModifiers.some((m)=>e[`${m}Key`] && !modifiers.includes(m)
        )
};
/**
 * @private
 */ const withModifiers = (fn, modifiers)=>{
    return (event, ...args)=>{
        for(let i = 0; i < modifiers.length; i++){
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers)) return;
        }
        return fn(event, ...args);
    };
};
// Kept for 2.x compat.
// Note: IE11 compat for `spacebar` and `del` is removed for now.
const keyNames = {
    esc: 'escape',
    space: ' ',
    up: 'arrow-up',
    left: 'arrow-left',
    right: 'arrow-right',
    down: 'arrow-down',
    delete: 'backspace'
};
/**
 * @private
 */ const withKeys = (fn, modifiers)=>{
    return (event)=>{
        if (!('key' in event)) return;
        const eventKey = shared.hyphenate(event.key);
        if (modifiers.some((k)=>k === eventKey || keyNames[k] === eventKey
        )) return fn(event);
    };
};
const vShow = {
    beforeMount (el, { value  }, { transition  }) {
        el._vod = el.style.display === 'none' ? '' : el.style.display;
        if (transition && value) transition.beforeEnter(el);
        else setDisplay(el, value);
    },
    mounted (el, { value  }, { transition  }) {
        if (transition && value) transition.enter(el);
    },
    updated (el, { value , oldValue  }, { transition  }) {
        if (!value === !oldValue) return;
        if (transition) {
            if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
            } else transition.leave(el, ()=>{
                setDisplay(el, false);
            });
        } else setDisplay(el, value);
    },
    beforeUnmount (el, { value  }) {
        setDisplay(el, value);
    }
};
vShow.getSSRProps = ({ value  })=>{
    if (!value) return {
        style: {
            display: 'none'
        }
    };
};
function setDisplay(el, value) {
    el.style.display = value ? el._vod : 'none';
}
const rendererOptions = shared.extend({
    patchProp,
    forcePatchProp
}, nodeOps);
// lazy create the renderer - this makes core renderer logic tree-shakable
// in case the user only imports reactivity utilities from Vue.
let renderer;
let enabledHydration = false;
function ensureRenderer() {
    return renderer || (renderer = runtimeCore.createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
    renderer = enabledHydration ? renderer : runtimeCore.createHydrationRenderer(rendererOptions);
    enabledHydration = true;
    return renderer;
}
// use explicit type casts here to avoid import() calls in rolled-up d.ts
const render = (...args)=>{
    ensureRenderer().render(...args);
};
const hydrate = (...args)=>{
    ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args)=>{
    const app = ensureRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (!container) return;
        const component = app._component;
        if (!shared.isFunction(component) && !component.render && !component.template) // __UNSAFE__
        // Reason: potential execution of JS expressions in in-DOM template.
        // The user must make sure the in-DOM template is trusted. If it's
        // rendered by the server, the template should not contain any user data.
        component.template = container.innerHTML;
        // clear content before mounting
        container.innerHTML = '';
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
            container.removeAttribute('v-cloak');
            container.setAttribute('data-v-app', '');
        }
        return proxy;
    };
    return app;
};
const createSSRApp = (...args)=>{
    const app = ensureHydrationRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (container) return mount(container, true, container instanceof SVGElement);
    };
    return app;
};
function injectNativeTagCheck(app) {
    // Inject `isNativeTag`
    // this is used for component name validation (dev only)
    Object.defineProperty(app.config, 'isNativeTag', {
        value: (tag)=>shared.isHTMLTag(tag) || shared.isSVGTag(tag)
        ,
        writable: false
    });
}
// dev only
function injectCompilerOptionsCheck(app) {
    if (runtimeCore.isRuntimeOnly()) {
        const isCustomElement = app.config.isCustomElement;
        Object.defineProperty(app.config, 'isCustomElement', {
            get () {
                return isCustomElement;
            },
            set () {
                runtimeCore.warn(`The \`isCustomElement\` config option is deprecated. Use ` + `\`compilerOptions.isCustomElement\` instead.`);
            }
        });
        const compilerOptions = app.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using ` + `a build of Vue.js that includes the runtime compiler (aka "full build"). ` + `Since you are using the runtime-only build, \`compilerOptions\` ` + `must be passed to \`@vue/compiler-dom\` in the build setup instead.\n` + `- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.\n` + `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n` + `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
        Object.defineProperty(app.config, 'compilerOptions', {
            get () {
                runtimeCore.warn(msg);
                return compilerOptions;
            },
            set () {
                runtimeCore.warn(msg);
            }
        });
    }
}
function normalizeContainer(container) {
    if (shared.isString(container)) {
        const res = document.querySelector(container);
        if (!res) runtimeCore.warn(`Failed to mount app: mount target selector "${container}" returned null.`);
        return res;
    }
    if (container instanceof window.ShadowRoot && container.mode === 'closed') runtimeCore.warn(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
    return container;
}
Object.keys(runtimeCore).forEach(function(k) {
    if (k !== 'default') exports[k] = runtimeCore[k];
});
exports.Transition = Transition;
exports.TransitionGroup = TransitionGroup;
exports.createApp = createApp;
exports.createSSRApp = createSSRApp;
exports.hydrate = hydrate;
exports.render = render;
exports.useCssModule = useCssModule;
exports.useCssVars = useCssVars;
exports.vModelCheckbox = vModelCheckbox;
exports.vModelDynamic = vModelDynamic;
exports.vModelRadio = vModelRadio;
exports.vModelSelect = vModelSelect;
exports.vModelText = vModelText;
exports.vShow = vShow;
exports.withKeys = withKeys;
exports.withModifiers = withModifiers;

},{"@vue/runtime-core":"3IWFZ","@vue/shared":"4sn3I"}],"3IWFZ":[function(require,module,exports) {
'use strict';
module.exports = require('./dist/runtime-core.cjs.js');

},{"./dist/runtime-core.cjs.js":"3eR9k"}],"3eR9k":[function(require,module,exports) {
var global = arguments[3];
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var reactivity = require('@vue/reactivity');
var shared = require('@vue/shared');
const stack = [];
function pushWarningContext(vnode) {
    stack.push(vnode);
}
function popWarningContext() {
    stack.pop();
}
function warn(msg, ...args) {
    // avoid props formatting or warn handler tracking deps that might be mutated
    // during patch, leading to infinite recursion.
    reactivity.pauseTracking();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) callWithErrorHandling(appWarnHandler, instance, 11/* APP_WARN_HANDLER */ , [
        msg + args.join(''),
        instance && instance.proxy,
        trace.map(({ vnode  })=>`at <${formatComponentName(instance, vnode.type)}>`
        ).join('\n'),
        trace
    ]);
    else {
        const warnArgs = [
            `[Vue warn]: ${msg}`,
            ...args
        ];
        /* istanbul ignore if */ if (trace.length && // avoid spamming console during tests
        true) warnArgs.push(`\n`, ...formatTrace(trace));
        console.warn(...warnArgs);
    }
    reactivity.resetTracking();
}
function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) return [];
    // we can't just use the stack because it will be incomplete during updates
    // that did not start from the root. Re-construct the parent chain using
    // instance parent pointers.
    const normalizedStack = [];
    while(currentVNode){
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) last.recurseCount++;
        else normalizedStack.push({
            vnode: currentVNode,
            recurseCount: 0
        });
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
}
/* istanbul ignore next */ function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i)=>{
        logs.push(...i === 0 ? [] : [
            `\n`
        ], ...formatTraceEntry(entry));
    });
    return logs;
}
function formatTraceEntry({ vnode , recurseCount  }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
    const close = `>` + postfix;
    return vnode.props ? [
        open,
        ...formatProps(vnode.props),
        close
    ] : [
        open + close
    ];
}
/* istanbul ignore next */ function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach((key)=>{
        res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) res.push(` ...`);
    return res;
}
/* istanbul ignore next */ function formatProp(key, value, raw) {
    if (shared.isString(value)) {
        value = JSON.stringify(value);
        return raw ? value : [
            `${key}=${value}`
        ];
    } else if (typeof value === 'number' || typeof value === 'boolean' || value == null) return raw ? value : [
        `${key}=${value}`
    ];
    else if (reactivity.isRef(value)) {
        value = formatProp(key, reactivity.toRaw(value.value), true);
        return raw ? value : [
            `${key}=Ref<`,
            value,
            `>`
        ];
    } else if (shared.isFunction(value)) return [
        `${key}=fn${value.name ? `<${value.name}>` : ``}`
    ];
    else {
        value = reactivity.toRaw(value);
        return raw ? value : [
            `${key}=`,
            value
        ];
    }
}
const ErrorTypeStrings = {
    ["bc"]: 'beforeCreate hook',
    ["c"]: 'created hook',
    ["bm"]: 'beforeMount hook',
    ["m"]: 'mounted hook',
    ["bu"]: 'beforeUpdate hook',
    ["u"]: 'updated',
    ["bum"]: 'beforeUnmount hook',
    ["um"]: 'unmounted hook',
    ["a"]: 'activated hook',
    ["da"]: 'deactivated hook',
    ["ec"]: 'errorCaptured hook',
    ["rtc"]: 'renderTracked hook',
    ["rtg"]: 'renderTriggered hook',
    [0]: 'setup function',
    [1]: 'render function',
    [2]: 'watcher getter',
    [3]: 'watcher callback',
    [4]: 'watcher cleanup function',
    [5]: 'native event handler',
    [6]: 'component event handler',
    [7]: 'vnode hook',
    [8]: 'directive hook',
    [9]: 'transition hook',
    [10]: 'app errorHandler',
    [11]: 'app warnHandler',
    [12]: 'ref function',
    [13]: 'async component loader',
    [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next"
};
function callWithErrorHandling(fn, instance, type, args) {
    let res;
    try {
        res = args ? fn(...args) : fn();
    } catch (err) {
        handleError(err, instance, type);
    }
    return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
    if (shared.isFunction(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && shared.isPromise(res)) res.catch((err)=>{
            handleError(err, instance, type);
        });
        return res;
    }
    const values = [];
    for(let i = 0; i < fn.length; i++)values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    return values;
}
function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    if (instance) {
        let cur = instance.parent;
        // the exposed instance is the render proxy to keep it consistent with 2.x
        const exposedInstance = instance.proxy;
        // in production the hook receives only the error code
        const errorInfo = ErrorTypeStrings[type];
        while(cur){
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) for(let i = 0; i < errorCapturedHooks.length; i++){
                if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) return;
            }
            cur = cur.parent;
        }
        // app-level handling
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
            callWithErrorHandling(appErrorHandler, null, 10/* APP_ERROR_HANDLER */ , [
                err,
                exposedInstance,
                errorInfo
            ]);
            return;
        }
    }
    logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
    {
        const info = ErrorTypeStrings[type];
        if (contextVNode) pushWarningContext(contextVNode);
        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
        if (contextVNode) popWarningContext();
        // crash in dev by default so it's more noticeable
        if (throwInDev) throw err;
        else console.error(err);
    }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
    const p = currentFlushPromise || resolvedPromise;
    return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
// #2768
// Use binary-search to find a suitable position in the queue,
// so that the queue maintains the increasing order of job's id,
// which can prevent the job from being skipped and also can avoid repeated patching.
function findInsertionIndex(job) {
    // the start index should be `flushIndex + 1`
    let start = flushIndex + 1;
    let end = queue.length;
    const jobId = getId(job);
    while(start < end){
        const middle = start + end >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < jobId ? start = middle + 1 : end = middle;
    }
    return start;
}
function queueJob(job) {
    // the dedupe search uses the startIndex argument of Array.includes()
    // by default the search index includes the current job that is being run
    // so it cannot recursively trigger itself again.
    // if the job is a watch() callback, the search will start with a +1 index to
    // allow it recursively trigger itself - it is the user's responsibility to
    // ensure it doesn't end up in an infinite loop.
    if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
        const pos = findInsertionIndex(job);
        if (pos > -1) queue.splice(pos, 0, job);
        else queue.push(job);
        queueFlush();
    }
}
function queueFlush() {
    if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
    }
}
function invalidateJob(job) {
    const i = queue.indexOf(job);
    if (i > flushIndex) queue.splice(i, 1);
}
function queueCb(cb, activeQueue, pendingQueue, index) {
    if (!shared.isArray(cb)) {
        if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) pendingQueue.push(cb);
    } else // if cb is an array, it is a component lifecycle hook which can only be
    // triggered by a job, which is already deduped in the main queue, so
    // we can skip duplicate check here to improve perf
    pendingQueue.push(...cb);
    queueFlush();
}
function queuePreFlushCb(cb) {
    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
    if (pendingPreFlushCbs.length) {
        currentPreFlushParentJob = parentJob;
        activePreFlushCbs = [
            ...new Set(pendingPreFlushCbs)
        ];
        pendingPreFlushCbs.length = 0;
        seen = seen || new Map();
        for(preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++){
            if (checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) continue;
            activePreFlushCbs[preFlushIndex]();
        }
        activePreFlushCbs = null;
        preFlushIndex = 0;
        currentPreFlushParentJob = null;
        // recursively flush until it drains
        flushPreFlushCbs(seen, parentJob);
    }
}
function flushPostFlushCbs(seen) {
    if (pendingPostFlushCbs.length) {
        const deduped = [
            ...new Set(pendingPostFlushCbs)
        ];
        pendingPostFlushCbs.length = 0;
        // #1947 already has active queue, nested flushPostFlushCbs call
        if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
        }
        activePostFlushCbs = deduped;
        seen = seen || new Map();
        activePostFlushCbs.sort((a, b)=>getId(a) - getId(b)
        );
        for(postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++){
            if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) continue;
            activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
    }
}
const getId = (job)=>job.id == null ? Infinity : job.id
;
function flushJobs(seen) {
    isFlushPending = false;
    isFlushing = true;
    seen = seen || new Map();
    flushPreFlushCbs(seen);
    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child so its render effect will have smaller
    //    priority number)
    // 2. If a component is unmounted during a parent component's update,
    //    its update can be skipped.
    queue.sort((a, b)=>getId(a) - getId(b)
    );
    try {
        for(flushIndex = 0; flushIndex < queue.length; flushIndex++){
            const job = queue[flushIndex];
            if (job && job.active !== false) {
                if (checkRecursiveUpdates(seen, job)) continue;
                callWithErrorHandling(job, null, 14/* SCHEDULER */ );
            }
        }
    } finally{
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs(seen);
        isFlushing = false;
        currentFlushPromise = null;
        // some postFlushCb queued jobs!
        // keep flushing until it drains.
        if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) flushJobs(seen);
    }
}
function checkRecursiveUpdates(seen, fn) {
    if (!seen.has(fn)) seen.set(fn, 1);
    else {
        const count = seen.get(fn);
        if (count > RECURSION_LIMIT) {
            const instance = fn.ownerInstance;
            const componentName = instance && getComponentName(instance.type);
            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` + `This means you have a reactive effect that is mutating its own ` + `dependencies and thus recursively triggering itself. Possible sources ` + `include component template, render function, updated hook or ` + `watcher source function.`);
            return true;
        } else seen.set(fn, count + 1);
    }
}
/* eslint-disable no-restricted-globals */ let isHmrUpdating = false;
const hmrDirtyComponents = new Set();
// Expose the HMR runtime on the global object
// This makes it entirely tree-shakable without polluting the exports and makes
// it easier to be used in toolings like vue-loader
// Note: for a component to be eligible for HMR it also needs the __hmrId option
// to be set so that its instances can be registered / removed.
{
    const globalObject = typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {
    };
    globalObject.__VUE_HMR_RUNTIME__ = {
        createRecord: tryWrap(createRecord),
        rerender: tryWrap(rerender),
        reload: tryWrap(reload)
    };
}const map = new Map();
function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
        createRecord(id, instance.type);
        record = map.get(id);
    }
    record.instances.add(instance);
}
function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, component) {
    if (!component) {
        warn(`HMR API usage is out of date.\n` + `Please upgrade vue-loader/vite/rollup-plugin-vue or other relevant ` + `dependency that handles Vue SFC compilation.`);
        component = {
        };
    }
    if (map.has(id)) return false;
    map.set(id, {
        component: isClassComponent(component) ? component.__vccOpts : component,
        instances: new Set()
    });
    return true;
}
function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) return;
    if (newRender) record.component.render = newRender;
    // Array.from creates a snapshot which avoids the set being mutated during
    // updates
    Array.from(record.instances).forEach((instance)=>{
        if (newRender) instance.render = newRender;
        instance.renderCache = [];
        // this flag forces child components with slot content to update
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
    });
}
function reload(id, newComp) {
    const record = map.get(id);
    if (!record) return;
    // Array.from creates a snapshot which avoids the set being mutated during
    // updates
    const { component , instances  } = record;
    if (!hmrDirtyComponents.has(component)) {
        // 1. Update existing comp definition to match new one
        newComp = isClassComponent(newComp) ? newComp.__vccOpts : newComp;
        shared.extend(component, newComp);
        for(const key in component)if (key !== '__file' && !(key in newComp)) delete component[key];
        // 2. Mark component dirty. This forces the renderer to replace the component
        // on patch.
        hmrDirtyComponents.add(component);
        // 3. Make sure to unmark the component after the reload.
        queuePostFlushCb(()=>{
            hmrDirtyComponents.delete(component);
        });
    }
    Array.from(instances).forEach((instance)=>{
        if (instance.parent) // 4. Force the parent instance to re-render. This will cause all updated
        // components to be unmounted and re-mounted. Queue the update so that we
        // don't end up forcing the same parent to re-render multiple times.
        queueJob(instance.parent.update);
        else if (instance.appContext.reload) // root instance mounted via createApp() has a reload method
        instance.appContext.reload();
        else if (typeof window !== 'undefined') // root instance inside tree created via raw render(). Force reload.
        window.location.reload();
        else console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');
    });
}
function tryWrap(fn) {
    return (id, arg)=>{
        try {
            return fn(id, arg);
        } catch (e) {
            console.error(e);
            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` + `Full reload required.`);
        }
    };
}
function setDevtoolsHook(hook) {
    exports.devtools = hook;
}
function devtoolsInitApp(app, version) {
    // TODO queue if devtools is undefined
    if (!exports.devtools) return;
    exports.devtools.emit("app:init"/* APP_INIT */ , app, version, {
        Fragment,
        Text: Text1,
        Comment: Comment$1,
        Static
    });
}
function devtoolsUnmountApp(app) {
    if (!exports.devtools) return;
    exports.devtools.emit("app:unmount"/* APP_UNMOUNT */ , app);
}
const devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook("component:added"/* COMPONENT_ADDED */ );
const devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook("component:updated"/* COMPONENT_UPDATED */ );
const devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook("component:removed"/* COMPONENT_REMOVED */ );
function createDevtoolsComponentHook(hook) {
    return (component)=>{
        if (!exports.devtools) return;
        exports.devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);
    };
}
const devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:start"/* PERFORMANCE_START */ );
const devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:end"/* PERFORMANCE_END */ );
function createDevtoolsPerformanceHook(hook) {
    return (component, type, time)=>{
        if (!exports.devtools) return;
        exports.devtools.emit(hook, component.appContext.app, component.uid, component, type, time);
    };
}
function devtoolsComponentEmit(component, event, params) {
    if (!exports.devtools) return;
    exports.devtools.emit("component:emit"/* COMPONENT_EMIT */ , component.appContext.app, component, event, params);
}
const deprecationData = {
    ["GLOBAL_MOUNT"]: {
        message: `The global app bootstrapping API has changed: vm.$mount() and the "el" ` + `option have been removed. Use createApp(RootComponent).mount() instead.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#mounting-app-instance`
    },
    ["GLOBAL_MOUNT_CONTAINER"]: {
        message: `Vue detected directives on the mount container. ` + `In Vue 3, the container is no longer considered part of the template ` + `and will not be processed/replaced.`,
        link: `https://v3.vuejs.org/guide/migration/mount-changes.html`
    },
    ["GLOBAL_EXTEND"]: {
        message: `Vue.extend() has been removed in Vue 3. ` + `Use defineComponent() instead.`,
        link: `https://v3.vuejs.org/api/global-api.html#definecomponent`
    },
    ["GLOBAL_PROTOTYPE"]: {
        message: `Vue.prototype is no longer available in Vue 3. ` + `Use app.config.globalProperties instead.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#vue-prototype-replaced-by-config-globalproperties`
    },
    ["GLOBAL_SET"]: {
        message: `Vue.set() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["GLOBAL_DELETE"]: {
        message: `Vue.delete() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["GLOBAL_OBSERVABLE"]: {
        message: `Vue.observable() has been removed. ` + `Use \`import { reactive } from "vue"\` from Composition API instead.`,
        link: `https://v3.vuejs.org/api/basic-reactivity.html`
    },
    ["GLOBAL_PRIVATE_UTIL"]: {
        message: `Vue.util has been removed. Please refactor to avoid its usage ` + `since it was an internal API even in Vue 2.`
    },
    ["CONFIG_SILENT"]: {
        message: `config.silent has been removed because it is not good practice to ` + `intentionally suppress warnings. You can use your browser console's ` + `filter features to focus on relevant messages.`
    },
    ["CONFIG_DEVTOOLS"]: {
        message: `config.devtools has been removed. To enable devtools for ` + `production, configure the __VUE_PROD_DEVTOOLS__ compile-time flag.`,
        link: `https://github.com/vuejs/vue-next/tree/master/packages/vue#bundler-build-feature-flags`
    },
    ["CONFIG_KEY_CODES"]: {
        message: `config.keyCodes has been removed. ` + `In Vue 3, you can directly use the kebab-case key names as v-on modifiers.`,
        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`
    },
    ["CONFIG_PRODUCTION_TIP"]: {
        message: `config.productionTip has been removed.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-productiontip-removed`
    },
    ["CONFIG_IGNORED_ELEMENTS"]: {
        message: ()=>{
            let msg = `config.ignoredElements has been removed.`;
            if (isRuntimeOnly()) msg += ` Pass the "isCustomElement" option to @vue/compiler-dom instead.`;
            else msg += ` Use config.isCustomElement instead.`;
            return msg;
        },
        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-ignoredelements-is-now-config-iscustomelement`
    },
    ["CONFIG_WHITESPACE"]: {
        // this warning is only relevant in the full build when using runtime
        // compilation, so it's put in the runtime compatConfig list.
        message: `Vue 3 compiler's whitespace option will default to "condense" instead of ` + `"preserve". To suppress this warning, provide an explicit value for ` + `\`config.compilerOptions.whitespace\`.`
    },
    ["CONFIG_OPTION_MERGE_STRATS"]: {
        message: `config.optionMergeStrategies no longer exposes internal strategies. ` + `Use custom merge functions instead.`
    },
    ["INSTANCE_SET"]: {
        message: `vm.$set() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["INSTANCE_DELETE"]: {
        message: `vm.$delete() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["INSTANCE_DESTROY"]: {
        message: `vm.$destroy() has been removed. Use app.unmount() instead.`,
        link: `https://v3.vuejs.org/api/application-api.html#unmount`
    },
    ["INSTANCE_EVENT_EMITTER"]: {
        message: `vm.$on/$once/$off() have been removed. ` + `Use an external event emitter library instead.`,
        link: `https://v3.vuejs.org/guide/migration/events-api.html`
    },
    ["INSTANCE_EVENT_HOOKS"]: {
        message: (event)=>`"${event}" lifecycle events are no longer supported. From templates, ` + `use the "vnode" prefix instead of "hook:". For example, @${event} ` + `should be changed to @vnode-${event.slice(5)}. ` + `From JavaScript, use Composition API to dynamically register lifecycle ` + `hooks.`
        ,
        link: `https://v3.vuejs.org/guide/migration/vnode-lifecycle-events.html`
    },
    ["INSTANCE_CHILDREN"]: {
        message: `vm.$children has been removed. Consider refactoring your logic ` + `to avoid relying on direct access to child components.`,
        link: `https://v3.vuejs.org/guide/migration/children.html`
    },
    ["INSTANCE_LISTENERS"]: {
        message: `vm.$listeners has been removed. In Vue 3, parent v-on listeners are ` + `included in vm.$attrs and it is no longer necessary to separately use ` + `v-on="$listeners" if you are already using v-bind="$attrs". ` + `(Note: the Vue 3 behavior only applies if this compat config is disabled)`,
        link: `https://v3.vuejs.org/guide/migration/listeners-removed.html`
    },
    ["INSTANCE_SCOPED_SLOTS"]: {
        message: `vm.$scopedSlots has been removed. Use vm.$slots instead.`,
        link: `https://v3.vuejs.org/guide/migration/slots-unification.html`
    },
    ["INSTANCE_ATTRS_CLASS_STYLE"]: {
        message: (componentName)=>`Component <${componentName || 'Anonymous'}> has \`inheritAttrs: false\` but is ` + `relying on class/style fallthrough from parent. In Vue 3, class/style ` + `are now included in $attrs and will no longer fallthrough when ` + `inheritAttrs is false. If you are already using v-bind="$attrs" on ` + `component root it should render the same end result. ` + `If you are binding $attrs to a non-root element and expecting ` + `class/style to fallthrough on root, you will need to now manually bind ` + `them on root via :class="$attrs.class".`
        ,
        link: `https://v3.vuejs.org/guide/migration/attrs-includes-class-style.html`
    },
    ["OPTIONS_DATA_FN"]: {
        message: `The "data" option can no longer be a plain object. ` + `Always use a function.`,
        link: `https://v3.vuejs.org/guide/migration/data-option.html`
    },
    ["OPTIONS_DATA_MERGE"]: {
        message: (key)=>`Detected conflicting key "${key}" when merging data option values. ` + `In Vue 3, data keys are merged shallowly and will override one another.`
        ,
        link: `https://v3.vuejs.org/guide/migration/data-option.html#mixin-merge-behavior-change`
    },
    ["OPTIONS_BEFORE_DESTROY"]: {
        message: `\`beforeDestroy\` has been renamed to \`beforeUnmount\`.`
    },
    ["OPTIONS_DESTROYED"]: {
        message: `\`destroyed\` has been renamed to \`unmounted\`.`
    },
    ["WATCH_ARRAY"]: {
        message: `"watch" option or vm.$watch on an array value will no longer ` + `trigger on array mutation unless the "deep" option is specified. ` + `If current usage is intended, you can disable the compat behavior and ` + `suppress this warning with:` + `\n\n  configureCompat({ ${"WATCH_ARRAY"}: false })\n`,
        link: `https://v3.vuejs.org/guide/migration/watch.html`
    },
    ["PROPS_DEFAULT_THIS"]: {
        message: (key)=>`props default value function no longer has access to "this". The compat ` + `build only offers access to this.$options.` + `(found in prop "${key}")`
        ,
        link: `https://v3.vuejs.org/guide/migration/props-default-this.html`
    },
    ["CUSTOM_DIR"]: {
        message: (legacyHook, newHook)=>`Custom directive hook "${legacyHook}" has been removed. ` + `Use "${newHook}" instead.`
        ,
        link: `https://v3.vuejs.org/guide/migration/custom-directives.html`
    },
    ["V_FOR_REF"]: {
        message: `Ref usage on v-for no longer creates array ref values in Vue 3. ` + `Consider using function refs or refactor to avoid ref usage altogether.`,
        link: `https://v3.vuejs.org/guide/migration/array-refs.html`
    },
    ["V_ON_KEYCODE_MODIFIER"]: {
        message: `Using keyCode as v-on modifier is no longer supported. ` + `Use kebab-case key name modifiers instead.`,
        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`
    },
    ["ATTR_FALSE_VALUE"]: {
        message: (name)=>`Attribute "${name}" with v-bind value \`false\` will render ` + `${name}="false" instead of removing it in Vue 3. To remove the attribute, ` + `use \`null\` or \`undefined\` instead. If the usage is intended, ` + `you can disable the compat behavior and suppress this warning with:` + `\n\n  configureCompat({ ${"ATTR_FALSE_VALUE"}: false })\n`
        ,
        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`
    },
    ["ATTR_ENUMERATED_COERCION"]: {
        message: (name, value, coerced)=>`Enumerated attribute "${name}" with v-bind value \`${value}\` will ` + `${value === null ? `be removed` : `render the value as-is`} instead of coercing the value to "${coerced}" in Vue 3. ` + `Always use explicit "true" or "false" values for enumerated attributes. ` + `If the usage is intended, ` + `you can disable the compat behavior and suppress this warning with:` + `\n\n  configureCompat({ ${"ATTR_ENUMERATED_COERCION"}: false })\n`
        ,
        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`
    },
    ["TRANSITION_CLASSES"]: {
        message: ``
    },
    ["TRANSITION_GROUP_ROOT"]: {
        message: `<TransitionGroup> no longer renders a root <span> element by ` + `default if no "tag" prop is specified. If you do not rely on the span ` + `for styling, you can disable the compat behavior and suppress this ` + `warning with:` + `\n\n  configureCompat({ ${"TRANSITION_GROUP_ROOT"}: false })\n`,
        link: `https://v3.vuejs.org/guide/migration/transition-group.html`
    },
    ["COMPONENT_ASYNC"]: {
        message: (comp)=>{
            const name = getComponentName(comp);
            return `Async component${name ? ` <${name}>` : `s`} should be explicitly created via \`defineAsyncComponent()\` ` + `in Vue 3. Plain functions will be treated as functional components in ` + `non-compat build. If you have already migrated all async component ` + `usage and intend to use plain functions for functional components, ` + `you can disable the compat behavior and suppress this ` + `warning with:` + `\n\n  configureCompat({ ${"COMPONENT_ASYNC"}: false })\n`;
        },
        link: `https://v3.vuejs.org/guide/migration/async-components.html`
    },
    ["COMPONENT_FUNCTIONAL"]: {
        message: (comp)=>{
            const name = getComponentName(comp);
            return `Functional component${name ? ` <${name}>` : `s`} should be defined as a plain function in Vue 3. The "functional" ` + `option has been removed. NOTE: Before migrating to use plain ` + `functions for functional components, first make sure that all async ` + `components usage have been migrated and its compat behavior has ` + `been disabled.`;
        },
        link: `https://v3.vuejs.org/guide/migration/functional-components.html`
    },
    ["COMPONENT_V_MODEL"]: {
        message: (comp)=>{
            const configMsg = `opt-in to ` + `Vue 3 behavior on a per-component basis with \`compatConfig: { ${"COMPONENT_V_MODEL"}: false }\`.`;
            if (comp.props && shared.isArray(comp.props) ? comp.props.includes('modelValue') : shared.hasOwn(comp.props, 'modelValue')) return `Component delcares "modelValue" prop, which is Vue 3 usage, but ` + `is running under Vue 2 compat v-model behavior. You can ${configMsg}`;
            return `v-model usage on component has changed in Vue 3. Component that expects ` + `to work with v-model should now use the "modelValue" prop and emit the ` + `"update:modelValue" event. You can update the usage and then ${configMsg}`;
        },
        link: `https://v3.vuejs.org/guide/migration/v-model.html`
    },
    ["RENDER_FUNCTION"]: {
        message: `Vue 3's render function API has changed. ` + `You can opt-in to the new API with:` + `\n\n  configureCompat({ ${"RENDER_FUNCTION"}: false })\n` + `\n  (This can also be done per-component via the "compatConfig" option.)`,
        link: `https://v3.vuejs.org/guide/migration/render-function-api.html`
    },
    ["FILTERS"]: {
        message: `filters have been removed in Vue 3. ` + `The "|" symbol will be treated as native JavaScript bitwise OR operator. ` + `Use method calls or computed properties instead.`,
        link: `https://v3.vuejs.org/guide/migration/filters.html`
    },
    ["PRIVATE_APIS"]: {
        message: (name)=>`"${name}" is a Vue 2 private API that no longer exists in Vue 3. ` + `If you are seeing this warning only due to a dependency, you can ` + `suppress this warning via { PRIVATE_APIS: 'supress-warning' }.`
    }
};
const instanceWarned = Object.create(null);
const warnCount = Object.create(null);
function warnDeprecation(key, instance, ...args) {
    instance = instance || getCurrentInstance();
    // check user config
    const config = getCompatConfigForKey(key, instance);
    if (config === 'suppress-warning') return;
    const dupKey = key + args.join('');
    let compId = instance && formatComponentName(instance, instance.type);
    if (compId === 'Anonymous' && instance) compId = instance.uid;
    // skip if the same warning is emitted for the same component type
    const componentDupKey = dupKey + compId;
    if (componentDupKey in instanceWarned) return;
    instanceWarned[componentDupKey] = true;
    // same warning, but different component. skip the long message and just
    // log the key and count.
    if (dupKey in warnCount) {
        warn(`(deprecation ${key}) (${(++warnCount[dupKey]) + 1})`);
        return;
    }
    warnCount[dupKey] = 0;
    const { message , link  } = deprecationData[key];
    warn(`(deprecation ${key}) ${typeof message === 'function' ? message(...args) : message}${link ? `\n  Details: ${link}` : ``}`);
    if (!isCompatEnabled(key, instance, true)) console.error(`^ The above deprecation's compat behavior is disabled and will likely ` + `lead to runtime errors.`);
}
const globalCompatConfig = {
    MODE: 2
};
function getCompatConfigForKey(key, instance) {
    const instanceConfig = instance && instance.type.compatConfig;
    if (instanceConfig && key in instanceConfig) return instanceConfig[key];
    return globalCompatConfig[key];
}
function isCompatEnabled(key, instance, enableForBuiltIn = false) {
    // skip compat for built-in components
    if (!enableForBuiltIn && instance && instance.type.__isBuiltIn) return false;
    const rawMode = getCompatConfigForKey('MODE', instance) || 2;
    const val = getCompatConfigForKey(key, instance);
    const mode = shared.isFunction(rawMode) ? rawMode(instance && instance.type) : rawMode;
    if (mode === 2) return val !== false;
    else return val === true || val === 'suppress-warning';
}
function emit(instance, event, ...rawArgs) {
    const props = instance.vnode.props || shared.EMPTY_OBJ;
    {
        const { emitsOptions , propsOptions: [propsOptions]  } = instance;
        if (emitsOptions) {
            if (!(event in emitsOptions) && true) {
                if (!propsOptions || !(shared.toHandlerKey(event) in propsOptions)) warn(`Component emitted event "${event}" but it is neither declared in ` + `the emits option nor as an "${shared.toHandlerKey(event)}" prop.`);
            } else {
                const validator = emitsOptions[event];
                if (shared.isFunction(validator)) {
                    const isValid = validator(...rawArgs);
                    if (!isValid) warn(`Invalid event arguments: event validation failed for event "${event}".`);
                }
            }
        }
    }
    let args = rawArgs;
    const isModelListener = event.startsWith('update:');
    // for v-model update:xxx events, apply modifiers on args
    const modelArg = isModelListener && event.slice(7);
    if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;
        const { number , trim  } = props[modifiersKey] || shared.EMPTY_OBJ;
        if (trim) args = rawArgs.map((a)=>a.trim()
        );
        else if (number) args = rawArgs.map(shared.toNumber);
    }
    devtoolsComponentEmit(instance, event, args);
    {
        const lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && props[shared.toHandlerKey(lowerCaseEvent)]) warn(`Event "${lowerCaseEvent}" is emitted in component ` + `${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". ` + `Note that HTML attributes are case-insensitive and you cannot use ` + `v-on to listen to camelCase events when using in-DOM templates. ` + `You should probably use "${shared.hyphenate(event)}" instead of "${event}".`);
    }
    let handlerName;
    let handler = props[handlerName = shared.toHandlerKey(event)] || // also try camelCase event handler (#2249)
    props[handlerName = shared.toHandlerKey(shared.camelize(event))];
    // for v-model update:xxx events, also trigger kebab-case equivalent
    // for props passed via kebab-case
    if (!handler && isModelListener) handler = props[handlerName = shared.toHandlerKey(shared.hyphenate(event))];
    if (handler) callWithAsyncErrorHandling(handler, instance, 6/* COMPONENT_EVENT_HANDLER */ , args);
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
        if (!instance.emitted) (instance.emitted = {
        })[handlerName] = true;
        else if (instance.emitted[handlerName]) return;
        callWithAsyncErrorHandling(onceHandler, instance, 6/* COMPONENT_EVENT_HANDLER */ , args);
    }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== undefined) return cached;
    const raw = comp.emits;
    let normalized = {
    };
    // apply mixin/extends props
    let hasExtends = false;
    if (!shared.isFunction(comp)) {
        const extendEmits = (raw1)=>{
            const normalizedFromExtend = normalizeEmitsOptions(raw1, appContext, true);
            if (normalizedFromExtend) {
                hasExtends = true;
                shared.extend(normalized, normalizedFromExtend);
            }
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendEmits);
        if (comp.extends) extendEmits(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendEmits);
    }
    if (!raw && !hasExtends) {
        cache.set(comp, null);
        return null;
    }
    if (shared.isArray(raw)) raw.forEach((key)=>normalized[key] = null
    );
    else shared.extend(normalized, raw);
    cache.set(comp, normalized);
    return normalized;
}
// Check if an incoming prop key is a declared emit event listener.
// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are
// both considered matched listeners.
function isEmitListener(options, key) {
    if (!options || !shared.isOn(key)) return false;
    key = key.slice(2).replace(/Once$/, '');
    return shared.hasOwn(options, key[0].toLowerCase() + key.slice(1)) || shared.hasOwn(options, shared.hyphenate(key)) || shared.hasOwn(options, key);
}
/**
 * mark the current rendering instance for asset resolution (e.g.
 * resolveComponent, resolveDirective) during render
 */ let currentRenderingInstance = null;
let currentScopeId = null;
/**
 * Note: rendering calls maybe nested. The function returns the parent rendering
 * instance if present, which should be restored after the render is done:
 *
 * ```js
 * const prev = setCurrentRenderingInstance(i)
 * // ...render
 * setCurrentRenderingInstance(prev)
 * ```
 */ function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = instance && instance.type.__scopeId || null;
    return prev;
}
/**
 * Set scope id when creating hoisted vnodes.
 * @private compiler helper
 */ function pushScopeId(id) {
    currentScopeId = id;
}
/**
 * Technically we no longer need this after 3.0.8 but we need to keep the same
 * API for backwards compat w/ code generated by compilers.
 * @private
 */ function popScopeId() {
    currentScopeId = null;
}
/**
 * Only for backwards compat
 * @private
 */ const withScopeId = (_id)=>withCtx
;
/**
 * Wrap a slot function to memoize current rendering instance
 * @private compiler helper
 */ function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot// false only
) {
    if (!ctx) return fn;
    // already normalized
    if (fn._n) return fn;
    const renderFnWithContext = (...args)=>{
        // If a user calls a compiled slot inside a template expression (#1745), it
        // can mess up block tracking, so by default we disable block tracking and
        // force bail out when invoking a compiled slot (indicated by the ._d flag).
        // This isn't necessary if rendering a compiled `<slot>`, so we flip the
        // ._d flag off when invoking the wrapped fn inside `renderSlot`.
        if (renderFnWithContext._d) setBlockTracking(-1);
        const prevInstance = setCurrentRenderingInstance(ctx);
        const res = fn(...args);
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) setBlockTracking(1);
        devtoolsComponentUpdated(ctx);
        return res;
    };
    // mark normalized to avoid duplicated wrapping
    renderFnWithContext._n = true;
    // mark this as compiled by default
    // this is used in vnode.ts -> normalizeChildren() to set the slot
    // rendering flag.
    renderFnWithContext._c = true;
    // disable block tracking by default
    renderFnWithContext._d = true;
    return renderFnWithContext;
}
/**
 * dev only flag to track whether $attrs was used during render.
 * If $attrs was used during render then the warning for failed attrs
 * fallthrough can be suppressed.
 */ let accessedAttrs = false;
function markAttrsAccessed() {
    accessedAttrs = true;
}
function renderComponentRoot(instance) {
    const { type: Component , vnode , proxy , withProxy , props , propsOptions: [propsOptions] , slots , attrs , emit: emit1 , render , renderCache , data , setupState , ctx , inheritAttrs  } = instance;
    let result;
    const prev = setCurrentRenderingInstance(instance);
    accessedAttrs = false;
    try {
        let fallthroughAttrs;
        if (vnode.shapeFlag & 4) {
            // withProxy is a proxy with a different `has` trap only for
            // runtime-compiled render functions using `with` block.
            const proxyToUse = withProxy || proxy;
            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
            fallthroughAttrs = attrs;
        } else {
            // functional
            const render1 = Component;
            // in dev, mark attrs accessed if optional props (attrs === props)
            if (attrs === props) markAttrsAccessed();
            result = normalizeVNode(render1.length > 1 ? render1(props, {
                get attrs () {
                    markAttrsAccessed();
                    return attrs;
                },
                slots,
                emit: emit1
            }) : render1(props, null));
            fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
        // attr merging
        // in dev mode, comments are preserved, and it's possible for a template
        // to have comments along side the root element which makes it a fragment
        let root = result;
        let setRoot = undefined;
        if (result.patchFlag > 0 && result.patchFlag & 2048) [root, setRoot] = getChildRoot(result);
        if (fallthroughAttrs && inheritAttrs !== false) {
            const keys = Object.keys(fallthroughAttrs);
            const { shapeFlag  } = root;
            if (keys.length) {
                if (shapeFlag & 1 || shapeFlag & 6) {
                    if (propsOptions && keys.some(shared.isModelListener)) // If a v-model listener (onUpdate:xxx) has a corresponding declared
                    // prop, it indicates this component expects to handle v-model and
                    // it should not fallthrough.
                    // related: #1543, #1643, #1989
                    fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
                    root = cloneVNode(root, fallthroughAttrs);
                } else if (!accessedAttrs && root.type !== Comment$1) {
                    const allAttrs = Object.keys(attrs);
                    const eventAttrs = [];
                    const extraAttrs = [];
                    for(let i = 0, l = allAttrs.length; i < l; i++){
                        const key = allAttrs[i];
                        if (shared.isOn(key)) // ignore v-model handlers when they fail to fallthrough
                        {
                            if (!shared.isModelListener(key)) // remove `on`, lowercase first letter to reflect event casing
                            // accurately
                            eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                        } else extraAttrs.push(key);
                    }
                    if (extraAttrs.length) warn(`Extraneous non-props attributes (` + `${extraAttrs.join(', ')}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes.`);
                    if (eventAttrs.length) warn(`Extraneous non-emits event listeners (` + `${eventAttrs.join(', ')}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes. ` + `If the listener is intended to be a component custom event listener only, ` + `declare it using the "emits" option.`);
                }
            }
        }
        // inherit directives
        if (vnode.dirs) {
            if (!isElementRoot(root)) warn(`Runtime directive used on component with non-element root node. ` + `The directives will not function as intended.`);
            root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
        }
        // inherit transition data
        if (vnode.transition) {
            if (!isElementRoot(root)) warn(`Component inside <Transition> renders non-element root node ` + `that cannot be animated.`);
            root.transition = vnode.transition;
        }
        if (setRoot) setRoot(root);
        else result = root;
    } catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1/* RENDER_FUNCTION */ );
        result = createVNode(Comment$1);
    }
    setCurrentRenderingInstance(prev);
    return result;
}
/**
 * dev only
 * In dev mode, template root level comments are rendered, which turns the
 * template into a fragment root, but we need to locate the single element
 * root for attrs and scope id processing.
 */ const getChildRoot = (vnode)=>{
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren);
    if (!childRoot) return [
        vnode,
        undefined
    ];
    const index = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot)=>{
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
            if (dynamicIndex > -1) dynamicChildren[dynamicIndex] = updatedRoot;
            else if (updatedRoot.patchFlag > 0) vnode.dynamicChildren = [
                ...dynamicChildren,
                updatedRoot
            ];
        }
    };
    return [
        normalizeVNode(childRoot),
        setRoot
    ];
};
function filterSingleRoot(children) {
    let singleRoot;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        if (isVNode(child)) // ignore user comment
        {
            if (child.type !== Comment$1 || child.children === 'v-if') {
                if (singleRoot) // has more than 1 non-comment child, return now
                return;
                else singleRoot = child;
            }
        } else return;
    }
    return singleRoot;
}
const getFunctionalFallthrough = (attrs)=>{
    let res;
    for(const key in attrs)if (key === 'class' || key === 'style' || shared.isOn(key)) (res || (res = {
    }))[key] = attrs[key];
    return res;
};
const filterModelListeners = (attrs, props)=>{
    const res = {
    };
    for(const key in attrs)if (!shared.isModelListener(key) || !(key.slice(9) in props)) res[key] = attrs[key];
    return res;
};
const isElementRoot = (vnode)=>{
    return vnode.shapeFlag & 6 || vnode.shapeFlag & 1 || vnode.type === Comment$1;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps , children: prevChildren , component  } = prevVNode;
    const { props: nextProps , children: nextChildren , patchFlag  } = nextVNode;
    const emits = component.emitsOptions;
    // Parent component's render function was hot-updated. Since this may have
    // caused the child component's slots content to have changed, we need to
    // force the child to update as well.
    if ((prevChildren || nextChildren) && isHmrUpdating) return true;
    // force child update for runtime directive or transition on component vnode.
    if (nextVNode.dirs || nextVNode.transition) return true;
    if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024) // slot content that references values that might have changed,
        // e.g. in a v-for
        return true;
        if (patchFlag & 16) {
            if (!prevProps) return !!nextProps;
            // presence of this flag indicates props are always non-null
            return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8) {
            const dynamicProps = nextVNode.dynamicProps;
            for(let i = 0; i < dynamicProps.length; i++){
                const key = dynamicProps[i];
                if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) return true;
            }
        }
    } else {
        // this path is only taken by manually written render functions
        // so presence of any children leads to a forced update
        if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) return true;
        }
        if (prevProps === nextProps) return false;
        if (!prevProps) return !!nextProps;
        if (!nextProps) return true;
        return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) return true;
    for(let i = 0; i < nextKeys.length; i++){
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) return true;
    }
    return false;
}
function updateHOCHostEl({ vnode , parent  }, el// HostNode
) {
    while(parent && parent.subTree === vnode){
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
    }
}
const isSuspense = (type)=>type.__isSuspense
;
// Suspense exposes a component-like API, and is treated like a component
// in the compiler, but internally it's a special built-in type that hooks
// directly into the renderer.
const SuspenseImpl = {
    name: 'Suspense',
    // In order to make Suspense tree-shakable, we need to avoid importing it
    // directly in the renderer. The renderer checks for the __isSuspense flag
    // on a vnode's type and calls the `process` method, passing in renderer
    // internals.
    __isSuspense: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, // platform-specific impl passed from renderer
    rendererInternals) {
        if (n1 == null) mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        else patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
    },
    hydrate: hydrateSuspense,
    create: createSuspenseBoundary,
    normalize: normalizeSuspenseChildren
};
// Force-casted public typing for h and TSX props inference
const Suspense = SuspenseImpl;
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    const { p: patch , o: { createElement  }  } = rendererInternals;
    const hiddenContainer = createElement('div');
    const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
    // start mounting the content subtree in an off-dom container
    patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
    // now check if we have encountered any async deps
    if (suspense.deps > 0) {
        // has async
        // mount the fallback tree
        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds);
        setActiveBranch(suspense, vnode.ssFallback);
    } else // Suspense has no async deps. Just resolve.
    suspense.resolve();
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch , um: unmount , o: { createElement  }  }) {
    const suspense = n2.suspense = n1.suspense;
    suspense.vnode = n2;
    n2.el = n1.el;
    const newBranch = n2.ssContent;
    const newFallback = n2.ssFallback;
    const { activeBranch , pendingBranch , isInFallback , isHydrating  } = suspense;
    if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
            // same root type but content may have changed.
            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) suspense.resolve();
            else if (isInFallback) {
                patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, newFallback);
            }
        } else {
            // toggled before pending tree is resolved
            suspense.pendingId++;
            if (isHydrating) {
                // if toggled before hydration is finished, the current DOM tree is
                // no longer valid. set it as the active branch so it will be unmounted
                // when resolved
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
            } else unmount(pendingBranch, parentComponent, suspense);
            // increment pending ID. this is used to invalidate async callbacks
            // reset suspense state
            suspense.deps = 0;
            // discard effects from pending branch
            suspense.effects.length = 0;
            // discard previous container
            suspense.hiddenContainer = createElement('div');
            if (isInFallback) {
                // already in fallback state
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
                else {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
                // toggled "back" to current active branch
                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                // force resolve
                suspense.resolve(true);
            } else {
                // switched to a 3rd branch
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
            }
        }
    } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        // root did not change, just normal patch
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        setActiveBranch(suspense, newBranch);
    } else {
        // root node toggled
        // invoke @pending event
        const onPending = n2.props && n2.props.onPending;
        if (shared.isFunction(onPending)) onPending();
        // mount pending branch in off-dom container
        suspense.pendingBranch = newBranch;
        suspense.pendingId++;
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) // incoming branch has no async deps, resolve now.
        suspense.resolve();
        else {
            const { timeout , pendingId  } = suspense;
            if (timeout > 0) setTimeout(()=>{
                if (suspense.pendingId === pendingId) suspense.fallback(newFallback);
            }, timeout);
            else if (timeout === 0) suspense.fallback(newFallback);
        }
    }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parent, parentComponent, container1, hiddenContainer, anchor1, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
    /* istanbul ignore if */ if (!hasWarned) {
        hasWarned = true;
        // @ts-ignore `console.info` cannot be null error
        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);
    }
    const { p: patch , m: move , um: unmount , n: next , o: { parentNode , remove  }  } = rendererInternals;
    const timeout = shared.toNumber(vnode.props && vnode.props.timeout);
    const suspense = {
        vnode,
        parent,
        parentComponent,
        isSVG,
        container: container1,
        hiddenContainer,
        anchor: anchor1,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === 'number' ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve (resume = false) {
            if (!resume && !suspense.pendingBranch) throw new Error(`suspense.resolve() is called without a pending branch.`);
            if (suspense.isUnmounted) throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
            const { vnode: vnode1 , activeBranch , pendingBranch , pendingId , effects , parentComponent: parentComponent1 , container: container1  } = suspense;
            if (suspense.isHydrating) suspense.isHydrating = false;
            else if (!resume) {
                const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === 'out-in';
                if (delayEnter) activeBranch.transition.afterLeave = ()=>{
                    if (pendingId === suspense.pendingId) move(pendingBranch, container1, anchor1, 0/* ENTER */ );
                };
                // this is initial anchor on mount
                let { anchor: anchor1  } = suspense;
                // unmount current active tree
                if (activeBranch) {
                    // if the fallback tree was mounted, it may have been moved
                    // as part of a parent suspense. get the latest anchor for insertion
                    anchor1 = next(activeBranch);
                    unmount(activeBranch, parentComponent1, suspense, true);
                }
                if (!delayEnter) // move content from off-dom container to actual container
                move(pendingBranch, container1, anchor1, 0/* ENTER */ );
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            // flush buffered effects
            // check if there is a pending parent suspense
            let parent1 = suspense.parent;
            let hasUnresolvedAncestor = false;
            while(parent1){
                if (parent1.pendingBranch) {
                    // found a pending parent suspense, merge buffered post jobs
                    // into that parent
                    parent1.effects.push(...effects);
                    hasUnresolvedAncestor = true;
                    break;
                }
                parent1 = parent1.parent;
            }
            // no pending parent suspense, flush all jobs
            if (!hasUnresolvedAncestor) queuePostFlushCb(effects);
            suspense.effects = [];
            // invoke @resolve event
            const onResolve = vnode1.props && vnode1.props.onResolve;
            if (shared.isFunction(onResolve)) onResolve();
        },
        fallback (fallbackVNode) {
            if (!suspense.pendingBranch) return;
            const { vnode: vnode1 , activeBranch , parentComponent: parentComponent1 , container: container1 , isSVG: isSVG1  } = suspense;
            // invoke @fallback event
            const onFallback = vnode1.props && vnode1.props.onFallback;
            if (shared.isFunction(onFallback)) onFallback();
            const anchor1 = next(activeBranch);
            const mountFallback = ()=>{
                if (!suspense.isInFallback) return;
                // mount the fallback tree
                patch(null, fallbackVNode, container1, anchor1, parentComponent1, null, isSVG1, slotScopeIds, optimized);
                setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';
            if (delayEnter) activeBranch.transition.afterLeave = mountFallback;
            // unmount current active branch
            unmount(activeBranch, parentComponent1, null, true// shouldRemove
            );
            suspense.isInFallback = true;
            if (!delayEnter) mountFallback();
        },
        move (container, anchor, type) {
            suspense.activeBranch && move(suspense.activeBranch, container, anchor, type);
            suspense.container = container;
        },
        next () {
            return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep (instance, setupRenderEffect) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) suspense.deps++;
            const hydratedEl = instance.vnode.el;
            instance.asyncDep.catch((err)=>{
                handleError(err, instance, 0/* SETUP_FUNCTION */ );
            }).then((asyncSetupResult)=>{
                // retry when the setup() promise resolves.
                // component may have been unmounted before resolve.
                if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) return;
                // retry from this component
                instance.asyncResolved = true;
                const { vnode: vnode1  } = instance;
                pushWarningContext(vnode1);
                handleSetupResult(instance, asyncSetupResult, false);
                if (hydratedEl) // vnode may have been replaced if an update happened before the
                // async dep is resolved.
                vnode1.el = hydratedEl;
                const placeholder = !hydratedEl && instance.subTree.el;
                setupRenderEffect(instance, vnode1, // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el), // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);
                if (placeholder) remove(placeholder);
                updateHOCHostEl(instance, vnode1.el);
                popWarningContext();
                // only decrease deps count if suspense is not already resolved
                if (isInPendingSuspense && (--suspense.deps) === 0) suspense.resolve();
            });
        },
        unmount (parentSuspense, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
            if (suspense.pendingBranch) unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
        }
    };
    return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
    /* eslint-disable no-restricted-globals */ const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true);
    // there are two possible scenarios for server-rendered suspense:
    // - success: ssr content should be fully resolved
    // - failure: ssr content should be the fallback branch.
    // however, on the client we don't really know if it has failed or not
    // attempt to hydrate the DOM assuming it has succeeded, but we still
    // need to construct a suspense boundary first
    const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
    if (suspense.deps === 0) suspense.resolve();
    return result;
/* eslint-enable no-restricted-globals */ }
function normalizeSuspenseChildren(vnode) {
    const { shapeFlag , children  } = vnode;
    const isSlotChildren = shapeFlag & 32/* SLOTS_CHILDREN */ ;
    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
    vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
    let block;
    if (shared.isFunction(s)) {
        const isCompiledSlot = s._c;
        if (isCompiledSlot) {
            // disableTracking: false
            // allow block tracking for compiled slots
            // (see ./componentRenderContext.ts)
            s._d = false;
            openBlock();
        }
        s = s();
        if (isCompiledSlot) {
            s._d = true;
            block = currentBlock;
            closeBlock();
        }
    }
    if (shared.isArray(s)) {
        const singleChild = filterSingleRoot(s);
        if (!singleChild) warn(`<Suspense> slots expect a single root node.`);
        s = singleChild;
    }
    s = normalizeVNode(s);
    if (block) s.dynamicChildren = block.filter((c)=>c !== s
    );
    return s;
}
function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
        if (shared.isArray(fn)) suspense.effects.push(...fn);
        else suspense.effects.push(fn);
    } else queuePostFlushCb(fn);
}
function setActiveBranch(suspense, branch) {
    suspense.activeBranch = branch;
    const { vnode , parentComponent  } = suspense;
    const el = vnode.el = branch.el;
    // in case suspense is the root node of a component,
    // recursively update the HOC el
    if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
    }
}
function provide(key, value) {
    if (!currentInstance) warn(`provide() can only be used inside setup().`);
    else {
        let provides = currentInstance.provides;
        // by default an instance inherits its parent's provides object
        // but when it needs to provide values of its own, it creates its
        // own provides object using parent provides object as prototype.
        // this way in `inject` we can simply look up injections from direct
        // parent and let the prototype chain do the work.
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) provides = currentInstance.provides = Object.create(parentProvides);
        // TS doesn't allow symbol as index type
        provides[key] = value;
    }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
    // fallback to `currentRenderingInstance` so that this can be called in
    // a functional component
    const instance = currentInstance || currentRenderingInstance;
    if (instance) {
        // #2400
        // to support `app.use` plugins,
        // fallback to appContext's `provides` if the intance is at root
        const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
        if (provides && key in provides) // TS doesn't allow symbol as index type
        return provides[key];
        else if (arguments.length > 1) return treatDefaultAsFactory && shared.isFunction(defaultValue) ? defaultValue() : defaultValue;
        else warn(`injection "${String(key)}" not found.`);
    } else warn(`inject() can only be used inside setup() or functional components.`);
}
// Simple effect.
function watchEffect(effect, options) {
    return doWatch(effect, null, options);
}
// initial value for watchers to trigger on undefined initial values
const INITIAL_WATCHER_VALUE = {
};
// implementation
function watch(source, cb, options) {
    if (!shared.isFunction(cb)) warn(`\`watch(fn, options?)\` signature has been moved to a separate API. ` + `Use \`watchEffect(fn, options?)\` instead. \`watch\` now only ` + `supports \`watch(source, cb, options?) signature.`);
    return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate , deep , flush , onTrack , onTrigger  } = shared.EMPTY_OBJ, instance = currentInstance) {
    if (!cb) {
        if (immediate !== undefined) warn(`watch() "immediate" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
        if (deep !== undefined) warn(`watch() "deep" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
    }
    const warnInvalidSource = (s)=>{
        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` + `a reactive object, or an array of these types.`);
    };
    let getter;
    let forceTrigger = false;
    let isMultiSource = false;
    if (reactivity.isRef(source)) {
        getter = ()=>source.value
        ;
        forceTrigger = !!source._shallow;
    } else if (reactivity.isReactive(source)) {
        getter = ()=>source
        ;
        deep = true;
    } else if (shared.isArray(source)) {
        isMultiSource = true;
        forceTrigger = source.some(reactivity.isReactive);
        getter = ()=>source.map((s)=>{
                if (reactivity.isRef(s)) return s.value;
                else if (reactivity.isReactive(s)) return traverse(s);
                else if (shared.isFunction(s)) return callWithErrorHandling(s, instance, 2/* WATCH_GETTER */ );
                else warnInvalidSource(s);
            })
        ;
    } else if (shared.isFunction(source)) {
        if (cb) // getter with cb
        getter = ()=>callWithErrorHandling(source, instance, 2/* WATCH_GETTER */ )
        ;
        else // no cb -> simple effect
        getter = ()=>{
            if (instance && instance.isUnmounted) return;
            if (cleanup) cleanup();
            return callWithAsyncErrorHandling(source, instance, 3/* WATCH_CALLBACK */ , [
                onInvalidate
            ]);
        };
    } else {
        getter = shared.NOOP;
        warnInvalidSource(source);
    }
    if (cb && deep) {
        const baseGetter = getter;
        getter = ()=>traverse(baseGetter())
        ;
    }
    let cleanup;
    let onInvalidate = (fn)=>{
        cleanup = runner.options.onStop = ()=>{
            callWithErrorHandling(fn, instance, 4/* WATCH_CLEANUP */ );
        };
    };
    // in SSR there is no need to setup an actual effect, and it should be noop
    // unless it's eager
    if (isInSSRComponentSetup) {
        // we will also not call the invalidate callback (+ runner is not set up)
        onInvalidate = shared.NOOP;
        if (!cb) getter();
        else if (immediate) callWithAsyncErrorHandling(cb, instance, 3/* WATCH_CALLBACK */ , [
            getter(),
            undefined,
            onInvalidate
        ]);
        return shared.NOOP;
    }
    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
    const job = ()=>{
        if (!runner.active) return;
        if (cb) {
            // watch(source, cb)
            const newValue = runner();
            if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i)=>shared.hasChanged(v, oldValue[i])
            ) : shared.hasChanged(newValue, oldValue)) || false) {
                // cleanup before running cb again
                if (cleanup) cleanup();
                callWithAsyncErrorHandling(cb, instance, 3/* WATCH_CALLBACK */ , [
                    newValue,
                    // pass undefined as the old value when it's changed for the first time
                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,
                    onInvalidate
                ]);
                oldValue = newValue;
            }
        } else // watchEffect
        runner();
    };
    // important: mark the job as a watcher callback so that scheduler knows
    // it is allowed to self-trigger (#1727)
    job.allowRecurse = !!cb;
    let scheduler;
    if (flush === 'sync') scheduler = job; // the scheduler function gets called directly
    else if (flush === 'post') scheduler = ()=>queuePostRenderEffect(job, instance && instance.suspense)
    ;
    else // default: 'pre'
    scheduler = ()=>{
        if (!instance || instance.isMounted) queuePreFlushCb(job);
        else // with 'pre' option, the first call must happen before
        // the component is mounted so it is called synchronously.
        job();
    };
    const runner = reactivity.effect(getter, {
        lazy: true,
        onTrack,
        onTrigger,
        scheduler
    });
    recordInstanceBoundEffect(runner, instance);
    // initial run
    if (cb) {
        if (immediate) job();
        else oldValue = runner();
    } else if (flush === 'post') queuePostRenderEffect(runner, instance && instance.suspense);
    else runner();
    return ()=>{
        reactivity.stop(runner);
        if (instance) shared.remove(instance.effects, runner);
    };
}
// this.$watch
function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = shared.isString(source) ? source.includes('.') ? createPathGetter(publicThis, source) : ()=>publicThis[source]
     : source.bind(publicThis, publicThis);
    let cb;
    if (shared.isFunction(value)) cb = value;
    else {
        cb = value.handler;
        options = value;
    }
    return doWatch(getter, cb.bind(publicThis), options, this);
}
function createPathGetter(ctx, path) {
    const segments = path.split('.');
    return ()=>{
        let cur = ctx;
        for(let i = 0; i < segments.length && cur; i++)cur = cur[segments[i]];
        return cur;
    };
}
function traverse(value, seen = new Set()) {
    if (!shared.isObject(value) || seen.has(value) || value["__v_skip"]) return value;
    seen.add(value);
    if (reactivity.isRef(value)) traverse(value.value, seen);
    else if (shared.isArray(value)) for(let i = 0; i < value.length; i++)traverse(value[i], seen);
    else if (shared.isSet(value) || shared.isMap(value)) value.forEach((v)=>{
        traverse(v, seen);
    });
    else if (shared.isPlainObject(value)) for(const key in value)traverse(value[key], seen);
    return value;
}
function useTransitionState() {
    const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: new Map()
    };
    onMounted(()=>{
        state.isMounted = true;
    });
    onBeforeUnmount(()=>{
        state.isUnmounting = true;
    });
    return state;
}
const TransitionHookValidator = [
    Function,
    Array
];
const BaseTransitionImpl = {
    name: `BaseTransition`,
    props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
    },
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return ()=>{
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) return;
            // warn multiple elements
            if (children.length > 1) warn("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
            // there's no need to track reactivity for these props so use the raw
            // props for a bit better perf
            const rawProps = reactivity.toRaw(props);
            const { mode  } = rawProps;
            // check mode
            if (mode && ![
                'in-out',
                'out-in',
                'default'
            ].includes(mode)) warn(`invalid <transition> mode: ${mode}`);
            // at this point children has a guaranteed length of 1.
            const child = children[0];
            if (state.isLeaving) return emptyPlaceholder(child);
            // in the case of <transition><keep-alive/></transition>, we need to
            // compare the type of the kept-alive children.
            const innerChild = getKeepAliveChild(child);
            if (!innerChild) return emptyPlaceholder(child);
            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
            setTransitionHooks(innerChild, enterHooks);
            const oldChild = instance.subTree;
            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
            let transitionKeyChanged = false;
            const { getTransitionKey  } = innerChild.type;
            if (getTransitionKey) {
                const key = getTransitionKey();
                if (prevTransitionKey === undefined) prevTransitionKey = key;
                else if (key !== prevTransitionKey) {
                    prevTransitionKey = key;
                    transitionKeyChanged = true;
                }
            }
            // handle mode
            if (oldInnerChild && oldInnerChild.type !== Comment$1 && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
                // update old tree's hooks in case of dynamic transition
                setTransitionHooks(oldInnerChild, leavingHooks);
                // switching between different views
                if (mode === 'out-in') {
                    state.isLeaving = true;
                    // return placeholder node and queue update when leave finishes
                    leavingHooks.afterLeave = ()=>{
                        state.isLeaving = false;
                        instance.update();
                    };
                    return emptyPlaceholder(child);
                } else if (mode === 'in-out' && innerChild.type !== Comment$1) leavingHooks.delayLeave = (el, earlyRemove, delayedLeave)=>{
                    const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                    leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                    // early removal callback
                    el._leaveCb = ()=>{
                        earlyRemove();
                        el._leaveCb = undefined;
                        delete enterHooks.delayedLeave;
                    };
                    enterHooks.delayedLeave = delayedLeave;
                };
            }
            return child;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes  } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
        leavingVNodesCache = Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
}
// The transition hooks are attached to the vnode as vnode.transition
// and will be called at appropriate timing in the renderer.
function resolveTransitionHooks(vnode1, props, state, instance) {
    const { appear , mode , persisted =false , onBeforeEnter , onEnter , onAfterEnter , onEnterCancelled , onBeforeLeave , onLeave , onAfterLeave , onLeaveCancelled , onBeforeAppear , onAppear , onAfterAppear , onAppearCancelled  } = props;
    const key = String(vnode1.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode1);
    const callHook = (hook, args)=>{
        hook && callWithAsyncErrorHandling(hook, instance, 9/* TRANSITION_HOOK */ , args);
    };
    const hooks = {
        mode,
        persisted,
        beforeEnter (el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
                if (appear) hook = onBeforeAppear || onBeforeEnter;
                else return;
            }
            // for same element (v-show)
            if (el._leaveCb) el._leaveCb(true);
            // for toggled element with same key (v-if)
            const leavingVNode = leavingVNodesCache[key];
            if (leavingVNode && isSameVNodeType(vnode1, leavingVNode) && leavingVNode.el._leaveCb) // force early removal (not cancelled)
            leavingVNode.el._leaveCb();
            callHook(hook, [
                el
            ]);
        },
        enter (el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
                if (appear) {
                    hook = onAppear || onEnter;
                    afterHook = onAfterAppear || onAfterEnter;
                    cancelHook = onAppearCancelled || onEnterCancelled;
                } else return;
            }
            let called = false;
            const done = el._enterCb = (cancelled)=>{
                if (called) return;
                called = true;
                if (cancelled) callHook(cancelHook, [
                    el
                ]);
                else callHook(afterHook, [
                    el
                ]);
                if (hooks.delayedLeave) hooks.delayedLeave();
                el._enterCb = undefined;
            };
            if (hook) {
                hook(el, done);
                if (hook.length <= 1) done();
            } else done();
        },
        leave (el, remove) {
            const key1 = String(vnode1.key);
            if (el._enterCb) el._enterCb(true);
            if (state.isUnmounting) return remove();
            callHook(onBeforeLeave, [
                el
            ]);
            let called = false;
            const done = el._leaveCb = (cancelled)=>{
                if (called) return;
                called = true;
                remove();
                if (cancelled) callHook(onLeaveCancelled, [
                    el
                ]);
                else callHook(onAfterLeave, [
                    el
                ]);
                el._leaveCb = undefined;
                if (leavingVNodesCache[key1] === vnode1) delete leavingVNodesCache[key1];
            };
            leavingVNodesCache[key1] = vnode1;
            if (onLeave) {
                onLeave(el, done);
                if (onLeave.length <= 1) done();
            } else done();
        },
        clone (vnode) {
            return resolveTransitionHooks(vnode, props, state, instance);
        }
    };
    return hooks;
}
// the placeholder really only handles one special case: KeepAlive
// in the case of a KeepAlive in a leave phase we need to return a KeepAlive
// placeholder with empty content to avoid the KeepAlive instance from being
// unmounted.
function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
    }
}
function getKeepAliveChild(vnode) {
    return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : undefined : vnode;
}
function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 && vnode.component) setTransitionHooks(vnode.component.subTree, hooks);
    else if (vnode.shapeFlag & 128) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    } else vnode.transition = hooks;
}
function getTransitionRawChildren(children, keepComment = false) {
    let ret = [];
    let keyedFragmentCount = 0;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        // handle fragment children case, e.g. v-for
        if (child.type === Fragment) {
            if (child.patchFlag & 128) keyedFragmentCount++;
            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));
        } else if (keepComment || child.type !== Comment$1) ret.push(child);
    }
    // #1126 if a transition children list contains multiple sub fragments, these
    // fragments will be merged into a flat children array. Since each v-for
    // fragment may contain different static bindings inside, we need to de-op
    // these children to force full diffs to ensure correct behavior.
    if (keyedFragmentCount > 1) for(let i1 = 0; i1 < ret.length; i1++)ret[i1].patchFlag = -2;
    return ret;
}
// implementation, close to no-op
function defineComponent(options) {
    return shared.isFunction(options) ? {
        setup: options,
        name: options.name
    } : options;
}
const isAsyncWrapper = (i)=>!!i.type.__asyncLoader
;
function defineAsyncComponent(source) {
    if (shared.isFunction(source)) source = {
        loader: source
    };
    const { loader , loadingComponent , errorComponent , delay =200 , timeout , suspensible =true , onError: userOnError  } = source;
    let pendingRequest = null;
    let resolvedComp;
    let retries = 0;
    const retry = ()=>{
        retries++;
        pendingRequest = null;
        return load();
    };
    const load = ()=>{
        let thisRequest;
        return pendingRequest || (thisRequest = pendingRequest = loader().catch((err)=>{
            err = err instanceof Error ? err : new Error(String(err));
            if (userOnError) return new Promise((resolve, reject)=>{
                const userRetry = ()=>resolve(retry())
                ;
                const userFail = ()=>reject(err)
                ;
                userOnError(err, userRetry, userFail, retries + 1);
            });
            else throw err;
        }).then((comp)=>{
            if (thisRequest !== pendingRequest && pendingRequest) return pendingRequest;
            if (!comp) warn(`Async component loader resolved to undefined. ` + `If you are using retry(), make sure to return its return value.`);
            // interop module default
            if (comp && (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) comp = comp.default;
            if (comp && !shared.isObject(comp) && !shared.isFunction(comp)) throw new Error(`Invalid async component load result: ${comp}`);
            resolvedComp = comp;
            return comp;
        }));
    };
    return defineComponent({
        name: 'AsyncComponentWrapper',
        __asyncLoader: load,
        get __asyncResolved () {
            return resolvedComp;
        },
        setup () {
            const instance = currentInstance;
            // already resolved
            if (resolvedComp) return ()=>createInnerComp(resolvedComp, instance)
            ;
            const onError = (err)=>{
                pendingRequest = null;
                handleError(err, instance, 13/* ASYNC_COMPONENT_LOADER */ , !errorComponent/* do not throw in dev if user provided error component */ );
            };
            // suspense-controlled or SSR.
            if (suspensible && instance.suspense || isInSSRComponentSetup) return load().then((comp)=>{
                return ()=>createInnerComp(comp, instance)
                ;
            }).catch((err)=>{
                onError(err);
                return ()=>errorComponent ? createVNode(errorComponent, {
                        error: err
                    }) : null
                ;
            });
            const loaded = reactivity.ref(false);
            const error = reactivity.ref();
            const delayed = reactivity.ref(!!delay);
            if (delay) setTimeout(()=>{
                delayed.value = false;
            }, delay);
            if (timeout != null) setTimeout(()=>{
                if (!loaded.value && !error.value) {
                    const err = new Error(`Async component timed out after ${timeout}ms.`);
                    onError(err);
                    error.value = err;
                }
            }, timeout);
            load().then(()=>{
                loaded.value = true;
                if (instance.parent && isKeepAlive(instance.parent.vnode)) // parent is keep-alive, force update so the loaded component's
                // name is taken into account
                queueJob(instance.parent.update);
            }).catch((err)=>{
                onError(err);
                error.value = err;
            });
            return ()=>{
                if (loaded.value && resolvedComp) return createInnerComp(resolvedComp, instance);
                else if (error.value && errorComponent) return createVNode(errorComponent, {
                    error: error.value
                });
                else if (loadingComponent && !delayed.value) return createVNode(loadingComponent);
            };
        }
    });
}
function createInnerComp(comp, { vnode: { ref , props , children  }  }) {
    const vnode = createVNode(comp, props, children);
    // ensure inner component inherits the async wrapper's ref owner
    vnode.ref = ref;
    return vnode;
}
const isKeepAlive = (vnode)=>vnode.type.__isKeepAlive
;
const KeepAliveImpl = {
    name: `KeepAlive`,
    // Marker for special handling inside the renderer. We are not using a ===
    // check directly on KeepAlive in the renderer, because importing it directly
    // would prevent it from being tree-shaken.
    __isKeepAlive: true,
    props: {
        include: [
            String,
            RegExp,
            Array
        ],
        exclude: [
            String,
            RegExp,
            Array
        ],
        max: [
            String,
            Number
        ]
    },
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        // KeepAlive communicates with the instantiated renderer via the
        // ctx where the renderer passes in its internals,
        // and the KeepAlive instance exposes activate/deactivate implementations.
        // The whole point of this is to avoid importing KeepAlive directly in the
        // renderer to facilitate tree-shaking.
        const sharedContext = instance.ctx;
        // if the internal renderer is not registered, it indicates that this is server-side rendering,
        // for KeepAlive, we just need to render its children
        if (!sharedContext.renderer) return slots.default;
        const cache = new Map();
        const keys = new Set();
        let current = null;
        instance.__v_cache = cache;
        const parentSuspense = instance.suspense;
        const { renderer: { p: patch , m: move , um: _unmount , o: { createElement  }  }  } = sharedContext;
        const storageContainer = createElement('div');
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized)=>{
            const instance1 = vnode.component;
            move(vnode, container, anchor, 0/* ENTER */ , parentSuspense);
            // in case props have changed
            patch(instance1.vnode, vnode, container, anchor, instance1, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
            queuePostRenderEffect(()=>{
                instance1.isDeactivated = false;
                if (instance1.a) shared.invokeArrayFns(instance1.a);
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance1.parent, vnode);
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance1);
        };
        sharedContext.deactivate = (vnode)=>{
            const instance1 = vnode.component;
            move(vnode, storageContainer, null, 1/* LEAVE */ , parentSuspense);
            queuePostRenderEffect(()=>{
                if (instance1.da) shared.invokeArrayFns(instance1.da);
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance1.parent, vnode);
                instance1.isDeactivated = true;
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance1);
        };
        function unmount(vnode) {
            // reset the shapeFlag so it can be properly unmounted
            resetShapeFlag(vnode);
            _unmount(vnode, instance, parentSuspense);
        }
        function pruneCache(filter) {
            cache.forEach((vnode, key)=>{
                const name = getComponentName(vnode.type);
                if (name && (!filter || !filter(name))) pruneCacheEntry(key);
            });
        }
        function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (!current || cached.type !== current.type) unmount(cached);
            else if (current) // current active instance should no longer be kept-alive.
            // we can't unmount it now but it might be later, so reset its flag now.
            resetShapeFlag(current);
            cache.delete(key);
            keys.delete(key);
        }
        // prune cache on include/exclude prop change
        watch(()=>[
                props.include,
                props.exclude
            ]
        , ([include, exclude])=>{
            include && pruneCache((name)=>matches(include, name)
            );
            exclude && pruneCache((name)=>!matches(exclude, name)
            );
        }, // prune post-render after `current` has been updated
        {
            flush: 'post',
            deep: true
        });
        // cache sub tree after render
        let pendingCacheKey = null;
        const cacheSubtree = ()=>{
            // fix #1621, the pendingCacheKey could be 0
            if (pendingCacheKey != null) cache.set(pendingCacheKey, getInnerChild(instance.subTree));
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(()=>{
            cache.forEach((cached)=>{
                const { subTree , suspense  } = instance;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type) {
                    // current instance will be unmounted as part of keep-alive's unmount
                    resetShapeFlag(vnode);
                    // but invoke its deactivated hook here
                    const da = vnode.component.da;
                    da && queuePostRenderEffect(da, suspense);
                    return;
                }
                unmount(cached);
            });
        });
        return ()=>{
            pendingCacheKey = null;
            if (!slots.default) return null;
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
                warn(`KeepAlive should contain exactly one component child.`);
                current = null;
                return children;
            } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
                current = null;
                return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            const comp = vnode.type;
            // for async components, name check should be based in its loaded
            // inner component if available
            const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {
            } : comp);
            const { include , exclude , max  } = props;
            if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
                current = vnode;
                return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            // clone vnode if it's reused because we are going to mutate it
            if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128) rawVNode.ssContent = vnode;
            }
            // #1513 it's possible for the returned vnode to be cloned due to attr
            // fallthrough or scopeId, so the vnode here may not be the final vnode
            // that is mounted. Instead of caching it directly, we store the pending
            // key and cache `instance.subTree` (the normalized vnode) in
            // beforeMount/beforeUpdate hooks.
            pendingCacheKey = key;
            if (cachedVNode) {
                // copy over mounted state
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) // recursively update transition hooks on subTree
                setTransitionHooks(vnode, vnode.transition);
                // avoid vnode being mounted as fresh
                vnode.shapeFlag |= 512;
                // make this key the freshest
                keys.delete(key);
                keys.add(key);
            } else {
                keys.add(key);
                // prune oldest entry
                if (max && keys.size > parseInt(max, 10)) pruneCacheEntry(keys.values().next().value);
            }
            // avoid vnode being unmounted
            vnode.shapeFlag |= 256;
            current = vnode;
            return rawVNode;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
    if (shared.isArray(pattern)) return pattern.some((p)=>matches(p, name)
    );
    else if (shared.isString(pattern)) return pattern.split(',').indexOf(name) > -1;
    else if (pattern.test) return pattern.test(name);
    /* istanbul ignore next */ return false;
}
function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a"/* ACTIVATED */ , target);
}
function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da"/* DEACTIVATED */ , target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
    // cache the deactivate branch check wrapper for injected hooks so the same
    // hook can be properly deduped by the scheduler. "__wdc" stands for "with
    // deactivation check".
    const wrappedHook = hook.__wdc || (hook.__wdc = ()=>{
        // only fire the hook if the target instance is NOT in a deactivated branch.
        let current = target;
        while(current){
            if (current.isDeactivated) return;
            current = current.parent;
        }
        hook();
    });
    injectHook(type, wrappedHook, target);
    // In addition to registering it on the target instance, we walk up the parent
    // chain and register it on all ancestor instances that are keep-alive roots.
    // This avoids the need to walk the entire component tree when invoking these
    // hooks, and more importantly, avoids the need to track child components in
    // arrays.
    if (target) {
        let current = target.parent;
        while(current && current.parent){
            if (isKeepAlive(current.parent.vnode)) injectToKeepAliveRoot(wrappedHook, type, target, current);
            current = current.parent;
        }
    }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    // injectHook wraps the original for error handling, so make sure to remove
    // the wrapped version.
    const injected = injectHook(type, hook, keepAliveRoot, true);
    onUnmounted(()=>{
        shared.remove(keepAliveRoot[type], injected);
    }, target);
}
function resetShapeFlag(vnode) {
    let shapeFlag = vnode.shapeFlag;
    if (shapeFlag & 256) shapeFlag -= 256;
    if (shapeFlag & 512) shapeFlag -= 512;
    vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
    return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
        const hooks = target[type] || (target[type] = []);
        // cache the error handling wrapper for injected hooks so the same hook
        // can be properly deduped by the scheduler. "__weh" stands for "with error
        // handling".
        const wrappedHook = hook.__weh || (hook.__weh = (...args)=>{
            if (target.isUnmounted) return;
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            reactivity.pauseTracking();
            // Set currentInstance during hook invocation.
            // This assumes the hook does not synchronously trigger other hooks, which
            // can only be false when the user does something really funky.
            setCurrentInstance(target);
            const res = callWithAsyncErrorHandling(hook, target, type, args);
            setCurrentInstance(null);
            reactivity.resetTracking();
            return res;
        });
        if (prepend) hooks.unshift(wrappedHook);
        else hooks.push(wrappedHook);
        return wrappedHook;
    } else {
        const apiName = shared.toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));
        warn(`${apiName} is called when there is no active component instance to be ` + `associated with. ` + `Lifecycle injection APIs can only be used during execution of setup().` + (` If you are using async setup(), make sure to register lifecycle ` + `hooks before the first await statement.`));
    }
}
const createHook = (lifecycle)=>(hook, target = currentInstance)=>// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
        (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, hook, target)
;
const onBeforeMount = createHook("bm"/* BEFORE_MOUNT */ );
const onMounted = createHook("m"/* MOUNTED */ );
const onBeforeUpdate = createHook("bu"/* BEFORE_UPDATE */ );
const onUpdated = createHook("u"/* UPDATED */ );
const onBeforeUnmount = createHook("bum"/* BEFORE_UNMOUNT */ );
const onUnmounted = createHook("um"/* UNMOUNTED */ );
const onServerPrefetch = createHook("sp"/* SERVER_PREFETCH */ );
const onRenderTriggered = createHook("rtg"/* RENDER_TRIGGERED */ );
const onRenderTracked = createHook("rtc"/* RENDER_TRACKED */ );
function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec"/* ERROR_CAPTURED */ , hook, target);
}
function createDuplicateChecker() {
    const cache = Object.create(null);
    return (type, key)=>{
        if (cache[key]) warn(`${type} property "${key}" is already defined in ${cache[key]}.`);
        else cache[key] = type;
    };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    // do not cache property access on public proxy during state initialization
    shouldCacheAccess = false;
    // call beforeCreate first before accessing other options since
    // the hook may mutate resolved options (#2791)
    if (options.beforeCreate) callHook(options.beforeCreate, instance, "bc"/* BEFORE_CREATE */ );
    const { // state
    data: dataOptions , computed: computedOptions , methods , watch: watchOptions , provide: provideOptions , inject: injectOptions , // lifecycle
    created , beforeMount , mounted , beforeUpdate , updated , activated , deactivated , beforeDestroy , beforeUnmount , destroyed , unmounted , render , renderTracked , renderTriggered , errorCaptured , serverPrefetch , // public API
    expose , inheritAttrs , // assets
    components , directives , filters  } = options;
    const checkDuplicateProperties = createDuplicateChecker();
    {
        const [propsOptions] = instance.propsOptions;
        if (propsOptions) for(const key in propsOptions)checkDuplicateProperties("Props"/* PROPS */ , key);
    }
    // options initialization order (to be consistent with Vue 2):
    // - props (already done outside of this function)
    // - inject
    // - methods
    // - data (deferred since it relies on `this` access)
    // - computed
    // - watch (deferred since it relies on `this` access)
    if (injectOptions) resolveInjections(injectOptions, ctx, checkDuplicateProperties);
    if (methods) for(const key in methods){
        const methodHandler = methods[key];
        if (shared.isFunction(methodHandler)) {
            Object.defineProperty(ctx, key, {
                value: methodHandler.bind(publicThis),
                configurable: true,
                enumerable: true,
                writable: true
            });
            checkDuplicateProperties("Methods"/* METHODS */ , key);
        } else warn(`Method "${key}" has type "${typeof methodHandler}" in the component definition. ` + `Did you reference the function correctly?`);
    }
    if (dataOptions) {
        if (!shared.isFunction(dataOptions)) warn(`The data option must be a function. ` + `Plain object usage is no longer supported.`);
        const data = dataOptions.call(publicThis, publicThis);
        if (shared.isPromise(data)) warn(`data() returned a Promise - note data() cannot be async; If you ` + `intend to perform data fetching before component renders, use ` + `async setup() + <Suspense>.`);
        if (!shared.isObject(data)) warn(`data() should return an object.`);
        else {
            instance.data = reactivity.reactive(data);
            for(const key1 in data){
                checkDuplicateProperties("Data"/* DATA */ , key1);
                // expose data on ctx during dev
                if (key1[0] !== '$' && key1[0] !== '_') Object.defineProperty(ctx, key1, {
                    configurable: true,
                    enumerable: true,
                    get: ()=>data[key1]
                    ,
                    set: shared.NOOP
                });
            }
        }
    }
    // state initialization complete at this point - start caching access
    shouldCacheAccess = true;
    if (computedOptions) for(const key1 in computedOptions){
        const opt = computedOptions[key1];
        const get = shared.isFunction(opt) ? opt.bind(publicThis, publicThis) : shared.isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : shared.NOOP;
        if (get === shared.NOOP) warn(`Computed property "${key1}" has no getter.`);
        const set = !shared.isFunction(opt) && shared.isFunction(opt.set) ? opt.set.bind(publicThis) : ()=>{
            warn(`Write operation failed: computed property "${key1}" is readonly.`);
        };
        const c = computed({
            get,
            set
        });
        Object.defineProperty(ctx, key1, {
            enumerable: true,
            configurable: true,
            get: ()=>c.value
            ,
            set: (v)=>c.value = v
        });
        checkDuplicateProperties("Computed"/* COMPUTED */ , key1);
    }
    if (watchOptions) for(const key2 in watchOptions)createWatcher(watchOptions[key2], ctx, publicThis, key2);
    if (provideOptions) {
        const provides = shared.isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key3)=>{
            provide(key3, provides[key3]);
        });
    }
    if (created) callHook(created, instance, "c"/* CREATED */ );
    function registerLifecycleHook(register, hook) {
        if (shared.isArray(hook)) hook.forEach((_hook)=>register(_hook.bind(publicThis))
        );
        else if (hook) register(hook.bind(publicThis));
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if (shared.isArray(expose)) {
        if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = reactivity.proxyRefs({
            }));
            expose.forEach((key3)=>{
                exposed[key3] = reactivity.toRef(publicThis, key3);
            });
        } else if (!instance.exposed) instance.exposed = shared.EMPTY_OBJ;
    }
    // options that are handled when creating the instance but also need to be
    // applied from mixins
    if (render && instance.render === shared.NOOP) instance.render = render;
    if (inheritAttrs != null) instance.inheritAttrs = inheritAttrs;
    // asset options.
    if (components) instance.components = components;
    if (directives) instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = shared.NOOP) {
    if (shared.isArray(injectOptions)) injectOptions = normalizeInject(injectOptions);
    for(const key in injectOptions){
        const opt = injectOptions[key];
        if (shared.isObject(opt)) {
            if ('default' in opt) ctx[key] = inject(opt.from || key, opt.default, true);
            else ctx[key] = inject(opt.from || key);
        } else ctx[key] = inject(opt);
        checkDuplicateProperties("Inject"/* INJECT */ , key);
    }
}
function callHook(hook, instance, type) {
    callWithAsyncErrorHandling(shared.isArray(hook) ? hook.map((h)=>h.bind(instance.proxy)
    ) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
    const getter = key.includes('.') ? createPathGetter(publicThis, key) : ()=>publicThis[key]
    ;
    if (shared.isString(raw)) {
        const handler = ctx[raw];
        if (shared.isFunction(handler)) watch(getter, handler);
        else warn(`Invalid watch handler specified by key "${raw}"`, handler);
    } else if (shared.isFunction(raw)) watch(getter, raw.bind(publicThis));
    else if (shared.isObject(raw)) {
        if (shared.isArray(raw)) raw.forEach((r)=>createWatcher(r, ctx, publicThis, key)
        );
        else {
            const handler = shared.isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
            if (shared.isFunction(handler)) watch(getter, handler, raw);
            else warn(`Invalid watch handler specified by key "${raw.handler}"`, handler);
        }
    } else warn(`Invalid watch option: "${key}"`, raw);
}
/**
 * Resolve merged options and cache it on the component.
 * This is done only once per-component since the merging does not involve
 * instances.
 */ function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins , extends: extendsOptions  } = base;
    const { mixins: globalMixins , optionsCache: cache , config: { optionMergeStrategies  }  } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) resolved = cached;
    else if (!globalMixins.length && !mixins && !extendsOptions) resolved = base;
    else {
        resolved = {
        };
        if (globalMixins.length) globalMixins.forEach((m)=>mergeOptions(resolved, m, optionMergeStrategies, true)
        );
        mergeOptions(resolved, base, optionMergeStrategies);
    }
    cache.set(base, resolved);
    return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins , extends: extendsOptions  } = from;
    if (extendsOptions) mergeOptions(to, extendsOptions, strats, true);
    if (mixins) mixins.forEach((m)=>mergeOptions(to, m, strats, true)
    );
    for(const key in from)if (asMixin && key === 'expose') warn(`"expose" option is ignored when declared in mixins or extends. ` + `It should only be declared in the base component itself.`);
    else {
        const strat = internalOptionMergeStrats[key] || strats && strats[key];
        to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
    return to;
}
const internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeObjectOptions,
    emits: mergeObjectOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeHook,
    created: mergeHook,
    beforeMount: mergeHook,
    mounted: mergeHook,
    beforeUpdate: mergeHook,
    updated: mergeHook,
    beforeDestroy: mergeHook,
    destroyed: mergeHook,
    activated: mergeHook,
    deactivated: mergeHook,
    errorCaptured: mergeHook,
    serverPrefetch: mergeHook,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch has special merge behavior in v2, but isn't actually needed in v3.
    // since we are only exposing these for compat and nobody should be relying
    // on the watch-specific behavior, just expose the object merge strat.
    watch: mergeObjectOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
};
function mergeDataFn(to, from) {
    if (!from) return to;
    if (!to) return from;
    return function mergedDataFn() {
        return shared.extend(shared.isFunction(to) ? to.call(this, this) : to, shared.isFunction(from) ? from.call(this, this) : from);
    };
}
function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
    if (shared.isArray(raw)) {
        const res = {
        };
        for(let i = 0; i < raw.length; i++)res[raw[i]] = raw[i];
        return res;
    }
    return raw;
}
function mergeHook(to, from) {
    return to ? [
        ...new Set([].concat(to, from))
    ] : from;
}
function mergeObjectOptions(to, from) {
    return to ? shared.extend(shared.extend(Object.create(null), to), from) : from;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
    const props = {
    };
    const attrs = {
    };
    shared.def(attrs, InternalObjectKey, 1);
    instance.propsDefaults = Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    // ensure all declared prop keys are present
    for(const key in instance.propsOptions[0])if (!(key in props)) props[key] = undefined;
    validateProps(rawProps || {
    }, props, instance);
    if (isStateful) // stateful
    instance.props = isSSR ? props : reactivity.shallowReactive(props);
    else if (!instance.type.props) // functional w/ optional props, props === attrs
    instance.props = attrs;
    else // functional w/ declared props
    instance.props = props;
    instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const { props , attrs , vnode: { patchFlag  }  } = instance;
    const rawCurrentProps = reactivity.toRaw(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (// always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !(instance.type.__hmrId || instance.parent && instance.parent.type.__hmrId) && (optimized || patchFlag > 0) && !(patchFlag & 16)) {
        if (patchFlag & 8) {
            // Compiler-generated props & no keys change, just set the updated
            // the props.
            const propsToUpdate = instance.vnode.dynamicProps;
            for(let i = 0; i < propsToUpdate.length; i++){
                let key = propsToUpdate[i];
                // PROPS flag guarantees rawProps to be non-null
                const value = rawProps[key];
                if (options) {
                    // attr / props separation was done on init and will be consistent
                    // in this code path, so just check if attrs have it.
                    if (shared.hasOwn(attrs, key)) {
                        if (value !== attrs[key]) {
                            attrs[key] = value;
                            hasAttrsChanged = true;
                        }
                    } else {
                        const camelizedKey = shared.camelize(key);
                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
                    }
                } else if (value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                }
            }
        }
    } else {
        // full props update.
        if (setFullProps(instance, rawProps, props, attrs)) hasAttrsChanged = true;
        // in case of dynamic props, check if we need to delete keys from
        // the props object
        let kebabKey;
        for(const key in rawCurrentProps)if (!rawProps || !shared.hasOwn(rawProps, key) && ((kebabKey = shared.hyphenate(key)) === key || !shared.hasOwn(rawProps, kebabKey))) {
            if (options) {
                if (rawPrevProps && (rawPrevProps[key] !== undefined || // for kebab-case
                rawPrevProps[kebabKey] !== undefined)) props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true);
            } else delete props[key];
        }
        // in the case of functional component w/o props declaration, props and
        // attrs point to the same object so it should already have been updated.
        if (attrs !== rawCurrentProps) {
            for(const key1 in attrs)if (!rawProps || !shared.hasOwn(rawProps, key1)) {
                delete attrs[key1];
                hasAttrsChanged = true;
            }
        }
    }
    // trigger updates for $attrs in case it's used in component slots
    if (hasAttrsChanged) reactivity.trigger(instance, "set"/* SET */ , '$attrs');
    validateProps(rawProps || {
    }, props, instance);
}
function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) for(let key in rawProps){
        // key, ref are reserved and never passed down
        if (shared.isReservedProp(key)) continue;
        const value = rawProps[key];
        // prop option names are camelized during normalization, so to support
        // kebab -> camel conversion here we need to camelize the key.
        let camelKey;
        if (options && shared.hasOwn(options, camelKey = shared.camelize(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) props[camelKey] = value;
            else (rawCastValues || (rawCastValues = {
            }))[camelKey] = value;
        } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
            }
        }
    }
    if (needCastKeys) {
        const rawCurrentProps = reactivity.toRaw(props);
        const castValues = rawCastValues || shared.EMPTY_OBJ;
        for(let i = 0; i < needCastKeys.length; i++){
            const key1 = needCastKeys[i];
            props[key1] = resolvePropValue(options, rawCurrentProps, key1, castValues[key1], instance, !shared.hasOwn(castValues, key1));
        }
    }
    return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
        const hasDefault = shared.hasOwn(opt, 'default');
        // default values
        if (hasDefault && value === undefined) {
            const defaultValue = opt.default;
            if (opt.type !== Function && shared.isFunction(defaultValue)) {
                const { propsDefaults  } = instance;
                if (key in propsDefaults) value = propsDefaults[key];
                else {
                    setCurrentInstance(instance);
                    value = propsDefaults[key] = defaultValue.call(null, props);
                    setCurrentInstance(null);
                }
            } else value = defaultValue;
        }
        // boolean casting
        if (opt[0]) {
            if (isAbsent && !hasDefault) value = false;
            else if (opt[1] && (value === '' || value === shared.hyphenate(key))) value = true;
        }
    }
    return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) return cached;
    const raw = comp.props;
    const normalized = {
    };
    const needCastKeys = [];
    // apply mixin/extends props
    let hasExtends = false;
    if (!shared.isFunction(comp)) {
        const extendProps = (raw1)=>{
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw1, appContext, true);
            shared.extend(normalized, props);
            if (keys) needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendProps);
        if (comp.extends) extendProps(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendProps);
    }
    if (!raw && !hasExtends) {
        cache.set(comp, shared.EMPTY_ARR);
        return shared.EMPTY_ARR;
    }
    if (shared.isArray(raw)) for(let i = 0; i < raw.length; i++){
        if (!shared.isString(raw[i])) warn(`props must be strings when using array syntax.`, raw[i]);
        const normalizedKey = shared.camelize(raw[i]);
        if (validatePropName(normalizedKey)) normalized[normalizedKey] = shared.EMPTY_OBJ;
    }
    else if (raw) {
        if (!shared.isObject(raw)) warn(`invalid props options`, raw);
        for(const key in raw){
            const normalizedKey = shared.camelize(key);
            if (validatePropName(normalizedKey)) {
                const opt = raw[key];
                const prop = normalized[normalizedKey] = shared.isArray(opt) || shared.isFunction(opt) ? {
                    type: opt
                } : opt;
                if (prop) {
                    const booleanIndex = getTypeIndex(Boolean, prop.type);
                    const stringIndex = getTypeIndex(String, prop.type);
                    prop[0] = booleanIndex > -1;
                    prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
                    // if the prop needs boolean casting or default value
                    if (booleanIndex > -1 || shared.hasOwn(prop, 'default')) needCastKeys.push(normalizedKey);
                }
            }
        }
    }
    const res = [
        normalized,
        needCastKeys
    ];
    cache.set(comp, res);
    return res;
}
function validatePropName(key) {
    if (key[0] !== '$') return true;
    else warn(`Invalid prop name: "${key}" is a reserved property.`);
    return false;
}
// use function string name to check type constructors
// so that it works across vms / iframes.
function getType(ctor) {
    const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
}
function isSameType(a, b) {
    return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
    if (shared.isArray(expectedTypes)) return expectedTypes.findIndex((t)=>isSameType(t, type)
    );
    else if (shared.isFunction(expectedTypes)) return isSameType(expectedTypes, type) ? 0 : -1;
    return -1;
}
/**
 * dev only
 */ function validateProps(rawProps, props, instance) {
    const resolvedValues = reactivity.toRaw(props);
    const options = instance.propsOptions[0];
    for(const key in options){
        let opt = options[key];
        if (opt == null) continue;
        validateProp(key, resolvedValues[key], opt, !shared.hasOwn(rawProps, key) && !shared.hasOwn(rawProps, shared.hyphenate(key)));
    }
}
/**
 * dev only
 */ function validateProp(name, value, prop, isAbsent) {
    const { type , required , validator  } = prop;
    // required!
    if (required && isAbsent) {
        warn('Missing required prop: "' + name + '"');
        return;
    }
    // missing but optional
    if (value == null && !prop.required) return;
    // type check
    if (type != null && type !== true) {
        let isValid = false;
        const types = shared.isArray(type) ? type : [
            type
        ];
        const expectedTypes = [];
        // value is valid as long as one of the specified types match
        for(let i = 0; i < types.length && !isValid; i++){
            const { valid , expectedType  } = assertType(value, types[i]);
            expectedTypes.push(expectedType || '');
            isValid = valid;
        }
        if (!isValid) {
            warn(getInvalidTypeMessage(name, value, expectedTypes));
            return;
        }
    }
    // custom validator
    if (validator && !validator(value)) warn('Invalid prop: custom validator check failed for prop "' + name + '".');
}
const isSimpleType = /*#__PURE__*/ shared.makeMap('String,Number,Boolean,Function,Symbol,BigInt');
/**
 * dev only
 */ function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        // for primitive wrapper objects
        if (!valid && t === 'object') valid = value instanceof type;
    } else if (expectedType === 'Object') valid = shared.isObject(value);
    else if (expectedType === 'Array') valid = shared.isArray(value);
    else valid = value instanceof type;
    return {
        valid,
        expectedType
    };
}
/**
 * dev only
 */ function getInvalidTypeMessage(name, value, expectedTypes) {
    let message = `Invalid prop: type check failed for prop "${name}".` + ` Expected ${expectedTypes.map(shared.capitalize).join(', ')}`;
    const expectedType = expectedTypes[0];
    const receivedType = shared.toRawType(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) message += ` with value ${expectedValue}`;
    message += `, got ${receivedType} `;
    // check if we need to specify received value
    if (isExplicable(receivedType)) message += `with value ${receivedValue}.`;
    return message;
}
/**
 * dev only
 */ function styleValue(value, type) {
    if (type === 'String') return `"${value}"`;
    else if (type === 'Number') return `${Number(value)}`;
    else return `${value}`;
}
/**
 * dev only
 */ function isExplicable(type) {
    const explicitTypes = [
        'string',
        'number',
        'boolean'
    ];
    return explicitTypes.some((elem)=>type.toLowerCase() === elem
    );
}
/**
 * dev only
 */ function isBoolean(...args) {
    return args.some((elem)=>elem.toLowerCase() === 'boolean'
    );
}
const isInternalKey = (key)=>key[0] === '_' || key === '$stable'
;
const normalizeSlotValue = (value)=>shared.isArray(value) ? value.map(normalizeVNode) : [
        normalizeVNode(value)
    ]
;
const normalizeSlot = (key, rawSlot, ctx)=>{
    const normalized = withCtx((props)=>{
        if (currentInstance) warn(`Slot "${key}" invoked outside of the render function: ` + `this will not track dependencies used in the slot. ` + `Invoke the slot function inside the render function instead.`);
        return normalizeSlotValue(rawSlot(props));
    }, ctx);
    normalized._c = false;
    return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance)=>{
    const ctx = rawSlots._ctx;
    for(const key in rawSlots){
        if (isInternalKey(key)) continue;
        const value = rawSlots[key];
        if (shared.isFunction(value)) slots[key] = normalizeSlot(key, value, ctx);
        else if (value != null) {
            warn(`Non-function value encountered for slot "${key}". ` + `Prefer function slots for better performance.`);
            const normalized = normalizeSlotValue(value);
            slots[key] = ()=>normalized
            ;
        }
    }
};
const normalizeVNodeSlots = (instance, children)=>{
    if (!isKeepAlive(instance.vnode) && true) warn(`Non-function value encountered for default slot. ` + `Prefer function slots for better performance.`);
    const normalized = normalizeSlotValue(children);
    instance.slots.default = ()=>normalized
    ;
};
const initSlots = (instance, children)=>{
    if (instance.vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
            // users can get the shallow readonly version of the slots object through `this.$slots`,
            // we should avoid the proxy object polluting the slots of the internal instance
            instance.slots = reactivity.toRaw(children);
            // make compiler marker non-enumerable
            shared.def(children, '_', type);
        } else normalizeObjectSlots(children, instance.slots = {
        });
    } else {
        instance.slots = {
        };
        if (children) normalizeVNodeSlots(instance, children);
    }
    shared.def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized)=>{
    const { vnode , slots  } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = shared.EMPTY_OBJ;
    if (vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
            // compiled slots.
            if (isHmrUpdating) // Parent was HMR updated so slot content may have changed.
            // force update slots and mark instance for hmr as well
            shared.extend(slots, children);
            else if (optimized && type === 1) // compiled AND stable.
            // no need to update, and skip stale slots removal.
            needDeletionCheck = false;
            else {
                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip
                // normalization.
                shared.extend(slots, children);
                // #2893
                // when rendering the optimized slots by manually written render function,
                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,
                // i.e. let the `renderSlot` create the bailed Fragment
                if (!optimized && type === 1) delete slots._;
            }
        } else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
    } else if (children) {
        // non slot object children (direct value) passed to a component
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = {
            default: 1
        };
    }
    // delete stale slots
    if (needDeletionCheck) {
        for(const key in slots)if (!isInternalKey(key) && !(key in deletionComparisonTarget)) delete slots[key];
    }
};
/**
Runtime helper for applying directives to a vnode. Example usage:

const comp = resolveComponent('comp')
const foo = resolveDirective('foo')
const bar = resolveDirective('bar')

return withDirectives(h(comp), [
  [foo, this.x],
  [bar, this.y]
])
*/ const isBuiltInDirective = /*#__PURE__*/ shared.makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');
function validateDirectiveName(name) {
    if (isBuiltInDirective(name)) warn('Do not use built-in directive ids as custom directive id: ' + name);
}
/**
 * Adds directives to a VNode.
 */ function withDirectives(vnode, directives) {
    const internalInstance = currentRenderingInstance;
    if (internalInstance === null) {
        warn(`withDirectives can only be used inside render functions.`);
        return vnode;
    }
    const instance = internalInstance.proxy;
    const bindings = vnode.dirs || (vnode.dirs = []);
    for(let i = 0; i < directives.length; i++){
        let [dir, value, arg, modifiers = shared.EMPTY_OBJ] = directives[i];
        if (shared.isFunction(dir)) dir = {
            mounted: dir,
            updated: dir
        };
        bindings.push({
            dir,
            instance,
            value,
            oldValue: void 0,
            arg,
            modifiers
        });
    }
    return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for(let i = 0; i < bindings.length; i++){
        const binding = bindings[i];
        if (oldBindings) binding.oldValue = oldBindings[i].value;
        let hook = binding.dir[name];
        if (hook) {
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            reactivity.pauseTracking();
            callWithAsyncErrorHandling(hook, instance, 8/* DIRECTIVE_HOOK */ , [
                vnode.el,
                binding,
                vnode,
                prevVNode
            ]);
            reactivity.resetTracking();
        }
    }
}
function createAppContext() {
    return {
        app: null,
        config: {
            isNativeTag: shared.NO,
            performance: false,
            globalProperties: {
            },
            optionMergeStrategies: {
            },
            errorHandler: undefined,
            warnHandler: undefined,
            compilerOptions: {
            }
        },
        mixins: [],
        components: {
        },
        directives: {
        },
        provides: Object.create(null),
        optionsCache: new WeakMap(),
        propsCache: new WeakMap(),
        emitsCache: new WeakMap()
    };
}
let uid = 0;
function createAppAPI(render, hydrate) {
    return function createApp(rootComponent, rootProps = null) {
        if (rootProps != null && !shared.isObject(rootProps)) {
            warn(`root props passed to app.mount() must be an object.`);
            rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = new Set();
        let isMounted = false;
        const app = context.app = {
            _uid: uid++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            version,
            get config () {
                return context.config;
            },
            set config (v){
                warn(`app.config cannot be replaced. Modify individual options instead.`);
            },
            use (plugin, ...options) {
                if (installedPlugins.has(plugin)) warn(`Plugin has already been applied to target app.`);
                else if (plugin && shared.isFunction(plugin.install)) {
                    installedPlugins.add(plugin);
                    plugin.install(app, ...options);
                } else if (shared.isFunction(plugin)) {
                    installedPlugins.add(plugin);
                    plugin(app, ...options);
                } else warn(`A plugin must either be a function or an object with an "install" ` + `function.`);
                return app;
            },
            mixin (mixin) {
                if (!context.mixins.includes(mixin)) context.mixins.push(mixin);
                else warn('Mixin has already been applied to target app' + (mixin.name ? `: ${mixin.name}` : ''));
                return app;
            },
            component (name, component) {
                validateComponentName(name, context.config);
                if (!component) return context.components[name];
                if (context.components[name]) warn(`Component "${name}" has already been registered in target app.`);
                context.components[name] = component;
                return app;
            },
            directive (name, directive) {
                validateDirectiveName(name);
                if (!directive) return context.directives[name];
                if (context.directives[name]) warn(`Directive "${name}" has already been registered in target app.`);
                context.directives[name] = directive;
                return app;
            },
            mount (rootContainer, isHydrate, isSVG) {
                if (!isMounted) {
                    const vnode = createVNode(rootComponent, rootProps);
                    // store app context on the root VNode.
                    // this will be set on the root instance on initial mount.
                    vnode.appContext = context;
                    context.reload = ()=>{
                        render(cloneVNode(vnode), rootContainer, isSVG);
                    };
                    if (isHydrate && hydrate) hydrate(vnode, rootContainer);
                    else render(vnode, rootContainer, isSVG);
                    isMounted = true;
                    app._container = rootContainer;
                    rootContainer.__vue_app__ = app;
                    devtoolsInitApp(app, version);
                    return vnode.component.proxy;
                } else warn(`App has already been mounted.\n` + `If you want to remount the same app, move your app creation logic ` + `into a factory function and create fresh app instances for each ` + `mount - e.g. \`const createMyApp = () => createApp(App)\``);
            },
            unmount () {
                if (isMounted) {
                    render(null, app._container);
                    devtoolsUnmountApp(app);
                    delete app._container.__vue_app__;
                } else warn(`Cannot unmount an app that is not mounted.`);
            },
            provide (key, value) {
                if (key in context.provides) warn(`App already provides property with key "${String(key)}". ` + `It will be overwritten with the new value.`);
                // TypeScript doesn't allow symbols as index type
                // https://github.com/Microsoft/TypeScript/issues/24587
                context.provides[key] = value;
                return app;
            }
        };
        return app;
    };
}
let hasMismatch = false;
const isSVGContainer = (container)=>/svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject'
;
const isComment = (node)=>node.nodeType === 8
/* COMMENT */ ;
// Note: hydration is DOM-specific
// But we have to place it in core due to tight coupling with core - splitting
// it out creates a ton of unnecessary complexity.
// Hydration also depends on some renderer internal logic which needs to be
// passed in via arguments.
function createHydrationFunctions(rendererInternals) {
    const { mt: mountComponent , p: patch , o: { patchProp , nextSibling , parentNode , remove , insert , createComment  }  } = rendererInternals;
    const hydrate = (vnode, container)=>{
        if (!container.hasChildNodes()) {
            warn(`Attempting to hydrate existing markup but container is empty. ` + `Performing full mount instead.`);
            patch(null, vnode, container);
            return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        if (hasMismatch && true) // this error should show up in production
        console.error(`Hydration completed but contains mismatches.`);
    };
    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false)=>{
        const isFragmentStart = isComment(node) && node.data === '[';
        const onMismatch = ()=>handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart)
        ;
        const { type , ref , shapeFlag  } = vnode;
        const domType = node.nodeType;
        vnode.el = node;
        let nextNode = null;
        switch(type){
            case Text1:
                if (domType !== 3) nextNode = onMismatch();
                else {
                    if (node.data !== vnode.children) {
                        hasMismatch = true;
                        warn(`Hydration text mismatch:` + `\n- Client: ${JSON.stringify(node.data)}` + `\n- Server: ${JSON.stringify(vnode.children)}`);
                        node.data = vnode.children;
                    }
                    nextNode = nextSibling(node);
                }
                break;
            case Comment$1:
                if (domType !== 8 || isFragmentStart) nextNode = onMismatch();
                else nextNode = nextSibling(node);
                break;
            case Static:
                if (domType !== 1) nextNode = onMismatch();
                else {
                    // determine anchor, adopt content
                    nextNode = node;
                    // if the static vnode has its content stripped during build,
                    // adopt it from the server-rendered HTML.
                    const needToAdoptContent = !vnode.children.length;
                    for(let i = 0; i < vnode.staticCount; i++){
                        if (needToAdoptContent) vnode.children += nextNode.outerHTML;
                        if (i === vnode.staticCount - 1) vnode.anchor = nextNode;
                        nextNode = nextSibling(nextNode);
                    }
                    return nextNode;
                }
                break;
            case Fragment:
                if (!isFragmentStart) nextNode = onMismatch();
                else nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1) {
                    if (domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) nextNode = onMismatch();
                    else nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                } else if (shapeFlag & 6) {
                    // when setting up the render effect, if the initial vnode already
                    // has .el set, the component will perform hydration instead of mount
                    // on its sub-tree.
                    vnode.slotScopeIds = slotScopeIds;
                    const container = parentNode(node);
                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
                    // component may be async, so in the case of fragments we cannot rely
                    // on component's rendered output to determine the end of the fragment
                    // instead, we do a lookahead to find the end anchor node.
                    nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
                    // #3787
                    // if component is async, it may get moved / unmounted before its
                    // inner component is loaded, so we need to give it a placeholder
                    // vnode that matches its adopted DOM.
                    if (isAsyncWrapper(vnode)) {
                        let subTree;
                        if (isFragmentStart) {
                            subTree = createVNode(Fragment);
                            subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                        } else subTree = node.nodeType === 3 ? createTextVNode('') : createVNode('div');
                        subTree.el = node;
                        vnode.component.subTree = subTree;
                    }
                } else if (shapeFlag & 64) {
                    if (domType !== 8) nextNode = onMismatch();
                    else nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
                } else if (shapeFlag & 128) nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
                else warn('Invalid HostVNode type:', type, `(${typeof type})`);
        }
        if (ref != null) setRef(ref, null, parentSuspense, vnode);
        return nextNode;
    };
    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!vnode.dynamicChildren;
        const { props , patchFlag , shapeFlag , dirs  } = vnode;
        // skip props & children if this is hoisted static nodes
        if (patchFlag !== -1) {
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'created');
            // props
            if (props) {
                if (!optimized || patchFlag & 16 || patchFlag & 32) {
                    for(const key in props)if (!shared.isReservedProp(key) && shared.isOn(key)) patchProp(el, key, null, props[key]);
                } else if (props.onClick) // Fast path for click listeners (which is most often) to avoid
                // iterating through props.
                patchProp(el, 'onClick', null, props.onClick);
            }
            // vnode / directive hooks
            let vnodeHooks;
            if (vnodeHooks = props && props.onVnodeBeforeMount) invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) queueEffectWithSuspense(()=>{
                vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
            }, parentSuspense);
            // children
            if (shapeFlag & 16 && // skip if element has innerHTML / textContent
            !(props && (props.innerHTML || props.textContent))) {
                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
                let hasWarned1 = false;
                while(next){
                    hasMismatch = true;
                    if (!hasWarned1) {
                        warn(`Hydration children mismatch in <${vnode.type}>: ` + `server rendered element contains more child nodes than client vdom.`);
                        hasWarned1 = true;
                    }
                    // The SSRed DOM contains more nodes than it should. Remove them.
                    const cur = next;
                    next = next.nextSibling;
                    remove(cur);
                }
            } else if (shapeFlag & 8) {
                if (el.textContent !== vnode.children) {
                    hasMismatch = true;
                    warn(`Hydration text content mismatch in <${vnode.type}>:\n` + `- Client: ${el.textContent}\n` + `- Server: ${vnode.children}`);
                    el.textContent = vnode.children;
                }
            }
        }
        return el.nextSibling;
    };
    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned1 = false;
        for(let i = 0; i < l; i++){
            const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
            if (node) node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            else if (vnode.type === Text1 && !vnode.children) continue;
            else {
                hasMismatch = true;
                if (!hasWarned1) {
                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` + `server rendered element contains fewer child nodes than client vdom.`);
                    hasWarned1 = true;
                }
                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.
                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
            }
        }
        return node;
    };
    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        const { slotScopeIds: fragmentSlotScopeIds  } = vnode;
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === ']') return nextSibling(vnode.anchor = next);
        else {
            // fragment didn't hydrate successfully, since we didn't get a end anchor
            // back. This should have led to node/children mismatch warnings.
            hasMismatch = true;
            // since the anchor is missing, we need to create one and insert it
            insert(vnode.anchor = createComment(`]`), container, next);
            return next;
        }
    };
    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment)=>{
        hasMismatch = true;
        warn(`Hydration node mismatch:\n- Client vnode:`, vnode.type, `\n- Server rendered DOM:`, node, node.nodeType === 3 ? `(text)` : isComment(node) && node.data === '[' ? `(start of fragment)` : ``);
        vnode.el = null;
        if (isFragment) {
            // remove excessive fragment nodes
            const end = locateClosingAsyncAnchor(node);
            while(true){
                const next = nextSibling(node);
                if (next && next !== end) remove(next);
                else break;
            }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
    };
    const locateClosingAsyncAnchor = (node)=>{
        let match = 0;
        while(node){
            node = nextSibling(node);
            if (node && isComment(node)) {
                if (node.data === '[') match++;
                if (node.data === ']') {
                    if (match === 0) return nextSibling(node);
                    else match--;
                }
            }
        }
        return node;
    };
    return [
        hydrate,
        hydrateNode
    ];
}
let supported;
let perf;
function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) perf.mark(`vue-${type}-${instance.uid}`);
    devtoolsPerfStart(instance, type, supported ? perf.now() : Date.now());
}
function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
    }
    devtoolsPerfEnd(instance, type, supported ? perf.now() : Date.now());
}
function isSupported() {
    if (supported !== undefined) return supported;
    /* eslint-disable no-restricted-globals */ if (typeof window !== 'undefined' && window.performance) {
        supported = true;
        perf = window.performance;
    } else supported = false;
    /* eslint-enable no-restricted-globals */ return supported;
}
function createDevEffectOptions(instance) {
    return {
        scheduler: queueJob,
        allowRecurse: true,
        onTrack: instance.rtc ? (e)=>shared.invokeArrayFns(instance.rtc, e)
         : void 0,
        onTrigger: instance.rtg ? (e)=>shared.invokeArrayFns(instance.rtg, e)
         : void 0
    };
}
const queuePostRenderEffect = queueEffectWithSuspense;
const setRef = (rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false)=>{
    if (shared.isArray(rawRef)) {
        rawRef.forEach((r, i)=>setRef(r, oldRawRef && (shared.isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount)
        );
        return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) // when mounting async components, nothing needs to be done,
    // because the template ref is forwarded to inner component
    return;
    const refValue = vnode.shapeFlag & 4 ? vnode.component.exposed || vnode.component.proxy : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner , r: ref  } = rawRef;
    if (!owner) {
        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` + `A vnode with ref must be created inside the render function.`);
        return;
    }
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === shared.EMPTY_OBJ ? owner.refs = {
    } : owner.refs;
    const setupState = owner.setupState;
    // dynamic ref changed. unset old ref
    if (oldRef != null && oldRef !== ref) {
        if (shared.isString(oldRef)) {
            refs[oldRef] = null;
            if (shared.hasOwn(setupState, oldRef)) setupState[oldRef] = null;
        } else if (reactivity.isRef(oldRef)) oldRef.value = null;
    }
    if (shared.isString(ref)) {
        const doSet = ()=>{
            refs[ref] = value;
            if (shared.hasOwn(setupState, ref)) setupState[ref] = value;
        };
        // #1789: for non-null values, set them after render
        // null values means this is unmount and it should not overwrite another
        // ref with the same key
        if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
        } else doSet();
    } else if (reactivity.isRef(ref)) {
        const doSet = ()=>{
            ref.value = value;
        };
        if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
        } else doSet();
    } else if (shared.isFunction(ref)) callWithErrorHandling(ref, owner, 12/* FUNCTION_REF */ , [
        value,
        refs
    ]);
    else warn('Invalid template ref type:', value, `(${typeof value})`);
};
/**
 * The createRenderer function accepts two generic arguments:
 * HostNode and HostElement, corresponding to Node and Element types in the
 * host environment. For example, for runtime-dom, HostNode would be the DOM
 * `Node` interface and HostElement would be the DOM `Element` interface.
 *
 * Custom renderers can pass in the platform specific types like this:
 *
 * ``` js
 * const { render, createApp } = createRenderer<Node, Element>({
 *   patchProp,
 *   ...nodeOps
 * })
 * ```
 */ function createRenderer(options) {
    return baseCreateRenderer(options);
}
// Separate API for creating hydration-enabled renderer.
// Hydration logic is only used when calling this function, making it
// tree-shakable.
function createHydrationRenderer(options) {
    return baseCreateRenderer(options, createHydrationFunctions);
}
// implementation
function baseCreateRenderer(options, createHydrationFns) {
    {
        const target = shared.getGlobalThis();
        target.__VUE__ = true;
        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);
    }
    const { insert: hostInsert , remove: hostRemove , patchProp: hostPatchProp , forcePatchProp: hostForcePatchProp , createElement: hostCreateElement , createText: hostCreateText , createComment: hostCreateComment , setText: hostSetText , setElementText: hostSetElementText , parentNode: hostParentNode , nextSibling: hostNextSibling , setScopeId: hostSetScopeId = shared.NOOP , cloneNode: hostCloneNode , insertStaticContent: hostInsertStaticContent  } = options;
    // Note: functions inside this closure should use `const xxx = () => {}`
    // style in order to prevent being inlined by minifiers.
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = false)=>{
        // patching & not same type, unmount old tree
        if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
        }
        if (n2.patchFlag === -2) {
            optimized = false;
            n2.dynamicChildren = null;
        }
        const { type , ref , shapeFlag  } = n2;
        switch(type){
            case Text1:
                processText(n1, n2, container, anchor);
                break;
            case Comment$1:
                processCommentNode(n1, n2, container, anchor);
                break;
            case Static:
                if (n1 == null) mountStaticNode(n2, container, anchor, isSVG);
                else patchStaticNode(n1, n2, container, isSVG);
                break;
            case Fragment:
                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1) processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 6) processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 64) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else if (shapeFlag & 128) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else warn('Invalid VNode type:', type, `(${typeof type})`);
        }
        // set ref
        if (ref != null && parentComponent) setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    };
    const processText = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        else {
            const el = n2.el = n1.el;
            if (n2.children !== n1.children) hostSetText(el, n2.children);
        }
    };
    const processCommentNode = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateComment(n2.children || ''), container, anchor);
        else // there's no support for dynamic comments
        n2.el = n1.el;
    };
    const mountStaticNode = (n2, container, anchor, isSVG)=>{
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    };
    /**
     * Dev / HMR only
     */ const patchStaticNode = (n1, n2, container, isSVG)=>{
        // static nodes are only patched during dev for HMR
        if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            // remove existing
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
        } else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
        }
    };
    const moveStaticNode = ({ el , anchor  }, container, nextSibling)=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
        }
        hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el , anchor  })=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
        }
        hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        isSVG = isSVG || n2.type === 'svg';
        if (n1 == null) mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        else patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let el;
        let vnodeHook;
        const { type , props , shapeFlag , transition , patchFlag , dirs  } = vnode;
        el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
        // mount children first, since some props may rely on child content
        // being already rendered, e.g. `<select value>`
        if (shapeFlag & 8) hostSetElementText(el, vnode.children);
        else if (shapeFlag & 16) mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized || !!vnode.dynamicChildren);
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'created');
        // props
        if (props) {
            for(const key in props)if (!shared.isReservedProp(key)) hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            if (vnodeHook = props.onVnodeBeforeMount) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        // scopeId
        setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        Object.defineProperty(el, '__vnode', {
            value: vnode,
            enumerable: false
        });
        Object.defineProperty(el, '__vueParentComponent', {
            value: parentComponent,
            enumerable: false
        });
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved
        // #1689 For inside suspense + suspense resolved case, just call it
        const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
        if (needCallTransitionHooks) transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
        }, parentSuspense);
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent)=>{
        if (scopeId) hostSetScopeId(el, scopeId);
        if (slotScopeIds) for(let i = 0; i < slotScopeIds.length; i++)hostSetScopeId(el, slotScopeIds[i]);
        if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) subTree = filterSingleRoot(subTree.children) || subTree;
            if (vnode === subTree) {
                const parentVNode = parentComponent.vnode;
                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
            }
        }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0)=>{
        for(let i = start; i < children.length; i++){
            const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const el = n2.el = n1.el;
        let { patchFlag , dynamicChildren , dirs  } = n2;
        // #1426 take the old vnode's patch flag into account since user may clone a
        // compiler-generated vnode, which de-opts to FULL_PROPS
        patchFlag |= n1.patchFlag & 16;
        const oldProps = n1.props || shared.EMPTY_OBJ;
        const newProps = n2.props || shared.EMPTY_OBJ;
        let vnodeHook;
        if (vnodeHook = newProps.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        if (dirs) invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        if (patchFlag > 0) {
            // the presence of a patchFlag means this element's render code was
            // generated by the compiler and can take the fast path.
            // in this path old node and new node are guaranteed to have the same shape
            // (i.e. at the exact same position in the source template)
            if (patchFlag & 16) // element props contain dynamic keys, full diff needed
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
            else {
                // class
                // this flag is matched when the element has dynamic class bindings.
                if (patchFlag & 2) {
                    if (oldProps.class !== newProps.class) hostPatchProp(el, 'class', null, newProps.class, isSVG);
                }
                // style
                // this flag is matched when the element has dynamic style bindings
                if (patchFlag & 4) hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);
                // props
                // This flag is matched when the element has dynamic prop/attr bindings
                // other than class and style. The keys of dynamic prop/attrs are saved for
                // faster iteration.
                // Note dynamic keys like :[foo]="bar" will cause this optimization to
                // bail out and go through a full diff because we need to unset the old key
                if (patchFlag & 8) {
                    // if the flag is present then dynamicProps must be non-null
                    const propsToUpdate = n2.dynamicProps;
                    for(let i = 0; i < propsToUpdate.length; i++){
                        const key = propsToUpdate[i];
                        const prev = oldProps[key];
                        const next = newProps[key];
                        if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                    }
                }
            }
            // text
            // This flag is matched when the element has only dynamic text children.
            if (patchFlag & 1) {
                if (n1.children !== n2.children) hostSetElementText(el, n2.children);
            }
        } else if (!optimized && dynamicChildren == null) // unoptimized, full diff
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';
        if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
        } else if (!optimized) // full diff
        patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');
        }, parentSuspense);
    };
    // The fast path for blocks.
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds)=>{
        for(let i = 0; i < newChildren.length; i++){
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            // Determine the container (parent element) for the patch.
            const container = // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el && (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
            // which also requires the correct parent container
            !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
            oldVNode.shapeFlag & 6 || oldVNode.shapeFlag & 64) ? hostParentNode(oldVNode.el) : // just pass the block element here to avoid a DOM parentNode call.
            fallbackContainer;
            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
    };
    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG)=>{
        if (oldProps !== newProps) {
            for(const key in newProps){
                // empty string is not valid prop
                if (shared.isReservedProp(key)) continue;
                const next = newProps[key];
                const prev = oldProps[key];
                if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
            if (oldProps !== shared.EMPTY_OBJ) {
                for(const key1 in oldProps)if (!shared.isReservedProp(key1) && !(key1 in newProps)) hostPatchProp(el, key1, oldProps[key1], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
        }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText('');
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText('');
        let { patchFlag , dynamicChildren , slotScopeIds: fragmentSlotScopeIds  } = n2;
        if (dynamicChildren) optimized = true;
        // check if this is a slot fragment with :slotted scope ids
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            // a fragment can only have array children
            // since they are either generated by the compiler, or implicitly created
            // from arrays.
            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
        // of renderSlot() with no valid children
        n1.dynamicChildren) {
            // a stable fragment (template root or <template v-for>) doesn't need to
            // patch children order, but it may contain dynamicChildren.
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
            else if (// #2080 if the stable fragment has a key, it's a <template v-for> that may
            //  get moved around. Make sure all root level vnodes inherit el.
            // #2134 or if it's a component root, it may also get moved around
            // as the component is being moved.
            n2.key != null || parentComponent && n2 === parentComponent.subTree) traverseStaticChildren(n1, n2, true);
        } else // keyed / unkeyed, or manual fragments.
        // for keyed & unkeyed, since they are compiler generated from v-for,
        // each child is guaranteed to be a block so the fragment will never
        // have dynamicChildren.
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
            if (n2.shapeFlag & 512) parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
            else mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else updateComponent(n1, n2, optimized);
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized)=>{
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (instance.type.__hmrId) registerHMR(instance);
        pushWarningContext(initialVNode);
        startMeasure(instance, `mount`);
        // inject renderer internals for keepAlive
        if (isKeepAlive(initialVNode)) instance.ctx.renderer = internals;
        startMeasure(instance, `init`);
        setupComponent(instance);
        endMeasure(instance, `init`);
        // setup() is async. This component relies on async logic to be resolved
        // before proceeding
        if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
            // Give it a placeholder if this is not hydration
            // TODO handle self-defined fallback
            if (!initialVNode.el) {
                const placeholder = instance.subTree = createVNode(Comment$1);
                processCommentNode(null, placeholder, container, anchor);
            }
            return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
        popWarningContext();
        endMeasure(instance, `mount`);
    };
    const updateComponent = (n1, n2, optimized)=>{
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep && !instance.asyncResolved) {
                pushWarningContext(n2);
                updateComponentPreRender(instance, n2, optimized);
                popWarningContext();
                return;
            } else {
                // normal update
                instance.next = n2;
                // in case the child component is also queued, remove it to avoid
                // double updating the same child component in the same flush.
                invalidateJob(instance.update);
                // instance.update is the reactive effect runner.
                instance.update();
            }
        } else {
            // no update needed. just copy over properties
            n2.component = n1.component;
            n2.el = n1.el;
            instance.vnode = n2;
        }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized)=>{
        // create reactive effect for rendering
        instance.update = reactivity.effect(function componentEffect() {
            if (!instance.isMounted) {
                let vnodeHook;
                const { el , props  } = initialVNode;
                const { bm , m , parent  } = instance;
                // beforeMount hook
                if (bm) shared.invokeArrayFns(bm);
                // onVnodeBeforeMount
                if (vnodeHook = props && props.onVnodeBeforeMount) invokeVNodeHook(vnodeHook, parent, initialVNode);
                if (el && hydrateNode) {
                    // vnode has adopted host node - perform hydration instead of mount.
                    const hydrateSubTree = ()=>{
                        startMeasure(instance, `render`);
                        instance.subTree = renderComponentRoot(instance);
                        endMeasure(instance, `render`);
                        startMeasure(instance, `hydrate`);
                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                        endMeasure(instance, `hydrate`);
                    };
                    if (isAsyncWrapper(initialVNode)) initialVNode.type.__asyncLoader().then(// note: we are moving the render call into an async callback,
                    // which means it won't track dependencies - but it's ok because
                    // a server-rendered async wrapper is already in resolved state
                    // and it will never need to change.
                    ()=>!instance.isUnmounted && hydrateSubTree()
                    );
                    else hydrateSubTree();
                } else {
                    startMeasure(instance, `render`);
                    const subTree = instance.subTree = renderComponentRoot(instance);
                    endMeasure(instance, `render`);
                    startMeasure(instance, `patch`);
                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
                    endMeasure(instance, `patch`);
                    initialVNode.el = subTree.el;
                }
                // mounted hook
                if (m) queuePostRenderEffect(m, parentSuspense);
                // onVnodeMounted
                if (vnodeHook = props && props.onVnodeMounted) {
                    const scopedInitialVNode = initialVNode;
                    queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, scopedInitialVNode)
                    , parentSuspense);
                }
                // activated hook for keep-alive roots.
                // #1742 activated hook must be accessed after first render
                // since the hook may be injected by a child keep-alive
                if (initialVNode.shapeFlag & 256) instance.a && queuePostRenderEffect(instance.a, parentSuspense);
                instance.isMounted = true;
                devtoolsComponentAdded(instance);
                // #2458: deference mount-only object parameters to prevent memleaks
                initialVNode = container = anchor = null;
            } else {
                // updateComponent
                // This is triggered by mutation of component's own state (next: null)
                // OR parent calling processComponent (next: VNode)
                let { next , bu , u , parent , vnode  } = instance;
                let originNext = next;
                let vnodeHook;
                pushWarningContext(next || instance.vnode);
                if (next) {
                    next.el = vnode.el;
                    updateComponentPreRender(instance, next, optimized);
                } else next = vnode;
                // beforeUpdate hook
                if (bu) shared.invokeArrayFns(bu);
                // onVnodeBeforeUpdate
                if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parent, next, vnode);
                startMeasure(instance, `render`);
                const nextTree = renderComponentRoot(instance);
                endMeasure(instance, `render`);
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                startMeasure(instance, `patch`);
                patch(prevTree, nextTree, // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el), // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree), instance, parentSuspense, isSVG);
                endMeasure(instance, `patch`);
                next.el = nextTree.el;
                if (originNext === null) // self-triggered update. In case of HOC, update parent component
                // vnode el. HOC is indicated by parent instance's subTree pointing
                // to child component's vnode
                updateHOCHostEl(instance, nextTree.el);
                // updated hook
                if (u) queuePostRenderEffect(u, parentSuspense);
                // onVnodeUpdated
                if (vnodeHook = next.props && next.props.onVnodeUpdated) queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, next, vnode)
                , parentSuspense);
                devtoolsComponentUpdated(instance);
                popWarningContext();
            }
        }, createDevEffectOptions(instance));
        // @ts-ignore
        instance.update.ownerInstance = instance;
    };
    const updateComponentPreRender = (instance, nextVNode, optimized)=>{
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        reactivity.pauseTracking();
        // props update may have triggered pre-flush watchers.
        // flush them before the render update.
        flushPreFlushCbs(undefined, instance.update);
        reactivity.resetTracking();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false)=>{
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag , shapeFlag  } = n2;
        // fast path
        if (patchFlag > 0) {
            if (patchFlag & 128) {
                // this could be either fully-keyed or mixed (some keyed some not)
                // presence of patchFlag means children are guaranteed to be arrays
                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            } else if (patchFlag & 256) {
                // unkeyed
                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
        }
        // children has 3 possibilities: text, array or no children.
        if (shapeFlag & 8) {
            // text children fast path
            if (prevShapeFlag & 16) unmountChildren(c1, parentComponent, parentSuspense);
            if (c2 !== c1) hostSetElementText(container, c2);
        } else if (prevShapeFlag & 16) {
            // prev children was array
            if (shapeFlag & 16) // two arrays, cannot assume anything, do full diff
            patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else // no new children, just unmount old
            unmountChildren(c1, parentComponent, parentSuspense, true);
        } else {
            // prev children was text OR null
            // new children is array OR null
            if (prevShapeFlag & 8) hostSetElementText(container, '');
            // mount new if array
            if (shapeFlag & 16) mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        c1 = c1 || shared.EMPTY_ARR;
        c2 = c2 || shared.EMPTY_ARR;
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for(i = 0; i < commonLength; i++){
            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) // remove old
        unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        else // mount new
        mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    };
    // can be all-keyed or mixed
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1; // prev ending index
        let e2 = l2 - 1; // next ending index
        // 1. sync from start
        // (a b) c
        // (a b) d e
        while(i <= e1 && i <= e2){
            const n1 = c1[i];
            const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            i++;
        }
        // 2. sync from end
        // a (b c)
        // d e (b c)
        while(i <= e1 && i <= e2){
            const n1 = c1[e1];
            const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            e1--;
            e2--;
        }
        // 3. common sequence + mount
        // (a b)
        // (a b) c
        // i = 2, e1 = 1, e2 = 2
        // (a b)
        // c (a b)
        // i = 0, e1 = -1, e2 = 0
        if (i > e1) {
            if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while(i <= e2){
                    patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    i++;
                }
            }
        } else if (i > e2) while(i <= e1){
            unmount(c1[i], parentComponent, parentSuspense, true);
            i++;
        }
        else {
            const s1 = i; // prev starting index
            const s2 = i; // next starting index
            // 5.1 build key:index map for newChildren
            const keyToNewIndexMap = new Map();
            for(i = s2; i <= e2; i++){
                const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
                if (nextChild.key != null) {
                    if (keyToNewIndexMap.has(nextChild.key)) warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
                    keyToNewIndexMap.set(nextChild.key, i);
                }
            }
            // 5.2 loop through old children left to be patched and try to patch
            // matching nodes & remove nodes that are no longer present
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            // used to track whether any node has moved
            let maxNewIndexSoFar = 0;
            // works as Map<newIndex, oldIndex>
            // Note that oldIndex is offset by +1
            // and oldIndex = 0 is a special value indicating the new node has
            // no corresponding old node.
            // used for determining longest stable subsequence
            const newIndexToOldIndexMap = new Array(toBePatched);
            for(i = 0; i < toBePatched; i++)newIndexToOldIndexMap[i] = 0;
            for(i = s1; i <= e1; i++){
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                    // all new children have been patched so this can only be a removal
                    unmount(prevChild, parentComponent, parentSuspense, true);
                    continue;
                }
                let newIndex;
                if (prevChild.key != null) newIndex = keyToNewIndexMap.get(prevChild.key);
                else {
                    // key-less node, try to locate a key-less node of the same type
                    for(j = s2; j <= e2; j++)if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                        newIndex = j;
                        break;
                    }
                }
                if (newIndex === undefined) unmount(prevChild, parentComponent, parentSuspense, true);
                else {
                    newIndexToOldIndexMap[newIndex - s2] = i + 1;
                    if (newIndex >= maxNewIndexSoFar) maxNewIndexSoFar = newIndex;
                    else moved = true;
                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    patched++;
                }
            }
            // 5.3 move and mount
            // generate longest stable subsequence only when nodes have moved
            const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : shared.EMPTY_ARR;
            j = increasingNewIndexSequence.length - 1;
            // looping backwards so that we can use last patched node as anchor
            for(i = toBePatched - 1; i >= 0; i--){
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) // mount new
                patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (moved) {
                    // move if:
                    // There is no stable subsequence (e.g. a reverse)
                    // OR current node is not among the stable sequence
                    if (j < 0 || i !== increasingNewIndexSequence[j]) move(nextChild, container, anchor, 2/* REORDER */ );
                    else j--;
                }
            }
        }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null)=>{
        const { el , type , transition , children , shapeFlag  } = vnode;
        if (shapeFlag & 6) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
        }
        if (shapeFlag & 128) {
            vnode.suspense.move(container, anchor, moveType);
            return;
        }
        if (shapeFlag & 64) {
            type.move(vnode, container, anchor, internals);
            return;
        }
        if (type === Fragment) {
            hostInsert(el, container, anchor);
            for(let i = 0; i < children.length; i++)move(children[i], container, anchor, moveType);
            hostInsert(vnode.anchor, container, anchor);
            return;
        }
        if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
        }
        // single nodes
        const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
        if (needTransition) {
            if (moveType === 0) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(()=>transition.enter(el)
                , parentSuspense);
            } else {
                const { leave , delayLeave , afterLeave  } = transition;
                const remove = ()=>hostInsert(el, container, anchor)
                ;
                const performLeave = ()=>{
                    leave(el, ()=>{
                        remove();
                        afterLeave && afterLeave();
                    });
                };
                if (delayLeave) delayLeave(el, remove, performLeave);
                else performLeave();
            }
        } else hostInsert(el, container, anchor);
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false)=>{
        const { type , props , ref , children , dynamicChildren , shapeFlag , patchFlag , dirs  } = vnode;
        // unset ref
        if (ref != null) setRef(ref, null, parentSuspense, vnode, true);
        if (shapeFlag & 256) {
            parentComponent.ctx.deactivate(vnode);
            return;
        }
        const shouldInvokeDirs = shapeFlag & 1 && dirs;
        let vnodeHook;
        if (vnodeHook = props && props.onVnodeBeforeUnmount) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        if (shapeFlag & 6) unmountComponent(vnode.component, parentSuspense, doRemove);
        else {
            if (shapeFlag & 128) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
            }
            if (shouldInvokeDirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');
            if (shapeFlag & 64) vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
            else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64)) // fast path for block nodes: only need to unmount dynamic children.
            unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
            else if (type === Fragment && (patchFlag & 128 || patchFlag & 256) || !optimized && shapeFlag & 16) unmountChildren(children, parentComponent, parentSuspense);
            if (doRemove) remove(vnode);
        }
        if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');
        }, parentSuspense);
    };
    const remove = (vnode)=>{
        const { type , el , anchor , transition  } = vnode;
        if (type === Fragment) {
            removeFragment(el, anchor);
            return;
        }
        if (type === Static) {
            removeStaticNode(vnode);
            return;
        }
        const performRemove = ()=>{
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) transition.afterLeave();
        };
        if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
            const { leave , delayLeave  } = transition;
            const performLeave = ()=>leave(el, performRemove)
            ;
            if (delayLeave) delayLeave(vnode.el, performRemove, performLeave);
            else performLeave();
        } else performRemove();
    };
    const removeFragment = (cur, end)=>{
        // For fragments, directly remove all contained DOM nodes.
        // (fragment child nodes cannot have transition)
        let next;
        while(cur !== end){
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
        }
        hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove)=>{
        if (instance.type.__hmrId) unregisterHMR(instance);
        const { bum , effects , update , subTree , um  } = instance;
        // beforeUnmount hook
        if (bum) shared.invokeArrayFns(bum);
        if (effects) for(let i = 0; i < effects.length; i++)reactivity.stop(effects[i]);
        // update may be null if a component is unmounted before its async
        // setup has resolved.
        if (update) {
            reactivity.stop(update);
            unmount(subTree, instance, parentSuspense, doRemove);
        }
        // unmounted hook
        if (um) queuePostRenderEffect(um, parentSuspense);
        queuePostRenderEffect(()=>{
            instance.isUnmounted = true;
        }, parentSuspense);
        // A component with async dep inside a pending suspense is unmounted before
        // its async dep resolves. This should remove the dep from the suspense, and
        // cause the suspense to resolve immediately if that was the last dep.
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) parentSuspense.resolve();
        }
        devtoolsComponentRemoved(instance);
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0)=>{
        for(let i = start; i < children.length; i++)unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    };
    const getNextHostNode = (vnode)=>{
        if (vnode.shapeFlag & 6) return getNextHostNode(vnode.component.subTree);
        if (vnode.shapeFlag & 128) return vnode.suspense.next();
        return hostNextSibling(vnode.anchor || vnode.el);
    };
    const render = (vnode, container, isSVG)=>{
        if (vnode == null) {
            if (container._vnode) unmount(container._vnode, null, null, true);
        } else patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        flushPostFlushCbs();
        container._vnode = vnode;
    };
    const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) [hydrate, hydrateNode] = createHydrationFns(internals);
    return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
    };
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7/* VNODE_HOOK */ , [
        vnode,
        prevVNode
    ]);
}
/**
 * #1156
 * When a component is HMR-enabled, we need to make sure that all static nodes
 * inside a block also inherit the DOM element from the previous tree so that
 * HMR updates (which are full updates) can retrieve the element for patching.
 *
 * #2080
 * Inside keyed `template` fragment static children, if a fragment is moved,
 * the children will always moved so that need inherit el form previous nodes
 * to ensure correct moved position.
 */ function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if (shared.isArray(ch1) && shared.isArray(ch2)) for(let i = 0; i < ch1.length; i++){
        // this is only called in the optimized path so array children are
        // guaranteed to be vnodes
        const c1 = ch1[i];
        let c2 = ch2[i];
        if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
                c2 = ch2[i] = cloneIfMounted(ch2[i]);
                c2.el = c1.el;
            }
            if (!shallow) traverseStaticChildren(c1, c2);
        }
        // also inherit for comment nodes, but not placeholders (e.g. v-if which
        // would have received .el during block patch)
        if (c2.type === Comment$1 && !c2.el) c2.el = c1.el;
    }
}
// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function getSequence(arr) {
    const p = arr.slice();
    const result = [
        0
    ];
    let i, j, u, v, c;
    const len = arr.length;
    for(i = 0; i < len; i++){
        const arrI = arr[i];
        if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while(u < v){
                c = (u + v) / 2 | 0;
                if (arr[result[c]] < arrI) u = c + 1;
                else v = c;
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) p[i] = result[u - 1];
                result[u] = i;
            }
        }
    }
    u = result.length;
    v = result[u - 1];
    while((u--) > 0){
        result[u] = v;
        v = p[v];
    }
    return result;
}
const isTeleport = (type)=>type.__isTeleport
;
const isTeleportDisabled = (props)=>props && (props.disabled || props.disabled === '')
;
const isTargetSVG = (target)=>typeof SVGElement !== 'undefined' && target instanceof SVGElement
;
const resolveTarget = (props, select)=>{
    const targetSelector = props && props.to;
    if (shared.isString(targetSelector)) {
        if (!select) {
            warn(`Current renderer does not support string target for Teleports. ` + `(missing querySelector renderer option)`);
            return null;
        } else {
            const target = select(targetSelector);
            if (!target) warn(`Failed to locate Teleport target with selector "${targetSelector}". ` + `Note the target element must exist before the component is mounted - ` + `i.e. the target cannot be rendered by the component itself, and ` + `ideally should be outside of the entire Vue component tree.`);
            return target;
        }
    } else {
        if (!targetSelector && !isTeleportDisabled(props)) warn(`Invalid Teleport target: ${targetSelector}`);
        return targetSelector;
    }
};
const TeleportImpl = {
    __isTeleport: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren , pc: patchChildren , pbc: patchBlockChildren , o: { insert , querySelector , createText , createComment  }  } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag , children , dynamicChildren  } = n2;
        // #3302
        // HMR updated, force full diff
        if (isHmrUpdating) {
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            // insert anchors in the main view
            const placeholder = n2.el = createComment('teleport start');
            const mainAnchor = n2.anchor = createComment('teleport end');
            insert(placeholder, container, anchor);
            insert(mainAnchor, container, anchor);
            const target = n2.target = resolveTarget(n2.props, querySelector);
            const targetAnchor = n2.targetAnchor = createText('');
            if (target) {
                insert(targetAnchor, target);
                // #2652 we could be teleporting from a non-SVG tree into an SVG tree
                isSVG = isSVG || isTargetSVG(target);
            } else if (!disabled) warn('Invalid Teleport target on mount:', target, `(${typeof target})`);
            const mount = (container, anchor)=>{
                // Teleport *always* has Array children. This is enforced in both the
                // compiler and vnode children normalization.
                if (shapeFlag & 16) mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            };
            if (disabled) mount(container, mainAnchor);
            else if (target) mount(target, targetAnchor);
        } else {
            // update content
            n2.el = n1.el;
            const mainAnchor = n2.anchor = n1.anchor;
            const target = n2.target = n1.target;
            const targetAnchor = n2.targetAnchor = n1.targetAnchor;
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            isSVG = isSVG || isTargetSVG(target);
            if (dynamicChildren) {
                // fast path when the teleport happens to be a block root
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
                // even in block tree mode we need to make sure all root-level nodes
                // in the teleport inherit previous DOM references so that they can
                // be moved in future patches.
                traverseStaticChildren(n1, n2, true);
            } else if (!optimized) patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
            if (disabled) {
                if (!wasDisabled) // enabled -> disabled
                // move into main container
                moveTeleport(n2, container, mainAnchor, internals, 1/* TOGGLE */ );
            } else {
                // target changed
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                    const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
                    if (nextTarget) moveTeleport(n2, nextTarget, null, internals, 0/* TARGET_CHANGE */ );
                    else warn('Invalid Teleport target on update:', target, `(${typeof target})`);
                } else if (wasDisabled) // disabled -> enabled
                // move into teleport target
                moveTeleport(n2, target, targetAnchor, internals, 1/* TOGGLE */ );
            }
        }
    },
    remove (vnode, parentComponent, parentSuspense, optimized, { um: unmount , o: { remove: hostRemove  }  }, doRemove) {
        const { shapeFlag , children , anchor , targetAnchor , target , props  } = vnode;
        if (target) hostRemove(targetAnchor);
        // an unmounted teleport should always remove its children if not disabled
        if (doRemove || !isTeleportDisabled(props)) {
            hostRemove(anchor);
            if (shapeFlag & 16) for(let i = 0; i < children.length; i++){
                const child = children[i];
                unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
        }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert  } , m: move  }, moveType = 2/* REORDER */ ) {
    // move target anchor if this is a target change.
    if (moveType === 0) insert(vnode.targetAnchor, container, parentAnchor);
    const { el , anchor , shapeFlag , children , props  } = vnode;
    const isReorder = moveType === 2/* REORDER */ ;
    // move main view anchor if this is a re-order.
    if (isReorder) insert(el, container, parentAnchor);
    // if this is a re-order and teleport is enabled (content is in target)
    // do not move children. So the opposite is: only move children if this
    // is not a reorder, or the teleport is disabled
    if (!isReorder || isTeleportDisabled(props)) {
        // Teleport has either Array children or no children.
        if (shapeFlag & 16) for(let i = 0; i < children.length; i++)move(children[i], container, parentAnchor, 2/* REORDER */ );
    }
    // move main view anchor if this is a re-order.
    if (isReorder) insert(anchor, container, parentAnchor);
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling , parentNode , querySelector  }  }, hydrateChildren) {
    const target = vnode.target = resolveTarget(vnode.props, querySelector);
    if (target) {
        // if multiple teleports rendered to the same target element, we need to
        // pick up from where the last teleport finished instead of the first node
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16) {
            if (isTeleportDisabled(vnode.props)) {
                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
                vnode.targetAnchor = targetNode;
            } else {
                vnode.anchor = nextSibling(node);
                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
        }
    }
    return vnode.anchor && nextSibling(vnode.anchor);
}
// Force-casted public typing for h and TSX props inference
const Teleport = TeleportImpl;
const COMPONENTS = 'components';
const DIRECTIVES = 'directives';
/**
 * @private
 */ function resolveComponent(name, maybeSelfReference) {
    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
/**
 * @private
 */ function resolveDynamicComponent(component) {
    if (shared.isString(component)) return resolveAsset(COMPONENTS, component, false) || component;
    else // invalid types will fallthrough to createVNode and raise warning
    return component || NULL_DYNAMIC_COMPONENT;
}
/**
 * @private
 */ function resolveDirective(name) {
    return resolveAsset(DIRECTIVES, name);
}
// implementation
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
        const Component = instance.type;
        // explicit self name has highest priority
        if (type === COMPONENTS) {
            const selfName = getComponentName(Component);
            if (selfName && (selfName === name || selfName === shared.camelize(name) || selfName === shared.capitalize(shared.camelize(name)))) return Component;
        }
        const res = // local registration
        // check instance[type] first which is resolved for options API
        resolve(instance[type] || Component[type], name) || // global registration
        resolve(instance.appContext[type], name);
        if (!res && maybeSelfReference) // fallback to implicit self-reference
        return Component;
        if (warnMissing && !res) warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);
        return res;
    } else warn(`resolve${shared.capitalize(type.slice(0, -1))} ` + `can only be used in render() or setup().`);
}
function resolve(registry, name) {
    return registry && (registry[name] || registry[shared.camelize(name)] || registry[shared.capitalize(shared.camelize(name))]);
}
const Fragment = Symbol('Fragment');
const Text1 = Symbol('Text');
const Comment$1 = Symbol('Comment');
const Static = Symbol('Static');
// Since v-if and v-for are the two possible ways node structure can dynamically
// change, once we consider v-if branches and each v-for fragment a block, we
// can divide a template into nested blocks, and within each block the node
// structure would be stable. This allows us to skip most children diffing
// and only worry about the dynamic nodes (indicated by patch flags).
const blockStack = [];
let currentBlock = null;
/**
 * Open a block.
 * This must be called before `createBlock`. It cannot be part of `createBlock`
 * because the children of the block are evaluated before `createBlock` itself
 * is called. The generated code typically looks like this:
 *
 * ```js
 * function render() {
 *   return (openBlock(),createBlock('div', null, [...]))
 * }
 * ```
 * disableTracking is true when creating a v-for fragment block, since a v-for
 * fragment always diffs its children.
 *
 * @private
 */ function openBlock(disableTracking = false) {
    blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
}
// Whether we should be tracking dynamic child nodes inside a block.
// Only tracks when this value is > 0
// We are not using a simple boolean because this value may need to be
// incremented/decremented by nested usage of v-once (see below)
let isBlockTreeEnabled = 1;
/**
 * Block tracking sometimes needs to be disabled, for example during the
 * creation of a tree that needs to be cached by v-once. The compiler generates
 * code like this:
 *
 * ``` js
 * _cache[1] || (
 *   setBlockTracking(-1),
 *   _cache[1] = createVNode(...),
 *   setBlockTracking(1),
 *   _cache[1]
 * )
 * ```
 *
 * @private
 */ function setBlockTracking(value) {
    isBlockTreeEnabled += value;
}
/**
 * Create a block root vnode. Takes the same exact arguments as `createVNode`.
 * A block root keeps track of dynamic nodes within the block in the
 * `dynamicChildren` array.
 *
 * @private
 */ function createBlock(type, props, children, patchFlag, dynamicProps) {
    const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true);
    // save current block children on the block vnode
    vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || shared.EMPTY_ARR : null;
    // close block
    closeBlock();
    // a block is always going to be patched, so track it as a child of its
    // parent block
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(vnode);
    return vnode;
}
function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
    if (n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) // HMR only: if the component has been hot-updated, force a reload.
    return false;
    return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
/**
 * Internal API for registering an arguments transform for createVNode
 * used for creating stubs in the test-utils
 * It is *internal* but needs to be exposed for test-utils to pick up proper
 * typings
 */ function transformVNodeArgs(transformer) {
    vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args)=>{
    return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key  })=>key != null ? key : null
;
const normalizeRef = ({ ref  })=>{
    return ref != null ? shared.isString(ref) || reactivity.isRef(ref) || shared.isFunction(ref) ? {
        i: currentRenderingInstance,
        r: ref
    } : ref : null;
};
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (!type) warn(`Invalid vnode type when creating vnode: ${type}.`);
        type = Comment$1;
    }
    if (isVNode(type)) {
        // createVNode receiving an existing vnode. This happens in cases like
        // <component :is="vnode"/>
        // #2078 make sure to merge refs during the clone instead of overwriting it
        const cloned = cloneVNode(type, props, true);
        if (children) normalizeChildren(cloned, children);
        return cloned;
    }
    // class component normalization.
    if (isClassComponent(type)) type = type.__vccOpts;
    // class & style normalization.
    if (props) {
        // for reactive or proxy objects, we need to clone it to enable mutation.
        if (reactivity.isProxy(props) || InternalObjectKey in props) props = shared.extend({
        }, props);
        let { class: klass , style  } = props;
        if (klass && !shared.isString(klass)) props.class = shared.normalizeClass(klass);
        if (shared.isObject(style)) {
            // reactive state objects need to be cloned since they are likely to be
            // mutated
            if (reactivity.isProxy(style) && !shared.isArray(style)) style = shared.extend({
            }, style);
            props.style = shared.normalizeStyle(style);
        }
    }
    // encode the vnode type information into a bitmap
    const shapeFlag = shared.isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : shared.isObject(type) ? 4 : shared.isFunction(type) ? 2 : 0;
    if (shapeFlag & 4 && reactivity.isProxy(type)) {
        type = reactivity.toRaw(type);
        warn(`Vue received a Component which was made a reactive object. This can ` + `lead to unnecessary performance overhead, and should be avoided by ` + `marking the component with \`markRaw\` or using \`shallowRef\` ` + `instead of \`ref\`.`, `\nComponent that was made reactive: `, type);
    }
    const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children: null,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null
    };
    // validate key
    if (vnode.key !== vnode.key) warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
    normalizeChildren(vnode, children);
    // normalize suspense children
    if (shapeFlag & 128) type.normalize(vnode);
    if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
    !isBlockNode && // has current parent block
    currentBlock && (patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
    // vnode should not be considered dynamic due to handler caching.
    patchFlag !== 32) currentBlock.push(vnode);
    return vnode;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
    // This is intentionally NOT using spread or extend to avoid the runtime
    // key enumeration cost.
    const { props , ref , patchFlag , children  } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {
    }, extraProps) : props;
    const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? // if the vnode itself already has a ref, cloneVNode will need to merge
        // the refs so the single vnode can be set on multiple refs
        mergeRef && ref ? shared.isArray(ref) ? ref.concat(normalizeRef(extraProps)) : [
            ref,
            normalizeRef(extraProps)
        ] : normalizeRef(extraProps) : ref,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children: patchFlag === -1 && shared.isArray(children) ? children.map(deepCloneVNode) : children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: perserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor
    };
    return cloned;
}
/**
 * Dev only, for HMR of hoisted vnodes reused in v-for
 * https://github.com/vitejs/vite/issues/2022
 */ function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if (shared.isArray(vnode.children)) cloned.children = vnode.children.map(deepCloneVNode);
    return cloned;
}
/**
 * @private
 */ function createTextVNode(text = ' ', flag = 0) {
    return createVNode(Text1, null, text, flag);
}
/**
 * @private
 */ function createStaticVNode(content, numberOfNodes) {
    // A static vnode can contain multiple stringified elements, and the number
    // of elements is necessary for hydration.
    const vnode = createVNode(Static, null, content);
    vnode.staticCount = numberOfNodes;
    return vnode;
}
/**
 * @private
 */ function createCommentVNode(text = '', // when used as the v-else branch, the comment node must be created as a
// block to ensure correct updates.
asBlock = false) {
    return asBlock ? (openBlock(), createBlock(Comment$1, null, text)) : createVNode(Comment$1, null, text);
}
function normalizeVNode(child) {
    if (child == null || typeof child === 'boolean') // empty placeholder
    return createVNode(Comment$1);
    else if (shared.isArray(child)) // fragment
    return createVNode(Fragment, null, // #3666, avoid reference pollution when reusing vnode
    child.slice());
    else if (typeof child === 'object') // already vnode, this should be the most common since compiled templates
    // always produce all-vnode children arrays
    return cloneIfMounted(child);
    else // strings and numbers
    return createVNode(Text1, null, String(child));
}
// optimized normalization for template-compiled render fns
function cloneIfMounted(child) {
    return child.el === null ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag  } = vnode;
    if (children == null) children = null;
    else if (shared.isArray(children)) type = 16;
    else if (typeof children === 'object') {
        if (shapeFlag & 1 || shapeFlag & 64) {
            // Normalize slot to plain children for plain element and Teleport
            const slot = children.default;
            if (slot) {
                // _c marker is added by withCtx() indicating this is a compiled slot
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
            }
            return;
        } else {
            type = 32;
            const slotFlag = children._;
            if (!slotFlag && !(InternalObjectKey in children)) children._ctx = currentRenderingInstance;
            else if (slotFlag === 3 && currentRenderingInstance) {
                // a child component receives forwarded slots from the parent.
                // its slot type is determined by its parent's slot type.
                if (currentRenderingInstance.slots._ === 1) children._ = 1;
                else {
                    children._ = 2;
                    vnode.patchFlag |= 1024;
                }
            }
        }
    } else if (shared.isFunction(children)) {
        children = {
            default: children,
            _ctx: currentRenderingInstance
        };
        type = 32;
    } else {
        children = String(children);
        // force teleport children to array so it can be moved around
        if (shapeFlag & 64) {
            type = 16;
            children = [
                createTextVNode(children)
            ];
        } else type = 8;
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
}
function mergeProps(...args) {
    const ret = shared.extend({
    }, args[0]);
    for(let i = 1; i < args.length; i++){
        const toMerge = args[i];
        for(const key in toMerge){
            if (key === 'class') {
                if (ret.class !== toMerge.class) ret.class = shared.normalizeClass([
                    ret.class,
                    toMerge.class
                ]);
            } else if (key === 'style') ret.style = shared.normalizeStyle([
                ret.style,
                toMerge.style
            ]);
            else if (shared.isOn(key)) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (existing !== incoming) ret[key] = existing ? [].concat(existing, incoming) : incoming;
            } else if (key !== '') ret[key] = toMerge[key];
        }
    }
    return ret;
}
/**
 * Actual implementation
 */ function renderList(source, renderItem) {
    let ret;
    if (shared.isArray(source) || shared.isString(source)) {
        ret = new Array(source.length);
        for(let i = 0, l = source.length; i < l; i++)ret[i] = renderItem(source[i], i);
    } else if (typeof source === 'number') {
        if (!Number.isInteger(source)) {
            warn(`The v-for range expect an integer value but got ${source}.`);
            return [];
        }
        ret = new Array(source);
        for(let i = 0; i < source; i++)ret[i] = renderItem(i + 1, i);
    } else if (shared.isObject(source)) {
        if (source[Symbol.iterator]) ret = Array.from(source, renderItem);
        else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for(let i = 0, l = keys.length; i < l; i++){
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i);
            }
        }
    } else ret = [];
    return ret;
}
/**
 * Compiler runtime helper for creating dynamic slots object
 * @private
 */ function createSlots(slots, dynamicSlots) {
    for(let i = 0; i < dynamicSlots.length; i++){
        const slot = dynamicSlots[i];
        // array of dynamic slot generated by <template v-for="..." #[...]>
        if (shared.isArray(slot)) for(let j = 0; j < slot.length; j++)slots[slot[j].name] = slot[j].fn;
        else if (slot) // conditional single slot generated by <template v-if="..." #foo>
        slots[slot.name] = slot.fn;
    }
    return slots;
}
/**
 * Compiler runtime helper for rendering `<slot/>`
 * @private
 */ function renderSlot(slots, name, props = {
}, // this is not a user-facing function, so the fallback is always generated by
// the compiler and guaranteed to be a function returning an array
fallback, noSlotted) {
    let slot = slots[name];
    if (slot && slot.length > 1) {
        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` + `function. You need to mark this component with $dynamic-slots in the ` + `parent template.`);
        slot = ()=>[]
        ;
    }
    // a compiled slot disables block tracking by default to avoid manual
    // invocation interfering with template-based block tracking, but in
    // `renderSlot` we can be sure that it's template-based so we can force
    // enable it.
    if (slot && slot._c) slot._d = false;
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const rendered = createBlock(Fragment, {
        key: props.key || `_${name}`
    }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 ? 64 : -2/* BAIL */ );
    if (!noSlotted && rendered.scopeId) rendered.slotScopeIds = [
        rendered.scopeId + '-s'
    ];
    if (slot && slot._c) slot._d = true;
    return rendered;
}
function ensureValidVNode(vnodes) {
    return vnodes.some((child)=>{
        if (!isVNode(child)) return true;
        if (child.type === Comment$1) return false;
        if (child.type === Fragment && !ensureValidVNode(child.children)) return false;
        return true;
    }) ? vnodes : null;
}
/**
 * For prefixing keys in v-on="obj" with "on"
 * @private
 */ function toHandlers(obj) {
    const ret = {
    };
    if (!shared.isObject(obj)) {
        warn(`v-on with no argument expects an object value.`);
        return ret;
    }
    for(const key in obj)ret[shared.toHandlerKey(key)] = obj[key];
    return ret;
}
/**
 * #2437 In Vue 3, functional components do not have a public instance proxy but
 * they exist in the internal parent chain. For code that relies on traversing
 * public $parent chains, skip functional ones and go to the parent instead.
 */ const getPublicInstance = (i)=>{
    if (!i) return null;
    if (isStatefulComponent(i)) return i.exposed ? i.exposed : i.proxy;
    return getPublicInstance(i.parent);
};
const publicPropertiesMap = shared.extend(Object.create(null), {
    $: (i)=>i
    ,
    $el: (i)=>i.vnode.el
    ,
    $data: (i)=>i.data
    ,
    $props: (i)=>reactivity.shallowReadonly(i.props)
    ,
    $attrs: (i)=>reactivity.shallowReadonly(i.attrs)
    ,
    $slots: (i)=>reactivity.shallowReadonly(i.slots)
    ,
    $refs: (i)=>reactivity.shallowReadonly(i.refs)
    ,
    $parent: (i)=>getPublicInstance(i.parent)
    ,
    $root: (i)=>getPublicInstance(i.root)
    ,
    $emit: (i)=>i.emit
    ,
    $options: (i)=>resolveMergedOptions(i)
    ,
    $forceUpdate: (i)=>()=>queueJob(i.update)
    ,
    $nextTick: (i)=>nextTick.bind(i.proxy)
    ,
    $watch: (i)=>instanceWatch.bind(i)
});
const PublicInstanceProxyHandlers = {
    get ({ _: instance  }, key) {
        const { ctx , setupState , data , props , accessCache , type , appContext  } = instance;
        // let @vue/reactivity know it should never observe Vue public instances.
        if (key === "__v_skip") return true;
        // for internal formatters to know that this is a Vue instance
        if (key === '__isVue') return true;
        // data / props / ctx
        // This getter gets called for every property access on the render context
        // during render and is a major hotspot. The most expensive part of this
        // is the multiple hasOwn() calls. It's much faster to do a simple property
        // access on a plain object, so we use an accessCache object (with null
        // prototype) to memoize what access type a key corresponds to.
        let normalizedProps;
        if (key[0] !== '$') {
            const n = accessCache[key];
            if (n !== undefined) switch(n){
                case 0:
                    return setupState[key];
                case 1:
                    return data[key];
                case 3:
                    return ctx[key];
                case 2:
                    return props[key];
            }
            else if (setupState !== shared.EMPTY_OBJ && shared.hasOwn(setupState, key)) {
                accessCache[key] = 0;
                return setupState[key];
            } else if (data !== shared.EMPTY_OBJ && shared.hasOwn(data, key)) {
                accessCache[key] = 1;
                return data[key];
            } else if (// only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) && shared.hasOwn(normalizedProps, key)) {
                accessCache[key] = 2;
                return props[key];
            } else if (ctx !== shared.EMPTY_OBJ && shared.hasOwn(ctx, key)) {
                accessCache[key] = 3;
                return ctx[key];
            } else if (shouldCacheAccess) accessCache[key] = 4;
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        // public $xxx properties
        if (publicGetter) {
            if (key === '$attrs') {
                reactivity.track(instance, "get"/* GET */ , key);
                markAttrsAccessed();
            }
            return publicGetter(instance);
        } else if (// css module (injected by vue-loader)
        (cssModule = type.__cssModules) && (cssModule = cssModule[key])) return cssModule;
        else if (ctx !== shared.EMPTY_OBJ && shared.hasOwn(ctx, key)) {
            // user may set custom properties to `this` that start with `$`
            accessCache[key] = 3;
            return ctx[key];
        } else if (globalProperties = appContext.config.globalProperties, shared.hasOwn(globalProperties, key)) return globalProperties[key];
        else if (currentRenderingInstance && (!shared.isString(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
        // to infinite warning loop
        key.indexOf('__v') !== 0)) {
            if (data !== shared.EMPTY_OBJ && (key[0] === '$' || key[0] === '_') && shared.hasOwn(data, key)) warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` + `character ("$" or "_") and is not proxied on the render context.`);
            else if (instance === currentRenderingInstance) warn(`Property ${JSON.stringify(key)} was accessed during render ` + `but is not defined on instance.`);
        }
    },
    set ({ _: instance  }, key, value) {
        const { data , setupState , ctx  } = instance;
        if (setupState !== shared.EMPTY_OBJ && shared.hasOwn(setupState, key)) setupState[key] = value;
        else if (data !== shared.EMPTY_OBJ && shared.hasOwn(data, key)) data[key] = value;
        else if (shared.hasOwn(instance.props, key)) {
            warn(`Attempting to mutate prop "${key}". Props are readonly.`, instance);
            return false;
        }
        if (key[0] === '$' && key.slice(1) in instance) {
            warn(`Attempting to mutate public property "${key}". ` + `Properties starting with $ are reserved and readonly.`, instance);
            return false;
        } else if (key in instance.appContext.config.globalProperties) Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            value
        });
        else ctx[key] = value;
        return true;
    },
    has ({ _: { data , setupState , accessCache , ctx , appContext , propsOptions  }  }, key) {
        let normalizedProps;
        return accessCache[key] !== undefined || data !== shared.EMPTY_OBJ && shared.hasOwn(data, key) || setupState !== shared.EMPTY_OBJ && shared.hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && shared.hasOwn(normalizedProps, key) || shared.hasOwn(ctx, key) || shared.hasOwn(publicPropertiesMap, key) || shared.hasOwn(appContext.config.globalProperties, key);
    }
};
PublicInstanceProxyHandlers.ownKeys = (target)=>{
    warn(`Avoid app logic that relies on enumerating keys on a component instance. ` + `The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
};
const RuntimeCompiledPublicInstanceProxyHandlers = shared.extend({
}, PublicInstanceProxyHandlers, {
    get (target, key) {
        // fast path for unscopables when using `with` block
        if (key === Symbol.unscopables) return;
        return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has (_, key) {
        const has = key[0] !== '_' && !shared.isGloballyWhitelisted(key);
        if (!has && PublicInstanceProxyHandlers.has(_, key)) warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        return has;
    }
});
// In dev mode, the proxy target exposes the same properties as seen on `this`
// for easier console inspection. In prod mode it will be an empty object so
// these properties definitions can be skipped.
function createRenderContext(instance) {
    const target = {
    };
    // expose internal instance for proxy handlers
    Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: ()=>instance
    });
    // expose public properties
    Object.keys(publicPropertiesMap).forEach((key)=>{
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: ()=>publicPropertiesMap[key](instance)
            ,
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: shared.NOOP
        });
    });
    return target;
}
// dev only
function exposePropsOnRenderContext(instance) {
    const { ctx , propsOptions: [propsOptions]  } = instance;
    if (propsOptions) Object.keys(propsOptions).forEach((key)=>{
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>instance.props[key]
            ,
            set: shared.NOOP
        });
    });
}
// dev only
function exposeSetupStateOnRenderContext(instance) {
    const { ctx , setupState  } = instance;
    Object.keys(reactivity.toRaw(setupState)).forEach((key)=>{
        if (key[0] === '$' || key[0] === '_') {
            warn(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" ` + `which are reserved prefixes for Vue internals.`);
            return;
        }
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>setupState[key]
            ,
            set: shared.NOOP
        });
    });
}
const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    // inherit parent app context - or - if root, adopt from root vnode
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
        uid: uid$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        update: null,
        render: null,
        proxy: null,
        exposed: null,
        withProxy: null,
        effects: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        // local resovled assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        emitted: null,
        // props default value
        propsDefaults: shared.EMPTY_OBJ,
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: shared.EMPTY_OBJ,
        data: shared.EMPTY_OBJ,
        props: shared.EMPTY_OBJ,
        attrs: shared.EMPTY_OBJ,
        slots: shared.EMPTY_OBJ,
        refs: shared.EMPTY_OBJ,
        setupState: shared.EMPTY_OBJ,
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
    };
    instance.ctx = createRenderContext(instance);
    instance.root = parent ? parent.root : instance;
    instance.emit = emit.bind(null, instance);
    return instance;
}
let currentInstance = null;
const getCurrentInstance = ()=>currentInstance || currentRenderingInstance
;
const setCurrentInstance = (instance)=>{
    currentInstance = instance;
};
const isBuiltInTag = /*#__PURE__*/ shared.makeMap('slot,component');
function validateComponentName(name, config) {
    const appIsNativeTag = config.isNativeTag || shared.NO;
    if (isBuiltInTag(name) || appIsNativeTag(name)) warn('Do not use built-in or reserved HTML elements as component id: ' + name);
}
function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
    isInSSRComponentSetup = isSSR;
    const { props , children  } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children);
    const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : undefined;
    isInSSRComponentSetup = false;
    return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
    const Component = instance.type;
    if (Component.name) validateComponentName(Component.name, instance.appContext.config);
    if (Component.components) {
        const names = Object.keys(Component.components);
        for(let i = 0; i < names.length; i++)validateComponentName(names[i], instance.appContext.config);
    }
    if (Component.directives) {
        const names = Object.keys(Component.directives);
        for(let i = 0; i < names.length; i++)validateDirectiveName(names[i]);
    }
    if (Component.compilerOptions && isRuntimeOnly()) warn(`"compilerOptions" is only supported when using a build of Vue that ` + `includes the runtime compiler. Since you are using a runtime-only ` + `build, the options should be passed via your build tool config instead.`);
    // 0. create render proxy property access cache
    instance.accessCache = Object.create(null);
    // 1. create public instance / render proxy
    // also mark it raw so it's never observed
    instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
    exposePropsOnRenderContext(instance);
    // 2. call setup()
    const { setup  } = Component;
    if (setup) {
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        currentInstance = instance;
        reactivity.pauseTracking();
        const setupResult = callWithErrorHandling(setup, instance, 0/* SETUP_FUNCTION */ , [
            reactivity.shallowReadonly(instance.props),
            setupContext
        ]);
        reactivity.resetTracking();
        currentInstance = null;
        if (shared.isPromise(setupResult)) {
            if (isSSR) // return the promise so server-renderer can wait on it
            return setupResult.then((resolvedResult)=>{
                handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e)=>{
                handleError(e, instance, 0/* SETUP_FUNCTION */ );
            });
            else // async setup returned Promise.
            // bail here and wait for re-entry.
            instance.asyncDep = setupResult;
        } else handleSetupResult(instance, setupResult, isSSR);
    } else finishComponentSetup(instance, isSSR);
}
function handleSetupResult(instance, setupResult, isSSR) {
    if (shared.isFunction(setupResult)) {
        // setup returned an inline render function
        if (instance.type.__ssrInlineRender) // when the function's name is `ssrRender` (compiled by SFC inline mode),
        // set it as ssrRender instead.
        instance.ssrRender = setupResult;
        else instance.render = setupResult;
    } else if (shared.isObject(setupResult)) {
        if (isVNode(setupResult)) warn(`setup() should not return VNodes directly - ` + `return a render function instead.`);
        instance.devtoolsRawSetupState = setupResult;
        instance.setupState = reactivity.proxyRefs(setupResult);
        exposeSetupStateOnRenderContext(instance);
    } else if (setupResult !== undefined) warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);
    finishComponentSetup(instance, isSSR);
}
let compile;
// dev only
const isRuntimeOnly = ()=>!compile
;
/**
 * For runtime-dom to register the compiler.
 * Note the exported method uses any to avoid d.ts relying on the compiler types.
 */ function registerRuntimeCompiler(_compile) {
    compile = _compile;
}
function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    // template / render function normalization
    if (isSSR) // 1. the render function may already exist, returned by `setup`
    // 2. otherwise try to use the `Component.render`
    // 3. if the component doesn't have a render function,
    //    set `instance.render` to NOOP so that it can inherit the render
    //    function from mixins/extend
    instance.render = instance.render || Component.render || shared.NOOP;
    else if (!instance.render) {
        // could be set from setup()
        if (compile && !Component.render) {
            const template = Component.template;
            if (template) {
                startMeasure(instance, `compile`);
                const { isCustomElement , compilerOptions  } = instance.appContext.config;
                const { delimiters , compilerOptions: componentCompilerOptions  } = Component;
                const finalCompilerOptions = shared.extend(shared.extend({
                    isCustomElement,
                    delimiters
                }, compilerOptions), componentCompilerOptions);
                Component.render = compile(template, finalCompilerOptions);
                endMeasure(instance, `compile`);
            }
        }
        instance.render = Component.render || shared.NOOP;
        // for runtime-compiled render functions using `with` blocks, the render
        // proxy used needs a different `has` handler which is more performant and
        // also only allows a whitelist of globals to fallthrough.
        if (instance.render._rc) instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
    currentInstance = instance;
    reactivity.pauseTracking();
    applyOptions(instance);
    reactivity.resetTracking();
    currentInstance = null;
    // warn missing template/render
    // the runtime compilation of template in SSR is done by server-render
    if (!Component.render && instance.render === shared.NOOP && !isSSR) {
        /* istanbul ignore if */ if (!compile && Component.template) warn(`Component provided template option but ` + `runtime compilation is not supported in this build of Vue.` + ``);
        else warn(`Component is missing template or render function.`);
    }
}
const attrHandlers = {
    get: (target, key)=>{
        markAttrsAccessed();
        return target[key];
    },
    set: ()=>{
        warn(`setupContext.attrs is readonly.`);
        return false;
    },
    deleteProperty: ()=>{
        warn(`setupContext.attrs is readonly.`);
        return false;
    }
};
function createSetupContext(instance) {
    const expose = (exposed)=>{
        if (instance.exposed) warn(`expose() should be called only once per setup().`);
        instance.exposed = reactivity.proxyRefs(exposed);
    };
    // We use getters in dev in case libs like test-utils overwrite instance
    // properties (overwrites should not be done in prod)
    return Object.freeze({
        get attrs () {
            return new Proxy(instance.attrs, attrHandlers);
        },
        get slots () {
            return reactivity.shallowReadonly(instance.slots);
        },
        get emit () {
            return (event, ...args)=>instance.emit(event, ...args)
            ;
        },
        expose
    });
}
// record effects created during a component's setup() so that they can be
// stopped when the component unmounts
function recordInstanceBoundEffect(effect, instance = currentInstance) {
    if (instance) (instance.effects || (instance.effects = [])).push(effect);
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str)=>str.replace(classifyRE, (c)=>c.toUpperCase()
    ).replace(/[-_]/g, '')
;
function getComponentName(Component) {
    return shared.isFunction(Component) ? Component.displayName || Component.name : Component.name;
}
/* istanbul ignore next */ function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) name = match[1];
    }
    if (!name && instance && instance.parent) {
        // try to infer the name based on reverse resolution
        const inferFromRegistry = (registry)=>{
            for(const key in registry){
                if (registry[key] === Component) return key;
            }
        };
        name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
    return shared.isFunction(value) && '__vccOpts' in value;
}
function computed(getterOrOptions) {
    const c = reactivity.computed(getterOrOptions);
    recordInstanceBoundEffect(c.effect);
    return c;
}
// implementation
function defineProps() {
    warn(`defineProps() is a compiler-hint helper that is only usable inside ` + `<script setup> of a single file component. Its arguments should be ` + `compiled away and passing it at runtime has no effect.`);
    return null;
}
// implementation
function defineEmit() {
    warn(`defineEmit() is a compiler-hint helper that is only usable inside ` + `<script setup> of a single file component. Its arguments should be ` + `compiled away and passing it at runtime has no effect.`);
    return null;
}
function useContext() {
    const i = getCurrentInstance();
    if (!i) warn(`useContext() called without active instance.`);
    return i.setupContext || (i.setupContext = createSetupContext(i));
}
// Actual implementation
function h(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
        if (shared.isObject(propsOrChildren) && !shared.isArray(propsOrChildren)) {
            // single vnode without props
            if (isVNode(propsOrChildren)) return createVNode(type, null, [
                propsOrChildren
            ]);
            // props without children
            return createVNode(type, propsOrChildren);
        } else // omit props
        return createVNode(type, null, propsOrChildren);
    } else {
        if (l > 3) children = Array.prototype.slice.call(arguments, 2);
        else if (l === 3 && isVNode(children)) children = [
            children
        ];
        return createVNode(type, propsOrChildren, children);
    }
}
const ssrContextKey = Symbol(`ssrContext`);
const useSSRContext = ()=>{
    {
        const ctx = inject(ssrContextKey);
        if (!ctx) warn(`Server rendering context not provided. Make sure to only call ` + `useSSRContext() conditionally in the server build.`);
        return ctx;
    }
};
function initCustomFormatter() {
    /* eslint-disable no-restricted-globals */ if (typeof window === 'undefined') return;
    const vueStyle = {
        style: 'color:#3ba776'
    };
    const numberStyle = {
        style: 'color:#0b1bc9'
    };
    const stringStyle = {
        style: 'color:#b62e24'
    };
    const keywordStyle = {
        style: 'color:#9d288c'
    };
    // custom formatter for Chrome
    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html
    const formatter = {
        header (obj) {
            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup
            if (!shared.isObject(obj)) return null;
            if (obj.__isVue) return [
                'div',
                vueStyle,
                `VueInstance`
            ];
            else if (reactivity.isRef(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    genRefFlag(obj)
                ],
                '<',
                formatValue(obj.value),
                `>`
            ];
            else if (reactivity.isReactive(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    'Reactive'
                ],
                '<',
                formatValue(obj),
                `>${reactivity.isReadonly(obj) ? ` (readonly)` : ``}`
            ];
            else if (reactivity.isReadonly(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    'Readonly'
                ],
                '<',
                formatValue(obj),
                '>'
            ];
            return null;
        },
        hasBody (obj) {
            return obj && obj.__isVue;
        },
        body (obj) {
            if (obj && obj.__isVue) return [
                'div',
                {
                },
                ...formatInstance(obj.$)
            ];
        }
    };
    function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) blocks.push(createInstanceBlock('props', reactivity.toRaw(instance.props)));
        if (instance.setupState !== shared.EMPTY_OBJ) blocks.push(createInstanceBlock('setup', instance.setupState));
        if (instance.data !== shared.EMPTY_OBJ) blocks.push(createInstanceBlock('data', reactivity.toRaw(instance.data)));
        const computed1 = extractKeys(instance, 'computed');
        if (computed1) blocks.push(createInstanceBlock('computed', computed1));
        const injected = extractKeys(instance, 'inject');
        if (injected) blocks.push(createInstanceBlock('injected', injected));
        blocks.push([
            'div',
            {
            },
            [
                'span',
                {
                    style: keywordStyle.style + ';opacity:0.66'
                },
                '$ (internal): '
            ],
            [
                'object',
                {
                    object: instance
                }
            ]
        ]);
        return blocks;
    }
    function createInstanceBlock(type, target) {
        target = shared.extend({
        }, target);
        if (!Object.keys(target).length) return [
            'span',
            {
            }
        ];
        return [
            'div',
            {
                style: 'line-height:1.25em;margin-bottom:0.6em'
            },
            [
                'div',
                {
                    style: 'color:#476582'
                },
                type
            ],
            [
                'div',
                {
                    style: 'padding-left:1.25em'
                },
                ...Object.keys(target).map((key)=>{
                    return [
                        'div',
                        {
                        },
                        [
                            'span',
                            keywordStyle,
                            key + ': '
                        ],
                        formatValue(target[key], false)
                    ];
                })
            ]
        ];
    }
    function formatValue(v, asRaw = true) {
        if (typeof v === 'number') return [
            'span',
            numberStyle,
            v
        ];
        else if (typeof v === 'string') return [
            'span',
            stringStyle,
            JSON.stringify(v)
        ];
        else if (typeof v === 'boolean') return [
            'span',
            keywordStyle,
            v
        ];
        else if (shared.isObject(v)) return [
            'object',
            {
                object: asRaw ? reactivity.toRaw(v) : v
            }
        ];
        else return [
            'span',
            stringStyle,
            String(v)
        ];
    }
    function extractKeys(instance, type) {
        const Comp = instance.type;
        if (shared.isFunction(Comp)) return;
        const extracted = {
        };
        for(const key in instance.ctx)if (isKeyOfType(Comp, key, type)) extracted[key] = instance.ctx[key];
        return extracted;
    }
    function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if (shared.isArray(opts) && opts.includes(key) || shared.isObject(opts) && key in opts) return true;
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) return true;
        if (Comp.mixins && Comp.mixins.some((m)=>isKeyOfType(m, key, type)
        )) return true;
    }
    function genRefFlag(v) {
        if (v._shallow) return `ShallowRef`;
        if (v.effect) return `ComputedRef`;
        return `Ref`;
    }
    if (window.devtoolsFormatters) window.devtoolsFormatters.push(formatter);
    else window.devtoolsFormatters = [
        formatter
    ];
}
// Core API ------------------------------------------------------------------
const version = "3.1.1";
const _ssrUtils = {
    createComponentInstance,
    setupComponent,
    renderComponentRoot,
    setCurrentRenderingInstance,
    isVNode,
    normalizeVNode
};
/**
 * SSR utils for \@vue/server-renderer. Only exposed in cjs builds.
 * @internal
 */ const ssrUtils = _ssrUtils;
/**
 * @internal only exposed in compat builds
 */ const resolveFilter = null;
/**
 * @internal only exposed in compat builds.
 */ const compatUtils = null;
exports.customRef = reactivity.customRef;
exports.isProxy = reactivity.isProxy;
exports.isReactive = reactivity.isReactive;
exports.isReadonly = reactivity.isReadonly;
exports.isRef = reactivity.isRef;
exports.markRaw = reactivity.markRaw;
exports.proxyRefs = reactivity.proxyRefs;
exports.reactive = reactivity.reactive;
exports.readonly = reactivity.readonly;
exports.ref = reactivity.ref;
exports.shallowReactive = reactivity.shallowReactive;
exports.shallowReadonly = reactivity.shallowReadonly;
exports.shallowRef = reactivity.shallowRef;
exports.toRaw = reactivity.toRaw;
exports.toRef = reactivity.toRef;
exports.toRefs = reactivity.toRefs;
exports.triggerRef = reactivity.triggerRef;
exports.unref = reactivity.unref;
exports.camelize = shared.camelize;
exports.capitalize = shared.capitalize;
exports.toDisplayString = shared.toDisplayString;
exports.toHandlerKey = shared.toHandlerKey;
exports.BaseTransition = BaseTransition;
exports.Comment = Comment$1;
exports.Fragment = Fragment;
exports.KeepAlive = KeepAlive;
exports.Static = Static;
exports.Suspense = Suspense;
exports.Teleport = Teleport;
exports.Text = Text1;
exports.callWithAsyncErrorHandling = callWithAsyncErrorHandling;
exports.callWithErrorHandling = callWithErrorHandling;
exports.cloneVNode = cloneVNode;
exports.compatUtils = compatUtils;
exports.computed = computed;
exports.createBlock = createBlock;
exports.createCommentVNode = createCommentVNode;
exports.createHydrationRenderer = createHydrationRenderer;
exports.createRenderer = createRenderer;
exports.createSlots = createSlots;
exports.createStaticVNode = createStaticVNode;
exports.createTextVNode = createTextVNode;
exports.createVNode = createVNode;
exports.defineAsyncComponent = defineAsyncComponent;
exports.defineComponent = defineComponent;
exports.defineEmit = defineEmit;
exports.defineProps = defineProps;
exports.getCurrentInstance = getCurrentInstance;
exports.getTransitionRawChildren = getTransitionRawChildren;
exports.h = h;
exports.handleError = handleError;
exports.initCustomFormatter = initCustomFormatter;
exports.inject = inject;
exports.isRuntimeOnly = isRuntimeOnly;
exports.isVNode = isVNode;
exports.mergeProps = mergeProps;
exports.nextTick = nextTick;
exports.onActivated = onActivated;
exports.onBeforeMount = onBeforeMount;
exports.onBeforeUnmount = onBeforeUnmount;
exports.onBeforeUpdate = onBeforeUpdate;
exports.onDeactivated = onDeactivated;
exports.onErrorCaptured = onErrorCaptured;
exports.onMounted = onMounted;
exports.onRenderTracked = onRenderTracked;
exports.onRenderTriggered = onRenderTriggered;
exports.onServerPrefetch = onServerPrefetch;
exports.onUnmounted = onUnmounted;
exports.onUpdated = onUpdated;
exports.openBlock = openBlock;
exports.popScopeId = popScopeId;
exports.provide = provide;
exports.pushScopeId = pushScopeId;
exports.queuePostFlushCb = queuePostFlushCb;
exports.registerRuntimeCompiler = registerRuntimeCompiler;
exports.renderList = renderList;
exports.renderSlot = renderSlot;
exports.resolveComponent = resolveComponent;
exports.resolveDirective = resolveDirective;
exports.resolveDynamicComponent = resolveDynamicComponent;
exports.resolveFilter = resolveFilter;
exports.resolveTransitionHooks = resolveTransitionHooks;
exports.setBlockTracking = setBlockTracking;
exports.setDevtoolsHook = setDevtoolsHook;
exports.setTransitionHooks = setTransitionHooks;
exports.ssrContextKey = ssrContextKey;
exports.ssrUtils = ssrUtils;
exports.toHandlers = toHandlers;
exports.transformVNodeArgs = transformVNodeArgs;
exports.useContext = useContext;
exports.useSSRContext = useSSRContext;
exports.useTransitionState = useTransitionState;
exports.version = version;
exports.warn = warn;
exports.watch = watch;
exports.watchEffect = watchEffect;
exports.withCtx = withCtx;
exports.withDirectives = withDirectives;
exports.withScopeId = withScopeId;

},{"@vue/reactivity":"6hJMF","@vue/shared":"4sn3I"}],"6hJMF":[function(require,module,exports) {
'use strict';
module.exports = require('./dist/reactivity.cjs.js');

},{"./dist/reactivity.cjs.js":"SbjzO"}],"SbjzO":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var shared = require('@vue/shared');
const targetMap = new WeakMap();
const effectStack = [];
let activeEffect;
const ITERATE_KEY = Symbol('iterate');
const MAP_KEY_ITERATE_KEY = Symbol('Map key iterate');
function isEffect(fn) {
    return fn && fn._isEffect === true;
}
function effect(fn, options = shared.EMPTY_OBJ) {
    if (isEffect(fn)) fn = fn.raw;
    const effect1 = createReactiveEffect(fn, options);
    if (!options.lazy) effect1();
    return effect1;
}
function stop(effect1) {
    if (effect1.active) {
        cleanup(effect1);
        if (effect1.options.onStop) effect1.options.onStop();
        effect1.active = false;
    }
}
let uid = 0;
function createReactiveEffect(fn, options) {
    const effect1 = function reactiveEffect() {
        if (!effect1.active) return fn();
        if (!effectStack.includes(effect1)) {
            cleanup(effect1);
            try {
                enableTracking();
                effectStack.push(effect1);
                activeEffect = effect1;
                return fn();
            } finally{
                effectStack.pop();
                resetTracking();
                activeEffect = effectStack[effectStack.length - 1];
            }
        }
    };
    effect1.id = uid++;
    effect1.allowRecurse = !!options.allowRecurse;
    effect1._isEffect = true;
    effect1.active = true;
    effect1.raw = fn;
    effect1.deps = [];
    effect1.options = options;
    return effect1;
}
function cleanup(effect1) {
    const { deps  } = effect1;
    if (deps.length) {
        for(let i = 0; i < deps.length; i++)deps[i].delete(effect1);
        deps.length = 0;
    }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
}
function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
}
function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === undefined ? true : last;
}
function track(target, type, key) {
    if (!shouldTrack || activeEffect === undefined) return;
    let depsMap = targetMap.get(target);
    if (!depsMap) targetMap.set(target, depsMap = new Map());
    let dep = depsMap.get(key);
    if (!dep) depsMap.set(key, dep = new Set());
    if (!dep.has(activeEffect)) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (activeEffect.options.onTrack) activeEffect.options.onTrack({
            effect: activeEffect,
            target,
            type,
            key
        });
    }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) // never been tracked
    return;
    const effects = new Set();
    const add = (effectsToAdd)=>{
        if (effectsToAdd) effectsToAdd.forEach((effect1)=>{
            if (effect1 !== activeEffect || effect1.allowRecurse) effects.add(effect1);
        });
    };
    if (type === "clear") // collection being cleared
    // trigger all effects for target
    depsMap.forEach(add);
    else if (key === 'length' && shared.isArray(target)) depsMap.forEach((dep, key1)=>{
        if (key1 === 'length' || key1 >= newValue) add(dep);
    });
    else {
        // schedule runs for SET | ADD | DELETE
        if (key !== void 0) add(depsMap.get(key));
        // also run for iteration key on ADD | DELETE | Map.SET
        switch(type){
            case "add":
                if (!shared.isArray(target)) {
                    add(depsMap.get(ITERATE_KEY));
                    if (shared.isMap(target)) add(depsMap.get(MAP_KEY_ITERATE_KEY));
                } else if (shared.isIntegerKey(key)) // new index added to array -> length changes
                add(depsMap.get('length'));
                break;
            case "delete":
                if (!shared.isArray(target)) {
                    add(depsMap.get(ITERATE_KEY));
                    if (shared.isMap(target)) add(depsMap.get(MAP_KEY_ITERATE_KEY));
                }
                break;
            case "set":
                if (shared.isMap(target)) add(depsMap.get(ITERATE_KEY));
                break;
        }
    }
    const run = (effect1)=>{
        if (effect1.options.onTrigger) effect1.options.onTrigger({
            effect: effect1,
            target,
            key,
            type,
            newValue,
            oldValue,
            oldTarget
        });
        if (effect1.options.scheduler) effect1.options.scheduler(effect1);
        else effect1();
    };
    effects.forEach(run);
}
const isNonTrackableKeys = /*#__PURE__*/ shared.makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key)=>Symbol[key]
).filter(shared.isSymbol));
const get = /*#__PURE__*/ createGetter();
const shallowGet = /*#__PURE__*/ createGetter(false, true);
const readonlyGet = /*#__PURE__*/ createGetter(true);
const shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);
const arrayInstrumentations = {
};
[
    'includes',
    'indexOf',
    'lastIndexOf'
].forEach((key)=>{
    const method = Array.prototype[key];
    arrayInstrumentations[key] = function(...args) {
        const arr = toRaw(this);
        for(let i = 0, l = this.length; i < l; i++)track(arr, "get"/* GET */ , i + '');
        // we run the method using the original args first (which may be reactive)
        const res = method.apply(arr, args);
        if (res === -1 || res === false) // if that didn't work, run it again using raw values.
        return method.apply(arr, args.map(toRaw));
        else return res;
    };
});
[
    'push',
    'pop',
    'shift',
    'unshift',
    'splice'
].forEach((key)=>{
    const method = Array.prototype[key];
    arrayInstrumentations[key] = function(...args) {
        pauseTracking();
        const res = method.apply(this, args);
        resetTracking();
        return res;
    };
});
function createGetter(isReadonly = false, shallow = false) {
    return function get1(target, key, receiver) {
        if (key === "__v_isReactive") return !isReadonly;
        else if (key === "__v_isReadonly") return isReadonly;
        else if (key === "__v_raw" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) return target;
        const targetIsArray = shared.isArray(target);
        if (!isReadonly && targetIsArray && shared.hasOwn(arrayInstrumentations, key)) return Reflect.get(arrayInstrumentations, key, receiver);
        const res = Reflect.get(target, key, receiver);
        if (shared.isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) return res;
        if (!isReadonly) track(target, "get"/* GET */ , key);
        if (shallow) return res;
        if (isRef(res)) {
            // ref unwrapping - does not apply for Array + integer key.
            const shouldUnwrap = !targetIsArray || !shared.isIntegerKey(key);
            return shouldUnwrap ? res.value : res;
        }
        if (shared.isObject(res)) // Convert returned value into a proxy as well. we do the isObject check
        // here to avoid invalid value warning. Also need to lazy access readonly
        // and reactive here to avoid circular dependency.
        return isReadonly ? readonly(res) : reactive(res);
        return res;
    };
}
const set = /*#__PURE__*/ createSetter();
const shallowSet = /*#__PURE__*/ createSetter(true);
function createSetter(shallow = false) {
    return function set1(target, key, value, receiver) {
        let oldValue = target[key];
        if (!shallow) {
            value = toRaw(value);
            oldValue = toRaw(oldValue);
            if (!shared.isArray(target) && isRef(oldValue) && !isRef(value)) {
                oldValue.value = value;
                return true;
            }
        }
        const hadKey = shared.isArray(target) && shared.isIntegerKey(key) ? Number(key) < target.length : shared.hasOwn(target, key);
        const result = Reflect.set(target, key, value, receiver);
        // don't trigger if target is something up in the prototype chain of original
        if (target === toRaw(receiver)) {
            if (!hadKey) trigger(target, "add"/* ADD */ , key, value);
            else if (shared.hasChanged(value, oldValue)) trigger(target, "set"/* SET */ , key, value, oldValue);
        }
        return result;
    };
}
function deleteProperty(target, key) {
    const hadKey = shared.hasOwn(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) trigger(target, "delete"/* DELETE */ , key, undefined, oldValue);
    return result;
}
function has(target, key) {
    const result = Reflect.has(target, key);
    if (!shared.isSymbol(key) || !builtInSymbols.has(key)) track(target, "has"/* HAS */ , key);
    return result;
}
function ownKeys(target) {
    track(target, "iterate"/* ITERATE */ , shared.isArray(target) ? 'length' : ITERATE_KEY);
    return Reflect.ownKeys(target);
}
const mutableHandlers = {
    get,
    set,
    deleteProperty,
    has,
    ownKeys
};
const readonlyHandlers = {
    get: readonlyGet,
    set (target, key) {
        console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    },
    deleteProperty (target, key) {
        console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    }
};
const shallowReactiveHandlers = shared.extend({
}, mutableHandlers, {
    get: shallowGet,
    set: shallowSet
});
// Props handlers are special in the sense that it should not unwrap top-level
// refs (in order to allow refs to be explicitly passed down), but should
// retain the reactivity of the normal readonly object.
const shallowReadonlyHandlers = shared.extend({
}, readonlyHandlers, {
    get: shallowReadonlyGet
});
const toReactive = (value)=>shared.isObject(value) ? reactive(value) : value
;
const toReadonly = (value)=>shared.isObject(value) ? readonly(value) : value
;
const toShallow = (value)=>value
;
const getProto = (v)=>Reflect.getPrototypeOf(v)
;
function get$1(target, key, isReadonly = false, isShallow = false) {
    // #1772: readonly(reactive(Map)) should return readonly + reactive version
    // of the value
    target = target["__v_raw"];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) !isReadonly && track(rawTarget, "get"/* GET */ , key);
    !isReadonly && track(rawTarget, "get"/* GET */ , rawKey);
    const { has: has1  } = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    if (has1.call(rawTarget, key)) return wrap(target.get(key));
    else if (has1.call(rawTarget, rawKey)) return wrap(target.get(rawKey));
    else if (target !== rawTarget) // #3602 readonly(reactive(Map))
    // ensure that the nested reactive `Map` can do tracking for itself
    target.get(key);
}
function has$1(key, isReadonly = false) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) !isReadonly && track(rawTarget, "has"/* HAS */ , key);
    !isReadonly && track(rawTarget, "has"/* HAS */ , rawKey);
    return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly = false) {
    target = target["__v_raw"];
    !isReadonly && track(toRaw(target), "iterate"/* ITERATE */ , ITERATE_KEY);
    return Reflect.get(target, 'size', target);
}
function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
        target.add(value);
        trigger(target, "add"/* ADD */ , value, value);
    }
    return this;
}
function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has: has1 , get: get1  } = getProto(target);
    let hadKey = has1.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has1.call(target, key);
    } else checkIdentityKeys(target, has1, key);
    const oldValue = get1.call(target, key);
    target.set(key, value);
    if (!hadKey) trigger(target, "add"/* ADD */ , key, value);
    else if (shared.hasChanged(value, oldValue)) trigger(target, "set"/* SET */ , key, value, oldValue);
    return this;
}
function deleteEntry(key) {
    const target = toRaw(this);
    const { has: has1 , get: get1  } = getProto(target);
    let hadKey = has1.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has1.call(target, key);
    } else checkIdentityKeys(target, has1, key);
    const oldValue = get1 ? get1.call(target, key) : undefined;
    // forward the operation before queueing reactions
    const result = target.delete(key);
    if (hadKey) trigger(target, "delete"/* DELETE */ , key, undefined, oldValue);
    return result;
}
function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = shared.isMap(target) ? new Map(target) : new Set(target);
    // forward the operation before queueing reactions
    const result = target.clear();
    if (hadItems) trigger(target, "clear"/* CLEAR */ , undefined, undefined, oldTarget);
    return result;
}
function createForEach(isReadonly, isShallow) {
    return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw"];
        const rawTarget = toRaw(target);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly && track(rawTarget, "iterate"/* ITERATE */ , ITERATE_KEY);
        return target.forEach((value, key)=>{
            // important: make sure the callback is
            // 1. invoked with the reactive map as `this` and 3rd arg
            // 2. the value received should be a corresponding reactive/readonly.
            return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
    };
}
function createIterableMethod(method, isReadonly, isShallow) {
    return function(...args) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const targetIsMap = shared.isMap(rawTarget);
        const isPair = method === 'entries' || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === 'keys' && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly && track(rawTarget, "iterate"/* ITERATE */ , isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        // return a wrapped iterator which returns observed versions of the
        // values emitted from the real iterator
        return {
            // iterator protocol
            next () {
                const { value , done  } = innerIterator.next();
                return done ? {
                    value,
                    done
                } : {
                    value: isPair ? [
                        wrap(value[0]),
                        wrap(value[1])
                    ] : wrap(value),
                    done
                };
            },
            // iterable protocol
            [Symbol.iterator] () {
                return this;
            }
        };
    };
}
function createReadonlyMethod(type) {
    return function(...args) {
        {
            const key = args[0] ? `on key "${args[0]}" ` : ``;
            console.warn(`${shared.capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" ? false : this;
    };
}
const mutableInstrumentations = {
    get (key) {
        return get$1(this, key);
    },
    get size () {
        return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
};
const shallowInstrumentations = {
    get (key) {
        return get$1(this, key, false, true);
    },
    get size () {
        return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
};
const readonlyInstrumentations = {
    get (key) {
        return get$1(this, key, true);
    },
    get size () {
        return size(this, true);
    },
    has (key) {
        return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"/* ADD */ ),
    set: createReadonlyMethod("set"/* SET */ ),
    delete: createReadonlyMethod("delete"/* DELETE */ ),
    clear: createReadonlyMethod("clear"/* CLEAR */ ),
    forEach: createForEach(true, false)
};
const shallowReadonlyInstrumentations = {
    get (key) {
        return get$1(this, key, true, true);
    },
    get size () {
        return size(this, true);
    },
    has (key) {
        return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"/* ADD */ ),
    set: createReadonlyMethod("set"/* SET */ ),
    delete: createReadonlyMethod("delete"/* DELETE */ ),
    clear: createReadonlyMethod("clear"/* CLEAR */ ),
    forEach: createForEach(true, true)
};
const iteratorMethods = [
    'keys',
    'values',
    'entries',
    Symbol.iterator
];
iteratorMethods.forEach((method)=>{
    mutableInstrumentations[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations[method] = createIterableMethod(method, true, false);
    shallowInstrumentations[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);
});
function createInstrumentationGetter(isReadonly, shallow) {
    const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;
    return (target, key, receiver)=>{
        if (key === "__v_isReactive") return !isReadonly;
        else if (key === "__v_isReadonly") return isReadonly;
        else if (key === "__v_raw") return target;
        return Reflect.get(shared.hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
}
const mutableCollectionHandlers = {
    get: createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
    get: createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
    get: createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
    get: createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has1, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has1.call(target, rawKey)) {
        const type = shared.toRawType(target);
        console.warn(`Reactive ${type} contains both the raw and reactive ` + `versions of the same object${type === `Map` ? ` as keys` : ``}, ` + `which can lead to inconsistencies. ` + `Avoid differentiating between the raw and reactive versions ` + `of an object and only use the reactive version if possible.`);
    }
}
const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
    switch(rawType){
        case 'Object':
        case 'Array':
            return 1;
        case 'Map':
        case 'Set':
        case 'WeakMap':
        case 'WeakSet':
            return 2;
        default:
            return 0;
    }
}
function getTargetType(value) {
    return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(shared.toRawType(value));
}
function reactive(target) {
    // if trying to observe a readonly proxy, return the readonly version.
    if (target && target["__v_isReadonly"]) return target;
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
/**
 * Return a shallowly-reactive copy of the original object, where only the root
 * level properties are reactive. It also does not auto-unwrap refs (even at the
 * root level).
 */ function shallowReactive(target) {
    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
/**
 * Creates a readonly copy of the original object. Note the returned copy is not
 * made reactive, but `readonly` can be called on an already reactive object.
 */ function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
/**
 * Returns a reactive-copy of the original object, where only the root level
 * properties are readonly, and does NOT unwrap refs nor recursively convert
 * returned properties.
 * This is used for creating the props proxy object for stateful components.
 */ function shallowReadonly(target) {
    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
    if (!shared.isObject(target)) {
        console.warn(`value cannot be made reactive: ${String(target)}`);
        return target;
    }
    // target is already a Proxy, return it.
    // exception: calling readonly() on a reactive object
    if (target["__v_raw"] && !(isReadonly && target["__v_isReactive"])) return target;
    // target already has corresponding Proxy
    const existingProxy = proxyMap.get(target);
    if (existingProxy) return existingProxy;
    // only a whitelist of value types can be observed.
    const targetType = getTargetType(target);
    if (targetType === 0) return target;
    const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
}
function isReactive(value) {
    if (isReadonly(value)) return isReactive(value["__v_raw"]);
    return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
    return !!(value && value["__v_isReadonly"]);
}
function isProxy(value) {
    return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
    return observed && toRaw(observed["__v_raw"]) || observed;
}
function markRaw(value) {
    shared.def(value, "__v_skip"/* SKIP */ , true);
    return value;
}
const convert = (val)=>shared.isObject(val) ? reactive(val) : val
;
function isRef(r) {
    return Boolean(r && r.__v_isRef === true);
}
function ref(value) {
    return createRef(value);
}
function shallowRef(value) {
    return createRef(value, true);
}
class RefImpl {
    constructor(_rawValue, _shallow = false){
        this._rawValue = _rawValue;
        this._shallow = _shallow;
        this.__v_isRef = true;
        this._value = _shallow ? _rawValue : convert(_rawValue);
    }
    get value() {
        track(toRaw(this), "get"/* GET */ , 'value');
        return this._value;
    }
    set value(newVal) {
        if (shared.hasChanged(toRaw(newVal), this._rawValue)) {
            this._rawValue = newVal;
            this._value = this._shallow ? newVal : convert(newVal);
            trigger(toRaw(this), "set"/* SET */ , 'value', newVal);
        }
    }
}
function createRef(rawValue, shallow = false) {
    if (isRef(rawValue)) return rawValue;
    return new RefImpl(rawValue, shallow);
}
function triggerRef(ref1) {
    trigger(toRaw(ref1), "set"/* SET */ , 'value', ref1.value);
}
function unref(ref1) {
    return isRef(ref1) ? ref1.value : ref1;
}
const shallowUnwrapHandlers = {
    get: (target, key, receiver)=>unref(Reflect.get(target, key, receiver))
    ,
    set: (target, key, value, receiver)=>{
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
        } else return Reflect.set(target, key, value, receiver);
    }
};
function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
    constructor(factory){
        this.__v_isRef = true;
        const { get: get1 , set: set1  } = factory(()=>track(this, "get"/* GET */ , 'value')
        , ()=>trigger(this, "set"/* SET */ , 'value')
        );
        this._get = get1;
        this._set = set1;
    }
    get value() {
        return this._get();
    }
    set value(newVal) {
        this._set(newVal);
    }
}
function customRef(factory1) {
    return new CustomRefImpl(factory1);
}
function toRefs(object) {
    if (!isProxy(object)) console.warn(`toRefs() expects a reactive object but received a plain one.`);
    const ret = shared.isArray(object) ? new Array(object.length) : {
    };
    for(const key in object)ret[key] = toRef(object, key);
    return ret;
}
class ObjectRefImpl {
    constructor(_object, _key){
        this._object = _object;
        this._key = _key;
        this.__v_isRef = true;
    }
    get value() {
        return this._object[this._key];
    }
    set value(newVal) {
        this._object[this._key] = newVal;
    }
}
function toRef(object, key) {
    return isRef(object[key]) ? object[key] : new ObjectRefImpl(object, key);
}
class ComputedRefImpl {
    constructor(getter, _setter, isReadonly1){
        this._setter = _setter;
        this._dirty = true;
        this.__v_isRef = true;
        this.effect = effect(getter, {
            lazy: true,
            scheduler: ()=>{
                if (!this._dirty) {
                    this._dirty = true;
                    trigger(toRaw(this), "set"/* SET */ , 'value');
                }
            }
        });
        this["__v_isReadonly"] = isReadonly1;
    }
    get value() {
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        const self = toRaw(this);
        if (self._dirty) {
            self._value = this.effect();
            self._dirty = false;
        }
        track(self, "get"/* GET */ , 'value');
        return self._value;
    }
    set value(newValue) {
        this._setter(newValue);
    }
}
function computed(getterOrOptions) {
    let getter1;
    let setter;
    if (shared.isFunction(getterOrOptions)) {
        getter1 = getterOrOptions;
        setter = ()=>{
            console.warn('Write operation failed: computed value is readonly');
        };
    } else {
        getter1 = getterOrOptions.get;
        setter = getterOrOptions.set;
    }
    return new ComputedRefImpl(getter1, setter, shared.isFunction(getterOrOptions) || !getterOrOptions.set);
}
exports.ITERATE_KEY = ITERATE_KEY;
exports.computed = computed;
exports.customRef = customRef;
exports.effect = effect;
exports.enableTracking = enableTracking;
exports.isProxy = isProxy;
exports.isReactive = isReactive;
exports.isReadonly = isReadonly;
exports.isRef = isRef;
exports.markRaw = markRaw;
exports.pauseTracking = pauseTracking;
exports.proxyRefs = proxyRefs;
exports.reactive = reactive;
exports.readonly = readonly;
exports.ref = ref;
exports.resetTracking = resetTracking;
exports.shallowReactive = shallowReactive;
exports.shallowReadonly = shallowReadonly;
exports.shallowRef = shallowRef;
exports.stop = stop;
exports.toRaw = toRaw;
exports.toRef = toRef;
exports.toRefs = toRefs;
exports.track = track;
exports.trigger = trigger;
exports.triggerRef = triggerRef;
exports.unref = unref;

},{"@vue/shared":"4sn3I"}],"7pGvO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./basket.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./basket.vue').render;
    script.__cssModules = require('style:./basket.vue').default;
    require('custom:./basket.vue').default(script);
    script.__scopeId = 'data-v-1f7cd9';
    script.__file = "/home/joao/jekyll-projects/git-projects/Jekylll-blog/vue/basket/basket.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '1f7cd9-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('1f7cd9-hmr', script)) __VUE_HMR_RUNTIME__.reload('1f7cd9-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./basket.vue":"5SvkU","template:./basket.vue":"7lTz1","style:./basket.vue":"1O6Bm","custom:./basket.vue":"1iFLg","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"5SvkU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vuex = require("vuex");
exports.default = {
    data () {
        return {
            drawer: null,
            items: [
                {
                    title: "Home",
                    icon: "mdi-view-dashboard"
                },
                {
                    title: "About",
                    icon: "mdi-forum"
                }, 
            ]
        };
    },
    computed: {
        ..._vuex.mapGetters([
            "getInc"
        ])
    }
};

},{"vuex":"2F56c","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"2F56c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Store", ()=>Store
);
parcelHelpers.export(exports, "createLogger", ()=>createLogger
);
parcelHelpers.export(exports, "createNamespacedHelpers", ()=>createNamespacedHelpers
);
parcelHelpers.export(exports, "createStore", ()=>createStore
);
parcelHelpers.export(exports, "mapActions", ()=>mapActions
);
parcelHelpers.export(exports, "mapGetters", ()=>mapGetters
);
parcelHelpers.export(exports, "mapMutations", ()=>mapMutations
);
parcelHelpers.export(exports, "mapState", ()=>mapState
);
parcelHelpers.export(exports, "storeKey", ()=>storeKey
);
parcelHelpers.export(exports, "useStore", ()=>useStore
);
/*!
 * vuex v4.0.1
 * (c) 2021 Evan You
 * @license MIT
 */ var _vue = require("vue");
var _devtoolsApi = require("@vue/devtools-api");
var storeKey = 'store';
function useStore(key) {
    if (key === void 0) key = null;
    return _vue.inject(key !== null ? key : storeKey);
}
/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */ function find(list, f) {
    return list.filter(f)[0];
}
/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */ function deepCopy(obj, cache) {
    if (cache === void 0) cache = [];
    // just return if obj is immutable value
    if (obj === null || typeof obj !== 'object') return obj;
    // if obj is hit, it is in circular structure
    var hit = find(cache, function(c) {
        return c.original === obj;
    });
    if (hit) return hit.copy;
    var copy = Array.isArray(obj) ? [] : {
    };
    // put the copy into cache at first
    // because we want to refer it in recursive deepCopy
    cache.push({
        original: obj,
        copy: copy
    });
    Object.keys(obj).forEach(function(key) {
        copy[key] = deepCopy(obj[key], cache);
    });
    return copy;
}
/**
 * forEach for object
 */ function forEachValue(obj, fn) {
    Object.keys(obj).forEach(function(key) {
        return fn(obj[key], key);
    });
}
function isObject(obj) {
    return obj !== null && typeof obj === 'object';
}
function isPromise(val) {
    return val && typeof val.then === 'function';
}
function assert(condition, msg) {
    if (!condition) throw new Error("[vuex] " + msg);
}
function partial(fn, arg) {
    return function() {
        return fn(arg);
    };
}
function genericSubscribe(fn, subs, options) {
    if (subs.indexOf(fn) < 0) options && options.prepend ? subs.unshift(fn) : subs.push(fn);
    return function() {
        var i = subs.indexOf(fn);
        if (i > -1) subs.splice(i, 1);
    };
}
function resetStore(store, hot) {
    store._actions = Object.create(null);
    store._mutations = Object.create(null);
    store._wrappedGetters = Object.create(null);
    store._modulesNamespaceMap = Object.create(null);
    var state = store.state;
    // init all modules
    installModule(store, state, [], store._modules.root, true);
    // reset state
    resetStoreState(store, state, hot);
}
function resetStoreState(store, state, hot) {
    var oldState = store._state;
    // bind store public getters
    store.getters = {
    };
    // reset local getters cache
    store._makeLocalGettersCache = Object.create(null);
    var wrappedGetters = store._wrappedGetters;
    var computedObj = {
    };
    forEachValue(wrappedGetters, function(fn, key) {
        // use computed to leverage its lazy-caching mechanism
        // direct inline function use will lead to closure preserving oldState.
        // using partial to return function with only arguments preserved in closure environment.
        computedObj[key] = partial(fn, store);
        Object.defineProperty(store.getters, key, {
            // TODO: use `computed` when it's possible. at the moment we can't due to
            // https://github.com/vuejs/vuex/pull/1883
            get: function() {
                return computedObj[key]();
            },
            enumerable: true
        });
    });
    store._state = _vue.reactive({
        data: state
    });
    // enable strict mode for new state
    if (store.strict) enableStrictMode(store);
    if (oldState) {
        if (hot) // dispatch changes in all subscribed watchers
        // to force getter re-evaluation for hot reloading.
        store._withCommit(function() {
            oldState.data = null;
        });
    }
}
function installModule(store, rootState, path, module, hot) {
    var isRoot = !path.length;
    var namespace = store._modules.getNamespace(path);
    // register in namespace map
    if (module.namespaced) {
        if (store._modulesNamespaceMap[namespace] && true) console.error("[vuex] duplicate namespace " + namespace + " for the namespaced module " + path.join('/'));
        store._modulesNamespaceMap[namespace] = module;
    }
    // set state
    if (!isRoot && !hot) {
        var parentState = getNestedState(rootState, path.slice(0, -1));
        var moduleName = path[path.length - 1];
        store._withCommit(function() {
            if (moduleName in parentState) console.warn("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + path.join('.') + "\"");
            parentState[moduleName] = module.state;
        });
    }
    var local = module.context = makeLocalContext(store, namespace, path);
    module.forEachMutation(function(mutation, key) {
        var namespacedType = namespace + key;
        registerMutation(store, namespacedType, mutation, local);
    });
    module.forEachAction(function(action, key) {
        var type = action.root ? key : namespace + key;
        var handler = action.handler || action;
        registerAction(store, type, handler, local);
    });
    module.forEachGetter(function(getter, key) {
        var namespacedType = namespace + key;
        registerGetter(store, namespacedType, getter, local);
    });
    module.forEachChild(function(child, key) {
        installModule(store, rootState, path.concat(key), child, hot);
    });
}
/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */ function makeLocalContext(store, namespace, path) {
    var noNamespace = namespace === '';
    var local = {
        dispatch: noNamespace ? store.dispatch : function(_type, _payload, _options) {
            var args = unifyObjectStyle(_type, _payload, _options);
            var payload = args.payload;
            var options = args.options;
            var type = args.type;
            if (!options || !options.root) {
                type = namespace + type;
                if (!store._actions[type]) {
                    console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
                    return;
                }
            }
            return store.dispatch(type, payload);
        },
        commit: noNamespace ? store.commit : function(_type, _payload, _options) {
            var args = unifyObjectStyle(_type, _payload, _options);
            var payload = args.payload;
            var options = args.options;
            var type = args.type;
            if (!options || !options.root) {
                type = namespace + type;
                if (!store._mutations[type]) {
                    console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
                    return;
                }
            }
            store.commit(type, payload, options);
        }
    };
    // getters and state object must be gotten lazily
    // because they will be changed by state update
    Object.defineProperties(local, {
        getters: {
            get: noNamespace ? function() {
                return store.getters;
            } : function() {
                return makeLocalGetters(store, namespace);
            }
        },
        state: {
            get: function() {
                return getNestedState(store.state, path);
            }
        }
    });
    return local;
}
function makeLocalGetters(store, namespace) {
    if (!store._makeLocalGettersCache[namespace]) {
        var gettersProxy = {
        };
        var splitPos = namespace.length;
        Object.keys(store.getters).forEach(function(type) {
            // skip if the target getter is not match this namespace
            if (type.slice(0, splitPos) !== namespace) return;
            // extract local getter type
            var localType = type.slice(splitPos);
            // Add a port to the getters proxy.
            // Define as getter property because
            // we do not want to evaluate the getters in this time.
            Object.defineProperty(gettersProxy, localType, {
                get: function() {
                    return store.getters[type];
                },
                enumerable: true
            });
        });
        store._makeLocalGettersCache[namespace] = gettersProxy;
    }
    return store._makeLocalGettersCache[namespace];
}
function registerMutation(store, type, handler, local) {
    var entry = store._mutations[type] || (store._mutations[type] = []);
    entry.push(function wrappedMutationHandler(payload) {
        handler.call(store, local.state, payload);
    });
}
function registerAction(store, type, handler, local) {
    var entry = store._actions[type] || (store._actions[type] = []);
    entry.push(function wrappedActionHandler(payload) {
        var res = handler.call(store, {
            dispatch: local.dispatch,
            commit: local.commit,
            getters: local.getters,
            state: local.state,
            rootGetters: store.getters,
            rootState: store.state
        }, payload);
        if (!isPromise(res)) res = Promise.resolve(res);
        if (store._devtoolHook) return res.catch(function(err) {
            store._devtoolHook.emit('vuex:error', err);
            throw err;
        });
        else return res;
    });
}
function registerGetter(store, type, rawGetter, local) {
    if (store._wrappedGetters[type]) {
        console.error("[vuex] duplicate getter key: " + type);
        return;
    }
    store._wrappedGetters[type] = function wrappedGetter(store1) {
        return rawGetter(local.state, local.getters, store1.state, store1.getters// root getters
        );
    };
}
function enableStrictMode(store) {
    _vue.watch(function() {
        return store._state.data;
    }, function() {
        assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }, {
        deep: true,
        flush: 'sync'
    });
}
function getNestedState(state, path) {
    return path.reduce(function(state1, key) {
        return state1[key];
    }, state);
}
function unifyObjectStyle(type, payload, options) {
    if (isObject(type) && type.type) {
        options = payload;
        payload = type;
        type = type.type;
    }
    assert(typeof type === 'string', "expects string as the type, but found " + typeof type + ".");
    return {
        type: type,
        payload: payload,
        options: options
    };
}
var LABEL_VUEX_BINDINGS = 'vuex bindings';
var MUTATIONS_LAYER_ID = 'vuex:mutations';
var ACTIONS_LAYER_ID = 'vuex:actions';
var INSPECTOR_ID = 'vuex';
var actionId = 0;
function addDevtools(app, store) {
    _devtoolsApi.setupDevtoolsPlugin({
        id: 'org.vuejs.vuex',
        app: app,
        label: 'Vuex',
        homepage: 'https://next.vuex.vuejs.org/',
        logo: 'https://vuejs.org/images/icons/favicon-96x96.png',
        packageName: 'vuex',
        componentStateTypes: [
            LABEL_VUEX_BINDINGS
        ]
    }, function(api) {
        api.addTimelineLayer({
            id: MUTATIONS_LAYER_ID,
            label: 'Vuex Mutations',
            color: COLOR_LIME_500
        });
        api.addTimelineLayer({
            id: ACTIONS_LAYER_ID,
            label: 'Vuex Actions',
            color: COLOR_LIME_500
        });
        api.addInspector({
            id: INSPECTOR_ID,
            label: 'Vuex',
            icon: 'storage',
            treeFilterPlaceholder: 'Filter stores...'
        });
        api.on.getInspectorTree(function(payload) {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                if (payload.filter) {
                    var nodes = [];
                    flattenStoreForInspectorTree(nodes, store._modules.root, payload.filter, '');
                    payload.rootNodes = nodes;
                } else payload.rootNodes = [
                    formatStoreForInspectorTree(store._modules.root, '')
                ];
            }
        });
        api.on.getInspectorState(function(payload) {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                var modulePath = payload.nodeId;
                makeLocalGetters(store, modulePath);
                payload.state = formatStoreForInspectorState(getStoreModule(store._modules, modulePath), store._makeLocalGettersCache, modulePath);
            }
        });
        api.on.editInspectorState(function(payload) {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                var modulePath = payload.nodeId;
                var path = payload.path;
                if (modulePath !== 'root') path = modulePath.split('/').filter(Boolean).concat(path);
                store._withCommit(function() {
                    payload.set(store._state.data, path, payload.state.value);
                });
            }
        });
        store.subscribe(function(mutation, state) {
            var data = {
            };
            if (mutation.payload) data.payload = mutation.payload;
            data.state = state;
            api.notifyComponentUpdate();
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
            api.addTimelineEvent({
                layerId: MUTATIONS_LAYER_ID,
                event: {
                    time: Date.now(),
                    title: mutation.type,
                    data: data
                }
            });
        });
        store.subscribeAction({
            before: function(action, state) {
                var data = {
                };
                if (action.payload) data.payload = action.payload;
                action._id = actionId++;
                action._time = Date.now();
                data.state = state;
                api.addTimelineEvent({
                    layerId: ACTIONS_LAYER_ID,
                    event: {
                        time: action._time,
                        title: action.type,
                        groupId: action._id,
                        subtitle: 'start',
                        data: data
                    }
                });
            },
            after: function(action, state) {
                var data = {
                };
                var duration = Date.now() - action._time;
                data.duration = {
                    _custom: {
                        type: 'duration',
                        display: duration + "ms",
                        tooltip: 'Action duration',
                        value: duration
                    }
                };
                if (action.payload) data.payload = action.payload;
                data.state = state;
                api.addTimelineEvent({
                    layerId: ACTIONS_LAYER_ID,
                    event: {
                        time: Date.now(),
                        title: action.type,
                        groupId: action._id,
                        subtitle: 'end',
                        data: data
                    }
                });
            }
        });
    });
}
// extracted from tailwind palette
var COLOR_LIME_500 = 8702998;
var COLOR_DARK = 6710886;
var COLOR_WHITE = 16777215;
var TAG_NAMESPACED = {
    label: 'namespaced',
    textColor: COLOR_WHITE,
    backgroundColor: COLOR_DARK
};
/**
 * @param {string} path
 */ function extractNameFromPath(path) {
    return path && path !== 'root' ? path.split('/').slice(-2, -1)[0] : 'Root';
}
/**
 * @param {*} module
 * @return {import('@vue/devtools-api').CustomInspectorNode}
 */ function formatStoreForInspectorTree(module, path) {
    return {
        id: path || 'root',
        // all modules end with a `/`, we want the last segment only
        // cart/ -> cart
        // nested/cart/ -> cart
        label: extractNameFromPath(path),
        tags: module.namespaced ? [
            TAG_NAMESPACED
        ] : [],
        children: Object.keys(module._children).map(function(moduleName) {
            return formatStoreForInspectorTree(module._children[moduleName], path + moduleName + '/');
        })
    };
}
/**
 * @param {import('@vue/devtools-api').CustomInspectorNode[]} result
 * @param {*} module
 * @param {string} filter
 * @param {string} path
 */ function flattenStoreForInspectorTree(result, module, filter, path) {
    if (path.includes(filter)) result.push({
        id: path || 'root',
        label: path.endsWith('/') ? path.slice(0, path.length - 1) : path || 'Root',
        tags: module.namespaced ? [
            TAG_NAMESPACED
        ] : []
    });
    Object.keys(module._children).forEach(function(moduleName) {
        flattenStoreForInspectorTree(result, module._children[moduleName], filter, path + moduleName + '/');
    });
}
/**
 * @param {*} module
 * @return {import('@vue/devtools-api').CustomInspectorState}
 */ function formatStoreForInspectorState(module, getters, path) {
    getters = path === 'root' ? getters : getters[path];
    var gettersKeys = Object.keys(getters);
    var storeState = {
        state: Object.keys(module.state).map(function(key) {
            return {
                key: key,
                editable: true,
                value: module.state[key]
            };
        })
    };
    if (gettersKeys.length) storeState.getters = gettersKeys.map(function(key) {
        return {
            key: key.endsWith('/') ? extractNameFromPath(key) : key,
            editable: false,
            value: getters[key]
        };
    });
    return storeState;
}
function getStoreModule(moduleMap, path) {
    var names = path.split('/').filter(function(n) {
        return n;
    });
    return names.reduce(function(module, moduleName, i) {
        var child = module[moduleName];
        if (!child) throw new Error("Missing module \"" + moduleName + "\" for path \"" + path + "\".");
        return i === names.length - 1 ? child : child._children;
    }, path === 'root' ? moduleMap : moduleMap.root._children);
}
// Base data struct for store's module, package with some attribute and method
var Module = function Module1(rawModule, runtime) {
    this.runtime = runtime;
    // Store some children item
    this._children = Object.create(null);
    // Store the origin module object which passed by programmer
    this._rawModule = rawModule;
    var rawState = rawModule.state;
    // Store the origin module's state
    this.state = (typeof rawState === 'function' ? rawState() : rawState) || {
    };
};
var prototypeAccessors$1 = {
    namespaced: {
        configurable: true
    }
};
prototypeAccessors$1.namespaced.get = function() {
    return !!this._rawModule.namespaced;
};
Module.prototype.addChild = function addChild(key, module) {
    this._children[key] = module;
};
Module.prototype.removeChild = function removeChild(key) {
    delete this._children[key];
};
Module.prototype.getChild = function getChild(key) {
    return this._children[key];
};
Module.prototype.hasChild = function hasChild(key) {
    return key in this._children;
};
Module.prototype.update = function update1(rawModule) {
    this._rawModule.namespaced = rawModule.namespaced;
    if (rawModule.actions) this._rawModule.actions = rawModule.actions;
    if (rawModule.mutations) this._rawModule.mutations = rawModule.mutations;
    if (rawModule.getters) this._rawModule.getters = rawModule.getters;
};
Module.prototype.forEachChild = function forEachChild(fn) {
    forEachValue(this._children, fn);
};
Module.prototype.forEachGetter = function forEachGetter(fn) {
    if (this._rawModule.getters) forEachValue(this._rawModule.getters, fn);
};
Module.prototype.forEachAction = function forEachAction(fn) {
    if (this._rawModule.actions) forEachValue(this._rawModule.actions, fn);
};
Module.prototype.forEachMutation = function forEachMutation(fn) {
    if (this._rawModule.mutations) forEachValue(this._rawModule.mutations, fn);
};
Object.defineProperties(Module.prototype, prototypeAccessors$1);
var ModuleCollection = function ModuleCollection1(rawRootModule) {
    // register root module (Vuex.Store options)
    this.register([], rawRootModule, false);
};
ModuleCollection.prototype.get = function get(path) {
    return path.reduce(function(module, key) {
        return module.getChild(key);
    }, this.root);
};
ModuleCollection.prototype.getNamespace = function getNamespace(path) {
    var module = this.root;
    return path.reduce(function(namespace, key) {
        module = module.getChild(key);
        return namespace + (module.namespaced ? key + '/' : '');
    }, '');
};
ModuleCollection.prototype.update = function update$1(rawRootModule) {
    update2([], this.root, rawRootModule);
};
ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
    var this$1$1 = this;
    if (runtime === void 0) runtime = true;
    assertRawModule(path, rawModule);
    var newModule = new Module(rawModule, runtime);
    if (path.length === 0) this.root = newModule;
    else {
        var parent = this.get(path.slice(0, -1));
        parent.addChild(path[path.length - 1], newModule);
    }
    // register nested modules
    if (rawModule.modules) forEachValue(rawModule.modules, function(rawChildModule, key) {
        this$1$1.register(path.concat(key), rawChildModule, runtime);
    });
};
ModuleCollection.prototype.unregister = function unregister(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    var child = parent.getChild(key);
    if (!child) {
        console.warn("[vuex] trying to unregister module '" + key + "', which is " + "not registered");
        return;
    }
    if (!child.runtime) return;
    parent.removeChild(key);
};
ModuleCollection.prototype.isRegistered = function isRegistered(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    if (parent) return parent.hasChild(key);
    return false;
};
function update2(path, targetModule, newModule) {
    assertRawModule(path, newModule);
    // update target module
    targetModule.update(newModule);
    // update nested modules
    if (newModule.modules) for(var key in newModule.modules){
        if (!targetModule.getChild(key)) {
            console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, " + 'manual reload is needed');
            return;
        }
        update2(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
    }
}
var functionAssert = {
    assert: function(value) {
        return typeof value === 'function';
    },
    expected: 'function'
};
var objectAssert = {
    assert: function(value) {
        return typeof value === 'function' || typeof value === 'object' && typeof value.handler === 'function';
    },
    expected: 'function or object with "handler" function'
};
var assertTypes = {
    getters: functionAssert,
    mutations: functionAssert,
    actions: objectAssert
};
function assertRawModule(path, rawModule) {
    Object.keys(assertTypes).forEach(function(key) {
        if (!rawModule[key]) return;
        var assertOptions = assertTypes[key];
        forEachValue(rawModule[key], function(value, type) {
            assert(assertOptions.assert(value), makeAssertionMessage(path, key, type, value, assertOptions.expected));
        });
    });
}
function makeAssertionMessage(path, key, type, value, expected) {
    var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
    if (path.length > 0) buf += " in module \"" + path.join('.') + "\"";
    buf += " is " + JSON.stringify(value) + ".";
    return buf;
}
function createStore(options) {
    return new Store(options);
}
var Store = function Store1(options) {
    var this$1$1 = this;
    if (options === void 0) options = {
    };
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store1, "store must be called with the new operator.");
    var plugins = options.plugins;
    if (plugins === void 0) plugins = [];
    var strict = options.strict;
    if (strict === void 0) strict = false;
    var devtools = options.devtools;
    // store internal state
    this._committing = false;
    this._actions = Object.create(null);
    this._actionSubscribers = [];
    this._mutations = Object.create(null);
    this._wrappedGetters = Object.create(null);
    this._modules = new ModuleCollection(options);
    this._modulesNamespaceMap = Object.create(null);
    this._subscribers = [];
    this._makeLocalGettersCache = Object.create(null);
    this._devtools = devtools;
    // bind commit and dispatch to self
    var store = this;
    var ref = this;
    var dispatch = ref.dispatch;
    var commit = ref.commit;
    this.dispatch = function boundDispatch(type, payload) {
        return dispatch.call(store, type, payload);
    };
    this.commit = function boundCommit(type, payload, options1) {
        return commit.call(store, type, payload, options1);
    };
    // strict mode
    this.strict = strict;
    var state = this._modules.root.state;
    // init root module.
    // this also recursively registers all sub-modules
    // and collects all module getters inside this._wrappedGetters
    installModule(this, state, [], this._modules.root);
    // initialize the store state, which is responsible for the reactivity
    // (also registers _wrappedGetters as computed properties)
    resetStoreState(this, state);
    // apply plugins
    plugins.forEach(function(plugin) {
        return plugin(this$1$1);
    });
};
var prototypeAccessors = {
    state: {
        configurable: true
    }
};
Store.prototype.install = function install(app, injectKey) {
    app.provide(injectKey || storeKey, this);
    app.config.globalProperties.$store = this;
    var useDevtools = this._devtools !== undefined ? this._devtools : true;
    if (useDevtools) addDevtools(app, this);
};
prototypeAccessors.state.get = function() {
    return this._state.data;
};
prototypeAccessors.state.set = function(v) {
    assert(false, "use store.replaceState() to explicit replace store state.");
};
Store.prototype.commit = function commit(_type, _payload, _options) {
    var this$1$1 = this;
    // check object-style commit
    var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;
    var mutation = {
        type: type,
        payload: payload
    };
    var entry = this._mutations[type];
    if (!entry) {
        console.error("[vuex] unknown mutation type: " + type);
        return;
    }
    this._withCommit(function() {
        entry.forEach(function commitIterator(handler) {
            handler(payload);
        });
    });
    this._subscribers.slice().forEach(function(sub) {
        return sub(mutation, this$1$1.state);
    });
    if (options && options.silent) console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. " + 'Use the filter functionality in the vue-devtools');
};
Store.prototype.dispatch = function dispatch(_type, _payload) {
    var this$1$1 = this;
    // check object-style dispatch
    var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;
    var action = {
        type: type,
        payload: payload
    };
    var entry = this._actions[type];
    if (!entry) {
        console.error("[vuex] unknown action type: " + type);
        return;
    }
    try {
        this._actionSubscribers.slice().filter(function(sub) {
            return sub.before;
        }).forEach(function(sub) {
            return sub.before(action, this$1$1.state);
        });
    } catch (e) {
        console.warn("[vuex] error in before action subscribers: ");
        console.error(e);
    }
    var result = entry.length > 1 ? Promise.all(entry.map(function(handler) {
        return handler(payload);
    })) : entry[0](payload);
    return new Promise(function(resolve, reject) {
        result.then(function(res) {
            try {
                this$1$1._actionSubscribers.filter(function(sub) {
                    return sub.after;
                }).forEach(function(sub) {
                    return sub.after(action, this$1$1.state);
                });
            } catch (e) {
                console.warn("[vuex] error in after action subscribers: ");
                console.error(e);
            }
            resolve(res);
        }, function(error) {
            try {
                this$1$1._actionSubscribers.filter(function(sub) {
                    return sub.error;
                }).forEach(function(sub) {
                    return sub.error(action, this$1$1.state, error);
                });
            } catch (e) {
                console.warn("[vuex] error in error action subscribers: ");
                console.error(e);
            }
            reject(error);
        });
    });
};
Store.prototype.subscribe = function subscribe(fn, options) {
    return genericSubscribe(fn, this._subscribers, options);
};
Store.prototype.subscribeAction = function subscribeAction(fn, options) {
    var subs = typeof fn === 'function' ? {
        before: fn
    } : fn;
    return genericSubscribe(subs, this._actionSubscribers, options);
};
Store.prototype.watch = function watch$1(getter, cb, options) {
    var this$1$1 = this;
    assert(typeof getter === 'function', "store.watch only accepts a function.");
    return _vue.watch(function() {
        return getter(this$1$1.state, this$1$1.getters);
    }, cb, Object.assign({
    }, options));
};
Store.prototype.replaceState = function replaceState(state) {
    var this$1$1 = this;
    this._withCommit(function() {
        this$1$1._state.data = state;
    });
};
Store.prototype.registerModule = function registerModule(path, rawModule, options) {
    if (options === void 0) options = {
    };
    if (typeof path === 'string') path = [
        path
    ];
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
    this._modules.register(path, rawModule);
    installModule(this, this.state, path, this._modules.get(path), options.preserveState);
    // reset store to update getters...
    resetStoreState(this, this.state);
};
Store.prototype.unregisterModule = function unregisterModule(path) {
    var this$1$1 = this;
    if (typeof path === 'string') path = [
        path
    ];
    assert(Array.isArray(path), "module path must be a string or an Array.");
    this._modules.unregister(path);
    this._withCommit(function() {
        var parentState = getNestedState(this$1$1.state, path.slice(0, -1));
        delete parentState[path[path.length - 1]];
    });
    resetStore(this);
};
Store.prototype.hasModule = function hasModule(path) {
    if (typeof path === 'string') path = [
        path
    ];
    assert(Array.isArray(path), "module path must be a string or an Array.");
    return this._modules.isRegistered(path);
};
Store.prototype.hotUpdate = function hotUpdate(newOptions) {
    this._modules.update(newOptions);
    resetStore(this, true);
};
Store.prototype._withCommit = function _withCommit(fn) {
    var committing = this._committing;
    this._committing = true;
    fn();
    this._committing = committing;
};
Object.defineProperties(Store.prototype, prototypeAccessors);
/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */ var mapState = normalizeNamespace(function(namespace, states) {
    var res = {
    };
    if (!isValidMap(states)) console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
    normalizeMap(states).forEach(function(ref) {
        var key = ref.key;
        var val = ref.val;
        res[key] = function mappedState() {
            var state = this.$store.state;
            var getters = this.$store.getters;
            if (namespace) {
                var module = getModuleByNamespace(this.$store, 'mapState', namespace);
                if (!module) return;
                state = module.context.state;
                getters = module.context.getters;
            }
            return typeof val === 'function' ? val.call(this, state, getters) : state[val];
        };
        // mark vuex getter for devtools
        res[key].vuex = true;
    });
    return res;
});
/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */ var mapMutations = normalizeNamespace(function(namespace, mutations) {
    var res = {
    };
    if (!isValidMap(mutations)) console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
    normalizeMap(mutations).forEach(function(ref) {
        var key = ref.key;
        var val = ref.val;
        res[key] = function mappedMutation() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            // Get the commit method from store
            var commit1 = this.$store.commit;
            if (namespace) {
                var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
                if (!module) return;
                commit1 = module.context.commit;
            }
            return typeof val === 'function' ? val.apply(this, [
                commit1
            ].concat(args)) : commit1.apply(this.$store, [
                val
            ].concat(args));
        };
    });
    return res;
});
/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */ var mapGetters = normalizeNamespace(function(namespace, getters) {
    var res = {
    };
    if (!isValidMap(getters)) console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
    normalizeMap(getters).forEach(function(ref) {
        var key = ref.key;
        var val = ref.val;
        // The namespace has been mutated by normalizeNamespace
        val = namespace + val;
        res[key] = function mappedGetter() {
            if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) return;
            if (!(val in this.$store.getters)) {
                console.error("[vuex] unknown getter: " + val);
                return;
            }
            return this.$store.getters[val];
        };
        // mark vuex getter for devtools
        res[key].vuex = true;
    });
    return res;
});
/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */ var mapActions = normalizeNamespace(function(namespace, actions) {
    var res = {
    };
    if (!isValidMap(actions)) console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
    normalizeMap(actions).forEach(function(ref) {
        var key = ref.key;
        var val = ref.val;
        res[key] = function mappedAction() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            // get dispatch function from store
            var dispatch1 = this.$store.dispatch;
            if (namespace) {
                var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
                if (!module) return;
                dispatch1 = module.context.dispatch;
            }
            return typeof val === 'function' ? val.apply(this, [
                dispatch1
            ].concat(args)) : dispatch1.apply(this.$store, [
                val
            ].concat(args));
        };
    });
    return res;
});
/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */ var createNamespacedHelpers = function(namespace) {
    return {
        mapState: mapState.bind(null, namespace),
        mapGetters: mapGetters.bind(null, namespace),
        mapMutations: mapMutations.bind(null, namespace),
        mapActions: mapActions.bind(null, namespace)
    };
};
/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */ function normalizeMap(map) {
    if (!isValidMap(map)) return [];
    return Array.isArray(map) ? map.map(function(key) {
        return {
            key: key,
            val: key
        };
    }) : Object.keys(map).map(function(key) {
        return {
            key: key,
            val: map[key]
        };
    });
}
/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */ function isValidMap(map) {
    return Array.isArray(map) || isObject(map);
}
/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */ function normalizeNamespace(fn) {
    return function(namespace, map) {
        if (typeof namespace !== 'string') {
            map = namespace;
            namespace = '';
        } else if (namespace.charAt(namespace.length - 1) !== '/') namespace += '/';
        return fn(namespace, map);
    };
}
/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */ function getModuleByNamespace(store, helper, namespace) {
    var module = store._modulesNamespaceMap[namespace];
    if (!module) console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
    return module;
}
// Credits: borrowed code from fcomb/redux-logger
function createLogger(ref) {
    if (ref === void 0) ref = {
    };
    var collapsed = ref.collapsed;
    if (collapsed === void 0) collapsed = true;
    var filter = ref.filter;
    if (filter === void 0) filter = function(mutation, stateBefore, stateAfter) {
        return true;
    };
    var transformer = ref.transformer;
    if (transformer === void 0) transformer = function(state) {
        return state;
    };
    var mutationTransformer = ref.mutationTransformer;
    if (mutationTransformer === void 0) mutationTransformer = function(mut) {
        return mut;
    };
    var actionFilter = ref.actionFilter;
    if (actionFilter === void 0) actionFilter = function(action, state) {
        return true;
    };
    var actionTransformer = ref.actionTransformer;
    if (actionTransformer === void 0) actionTransformer = function(act) {
        return act;
    };
    var logMutations = ref.logMutations;
    if (logMutations === void 0) logMutations = true;
    var logActions = ref.logActions;
    if (logActions === void 0) logActions = true;
    var logger = ref.logger;
    if (logger === void 0) logger = console;
    return function(store) {
        var prevState = deepCopy(store.state);
        if (typeof logger === 'undefined') return;
        if (logMutations) store.subscribe(function(mutation, state) {
            var nextState = deepCopy(state);
            if (filter(mutation, prevState, nextState)) {
                var formattedTime = getFormattedTime();
                var formattedMutation = mutationTransformer(mutation);
                var message = "mutation " + mutation.type + formattedTime;
                startMessage(logger, message, collapsed);
                logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
                logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
                logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));
                endMessage(logger);
            }
            prevState = nextState;
        });
        if (logActions) store.subscribeAction(function(action, state) {
            if (actionFilter(action, state)) {
                var formattedTime = getFormattedTime();
                var formattedAction = actionTransformer(action);
                var message = "action " + action.type + formattedTime;
                startMessage(logger, message, collapsed);
                logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);
                endMessage(logger);
            }
        });
    };
}
function startMessage(logger, message, collapsed) {
    var startMessage1 = collapsed ? logger.groupCollapsed : logger.group;
    // render
    try {
        startMessage1.call(logger, message);
    } catch (e) {
        logger.log(message);
    }
}
function endMessage(logger) {
    try {
        logger.groupEnd();
    } catch (e) {
        logger.log('—— log end ——');
    }
}
function getFormattedTime() {
    var time = new Date();
    return " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
}
function repeat(str, times) {
    return new Array(times + 1).join(str);
}
function pad(num, maxLength) {
    return repeat('0', maxLength - num.toString().length) + num;
}
var index = {
    version: '4.0.1',
    Store: Store,
    storeKey: storeKey,
    createStore: createStore,
    useStore: useStore,
    mapState: mapState,
    mapMutations: mapMutations,
    mapGetters: mapGetters,
    mapActions: mapActions,
    createNamespacedHelpers: createNamespacedHelpers,
    createLogger: createLogger
};
exports.default = index;

},{"vue":"4ayRm","@vue/devtools-api":"16EPD","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"16EPD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setupDevtoolsPlugin", ()=>setupDevtoolsPlugin
);
var _env = require("./env");
var _const = require("./const");
var _api = require("./api");
parcelHelpers.exportAll(_api, exports);
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const hook = _env.getDevtoolsGlobalHook();
    if (hook) hook.emit(_const.HOOK_SETUP, pluginDescriptor, setupFn);
    else {
        const target = _env.getTarget();
        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
        list.push({
            pluginDescriptor,
            setupFn
        });
    }
}

},{"./env":"eNHwk","./const":"7wGEU","./api":"4qvMg","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"eNHwk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDevtoolsGlobalHook", ()=>getDevtoolsGlobalHook
);
parcelHelpers.export(exports, "getTarget", ()=>getTarget
);
var global = arguments[3];
function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
    // @ts-ignore
    return typeof navigator !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"367CR":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"7wGEU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HOOK_SETUP", ()=>HOOK_SETUP
);
const HOOK_SETUP = 'devtools-plugin:setup';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"4qvMg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _api = require("./api");
parcelHelpers.exportAll(_api, exports);
var _app = require("./app");
parcelHelpers.exportAll(_app, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _context = require("./context");
parcelHelpers.exportAll(_context, exports);
var _hooks = require("./hooks");
parcelHelpers.exportAll(_hooks, exports);
var _util = require("./util");
parcelHelpers.exportAll(_util, exports);

},{"./api":"2xgaC","./app":"3vuqP","./component":"2TIst","./context":"5gCNh","./hooks":"7l1uY","./util":"1sXhG","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"2xgaC":[function(require,module,exports) {

},{}],"3vuqP":[function(require,module,exports) {

},{}],"2TIst":[function(require,module,exports) {

},{}],"5gCNh":[function(require,module,exports) {

},{}],"7l1uY":[function(require,module,exports) {

},{}],"1sXhG":[function(require,module,exports) {

},{}],"7lTz1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-1f7cd9");
_vue.pushScopeId("data-v-1f7cd9");
const _hoisted_1 = /*#__PURE__*/ _vue.createTextVNode(" Toggle ");
const _hoisted_2 = /*#__PURE__*/ _vue.createTextVNode("John Leider");
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    const _component_v_btn = _vue.resolveComponent("v-btn");
    const _component_v_row = _vue.resolveComponent("v-row");
    const _component_v_container = _vue.resolveComponent("v-container");
    const _component_v_img = _vue.resolveComponent("v-img");
    const _component_v_list_item_avatar = _vue.resolveComponent("v-list-item-avatar");
    const _component_v_list_item_title = _vue.resolveComponent("v-list-item-title");
    const _component_v_list_item_content = _vue.resolveComponent("v-list-item-content");
    const _component_v_list_item = _vue.resolveComponent("v-list-item");
    const _component_v_divider = _vue.resolveComponent("v-divider");
    const _component_v_icon = _vue.resolveComponent("v-icon");
    const _component_v_list_item_icon = _vue.resolveComponent("v-list-item-icon");
    const _component_v_list = _vue.resolveComponent("v-list");
    const _component_v_navigation_drawer = _vue.resolveComponent("v-navigation-drawer");
    const _component_v_sheet = _vue.resolveComponent("v-sheet");
    return _vue.openBlock(), _vue.createBlock(_component_v_sheet, {
        height: "400",
        class: "overflow-hidden",
        style: {
            "position": "relative"
        }
    }, {
        default: _withId(()=>[
                _vue.createVNode(_component_v_container, {
                    class: "fill-height"
                }, {
                    default: _withId(()=>[
                            _vue.createVNode(_component_v_row, {
                                align: "center",
                                justify: "center"
                            }, {
                                default: _withId(()=>[
                                        _vue.createVNode(_component_v_btn, {
                                            color: "pink",
                                            dark: "",
                                            onClick: _cache[1] || (_cache[1] = _vue.withModifiers(($event)=>_ctx.drawer = !_ctx.drawer
                                            , [
                                                "stop"
                                            ]))
                                        }, {
                                            default: _withId(()=>[
                                                    _hoisted_1
                                                ]
                                            ),
                                            _: 1
                                        })
                                    ]
                                ),
                                _: 1
                            })
                        ]
                    ),
                    _: 1
                }),
                _vue.createVNode(_component_v_navigation_drawer, {
                    modelValue: _ctx.drawer,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event)=>_ctx.drawer = $event
                    ),
                    absolute: "",
                    temporary: ""
                }, {
                    default: _withId(()=>[
                            _vue.createVNode(_component_v_list_item, null, {
                                default: _withId(()=>[
                                        _vue.createVNode(_component_v_list_item_avatar, null, {
                                            default: _withId(()=>[
                                                    _vue.createVNode(_component_v_img, {
                                                        src: "https://randomuser.me/api/portraits/men/78.jpg"
                                                    })
                                                ]
                                            ),
                                            _: 1
                                        }),
                                        _vue.createVNode(_component_v_list_item_content, null, {
                                            default: _withId(()=>[
                                                    _vue.createVNode(_component_v_list_item_title, null, {
                                                        default: _withId(()=>[
                                                                _hoisted_2
                                                            ]
                                                        ),
                                                        _: 1
                                                    })
                                                ]
                                            ),
                                            _: 1
                                        })
                                    ]
                                ),
                                _: 1
                            }),
                            _vue.createVNode(_component_v_divider),
                            _vue.createVNode(_component_v_list, {
                                dense: ""
                            }, {
                                default: _withId(()=>[
                                        (_vue.openBlock(true), _vue.createBlock(_vue.Fragment, null, _vue.renderList(_ctx.items, (item)=>{
                                            return _vue.openBlock(), _vue.createBlock(_component_v_list_item, {
                                                key: item.title,
                                                link: ""
                                            }, {
                                                default: _withId(()=>[
                                                        _vue.createVNode(_component_v_list_item_icon, null, {
                                                            default: _withId(()=>[
                                                                    _vue.createVNode(_component_v_icon, null, {
                                                                        default: _withId(()=>[
                                                                                _vue.createTextVNode(_vue.toDisplayString(item.icon), 1/* TEXT */ )
                                                                            ]
                                                                        ),
                                                                        _: 2
                                                                    }, 1024/* DYNAMIC_SLOTS */ )
                                                                ]
                                                            ),
                                                            _: 2
                                                        }, 1024/* DYNAMIC_SLOTS */ ),
                                                        _vue.createVNode(_component_v_list_item_content, null, {
                                                            default: _withId(()=>[
                                                                    _vue.createVNode(_component_v_list_item_title, null, {
                                                                        default: _withId(()=>[
                                                                                _vue.createTextVNode(_vue.toDisplayString(item.title), 1/* TEXT */ )
                                                                            ]
                                                                        ),
                                                                        _: 2
                                                                    }, 1024/* DYNAMIC_SLOTS */ )
                                                                ]
                                                            ),
                                                            _: 2
                                                        }, 1024/* DYNAMIC_SLOTS */ )
                                                    ]
                                                ),
                                                _: 2
                                            }, 1024/* DYNAMIC_SLOTS */ );
                                        }), 128/* KEYED_FRAGMENT */ ))
                                    ]
                                ),
                                _: 1
                            })
                        ]
                    ),
                    _: 1
                }, 8/* PROPS */ , [
                    "modelValue"
                ])
            ]
        ),
        _: 1
    });
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('1f7cd9-hmr', render);
});

},{"vue":"4ayRm","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"1O6Bm":[function() {},{}],"1iFLg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"2tdzU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vuex = require("vuex");
var _navbarstore = require("./modules/navbarstore");
var _navbarstoreDefault = parcelHelpers.interopDefault(_navbarstore);
var _shopstore = require("./modules/shopstore");
var _shopstoreDefault = parcelHelpers.interopDefault(_shopstore);
// Create a new store instance.
// const store = createStore({
//     state() {
//         return {
//       count: 0
//     }
//     },
//     mutations: {
//       increment (state) {
//         state.count++
//       }
//     },
//     actions:{
//       inc({commit}) {
//           commit('increment')
//       } 
//     },
//     getters: {
//         getInc:  state => { return state.count}
//     }
//   })
const store = _vuex.createStore({
    modules: {
        navbarstore: _navbarstoreDefault.default,
        shopstore: _shopstoreDefault.default
    }
});
exports.default = store;

},{"vuex":"2F56c","./modules/navbarstore":"29Bq8","./modules/shopstore":"5za8w","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"29Bq8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const state1 = ()=>{
};
const mutations = {
    showbasket (state) {
        if (state.toggle === false) state.toggle = true;
        else state.toggle = false;
    }
};
const actions = {
    active ({ commit  }) {
        commit('showbasket');
    }
};
const getters = {
    getToggle: (state2)=>{
        return state2.count;
    }
};
exports.default = {
    state: state1,
    getters,
    actions,
    mutations
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"5za8w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _movies = require("../data/movies");
var _moviesDefault = parcelHelpers.interopDefault(_movies);
const state1 = ()=>({
        count: 0,
        movie: null,
        movies: [],
        categories: [],
        checkoutstatus: null
    })
;
const mutations = {
    increment (state) {
        state.count++;
    },
    setMovies (state, movies) {
        state.movies = movies;
    },
    setMovie (state, movie) {
        state.movie = movie;
    },
    setCategories (state, categories) {
        state.categories = categories;
    }
};
const actions = {
    inc ({ commit  }) {
        commit('increment');
    },
    getAllMovies ({ commit  }) {
        _moviesDefault.default.getMovies((movies)=>{
            commit('setMovies', movies);
        });
    },
    getMoviebyId () {
        const film = _moviesDefault.default.getMovies.find((element)=>element.id === id
        );
        this.movie = film;
        console.log('batat' + this.movie);
    },
    getAllCategories ({ commit  }) {
        _moviesDefault.default.getCategories((categories)=>{
            commit('setCategories', categories);
        });
    }
};
const getters = {
    getInc: (state2)=>{
        return state2.count;
    },
    getMovies: (state2)=>{
        return state2.movies;
    },
    getMovie: (state2)=>{
        return state2.movie;
    },
    getCategories: (state2)=>{
        return state2.categories;
    }
};
exports.default = {
    state: state1,
    getters,
    actions,
    mutations
};

},{"../data/movies":"1cwI2","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"1cwI2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const _movies = [
    {
        'id': 1,
        'title': 'Pirates of the Caribbean',
        'category': [
            {
                'id': 1,
                'name': 'Fantasy'
            }
        ],
        'price': 10.01,
        'inventory': 2
    },
    {
        'id': 2,
        'title': 'Harry Potter',
        'category': [
            {
                'id': 1,
                'name': 'Fantasy'
            }
        ],
        'price': 10.99,
        'inventory': 10
    },
    {
        'id': 3,
        'title': 'Lord of the Rings',
        'category': [
            {
                'id': 1,
                'name': 'Fantasy'
            }
        ],
        'price': 19.99,
        'inventory': 5
    },
    {
        'id': 4,
        'title': 'Star Wars',
        'category': [
            {
                'id': 1,
                'name': 'Sci-fi'
            }
        ],
        'price': 19.99,
        'inventory': 5
    },
    {
        'id': 5,
        'title': 'Alien vs Predator',
        'category': [
            {
                'id': 1,
                'name': 'Sci-fi'
            }
        ],
        'price': 19.99,
        'inventory': 5
    },
    {
        'id': 6,
        'title': 'Wolf of wall street',
        'category': [
            {
                'id': 1,
                'name': 'Drama'
            },
            {
                'id': 1,
                'name': 'Crime'
            }
        ],
        'price': 19.99,
        'inventory': 5
    },
    {
        'id': 7,
        'title': 'Batman Begins',
        'category': [
            {
                'id': 1,
                'name': 'Super-hero'
            }
        ],
        'price': 19.99,
        'inventory': 5
    },
    {
        'id': 8,
        'title': 'Avengers: End Game',
        'category': [
            {
                'id': 1,
                'name': 'Super-hero'
            }
        ],
        'price': 19.99,
        'inventory': 5
    },
    {
        'id': 9,
        'title': 'Figth Club',
        'category': [
            {
                'id': 1,
                'name': 'Drama'
            },
            {
                'id': 1,
                'name': 'Crime'
            }
        ],
        'price': 19.99,
        'inventory': 5
    },
    {
        'id': 10,
        'title': 'Shutter Island',
        'category': [
            {
                'id': 1,
                'name': 'Drama'
            }
        ],
        'price': 19.99,
        'inventory': 5
    }
];
const _categories = [
    {
        'id': 0,
        'name': 'All'
    },
    {
        'id': 1,
        'name': 'Fantasy'
    },
    {
        'id': 2,
        'name': 'Sci-fi'
    },
    {
        'id': 3,
        'name': 'Drama'
    },
    {
        'id': 4,
        'name': 'Crime'
    },
    {
        'id': 5,
        'name': 'Super-hero'
    }
];
exports.default = {
    getMovies (cb) {
        setTimeout(()=>cb(_movies)
        , 100);
    },
    getCategories (cb) {
        setTimeout(()=>cb(_categories)
        , 100);
    },
    buyMovies (movies, cb, errorCb) {
        setTimeout(()=>{
            // simulate random checkout failure.
            Math.random() > 0.5 || navigator.webdriver ? cb() : errorCb();
        }, 100);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"cOUdf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _vueDefault = parcelHelpers.interopDefault(_vue);
var _vuetify = require("vuetify");
var _vuetifyDefault = parcelHelpers.interopDefault(_vuetify);
var _vuetifyMinCss = require("vuetify/dist/vuetify.min.css");
_vueDefault.default.use(_vuetifyDefault.default);
const opts = {
};
exports.default = new _vuetifyDefault.default(opts);

},{"vue":"4ayRm","vuetify":"6XKBJ","vuetify/dist/vuetify.min.css":"5tssH","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"6XKBJ":[function(require,module,exports) {
var process = require("process");
/*!
* Vuetify v3.0.0-alpha.5
* Forged by John Leider
* Released under the MIT License.
*/ (function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require("vue"));
    else if (typeof define === 'function' && define.amd) define([
        "vue"
    ], factory);
    else if (typeof exports === 'object') exports["Vuetify"] = factory(require("vue"));
    else root["Vuetify"] = factory(root["Vue"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_vue__) {
    return(/******/ (()=>{
        /******/ var __webpack_modules__ = {
            /***/ "./src/components/VApp/VApp.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VApp_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VApp.sass */ "./src/components/VApp/VApp.sass");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _composables_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/layout */ "./src/composables/layout.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony import */ var _composables_rtl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/rtl */ "./src/composables/rtl.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VApp',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        theme: String,
                        ..._composables_layout__WEBPACK_IMPORTED_MODULE_3__.makeLayoutProps()
                    }),
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_4__.useTheme();
                        const { layoutClasses  } = _composables_layout__WEBPACK_IMPORTED_MODULE_3__.createLayout(props);
                        const { rtlClasses  } = _composables_rtl__WEBPACK_IMPORTED_MODULE_5__.useRtl();
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                "class": [
                                    'v-application',
                                    themeClasses.value,
                                    layoutClasses.value,
                                    rtlClasses.value
                                ],
                                "data-app": "true"
                            }, [
                                vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                    "class": "v-application__wrap"
                                }, [
                                    (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                                ])
                            ], 2);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VApp/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VApp": ()=>/* reexport safe */ _VApp__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VApp */ "./src/components/VApp/VApp.tsx");
            /***/ },
            /***/ "./src/components/VAppBar/VAppBar.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VAppBar_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VAppBar.sass */ "./src/components/VAppBar/VAppBar.sass");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./.. */ "./src/components/VImg/VImg.tsx");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_density__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/density */ "./src/composables/density.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/layout */ "./src/composables/layout.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../composables/proxiedModel */ "./src/composables/proxiedModel.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util */ "./src/util/helpers.ts");
                /* harmony import */ var _util_makeProps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/makeProps */ "./src/util/makeProps.ts");
                // Styles
                // Components
                // Composables
                // Utilities
                // Types
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VAppBar',
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        // TODO: Implement scrolling techniques
                        // hideOnScroll: Boolean
                        // invertedScroll: Boolean
                        // collapseOnScroll: Boolean
                        // elevateOnScroll: Boolean
                        // shrinkOnScroll: Boolean
                        // fadeImageOnScroll: Boolean
                        collapse: Boolean,
                        color: String,
                        flat: Boolean,
                        height: {
                            type: [
                                Number,
                                String
                            ],
                            default: 64
                        },
                        extensionHeight: {
                            type: [
                                Number,
                                String
                            ],
                            default: 48
                        },
                        floating: Boolean,
                        image: String,
                        modelValue: {
                            type: Boolean,
                            default: true
                        },
                        prominent: Boolean,
                        prominentHeight: {
                            type: [
                                Number,
                                String
                            ],
                            default: 128
                        },
                        position: {
                            type: String,
                            default: 'top',
                            validator: (value)=>[
                                    'top',
                                    'bottom'
                                ].includes(value)
                        },
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_3__.makeBorderProps(),
                        ..._composables_density__WEBPACK_IMPORTED_MODULE_4__.makeDensityProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_5__.makeElevationProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_6__.makeRoundedProps(),
                        ..._composables_layout__WEBPACK_IMPORTED_MODULE_7__.makeLayoutItemProps({
                            name: 'app-bar'
                        }),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_8__.makeTagProps({
                            tag: 'header'
                        })
                    }),
                    emits: {
                        'update:modelValue': (value)=>true
                    },
                    setup (props, { slots  }) {
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_3__.useBorder(props, 'v-app-bar');
                        const { densityClasses  } = _composables_density__WEBPACK_IMPORTED_MODULE_4__.useDensity(props, 'v-app-bar');
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_5__.useElevation(props);
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_6__.useRounded(props, 'v-app-bar');
                        const { backgroundColorClasses , backgroundColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_9__.useBackgroundColor(vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'color'));
                        const extension = vue__WEBPACK_IMPORTED_MODULE_0__.ref(!!slots.extension);
                        const height = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>Number(props.prominent ? props.prominentHeight : props.height) + Number(extension.value ? props.extensionHeight : 0) - (props.density === 'comfortable' ? 8 : 0) - (props.density === 'compact' ? 16 : 0)
                        );
                        const isActive = _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_10__.useProxiedModel(props, 'modelValue', props.modelValue);
                        const layoutStyles = _composables_layout__WEBPACK_IMPORTED_MODULE_7__.useLayoutItem(props.name, vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'priority'), vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'position'), height, height, isActive);
                        return ()=>{
                            var _slots$img, _slots$default, _slots$extension;
                            const hasImage = !!(slots.image || props.image);
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-app-bar',
                                    {
                                        'v-app-bar--bottom': props.position === 'bottom',
                                        'v-app-bar--collapsed': props.collapse,
                                        'v-app-bar--flat': props.flat,
                                        'v-app-bar--floating': props.floating,
                                        'v-app-bar--is-active': isActive.value,
                                        'v-app-bar--prominent': props.prominent,
                                        'v-app-bar--absolute': props.absolute
                                    },
                                    backgroundColorClasses.value,
                                    borderClasses.value,
                                    densityClasses.value,
                                    elevationClasses.value,
                                    roundedClasses.value
                                ],
                                "style": [
                                    backgroundColorStyles.value,
                                    layoutStyles.value
                                ]
                            }, {
                                default: ()=>[
                                        hasImage && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-app-bar__image"
                                        }, [
                                            slots.image ? (_slots$img = slots.img) == null ? void 0 : _slots$img.call(slots, {
                                                src: props.image
                                            }) : vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_11__.default, {
                                                "src": props.image,
                                                "cover": true
                                            }, null, 8, [
                                                "src",
                                                "cover"
                                            ])
                                        ]),
                                        vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-app-bar__content"
                                        }, [
                                            slots.prepend && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                                "class": "v-app-bar__prepend"
                                            }, [
                                                slots.prepend()
                                            ]),
                                            (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots),
                                            slots.append && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                                "class": "v-app-bar__append"
                                            }, [
                                                slots.append()
                                            ])
                                        ]),
                                        slots.extension && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-app-bar__extension",
                                            "style": {
                                                height: _util__WEBPACK_IMPORTED_MODULE_12__.convertToUnit(props.extensionHeight)
                                            },
                                            "ref": extension
                                        }, [
                                            (_slots$extension = slots.extension) == null ? void 0 : _slots$extension.call(slots)
                                        ], 4)
                                    ]
                                ,
                                _: 1
                            }, 8, [
                                "class",
                                "style"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VAppBar/VAppBarNavIcon.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VBtn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../VBtn */ "./src/components/VBtn/VBtn.tsx");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Components
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VAppBarNavIcon',
                    props: _util__WEBPACK_IMPORTED_MODULE_1__.makeProps({
                        icon: {
                            type: String,
                            default: '$menu'
                        }
                    }),
                    setup (props, { slots  }) {
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_VBtn__WEBPACK_IMPORTED_MODULE_2__.default, {
                                "class": "v-app-bar-nav-icon",
                                "icon": props.icon
                            }, {
                                default: ()=>[
                                        (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                                    ]
                            }, 8, [
                                "icon"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VAppBar/VAppBarTitle.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VAppBarTitle_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VAppBarTitle.sass */ "./src/components/VAppBar/VAppBarTitle.sass");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _util_makeProps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/makeProps */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VAppBarTitle',
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_3__.makeTagProps({
                            tag: 'header'
                        })
                    }),
                    setup (props, { slots  }) {
                        return ()=>vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": "v-app-bar-title"
                            }, {
                                default: ()=>[
                                        slots.default && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-app-bar-title__placeholder"
                                        }, [
                                            slots.default()
                                        ])
                                    ]
                            })
                        ;
                    }
                });
            /***/ },
            /***/ "./src/components/VAppBar/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VAppBar": ()=>/* reexport safe */ _VAppBar__WEBPACK_IMPORTED_MODULE_0__.default
                    ,
                    /* harmony export */ "VAppBarNavIcon": ()=>/* reexport safe */ _VAppBarNavIcon__WEBPACK_IMPORTED_MODULE_1__.default
                    ,
                    /* harmony export */ "VAppBarTitle": ()=>/* reexport safe */ _VAppBarTitle__WEBPACK_IMPORTED_MODULE_2__.default
                });
                /* harmony import */ var _VAppBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VAppBar */ "./src/components/VAppBar/VAppBar.tsx");
                /* harmony import */ var _VAppBarNavIcon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VAppBarNavIcon */ "./src/components/VAppBar/VAppBarNavIcon.tsx");
                /* harmony import */ var _VAppBarTitle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VAppBarTitle */ "./src/components/VAppBar/VAppBarTitle.tsx");
            /***/ },
            /***/ "./src/components/VAvatar/VAvatar.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VAvatar_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VAvatar.sass */ "./src/components/VAvatar/VAvatar.sass");
                /* harmony import */ var _VIcon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../VIcon */ "./src/components/VIcon/VIcon.tsx");
                /* harmony import */ var _VImg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../VImg */ "./src/components/VImg/VImg.tsx");
                /* harmony import */ var _composables_density__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/density */ "./src/composables/density.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_size__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/size */ "./src/composables/size.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Components
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VAvatar',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        color: String,
                        left: Boolean,
                        right: Boolean,
                        icon: String,
                        image: String,
                        ..._composables_density__WEBPACK_IMPORTED_MODULE_3__.makeDensityProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_4__.makeRoundedProps(),
                        ..._composables_size__WEBPACK_IMPORTED_MODULE_5__.makeSizeProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_6__.makeTagProps()
                    }),
                    setup (props, { slots  }) {
                        const { backgroundColorClasses , backgroundColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_7__.useBackgroundColor(vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'color'));
                        const { densityClasses  } = _composables_density__WEBPACK_IMPORTED_MODULE_3__.useDensity(props, 'v-avatar');
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_4__.useRounded(props, 'v-avatar');
                        const { sizeClasses , sizeStyles  } = _composables_size__WEBPACK_IMPORTED_MODULE_5__.useSize(props, 'v-avatar');
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-avatar',
                                    {
                                        'v-avatar--left': props.left,
                                        'v-avatar--right': props.right
                                    },
                                    backgroundColorClasses.value,
                                    densityClasses.value,
                                    roundedClasses.value,
                                    sizeClasses.value
                                ],
                                "style": [
                                    backgroundColorStyles.value,
                                    sizeStyles.value
                                ]
                            }, {
                                default: ()=>[
                                        props.image && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_VImg__WEBPACK_IMPORTED_MODULE_8__.default, {
                                            "src": props.image,
                                            "alt": ""
                                        }, null, 8, [
                                            "src"
                                        ]),
                                        props.icon && !props.image && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_VIcon__WEBPACK_IMPORTED_MODULE_9__.default, {
                                            "icon": props.icon
                                        }, null, 8, [
                                            "icon"
                                        ]),
                                        (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                                    ]
                                ,
                                _: 1
                            }, 8, [
                                "class",
                                "style"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VAvatar/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VAvatar": ()=>/* reexport safe */ _VAvatar__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VAvatar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VAvatar */ "./src/components/VAvatar/VAvatar.tsx");
            /***/ },
            /***/ "./src/components/VBadge/VBadge.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VBadge_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VBadge.sass */ "./src/components/VBadge/VBadge.sass");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./.. */ "./src/components/VIcon/VIcon.tsx");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_transition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/transition */ "./src/composables/transition.ts");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util */ "./src/util/helpers.ts");
                // Styles
                // Components
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VBadge',
                    inheritAttrs: false,
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        bordered: Boolean,
                        color: {
                            type: String,
                            default: 'primary'
                        },
                        content: String,
                        dot: Boolean,
                        floating: Boolean,
                        icon: String,
                        inline: Boolean,
                        label: {
                            type: String,
                            default: '$vuetify.badge'
                        },
                        location: {
                            type: String,
                            default: 'top-right',
                            validator: (value)=>{
                                const [vertical, horizontal] = (value != null ? value : '').split('-');
                                return [
                                    'top',
                                    'bottom'
                                ].includes(vertical) && [
                                    'left',
                                    'right'
                                ].includes(horizontal);
                            }
                        },
                        max: [
                            Number,
                            String
                        ],
                        modelValue: {
                            type: Boolean,
                            default: true
                        },
                        offsetX: [
                            Number,
                            String
                        ],
                        offsetY: [
                            Number,
                            String
                        ],
                        textColor: String,
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_3__.makeRoundedProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_4__.makeTagProps(),
                        ..._composables_transition__WEBPACK_IMPORTED_MODULE_5__.makeTransitionProps({
                            transition: 'scale-rotate-transition'
                        })
                    }),
                    setup (props, ctx) {
                        const { backgroundColorClasses , backgroundColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_6__.useBackgroundColor(vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'color'));
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_3__.useRounded(props, 'v-badge');
                        const { textColorClasses , textColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_6__.useTextColor(vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'textColor'));
                        const position = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            return props.floating ? props.dot ? 2 : 4 : props.dot ? 8 : 12;
                        });
                        function calculatePosition(offset) {
                            return `calc(100% - ${_util__WEBPACK_IMPORTED_MODULE_7__.convertToUnit(position.value + parseInt(offset != null ? offset : 0, 10))})`;
                        }
                        const locationStyles = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            var _props$location;
                            const [vertical, horizontal] = ((_props$location = props.location) != null ? _props$location : '').split('-'); // TODO: RTL support
                            const styles = {
                                bottom: 'auto',
                                left: 'auto',
                                right: 'auto',
                                top: 'auto'
                            };
                            if (!props.inline) {
                                styles[horizontal === 'left' ? 'right' : 'left'] = calculatePosition(props.offsetX);
                                styles[vertical === 'top' ? 'bottom' : 'top'] = calculatePosition(props.offsetY);
                            }
                            return styles;
                        });
                        return ()=>{
                            var _ctx$slots$default, _ctx$slots, _ctx$slots$badge, _ctx$slots2;
                            const value = Number(props.content);
                            const content = !props.max || isNaN(value) ? props.content : value <= props.max ? value : `${props.max}+`;
                            const [badgeAttrs, attrs] = _util__WEBPACK_IMPORTED_MODULE_7__.extract(ctx.attrs, [
                                'aria-atomic',
                                'aria-label',
                                'aria-live',
                                'role',
                                'title'
                            ]);
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps({
                                "class": [
                                    'v-badge',
                                    {
                                        'v-badge--bordered': props.bordered,
                                        'v-badge--dot': props.dot,
                                        'v-badge--floating': props.floating,
                                        'v-badge--inline': props.inline
                                    }
                                ]
                            }, attrs), {
                                default: ()=>[
                                        vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-badge__wrapper"
                                        }, [
                                            (_ctx$slots$default = (_ctx$slots = ctx.slots).default) == null ? void 0 : _ctx$slots$default.call(_ctx$slots),
                                            vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_composables_transition__WEBPACK_IMPORTED_MODULE_5__.MaybeTransition, {
                                                "transition": props.transition
                                            }, {
                                                default: ()=>[
                                                        vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives(vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("span", vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps({
                                                            "class": [
                                                                'v-badge__badge',
                                                                backgroundColorClasses.value,
                                                                roundedClasses.value,
                                                                textColorClasses.value
                                                            ],
                                                            "style": [
                                                                backgroundColorStyles.value,
                                                                locationStyles.value,
                                                                textColorStyles.value
                                                            ],
                                                            "aria-atomic": "true",
                                                            "aria-label": "locale string here",
                                                            "aria-live": "polite",
                                                            "role": "status"
                                                        }, badgeAttrs), [
                                                            props.dot ? undefined : ctx.slots.badge ? (_ctx$slots$badge = (_ctx$slots2 = ctx.slots).badge) == null ? void 0 : _ctx$slots$badge.call(_ctx$slots2) : props.icon ? vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_8__.default, {
                                                                "icon": props.icon
                                                            }, null, 8, [
                                                                "icon"
                                                            ]) : vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("span", {
                                                                "class": "v-badge__content"
                                                            }, [
                                                                content
                                                            ])
                                                        ], 16), [
                                                            [
                                                                vue__WEBPACK_IMPORTED_MODULE_0__.vShow,
                                                                props.modelValue
                                                            ]
                                                        ])
                                                    ]
                                            }, 8, [
                                                "transition"
                                            ])
                                        ])
                                    ]
                            }, 16, [
                                "class"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VBadge/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VBadge": ()=>/* reexport safe */ _VBadge__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VBadge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VBadge */ "./src/components/VBadge/VBadge.tsx");
            /***/ },
            /***/ "./src/components/VBanner/VBanner.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VBanner_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VBanner.sass */ "./src/components/VBanner/VBanner.sass");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_position__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/position */ "./src/composables/position.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VBanner',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        avatar: String,
                        icon: String,
                        mobile: Boolean,
                        singleLine: Boolean,
                        sticky: Boolean,
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_3__.makeBorderProps(),
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_4__.makeDimensionProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_5__.makeElevationProps(),
                        ..._composables_position__WEBPACK_IMPORTED_MODULE_6__.makePositionProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_7__.makeRoundedProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_8__.makeTagProps()
                    }),
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_9__.useTheme();
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_3__.useBorder(props, 'v-banner');
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_4__.useDimension(props);
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_5__.useElevation(props);
                        const { positionClasses , positionStyles  } = _composables_position__WEBPACK_IMPORTED_MODULE_6__.usePosition(props, 'v-banner');
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_7__.useRounded(props, 'v-banner');
                        return ()=>{
                            var _slots$thumbnail, _slots$default, _slots$actions;
                            const hasThumbnail = !!props.avatar || !!props.icon || !!slots.thumbnail;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-banner',
                                    {
                                        'v-banner--has-thumbnail': hasThumbnail,
                                        'v-banner--is-mobile': props.mobile,
                                        'v-banner--single-line': props.singleLine,
                                        'v-banner--sticky': props.sticky
                                    },
                                    themeClasses.value,
                                    borderClasses.value,
                                    roundedClasses.value,
                                    elevationClasses.value,
                                    positionClasses.value
                                ],
                                "style": [
                                    dimensionStyles.value,
                                    positionStyles.value
                                ],
                                "role": "banner"
                            }, {
                                default: ()=>[
                                        vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-banner__sizer"
                                        }, [
                                            vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                                "class": "v-banner__content"
                                            }, [
                                                hasThumbnail && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                                    "class": "v-banner__thumbnail"
                                                }, [
                                                    (_slots$thumbnail = slots.thumbnail) == null ? void 0 : _slots$thumbnail.call(slots),
                                                    props.avatar && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("img", {
                                                        "class": "v-banner__avatar",
                                                        "src": props.avatar,
                                                        "alt": ""
                                                    }, null, 8, [
                                                        "src"
                                                    ]),
                                                    props.icon && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("i", {
                                                        "class": "v-banner__icon"
                                                    }, [
                                                        props.icon
                                                    ])
                                                ]),
                                                vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                                    "class": "v-banner__text"
                                                }, [
                                                    (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                                                ])
                                            ]),
                                            slots.actions && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                                "class": "v-banner__actions"
                                            }, [
                                                (_slots$actions = slots.actions) == null ? void 0 : _slots$actions.call(slots)
                                            ])
                                        ])
                                    ]
                            }, 8, [
                                "class",
                                "style"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VBanner/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VBanner": ()=>/* reexport safe */ _VBanner__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VBanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VBanner */ "./src/components/VBanner/VBanner.tsx");
            /***/ },
            /***/ "./src/components/VBottomNavigation/VBottomNavigation.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VBottomNavigation_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VBottomNavigation.sass */ "./src/components/VBottomNavigation/VBottomNavigation.sass");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_density__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/density */ "./src/composables/density.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/layout */ "./src/composables/layout.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../composables/proxiedModel */ "./src/composables/proxiedModel.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util */ "./src/util/helpers.ts");
                /* harmony import */ var _util_makeProps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/makeProps */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VBottomNavigation',
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        bgColor: String,
                        color: String,
                        grow: Boolean,
                        modelValue: {
                            type: Boolean,
                            default: true
                        },
                        mode: {
                            type: String,
                            validator: (v)=>!v || [
                                    'horizontal',
                                    'shift'
                                ].includes(v)
                        },
                        height: {
                            type: [
                                Number,
                                String
                            ],
                            default: 56
                        },
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_3__.makeBorderProps(),
                        ..._composables_density__WEBPACK_IMPORTED_MODULE_4__.makeDensityProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_5__.makeElevationProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_6__.makeRoundedProps(),
                        ..._composables_layout__WEBPACK_IMPORTED_MODULE_7__.makeLayoutItemProps({
                            name: 'bottom-navigation'
                        }),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_8__.makeTagProps({
                            tag: 'header'
                        })
                    }),
                    emits: {
                        'update:modelValue': (value)=>true
                    },
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_9__.useTheme();
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_3__.useBorder(props, 'v-bottom-navigation');
                        const { backgroundColorClasses , backgroundColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_10__.useBackgroundColor(vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>props.bgColor
                        ));
                        const { textColorClasses , textColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_10__.useTextColor(vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>props.color
                        ));
                        const { densityClasses  } = _composables_density__WEBPACK_IMPORTED_MODULE_4__.useDensity(props, 'v-bottom-navigation');
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_5__.useElevation(props);
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_6__.useRounded(props, 'v-bottom-navigation');
                        const height = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>Number(props.height) - (props.density === 'comfortable' ? 8 : 0) - (props.density === 'compact' ? 16 : 0)
                        );
                        const isActive = _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_11__.useProxiedModel(props, 'modelValue', props.modelValue);
                        const layoutStyles = _composables_layout__WEBPACK_IMPORTED_MODULE_7__.useLayoutItem(props.name, vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>props.priority
                        ), vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>'bottom'
                        ), vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>isActive.value ? height.value : 0
                        ), height, isActive);
                        return ()=>{
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-bottom-navigation',
                                    {
                                        'v-bottom-navigation--grow': props.grow,
                                        'v-bottom-navigation--horizontal': props.mode === 'horizontal',
                                        'v-bottom-navigation--is-active': isActive.value,
                                        'v-bottom-navigation--shift': props.mode === 'shift',
                                        'v-bottom-navigation--absolute': props.absolute
                                    },
                                    themeClasses.value,
                                    backgroundColorClasses.value,
                                    borderClasses.value,
                                    densityClasses.value,
                                    elevationClasses.value,
                                    roundedClasses.value,
                                    textColorClasses.value
                                ],
                                "style": [
                                    backgroundColorStyles.value,
                                    layoutStyles.value,
                                    textColorStyles.value,
                                    {
                                        height: _util__WEBPACK_IMPORTED_MODULE_12__.convertToUnit(height.value),
                                        transform: `translateY(${_util__WEBPACK_IMPORTED_MODULE_12__.convertToUnit(!isActive.value ? 100 : 0, '%')})`
                                    }
                                ]
                            }, {
                                default: ()=>[
                                        slots.default && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-bottom-navigation__content"
                                        }, [
                                            slots.default()
                                        ])
                                    ]
                            }, 8, [
                                "class",
                                "style"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VBottomNavigation/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VBottomNavigation": ()=>/* reexport safe */ _VBottomNavigation__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VBottomNavigation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VBottomNavigation */ "./src/components/VBottomNavigation/VBottomNavigation.tsx");
            /***/ },
            /***/ "./src/components/VBtn/VBtn.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VBtn_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VBtn.sass */ "./src/components/VBtn/VBtn.sass");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./.. */ "./src/components/VIcon/VIcon.tsx");
                /* harmony import */ var _composables_density__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/density */ "./src/composables/density.ts");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_position__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/position */ "./src/composables/position.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _directives_ripple__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../directives/ripple */ "./src/directives/ripple/index.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony import */ var _composables_size__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../composables/size */ "./src/composables/size.ts");
                // Styles
                // Components
                // Composables
                // Directives
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VBtn',
                    directives: {
                        Ripple: _directives_ripple__WEBPACK_IMPORTED_MODULE_2__.Ripple
                    },
                    props: _util__WEBPACK_IMPORTED_MODULE_3__.makeProps({
                        text: Boolean,
                        flat: Boolean,
                        plain: Boolean,
                        icon: [
                            Boolean,
                            String
                        ],
                        prependIcon: String,
                        appendIcon: String,
                        block: Boolean,
                        stacked: Boolean,
                        color: String,
                        disabled: Boolean,
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_4__.makeBorderProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_5__.makeRoundedProps(),
                        ..._composables_density__WEBPACK_IMPORTED_MODULE_6__.makeDensityProps(),
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_7__.makeDimensionProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_8__.makeElevationProps(),
                        ..._composables_position__WEBPACK_IMPORTED_MODULE_9__.makePositionProps(),
                        ..._composables_size__WEBPACK_IMPORTED_MODULE_10__.makeSizeProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_11__.makeTagProps({
                            tag: 'button'
                        })
                    }),
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_12__.useTheme();
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_4__.useBorder(props, 'v-btn');
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_5__.useRounded(props, 'v-btn');
                        const { densityClasses  } = _composables_density__WEBPACK_IMPORTED_MODULE_6__.useDensity(props, 'v-btn');
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_7__.useDimension(props);
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_8__.useElevation(props);
                        const { positionClasses , positionStyles  } = _composables_position__WEBPACK_IMPORTED_MODULE_9__.usePosition(props, 'v-btn');
                        const { sizeClasses  } = _composables_size__WEBPACK_IMPORTED_MODULE_10__.useSize(props, 'v-btn');
                        const isContained = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            return !(props.text || props.plain || props.outlined || props.border !== false);
                        });
                        const isElevated = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            return isContained.value && !(props.disabled || props.flat);
                        });
                        const { colorClasses , colorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_13__.useColor(vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>({
                                [isContained.value ? 'background' : 'text']: props.color
                            })
                        ));
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives(vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "type": "button",
                                "class": [
                                    'v-btn',
                                    {
                                        'v-btn--contained': isContained.value,
                                        'v-btn--elevated': isElevated.value,
                                        'v-btn--icon': !!props.icon,
                                        'v-btn--plain': props.plain,
                                        'v-btn--block': props.block,
                                        'v-btn--disabled': props.disabled,
                                        'v-btn--stacked': props.stacked
                                    },
                                    themeClasses.value,
                                    borderClasses.value,
                                    colorClasses.value,
                                    densityClasses.value,
                                    elevationClasses.value,
                                    positionClasses.value,
                                    roundedClasses.value,
                                    sizeClasses.value
                                ],
                                "style": [
                                    colorStyles.value,
                                    dimensionStyles.value,
                                    positionStyles.value
                                ],
                                "disabled": props.disabled
                            }, {
                                default: ()=>[
                                        vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("span", {
                                            "class": "v-btn__overlay"
                                        }, null),
                                        !props.icon && props.prependIcon && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_14__.default, {
                                            "class": "v-btn__icon",
                                            "icon": props.prependIcon,
                                            "left": !props.stacked
                                        }, null, 8, [
                                            "icon",
                                            "left"
                                        ]),
                                        typeof props.icon === 'boolean' ? (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots) : vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_14__.default, {
                                            "class": "v-btn__icon",
                                            "icon": props.icon,
                                            "size": props.size
                                        }, null, 8, [
                                            "icon",
                                            "size"
                                        ]),
                                        !props.icon && props.appendIcon && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_14__.default, {
                                            "class": "v-btn__icon",
                                            "icon": props.appendIcon,
                                            "right": !props.stacked
                                        }, null, 8, [
                                            "icon",
                                            "right"
                                        ])
                                    ]
                                ,
                                _: 1
                            }, 8, [
                                "class",
                                "style",
                                "disabled"
                            ]), [
                                [
                                    vue__WEBPACK_IMPORTED_MODULE_0__.resolveDirective("ripple"),
                                    !props.disabled,
                                    null
                                ]
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VBtn/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VBtn": ()=>/* reexport safe */ _VBtn__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VBtn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VBtn */ "./src/components/VBtn/VBtn.tsx");
            /***/ },
            /***/ "./src/components/VCard/VCard.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VCard_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VCard.sass */ "./src/components/VCard/VCard.sass");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardImg.ts");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardMedia.ts");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardHeader.ts");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardAvatar.ts");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardHeaderText.ts");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardTitle.ts");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardSubtitle.ts");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardText.ts");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./ */ "./src/components/VCard/VCardActions.ts");
                /* harmony import */ var _VAvatar__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../VAvatar */ "./src/components/VAvatar/VAvatar.tsx");
                /* harmony import */ var _VImg__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../VImg */ "./src/components/VImg/VImg.tsx");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_density__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/density */ "./src/composables/density.ts");
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_position__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/position */ "./src/composables/position.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _directives_ripple__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../directives/ripple */ "./src/directives/ripple/index.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Components
                // Composables
                // Directives
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VCard',
                    directives: {
                        Ripple: _directives_ripple__WEBPACK_IMPORTED_MODULE_2__.Ripple
                    },
                    props: _util__WEBPACK_IMPORTED_MODULE_3__.makeProps({
                        appendAvatar: String,
                        appendIcon: String,
                        color: String,
                        disabled: Boolean,
                        flat: Boolean,
                        hover: Boolean,
                        image: String,
                        link: Boolean,
                        prependAvatar: String,
                        prependIcon: String,
                        ripple: Boolean,
                        subtitle: String,
                        text: String,
                        title: String,
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_4__.makeBorderProps(),
                        ..._composables_density__WEBPACK_IMPORTED_MODULE_5__.makeDensityProps(),
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_6__.makeDimensionProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_7__.makeElevationProps(),
                        ..._composables_position__WEBPACK_IMPORTED_MODULE_8__.makePositionProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_9__.makeRoundedProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_10__.makeTagProps()
                    }),
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_11__.useTheme();
                        const { backgroundColorClasses , backgroundColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_12__.useBackgroundColor(vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'color'));
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_4__.useBorder(props, 'v-card');
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_6__.useDimension(props);
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_7__.useElevation(props);
                        const { positionClasses , positionStyles  } = _composables_position__WEBPACK_IMPORTED_MODULE_8__.usePosition(props, 'v-card');
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_9__.useRounded(props, 'v-card');
                        const { densityClasses  } = _composables_density__WEBPACK_IMPORTED_MODULE_5__.useDensity(props, 'v-card');
                        return ()=>{
                            var _slots$image, _slots$default;
                            const hasTitle = !!(slots.title || props.title);
                            const hasSubtitle = !!(slots.subtitle || props.subtitle);
                            const hasHeaderText = !!(hasTitle || hasSubtitle);
                            const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon);
                            const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon);
                            const hasImage = !!(slots.image || props.image);
                            const hasHeader = hasHeaderText || hasPrepend || hasAppend;
                            const hasText = !!(slots.text || props.text);
                            const hasOverlay = props.link && !props.disabled;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives(vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-card',
                                    {
                                        'v-card--disabled': props.disabled,
                                        'v-card--flat': props.flat,
                                        'v-card--hover': props.hover && !(props.disabled || props.flat),
                                        'v-card--link': props.link
                                    },
                                    themeClasses.value,
                                    backgroundColorClasses.value,
                                    borderClasses.value,
                                    densityClasses.value,
                                    elevationClasses.value,
                                    positionClasses.value,
                                    roundedClasses.value
                                ],
                                "style": [
                                    backgroundColorStyles.value,
                                    dimensionStyles.value,
                                    positionStyles.value
                                ]
                            }, {
                                default: ()=>[
                                        hasOverlay && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-card__overlay"
                                        }, null),
                                        hasImage && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_13__.default, null, {
                                            default: ()=>[
                                                    slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots, {
                                                        src: props.image
                                                    }) : vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_VImg__WEBPACK_IMPORTED_MODULE_14__.default, {
                                                        "src": props.image,
                                                        "alt": ""
                                                    }, null, 8, [
                                                        "src"
                                                    ])
                                                ]
                                        }),
                                        slots.media && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_15__.default, null, {
                                            default: slots.media
                                        }),
                                        hasHeader && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_16__.default, null, {
                                            default: ()=>[
                                                    hasPrepend && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_17__.default, null, {
                                                        default: ()=>[
                                                                slots.prepend ? slots.prepend() : vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_VAvatar__WEBPACK_IMPORTED_MODULE_18__.default, {
                                                                    "density": props.density,
                                                                    "icon": props.prependIcon,
                                                                    "image": props.prependAvatar
                                                                }, null, 8, [
                                                                    "density",
                                                                    "icon",
                                                                    "image"
                                                                ])
                                                            ]
                                                    }),
                                                    hasHeaderText && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_19__.default, null, {
                                                        default: ()=>[
                                                                hasTitle && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_20__.default, null, {
                                                                    default: ()=>[
                                                                            slots.title ? slots.title() : props.title
                                                                        ]
                                                                }),
                                                                vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_21__.default, null, {
                                                                    default: ()=>[
                                                                            slots.subtitle ? slots.subtitle() : props.subtitle
                                                                        ]
                                                                })
                                                            ]
                                                        ,
                                                        _: 1
                                                    }),
                                                    hasAppend && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_17__.default, null, {
                                                        default: ()=>[
                                                                slots.append ? slots.append() : vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_VAvatar__WEBPACK_IMPORTED_MODULE_18__.default, {
                                                                    "density": props.density,
                                                                    "icon": props.appendIcon,
                                                                    "image": props.appendAvatar
                                                                }, null, 8, [
                                                                    "density",
                                                                    "icon",
                                                                    "image"
                                                                ])
                                                            ]
                                                    })
                                                ]
                                            ,
                                            _: 1
                                        }),
                                        hasText && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_22__.default, null, {
                                            default: ()=>[
                                                    slots.text ? slots.text() : props.text
                                                ]
                                        }),
                                        (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots),
                                        slots.actions && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_23__.default, null, {
                                            default: slots.actions
                                        })
                                    ]
                                ,
                                _: 1
                            }, 8, [
                                "class",
                                "style"
                            ]), [
                                [
                                    vue__WEBPACK_IMPORTED_MODULE_0__.resolveDirective("ripple"),
                                    hasOverlay
                                ]
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VCard/VCardActions.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-actions');
            /***/ },
            /***/ "./src/components/VCard/VCardAvatar.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-avatar');
            /***/ },
            /***/ "./src/components/VCard/VCardHeader.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-header');
            /***/ },
            /***/ "./src/components/VCard/VCardHeaderText.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-header-text');
            /***/ },
            /***/ "./src/components/VCard/VCardImg.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-img');
            /***/ },
            /***/ "./src/components/VCard/VCardMedia.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-media');
            /***/ },
            /***/ "./src/components/VCard/VCardSubtitle.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-subtitle');
            /***/ },
            /***/ "./src/components/VCard/VCardText.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-text');
            /***/ },
            /***/ "./src/components/VCard/VCardTitle.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('v-card-title');
            /***/ },
            /***/ "./src/components/VCard/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VCard": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_0__.default
                    ,
                    /* harmony export */ "VCardActions": ()=>/* reexport safe */ _VCardActions__WEBPACK_IMPORTED_MODULE_1__.default
                    ,
                    /* harmony export */ "VCardAvatar": ()=>/* reexport safe */ _VCardAvatar__WEBPACK_IMPORTED_MODULE_2__.default
                    ,
                    /* harmony export */ "VCardHeader": ()=>/* reexport safe */ _VCardHeader__WEBPACK_IMPORTED_MODULE_3__.default
                    ,
                    /* harmony export */ "VCardHeaderText": ()=>/* reexport safe */ _VCardHeaderText__WEBPACK_IMPORTED_MODULE_4__.default
                    ,
                    /* harmony export */ "VCardImg": ()=>/* reexport safe */ _VCardImg__WEBPACK_IMPORTED_MODULE_5__.default
                    ,
                    /* harmony export */ "VCardItem": ()=>/* reexport safe */ _VCardHeaderText__WEBPACK_IMPORTED_MODULE_4__.default
                    ,
                    /* harmony export */ "VCardMedia": ()=>/* reexport safe */ _VCardMedia__WEBPACK_IMPORTED_MODULE_6__.default
                    ,
                    /* harmony export */ "VCardSubtitle": ()=>/* reexport safe */ _VCardSubtitle__WEBPACK_IMPORTED_MODULE_7__.default
                    ,
                    /* harmony export */ "VCardText": ()=>/* reexport safe */ _VCardText__WEBPACK_IMPORTED_MODULE_8__.default
                    ,
                    /* harmony export */ "VCardTitle": ()=>/* reexport safe */ _VCardTitle__WEBPACK_IMPORTED_MODULE_9__.default
                });
                /* harmony import */ var _VCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VCard */ "./src/components/VCard/VCard.tsx");
                /* harmony import */ var _VCardActions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VCardActions */ "./src/components/VCard/VCardActions.ts");
                /* harmony import */ var _VCardAvatar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VCardAvatar */ "./src/components/VCard/VCardAvatar.ts");
                /* harmony import */ var _VCardHeader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./VCardHeader */ "./src/components/VCard/VCardHeader.ts");
                /* harmony import */ var _VCardHeaderText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VCardHeaderText */ "./src/components/VCard/VCardHeaderText.ts");
                /* harmony import */ var _VCardImg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./VCardImg */ "./src/components/VCard/VCardImg.ts");
                /* harmony import */ var _VCardMedia__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./VCardMedia */ "./src/components/VCard/VCardMedia.ts");
                /* harmony import */ var _VCardSubtitle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./VCardSubtitle */ "./src/components/VCard/VCardSubtitle.ts");
                /* harmony import */ var _VCardText__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./VCardText */ "./src/components/VCard/VCardText.ts");
                /* harmony import */ var _VCardTitle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./VCardTitle */ "./src/components/VCard/VCardTitle.ts");
            /***/ },
            /***/ "./src/components/VCode/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VCode": ()=>/* binding */ VCode
                });
                /* harmony import */ var _VCode_sass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VCode.sass */ "./src/components/VCode/VCode.sass");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                const VCode = _util__WEBPACK_IMPORTED_MODULE_1__.createSimpleFunctional('v-code');
            /***/ },
            /***/ "./src/components/VDialog/VDialog.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VDialog_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VDialog.sass */ "./src/components/VDialog/VDialog.sass");
                /* harmony import */ var _transitions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../transitions */ "./src/components/transitions/dialog-transition.tsx");
                /* harmony import */ var _VOverlay__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../VOverlay */ "./src/components/VOverlay/VOverlay.tsx");
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _composables_transition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/transition */ "./src/composables/transition.ts");
                /* harmony import */ var _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/proxiedModel */ "./src/composables/proxiedModel.ts");
                /* harmony import */ var _util_makeProps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/makeProps */ "./src/util/makeProps.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util */ "./src/util/globals.ts");
                // Styles
                // Components
                // Composables
                // Utilities
                // Globals
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VDialog',
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        fullscreen: Boolean,
                        origin: {
                            type: String,
                            default: 'center center'
                        },
                        retainFocus: {
                            type: Boolean,
                            default: true
                        },
                        scrollable: Boolean,
                        modelValue: Boolean,
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_3__.makeDimensionProps({
                            width: 'auto'
                        }),
                        ..._composables_transition__WEBPACK_IMPORTED_MODULE_4__.makeTransitionProps({
                            transition: {
                                component: _transitions__WEBPACK_IMPORTED_MODULE_5__.default
                            }
                        })
                    }),
                    emits: {
                        'update:modelValue': (value)=>true
                    },
                    setup (props, { attrs , slots  }) {
                        const isActive = _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_6__.useProxiedModel(props, 'modelValue');
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_3__.useDimension(props);
                        const overlay = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        function onFocusin(e) {
                            var _overlay$value;
                            const before = e.relatedTarget;
                            const after = e.target;
                            if (before !== after && (_overlay$value = overlay.value) != null && _overlay$value.content && ![
                                document,
                                overlay.value.content
                            ].includes(after) && !overlay.value.content.contains(after)) {
                                const focusable = [
                                    ...overlay.value.content.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')
                                ].filter((el)=>!el.hasAttribute('disabled')
                                );
                                if (!focusable.length) return;
                                const firstElement = focusable[0];
                                const lastElement = focusable[focusable.length - 1];
                                if (before === firstElement) lastElement.focus();
                                else firstElement.focus();
                            }
                        }
                        if (_util__WEBPACK_IMPORTED_MODULE_7__.IN_BROWSER) vue__WEBPACK_IMPORTED_MODULE_0__.watch(()=>isActive.value && props.retainFocus
                        , (val)=>{
                            val ? document.addEventListener('focusin', onFocusin) : document.removeEventListener('focusin', onFocusin);
                        }, {
                            immediate: true
                        });
                        const activatorElement = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        const activator = ({ props , ...data })=>{
                            var _slots$activator;
                            return (_slots$activator = slots.activator) == null ? void 0 : _slots$activator.call(slots, {
                                ...data,
                                props: vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps(props, {
                                    'aria-haspopup': 'dialog',
                                    onClick: (e)=>{
                                        activatorElement.value = e.currentTarget;
                                    }
                                })
                            });
                        };
                        return ()=>{
                            const transition = vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps({
                                target: activatorElement.value
                            }, typeof props.transition === 'string' ? {
                                name: props.transition
                            } : props.transition);
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_VOverlay__WEBPACK_IMPORTED_MODULE_8__.default, vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps({
                                "modelValue": isActive.value,
                                "onUpdate:modelValue": ($event)=>isActive.value = $event
                                ,
                                "class": [
                                    'v-dialog',
                                    {
                                        'v-dialog--fullscreen': props.fullscreen
                                    }
                                ],
                                "style": dimensionStyles.value,
                                "transition": transition,
                                "ref": overlay,
                                "aria-role": "dialog",
                                "aria-modal": "true"
                            }, attrs), {
                                default: slots.default,
                                activator
                            }, 16, [
                                "modelValue",
                                "onUpdate:modelValue",
                                "class",
                                "style",
                                "transition"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VDialog/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VDialog": ()=>/* reexport safe */ _VDialog__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VDialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VDialog */ "./src/components/VDialog/VDialog.tsx");
            /***/ },
            /***/ "./src/components/VDivider/VDivider.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VDivider_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VDivider.sass */ "./src/components/VDivider/VDivider.sass");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util */ "./src/util/helpers.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                // Styles
                // Utilities
                // Composables
                // Types
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VDivider',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        inset: Boolean,
                        length: [
                            Number,
                            String
                        ],
                        thickness: [
                            Number,
                            String
                        ],
                        vertical: Boolean
                    }),
                    setup (props, { attrs  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_3__.useTheme();
                        const dividerStyles = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            const styles = {
                            };
                            if (props.length) styles[props.vertical ? 'maxHeight' : 'maxWidth'] = _util__WEBPACK_IMPORTED_MODULE_4__.convertToUnit(props.length);
                            if (props.thickness) styles[props.vertical ? 'borderRightWidth' : 'borderTopWidth'] = _util__WEBPACK_IMPORTED_MODULE_4__.convertToUnit(props.thickness);
                            return styles;
                        });
                        return ()=>{
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("hr", {
                                "class": [
                                    {
                                        'v-divider': true,
                                        'v-divider--inset': props.inset,
                                        'v-divider--vertical': props.vertical
                                    },
                                    themeClasses.value
                                ],
                                "style": dividerStyles.value,
                                "aria-orientation": !attrs.role || attrs.role === 'separator' ? props.vertical ? 'vertical' : 'horizontal' : undefined,
                                "role": `${attrs.role || 'separator'}`
                            }, null, 14, [
                                "aria-orientation"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VDivider/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VDivider": ()=>/* reexport safe */ _VDivider__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VDivider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VDivider */ "./src/components/VDivider/VDivider.tsx");
            /***/ },
            /***/ "./src/components/VFooter/VFooter.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VFooter_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VFooter.sass */ "./src/components/VFooter/VFooter.sass");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_position__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/position */ "./src/composables/position.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VFooter',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_3__.makeBorderProps(),
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_4__.makeDimensionProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_5__.makeElevationProps(),
                        ..._composables_position__WEBPACK_IMPORTED_MODULE_6__.makePositionProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_7__.makeRoundedProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_8__.makeTagProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_8__.makeTagProps({
                            tag: 'footer'
                        })
                    }),
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_9__.useTheme();
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_3__.useBorder(props, 'v-footer');
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_4__.useDimension(props);
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_5__.useElevation(props);
                        const { positionClasses , positionStyles  } = _composables_position__WEBPACK_IMPORTED_MODULE_6__.usePosition(props, 'v-footer');
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_7__.useRounded(props, 'v-footer');
                        return ()=>vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-footer',
                                    themeClasses.value,
                                    borderClasses.value,
                                    elevationClasses.value,
                                    positionClasses.value,
                                    roundedClasses.value
                                ],
                                "style": [
                                    dimensionStyles.value,
                                    positionStyles.value
                                ]
                            }, slots, 8, [
                                "class",
                                "style"
                            ])
                        ;
                    }
                });
            /***/ },
            /***/ "./src/components/VFooter/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VFooter": ()=>/* reexport safe */ _VFooter__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VFooter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VFooter */ "./src/components/VFooter/VFooter.tsx");
            /***/ },
            /***/ "./src/components/VGrid/VCol.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _VGrid_sass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VGrid.sass */ "./src/components/VGrid/VGrid.sass");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_1__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                // Types
                const breakpoints = [
                    'sm',
                    'md',
                    'lg',
                    'xl',
                    'xxl'
                ]; // no xs
                const breakpointProps = (()=>{
                    return breakpoints.reduce((props, val)=>{
                        props[val] = {
                            type: [
                                Boolean,
                                String,
                                Number
                            ],
                            default: false
                        };
                        return props;
                    }, {
                    });
                })();
                const offsetProps = (()=>{
                    return breakpoints.reduce((props, val)=>{
                        props['offset' + vue__WEBPACK_IMPORTED_MODULE_1__.capitalize(val)] = {
                            type: [
                                String,
                                Number
                            ],
                            default: null
                        };
                        return props;
                    }, {
                    });
                })();
                const orderProps = (()=>{
                    return breakpoints.reduce((props, val)=>{
                        props['order' + vue__WEBPACK_IMPORTED_MODULE_1__.capitalize(val)] = {
                            type: [
                                String,
                                Number
                            ],
                            default: null
                        };
                        return props;
                    }, {
                    });
                })();
                const propMap = {
                    col: Object.keys(breakpointProps),
                    offset: Object.keys(offsetProps),
                    order: Object.keys(orderProps)
                };
                function breakpointClass(type, prop, val) {
                    let className = type;
                    if (val == null || val === false) return undefined;
                    if (prop) {
                        const breakpoint = prop.replace(type, '');
                        className += `-${breakpoint}`;
                    }
                    if (type === 'col') className = 'v-' + className;
                     // Handling the boolean style prop when accepting [Boolean, String, Number]
                    // means Vue will not convert <v-col sm></v-col> to sm: true for us.
                    // Since the default is false, an empty string indicates the prop's presence.
                    if (type === 'col' && (val === '' || val === true)) // .v-col-md
                    return className.toLowerCase();
                     // .order-md-6
                    className += `-${val}`;
                    return className.toLowerCase();
                }
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_1__.defineComponent({
                    name: 'VCol',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        cols: {
                            type: [
                                Boolean,
                                String,
                                Number
                            ],
                            default: false
                        },
                        ...breakpointProps,
                        offset: {
                            type: [
                                String,
                                Number
                            ],
                            default: null
                        },
                        ...offsetProps,
                        order: {
                            type: [
                                String,
                                Number
                            ],
                            default: null
                        },
                        ...orderProps,
                        alignSelf: {
                            type: String,
                            default: null,
                            validator: (str)=>[
                                    'auto',
                                    'start',
                                    'end',
                                    'center',
                                    'baseline',
                                    'stretch'
                                ].includes(str)
                        },
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_3__.makeTagProps()
                    }),
                    setup (props, { slots  }) {
                        const classes = vue__WEBPACK_IMPORTED_MODULE_1__.computed(()=>{
                            const classList = []; // Loop through `col`, `offset`, `order` breakpoint props
                            let type;
                            for(type in propMap)propMap[type].forEach((prop)=>{
                                const value = props[prop];
                                const className = breakpointClass(type, prop, value);
                                if (className) classList.push(className);
                            });
                            const hasColClasses = classList.some((className)=>className.startsWith('v-col-')
                            );
                            classList.push({
                                // Default to .v-col if no other col-{bp}-* classes generated nor `cols` specified.
                                'v-col': !hasColClasses || !props.cols,
                                [`v-col-${props.cols}`]: props.cols,
                                [`offset-${props.offset}`]: props.offset,
                                [`order-${props.order}`]: props.order,
                                [`align-self-${props.alignSelf}`]: props.alignSelf
                            });
                            return classList;
                        });
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_1__.h(props.tag, {
                                class: classes.value
                            }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VGrid/VContainer.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VGrid_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VGrid.sass */ "./src/components/VGrid/VGrid.sass");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VContainer',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        fluid: {
                            type: Boolean,
                            default: false
                        },
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_3__.makeTagProps()
                    }),
                    setup (props, { slots  }) {
                        return ()=>vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-container',
                                    {
                                        'v-container--fluid': props.fluid
                                    }
                                ]
                            }, slots, 8, [
                                "class"
                            ])
                        ;
                    }
                });
            /***/ },
            /***/ "./src/components/VGrid/VRow.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _VGrid_sass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VGrid.sass */ "./src/components/VGrid/VGrid.sass");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_1__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                // Types
                const breakpoints = [
                    'sm',
                    'md',
                    'lg',
                    'xl',
                    'xxl'
                ]; // no xs
                const ALIGNMENT = [
                    'start',
                    'end',
                    'center'
                ];
                function makeRowProps(prefix, def) {
                    return breakpoints.reduce((props, val)=>{
                        props[prefix + vue__WEBPACK_IMPORTED_MODULE_1__.capitalize(val)] = def();
                        return props;
                    }, {
                    });
                }
                const alignValidator = (str)=>[
                        ...ALIGNMENT,
                        'baseline',
                        'stretch'
                    ].includes(str)
                ;
                const alignProps = makeRowProps('align', ()=>({
                        type: String,
                        default: null,
                        validator: alignValidator
                    })
                );
                const justifyValidator = (str)=>[
                        ...ALIGNMENT,
                        'space-between',
                        'space-around'
                    ].includes(str)
                ;
                const justifyProps = makeRowProps('justify', ()=>({
                        type: String,
                        default: null,
                        validator: justifyValidator
                    })
                );
                const alignContentValidator = (str)=>[
                        ...ALIGNMENT,
                        'space-between',
                        'space-around',
                        'stretch'
                    ].includes(str)
                ;
                const alignContentProps = makeRowProps('alignContent', ()=>({
                        type: String,
                        default: null,
                        validator: alignContentValidator
                    })
                );
                const propMap = {
                    align: Object.keys(alignProps),
                    justify: Object.keys(justifyProps),
                    alignContent: Object.keys(alignContentProps)
                };
                const classMap = {
                    align: 'align',
                    justify: 'justify',
                    alignContent: 'align-content'
                };
                function breakpointClass(type, prop, val) {
                    let className = classMap[type];
                    if (val == null) return undefined;
                    if (prop) {
                        // alignSm -> Sm
                        const breakpoint = prop.replace(type, '');
                        className += `-${breakpoint}`;
                    } // .align-items-sm-center
                    className += `-${val}`;
                    return className.toLowerCase();
                }
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_1__.defineComponent({
                    name: 'VRow',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        dense: Boolean,
                        noGutters: Boolean,
                        align: {
                            type: String,
                            default: null,
                            validator: alignValidator
                        },
                        ...alignProps,
                        justify: {
                            type: String,
                            default: null,
                            validator: justifyValidator
                        },
                        ...justifyProps,
                        alignContent: {
                            type: String,
                            default: null,
                            validator: alignContentValidator
                        },
                        ...alignContentProps,
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_3__.makeTagProps()
                    }),
                    setup (props, { slots  }) {
                        const classes = vue__WEBPACK_IMPORTED_MODULE_1__.computed(()=>{
                            const classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props
                            let type;
                            for(type in propMap)propMap[type].forEach((prop)=>{
                                const value = props[prop];
                                const className = breakpointClass(type, prop, value);
                                if (className) classList.push(className);
                            });
                            classList.push({
                                'v-row--no-gutters': props.noGutters,
                                'v-row--dense': props.dense,
                                [`align-${props.align}`]: props.align,
                                [`justify-${props.justify}`]: props.justify,
                                [`align-content-${props.alignContent}`]: props.alignContent
                            });
                            return classList;
                        });
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_1__.h(props.tag, {
                                class: [
                                    'v-row',
                                    classes.value
                                ]
                            }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VGrid/VSpacer.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                /* harmony default export */ __webpack_exports__["default"] = _util__WEBPACK_IMPORTED_MODULE_0__.createSimpleFunctional('flex-grow-1', 'div', 'VSpacer');
            /***/ },
            /***/ "./src/components/VGrid/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VContainer": ()=>/* reexport safe */ _VContainer__WEBPACK_IMPORTED_MODULE_0__.default
                    ,
                    /* harmony export */ "VCol": ()=>/* reexport safe */ _VCol__WEBPACK_IMPORTED_MODULE_1__.default
                    ,
                    /* harmony export */ "VRow": ()=>/* reexport safe */ _VRow__WEBPACK_IMPORTED_MODULE_2__.default
                    ,
                    /* harmony export */ "VSpacer": ()=>/* reexport safe */ _VSpacer__WEBPACK_IMPORTED_MODULE_3__.default
                });
                /* harmony import */ var _VContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VContainer */ "./src/components/VGrid/VContainer.tsx");
                /* harmony import */ var _VCol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VCol */ "./src/components/VGrid/VCol.ts");
                /* harmony import */ var _VRow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VRow */ "./src/components/VGrid/VRow.ts");
                /* harmony import */ var _VSpacer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./VSpacer */ "./src/components/VGrid/VSpacer.ts");
            /***/ },
            /***/ "./src/components/VIcon/VIcon.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VIcon_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VIcon.sass */ "./src/components/VIcon/VIcon.sass");
                /* harmony import */ var _composables_size__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/size */ "./src/composables/size.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_icons__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/icons */ "./src/composables/icons.tsx");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util */ "./src/util/helpers.ts");
                // Styles
                // Composables
                // Utilities
                // Types
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VIcon',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        color: String,
                        left: Boolean,
                        right: Boolean,
                        icon: {
                            type: [
                                String,
                                Object
                            ]
                        },
                        ..._composables_size__WEBPACK_IMPORTED_MODULE_3__.makeSizeProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_4__.makeTagProps({
                            tag: 'i'
                        })
                    }),
                    setup (props, { slots  }) {
                        let slotIcon;
                        if (slots.default) slotIcon = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            var _slots$default, _flattenFragments$fil;
                            const slot = (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
                            if (!slot) return;
                            return (_flattenFragments$fil = _util__WEBPACK_IMPORTED_MODULE_5__.flattenFragments(slot).filter((node)=>node.children && typeof node.children === 'string'
                            )[0]) == null ? void 0 : _flattenFragments$fil.children;
                        });
                        const { iconData  } = _composables_icons__WEBPACK_IMPORTED_MODULE_6__.useIcon(slotIcon || props);
                        const { sizeClasses  } = _composables_size__WEBPACK_IMPORTED_MODULE_3__.useSize(props, 'v-icon');
                        const { textColorClasses , textColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_7__.useTextColor(vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'color'));
                        return ()=>{
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(iconData.value.component, {
                                "tag": props.tag,
                                "icon": iconData.value.icon,
                                "class": [
                                    'v-icon',
                                    'notranslate',
                                    sizeClasses.value,
                                    textColorClasses.value,
                                    {
                                        'v-icon--left': props.left,
                                        'v-icon--right': props.right
                                    }
                                ],
                                "style": [
                                    !sizeClasses.value ? {
                                        fontSize: _util__WEBPACK_IMPORTED_MODULE_5__.convertToUnit(props.size),
                                        width: _util__WEBPACK_IMPORTED_MODULE_5__.convertToUnit(props.size),
                                        height: _util__WEBPACK_IMPORTED_MODULE_5__.convertToUnit(props.size)
                                    } : undefined,
                                    textColorStyles.value
                                ],
                                "aria-hidden": "true"
                            }, null, 8, [
                                "tag",
                                "icon",
                                "class",
                                "style"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VIcon/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VIcon": ()=>/* reexport safe */ _VIcon__WEBPACK_IMPORTED_MODULE_0__.default
                    ,
                    /* harmony export */ "VComponentIcon": ()=>/* reexport safe */ _composables_icons__WEBPACK_IMPORTED_MODULE_1__.VComponentIcon
                    ,
                    /* harmony export */ "VSvgIcon": ()=>/* reexport safe */ _composables_icons__WEBPACK_IMPORTED_MODULE_1__.VSvgIcon
                    ,
                    /* harmony export */ "VLigatureIcon": ()=>/* reexport safe */ _composables_icons__WEBPACK_IMPORTED_MODULE_1__.VLigatureIcon
                    ,
                    /* harmony export */ "VClassIcon": ()=>/* reexport safe */ _composables_icons__WEBPACK_IMPORTED_MODULE_1__.VClassIcon
                });
                /* harmony import */ var _VIcon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VIcon */ "./src/components/VIcon/VIcon.tsx");
                /* harmony import */ var _composables_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../composables/icons */ "./src/composables/icons.tsx");
            /***/ },
            /***/ "./src/components/VImg/VImg.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VImg_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VImg.sass */ "./src/components/VImg/VImg.sass");
                /* harmony import */ var ___WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./.. */ "./src/components/VResponsive/VResponsive.tsx");
                /* harmony import */ var _directives_intersect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../directives/intersect */ "./src/directives/intersect/index.ts");
                /* harmony import */ var _composables_transition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/transition */ "./src/composables/transition.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util */ "./src/util/globals.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ "./src/util/useRender.ts");
                // Components
                // Directives
                // Composables
                // Utilities
                // Types
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VImg',
                    directives: {
                        intersect: _directives_intersect__WEBPACK_IMPORTED_MODULE_2__.default
                    },
                    props: _util__WEBPACK_IMPORTED_MODULE_3__.makeProps({
                        aspectRatio: [
                            String,
                            Number
                        ],
                        alt: String,
                        cover: Boolean,
                        eager: Boolean,
                        lazySrc: String,
                        options: {
                            type: Object,
                            // For more information on types, navigate to:
                            // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
                            default: ()=>({
                                    root: undefined,
                                    rootMargin: undefined,
                                    threshold: undefined
                                })
                        },
                        position: {
                            type: String,
                            default: 'center center'
                        },
                        sizes: String,
                        src: {
                            type: [
                                String,
                                Object
                            ],
                            default: ''
                        },
                        srcset: String,
                        ..._composables_transition__WEBPACK_IMPORTED_MODULE_4__.makeTransitionProps()
                    }),
                    emits: [
                        'loadstart',
                        'load',
                        'error'
                    ],
                    setup (props, { emit , slots  }) {
                        const currentSrc = vue__WEBPACK_IMPORTED_MODULE_0__.ref(''); // Set from srcset
                        const image = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        const state = vue__WEBPACK_IMPORTED_MODULE_0__.ref('idle');
                        const naturalWidth = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        const naturalHeight = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        const normalisedSrc = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            return props.src && typeof props.src === 'object' ? {
                                src: props.src.src,
                                srcset: props.srcset || props.src.srcset,
                                lazySrc: props.lazySrc || props.src.lazySrc,
                                aspect: Number(props.aspectRatio || props.src.aspect)
                            } : {
                                src: props.src,
                                srcset: props.srcset,
                                lazySrc: props.lazySrc,
                                aspect: Number(props.aspectRatio || 0)
                            };
                        });
                        const aspectRatio = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            return normalisedSrc.value.aspect || naturalWidth.value / naturalHeight.value || 0;
                        });
                        vue__WEBPACK_IMPORTED_MODULE_0__.watch(()=>props.src
                        , ()=>{
                            init(state.value !== 'idle');
                        }); // TODO: getSrc when window width changes
                        vue__WEBPACK_IMPORTED_MODULE_0__.onBeforeMount(()=>init()
                        );
                        function init(isIntersecting) {
                            // If the current browser supports the intersection
                            // observer api, the image is not observable, and
                            // the eager prop isn't being used, do not load
                            if (_util__WEBPACK_IMPORTED_MODULE_5__.SUPPORTS_INTERSECTION && !isIntersecting && !props.eager) return;
                            state.value = 'loading';
                            vue__WEBPACK_IMPORTED_MODULE_0__.nextTick(()=>{
                                var _image$value;
                                emit('loadstart', ((_image$value = image.value) == null ? void 0 : _image$value.currentSrc) || normalisedSrc.value.src);
                                if (!aspectRatio.value) pollForSize(image.value);
                                getSrc();
                            });
                            if (normalisedSrc.value.lazySrc) {
                                const lazyImg = new Image();
                                lazyImg.src = normalisedSrc.value.lazySrc;
                                pollForSize(lazyImg, null);
                            }
                        }
                        function onLoad() {
                            var _image$value2;
                            getSrc();
                            state.value = 'loaded';
                            emit('load', ((_image$value2 = image.value) == null ? void 0 : _image$value2.currentSrc) || normalisedSrc.value.src);
                        }
                        function onError() {
                            var _image$value3;
                            state.value = 'error';
                            emit('error', ((_image$value3 = image.value) == null ? void 0 : _image$value3.currentSrc) || normalisedSrc.value.src);
                        }
                        function getSrc() {
                            const img = image.value;
                            if (img) currentSrc.value = img.currentSrc || img.src;
                        }
                        function pollForSize(img, timeout = 100) {
                            const poll = ()=>{
                                const { naturalHeight: imgHeight , naturalWidth: imgWidth  } = img;
                                if (imgHeight || imgWidth) {
                                    naturalWidth.value = imgWidth;
                                    naturalHeight.value = imgHeight;
                                } else if (!img.complete && state.value === 'loading' && timeout != null) setTimeout(poll, timeout);
                                else if (img.currentSrc.endsWith('.svg') || img.currentSrc.startsWith('data:image/svg+xml')) {
                                    naturalWidth.value = 1;
                                    naturalHeight.value = 1;
                                }
                            };
                            poll();
                        }
                        const containClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>({
                                'v-img__img--cover': props.cover,
                                'v-img__img--contain': !props.cover
                            })
                        );
                        const __image = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            var _slots$sources;
                            if (!normalisedSrc.value.src || state.value === 'idle') return;
                            const img = vue__WEBPACK_IMPORTED_MODULE_0__.h('img', {
                                class: [
                                    'v-img__img',
                                    containClasses.value
                                ],
                                src: normalisedSrc.value.src,
                                srcset: normalisedSrc.value.srcset,
                                sizes: props.sizes,
                                ref: image,
                                onLoad,
                                onError
                            });
                            const sources = (_slots$sources = slots.sources) == null ? void 0 : _slots$sources.call(slots);
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_composables_transition__WEBPACK_IMPORTED_MODULE_4__.MaybeTransition, {
                                "transition": props.transition,
                                "appear": true
                            }, {
                                default: ()=>[
                                        vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives(sources ? vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("picture", {
                                            "class": "v-img__picture"
                                        }, [
                                            sources,
                                            img
                                        ]) : img, [
                                            [
                                                vue__WEBPACK_IMPORTED_MODULE_0__.vShow,
                                                state.value === 'loaded'
                                            ]
                                        ])
                                    ]
                                ,
                                _: 2
                            }, 8, [
                                "transition",
                                "appear"
                            ]);
                        });
                        const __preloadImage = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_composables_transition__WEBPACK_IMPORTED_MODULE_4__.MaybeTransition, {
                                "transition": props.transition
                            }, {
                                default: ()=>[
                                        normalisedSrc.value.lazySrc && state.value !== 'loaded' && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("img", {
                                            "class": [
                                                'v-img__img',
                                                'v-img__img--preload',
                                                containClasses.value
                                            ],
                                            "src": normalisedSrc.value.lazySrc,
                                            "alt": ""
                                        }, null, 10, [
                                            "src"
                                        ])
                                    ]
                            }, 8, [
                                "transition"
                            ])
                        );
                        const __placeholder = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            if (!slots.placeholder) return;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_composables_transition__WEBPACK_IMPORTED_MODULE_4__.MaybeTransition, {
                                "transition": props.transition,
                                "appear": true
                            }, {
                                default: ()=>[
                                        (state.value === 'loading' || state.value === 'error' && !slots.error) && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-img__placeholder"
                                        }, [
                                            slots.placeholder()
                                        ])
                                    ]
                            }, 8, [
                                "transition",
                                "appear"
                            ]);
                        });
                        const __error = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            if (!slots.error) return;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_composables_transition__WEBPACK_IMPORTED_MODULE_4__.MaybeTransition, {
                                "transition": props.transition,
                                "appear": true
                            }, {
                                default: ()=>[
                                        state.value === 'error' && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-img__error"
                                        }, [
                                            slots.error()
                                        ])
                                    ]
                            }, 8, [
                                "transition",
                                "appear"
                            ]);
                        });
                        _util__WEBPACK_IMPORTED_MODULE_6__.useRender(()=>vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives(vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(___WEBPACK_IMPORTED_MODULE_7__.default, {
                                "class": "v-img",
                                "aspectRatio": aspectRatio.value,
                                "aria-label": props.alt,
                                "role": props.alt ? 'img' : undefined
                            }, {
                                additional: ()=>[
                                        __image.value,
                                        __preloadImage.value,
                                        __placeholder.value,
                                        __error.value
                                    ]
                                ,
                                default: slots.default
                            }, 8, [
                                "aspectRatio",
                                "aria-label",
                                "role"
                            ]), [
                                [
                                    vue__WEBPACK_IMPORTED_MODULE_0__.resolveDirective("intersect"),
                                    {
                                        handler: init,
                                        options: props.options
                                    },
                                    null,
                                    {
                                        once: true
                                    }
                                ]
                            ])
                        );
                        return {
                            currentSrc,
                            image,
                            state,
                            naturalWidth,
                            naturalHeight
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VImg/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VImg": ()=>/* reexport safe */ _VImg__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VImg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VImg */ "./src/components/VImg/VImg.tsx");
            /***/ },
            /***/ "./src/components/VItemGroup/VItem.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var _composables_group__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../composables/group */ "./src/composables/group.ts");
                /* harmony import */ var _VItemGroup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./VItemGroup */ "./src/components/VItemGroup/VItemGroup.tsx");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VItem',
                    props: _util__WEBPACK_IMPORTED_MODULE_1__.makeProps(_composables_group__WEBPACK_IMPORTED_MODULE_2__.makeGroupItemProps()),
                    setup (props, { slots  }) {
                        const { isSelected , select , toggle , selectedClass , value , disabled  } = _composables_group__WEBPACK_IMPORTED_MODULE_2__.useGroupItem(props, _VItemGroup__WEBPACK_IMPORTED_MODULE_3__.VItemGroupSymbol);
                        return ()=>{
                            var _slots$default;
                            return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
                                isSelected: isSelected.value,
                                selectedClass: selectedClass.value,
                                select,
                                toggle,
                                value: value.value,
                                disabled: disabled.value
                            });
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VItemGroup/VItemGroup.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VItemGroupSymbol": ()=>/* binding */ VItemGroupSymbol
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VItemGroup_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VItemGroup.sass */ "./src/components/VItemGroup/VItemGroup.sass");
                /* harmony import */ var _composables_group__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/group */ "./src/composables/group.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                const VItemGroupSymbol = Symbol.for('vuetify:v-item-group');
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VItemGroup',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        ..._composables_group__WEBPACK_IMPORTED_MODULE_3__.makeGroupProps({
                            selectedClass: 'v-item--selected'
                        }),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_4__.makeTagProps()
                    }),
                    emits: {
                        'update:modelValue': (value)=>true
                    },
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_5__.useTheme();
                        const { isSelected , select , next , prev , selected  } = _composables_group__WEBPACK_IMPORTED_MODULE_3__.useGroup(props, VItemGroupSymbol);
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-item-group',
                                    themeClasses.value
                                ]
                            }, {
                                default: ()=>[
                                        (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
                                            isSelected,
                                            select,
                                            next,
                                            prev,
                                            selected: selected.value
                                        })
                                    ]
                            }, 8, [
                                "class"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VItemGroup/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VItemGroup": ()=>/* reexport safe */ _VItemGroup__WEBPACK_IMPORTED_MODULE_0__.default
                    ,
                    /* harmony export */ "VItem": ()=>/* reexport safe */ _VItem__WEBPACK_IMPORTED_MODULE_1__.default
                });
                /* harmony import */ var _VItemGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VItemGroup */ "./src/components/VItemGroup/VItemGroup.tsx");
                /* harmony import */ var _VItem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VItem */ "./src/components/VItemGroup/VItem.tsx");
            /***/ },
            /***/ "./src/components/VKbd/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VKbd": ()=>/* binding */ VKbd
                });
                /* harmony import */ var _VKbd_sass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VKbd.sass */ "./src/components/VKbd/VKbd.sass");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/util/createSimpleFunctional.ts");
                const VKbd = _util__WEBPACK_IMPORTED_MODULE_1__.createSimpleFunctional('v-kbd');
            /***/ },
            /***/ "./src/components/VLayout/VLayout.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VLayout_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VLayout.sass */ "./src/components/VLayout/VLayout.sass");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util */ "./src/util/useRender.ts");
                /* harmony import */ var _composables_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/layout */ "./src/composables/layout.ts");
                // Styles
                // Utilities
                // Composables
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VLayout',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps(_composables_layout__WEBPACK_IMPORTED_MODULE_3__.makeLayoutProps()),
                    setup (props, { slots  }) {
                        const { layoutClasses , getLayoutItem , items  } = _composables_layout__WEBPACK_IMPORTED_MODULE_3__.createLayout(props);
                        _util__WEBPACK_IMPORTED_MODULE_4__.useRender(()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                "class": layoutClasses.value,
                                "style": {
                                    height: props.fullHeight ? '100vh' : undefined
                                }
                            }, [
                                (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                            ], 6);
                        });
                        return {
                            getLayoutItem,
                            items
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VLayout/VLayoutItem.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VLayoutItem_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VLayoutItem.sass */ "./src/components/VLayout/VLayoutItem.sass");
                /* harmony import */ var _composables_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/layout */ "./src/composables/layout.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                // Types
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VLayoutItem',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        position: {
                            type: String,
                            required: true
                        },
                        size: {
                            type: [
                                Number,
                                String
                            ],
                            default: 300
                        },
                        modelValue: Boolean,
                        ..._composables_layout__WEBPACK_IMPORTED_MODULE_3__.makeLayoutItemProps()
                    }),
                    setup (props, { slots  }) {
                        const styles = _composables_layout__WEBPACK_IMPORTED_MODULE_3__.useLayoutItem(props.name, vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'priority'), vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'position'), vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'size'), vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'size'), vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'modelValue'));
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                "class": [
                                    'v-layout-item',
                                    {
                                        'v-layout-item--absolute': props.absolute
                                    }
                                ],
                                "style": styles.value
                            }, [
                                (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                            ], 6);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VLayout/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VLayout": ()=>/* reexport safe */ _VLayout__WEBPACK_IMPORTED_MODULE_0__.default
                    ,
                    /* harmony export */ "VLayoutItem": ()=>/* reexport safe */ _VLayoutItem__WEBPACK_IMPORTED_MODULE_1__.default
                });
                /* harmony import */ var _VLayout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VLayout */ "./src/components/VLayout/VLayout.tsx");
                /* harmony import */ var _VLayoutItem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VLayoutItem */ "./src/components/VLayout/VLayoutItem.tsx");
            /***/ },
            /***/ "./src/components/VLazy/VLazy.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_transition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/transition */ "./src/composables/transition.ts");
                /* harmony import */ var _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/proxiedModel */ "./src/composables/proxiedModel.ts");
                /* harmony import */ var _directives_intersect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../directives/intersect */ "./src/directives/intersect/index.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Composables
                // Directives
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VLazy',
                    directives: {
                        intersect: _directives_intersect__WEBPACK_IMPORTED_MODULE_1__.default
                    },
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        modelValue: Boolean,
                        options: {
                            type: Object,
                            // For more information on types, navigate to:
                            // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
                            default: ()=>({
                                    root: undefined,
                                    rootMargin: undefined,
                                    threshold: undefined
                                })
                        },
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_3__.makeDimensionProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_4__.makeTagProps(),
                        ..._composables_transition__WEBPACK_IMPORTED_MODULE_5__.makeTransitionProps({
                            transition: 'fade-transition'
                        })
                    }),
                    emits: {
                        'update:modelValue': (value)=>true
                    },
                    setup (props, { slots  }) {
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_3__.useDimension(props);
                        const isActive = _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_6__.useProxiedModel(props, 'modelValue');
                        function onIntersect(isIntersecting) {
                            if (isActive.value) return;
                            isActive.value = isIntersecting;
                        }
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives(vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": "v-lazy",
                                "style": dimensionStyles.value
                            }, {
                                default: ()=>[
                                        isActive.value && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_composables_transition__WEBPACK_IMPORTED_MODULE_5__.MaybeTransition, {
                                            "transition": props.transition
                                        }, {
                                            default: ()=>[
                                                    (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                                                ]
                                        }, 8, [
                                            "transition"
                                        ])
                                    ]
                            }, 8, [
                                "style"
                            ]), [
                                [
                                    vue__WEBPACK_IMPORTED_MODULE_0__.resolveDirective("intersect"),
                                    onIntersect,
                                    props.options
                                ]
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VLazy/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VLazy": ()=>/* reexport safe */ _VLazy__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VLazy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VLazy */ "./src/components/VLazy/VLazy.tsx");
            /***/ },
            /***/ "./src/components/VLocaleProvider/VLocaleProvider.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _composables_locale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../composables/locale */ "./src/composables/locale.ts");
                /* harmony import */ var _composables_rtl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/rtl */ "./src/composables/rtl.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VLocaleProvider',
                    props: _util__WEBPACK_IMPORTED_MODULE_1__.makeProps({
                        locale: String,
                        fallbackLocale: String,
                        messages: Object,
                        rtl: {
                            type: Boolean,
                            default: undefined
                        }
                    }),
                    setup (props, ctx) {
                        const localeInstance = _composables_locale__WEBPACK_IMPORTED_MODULE_2__.provideLocale(props);
                        const { rtlClasses  } = _composables_rtl__WEBPACK_IMPORTED_MODULE_3__.provideRtl(props, localeInstance);
                        return ()=>{
                            var _ctx$slots$default, _ctx$slots;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                "class": rtlClasses.value
                            }, [
                                (_ctx$slots$default = (_ctx$slots = ctx.slots).default) == null ? void 0 : _ctx$slots$default.call(_ctx$slots)
                            ], 2);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VLocaleProvider/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VLocaleProvider": ()=>/* reexport safe */ _VLocaleProvider__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VLocaleProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VLocaleProvider */ "./src/components/VLocaleProvider/VLocaleProvider.tsx");
            /***/ },
            /***/ "./src/components/VMain/VMain.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VMain_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VMain.sass */ "./src/components/VMain/VMain.sass");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/layout */ "./src/composables/layout.ts");
                /* harmony import */ var _composables_ssrBoot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/ssrBoot */ "./src/composables/ssrBoot.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VMain',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps(_composables_tag__WEBPACK_IMPORTED_MODULE_3__.makeTagProps({
                        tag: 'main'
                    })),
                    setup (props, { slots  }) {
                        const { mainStyles  } = _composables_layout__WEBPACK_IMPORTED_MODULE_4__.useMain();
                        const { ssrBootStyles  } = _composables_ssrBoot__WEBPACK_IMPORTED_MODULE_5__.useSsrBoot();
                        return ()=>{
                            var _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": "v-main",
                                "style": [
                                    mainStyles.value,
                                    ssrBootStyles.value
                                ]
                            }, {
                                default: ()=>[
                                        vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-main__wrap"
                                        }, [
                                            (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                                        ])
                                    ]
                            }, 8, [
                                "style"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VMain/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VMain": ()=>/* reexport safe */ _VMain__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VMain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VMain */ "./src/components/VMain/VMain.tsx");
            /***/ },
            /***/ "./src/components/VNavigationDrawer/VNavigationDrawer.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VNavigationDrawer_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VNavigationDrawer.sass */ "./src/components/VNavigationDrawer/VNavigationDrawer.sass");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/layout */ "./src/composables/layout.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_display__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/display */ "./src/composables/display.ts");
                /* harmony import */ var _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../composables/proxiedModel */ "./src/composables/proxiedModel.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _util_makeProps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/makeProps */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                // Types
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VNavigationDrawer',
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        disableResizeWatcher: Boolean,
                        expandOnHover: Boolean,
                        modelValue: {
                            type: Boolean,
                            default: null
                        },
                        permanent: Boolean,
                        rail: Boolean,
                        railWidth: {
                            type: [
                                Number,
                                String
                            ],
                            default: 72
                        },
                        image: String,
                        temporary: Boolean,
                        width: {
                            type: [
                                Number,
                                String
                            ],
                            default: 256
                        },
                        position: {
                            type: String,
                            default: 'left',
                            validator: (value)=>[
                                    'left',
                                    'right',
                                    'bottom'
                                ].includes(value)
                        },
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_3__.makeBorderProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_4__.makeElevationProps(),
                        ..._composables_layout__WEBPACK_IMPORTED_MODULE_5__.makeLayoutItemProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_6__.makeRoundedProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_7__.makeTagProps({
                            tag: 'nav'
                        })
                    }),
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_8__.useTheme();
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_3__.useBorder(props, 'v-navigation-drawer');
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_4__.useElevation(props);
                        const { mobile  } = _composables_display__WEBPACK_IMPORTED_MODULE_9__.useDisplay();
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_6__.useRounded(props, 'v-navigation-drawer');
                        const isActive = _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_10__.useProxiedModel(props, 'modelValue');
                        const isHovering = vue__WEBPACK_IMPORTED_MODULE_0__.ref(false);
                        const width = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            return props.rail && props.expandOnHover && isHovering.value ? props.width : Number(props.rail ? props.railWidth : props.width);
                        });
                        const isTemporary = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>!props.permanent && (mobile.value || props.temporary)
                        );
                        const layoutStyles = _composables_layout__WEBPACK_IMPORTED_MODULE_5__.useLayoutItem(props.name, vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'priority'), vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'position'), vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>isTemporary.value ? 0 : props.rail && props.expandOnHover ? Number(props.railWidth) : width.value
                        ), width, isActive);
                        if (!props.disableResizeWatcher) vue__WEBPACK_IMPORTED_MODULE_0__.watch(mobile, (val)=>!props.permanent && (isActive.value = !val)
                        );
                        vue__WEBPACK_IMPORTED_MODULE_0__.watch(props, (val)=>{
                            if (val.permanent) isActive.value = true;
                        });
                        vue__WEBPACK_IMPORTED_MODULE_0__.onBeforeMount(()=>{
                            if (props.modelValue != null) return;
                            isActive.value = !mobile.value;
                        });
                        return ()=>{
                            var _slots$image, _slots$prepend, _slots$default, _slots$append;
                            const hasImage = slots.image || props.image;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "onMouseenter": ()=>isHovering.value = true
                                ,
                                "onMouseleave": ()=>isHovering.value = false
                                ,
                                "class": [
                                    'v-navigation-drawer',
                                    {
                                        'v-navigation-drawer--bottom': props.position === 'bottom',
                                        'v-navigation-drawer--end': props.position === 'right',
                                        'v-navigation-drawer--expand-on-hover': props.expandOnHover,
                                        'v-navigation-drawer--is-hovering': isHovering.value,
                                        'v-navigation-drawer--rail': props.rail,
                                        'v-navigation-drawer--start': props.position === 'left',
                                        'v-navigation-drawer--temporary': isTemporary.value,
                                        'v-navigation-drawer--absolute': props.absolute
                                    },
                                    themeClasses.value,
                                    borderClasses.value,
                                    elevationClasses.value,
                                    roundedClasses.value
                                ],
                                "style": [
                                    layoutStyles.value
                                ]
                            }, {
                                default: ()=>[
                                        hasImage && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-navigation-drawer__img"
                                        }, [
                                            slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots, {
                                                image: props.image
                                            }) : vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("img", {
                                                "src": props.image,
                                                "alt": ""
                                            }, null, 8, [
                                                "src"
                                            ])
                                        ]),
                                        slots.prepend && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-navigation-drawer__prepend"
                                        }, [
                                            (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots)
                                        ]),
                                        vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-navigation-drawer__content"
                                        }, [
                                            (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)
                                        ]),
                                        slots.append && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                            "class": "v-navigation-drawer__append"
                                        }, [
                                            (_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots)
                                        ])
                                    ]
                                ,
                                _: 1
                            }, 8, [
                                "onMouseenter",
                                "onMouseleave",
                                "class",
                                "style"
                            ]);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VNavigationDrawer/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VNavigationDrawer": ()=>/* reexport safe */ _VNavigationDrawer__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VNavigationDrawer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VNavigationDrawer */ "./src/components/VNavigationDrawer/VNavigationDrawer.tsx");
            /***/ },
            /***/ "./src/components/VOverlay/VOverlay.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VOverlay_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VOverlay.sass */ "./src/components/VOverlay/VOverlay.sass");
                /* harmony import */ var _directives_click_outside__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../directives/click-outside */ "./src/directives/click-outside/index.ts");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _composables_transition__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/transition */ "./src/composables/transition.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/proxiedModel */ "./src/composables/proxiedModel.ts");
                /* harmony import */ var _composables_teleport__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/teleport */ "./src/composables/teleport.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/getScrollParent.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./src/util/helpers.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util */ "./src/util/easing.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util */ "./src/util/useRender.ts");
                /* harmony import */ var _util_makeProps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/makeProps */ "./src/util/makeProps.ts");
                function _defineProperty(obj, key, value) {
                    if (key in obj) Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                    else obj[key] = value;
                    return obj;
                }
                // Styles
                // Directives
                // Composables
                // Utilities
                // Types
                function useBooted(isActive, eager) {
                    const isBooted = vue__WEBPACK_IMPORTED_MODULE_0__.ref(eager.value);
                    vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect(()=>{
                        if (eager.value || isActive.value) isBooted.value = true;
                    });
                    return {
                        isBooted
                    };
                }
                const positionStrategies = [
                    'global',
                    'connected',
                    'flexible'
                ];
                const scrollStrategies = [
                    'close',
                    'block',
                    'reposition'
                ];
                function Scrim(props) {
                    const { modelValue , color , ...rest } = props;
                    return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {
                        "name": "fade-transition",
                        "appear": true
                    }, {
                        default: ()=>[
                                props.modelValue && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps({
                                    "class": [
                                        'v-overlay__scrim',
                                        props.color.backgroundColorClasses.value
                                    ],
                                    "style": props.color.backgroundColorStyles.value
                                }, rest), null, 16)
                            ]
                    }, 8, [
                        "appear"
                    ]);
                }
                class CloseScrollStrategy {
                    constructor({ content , isActive  }){
                        _defineProperty(this, "scrollElements", []);
                        this.content = content;
                        this.isActive = isActive;
                    }
                    enable() {
                        this.scrollElements = [
                            document,
                            ..._util__WEBPACK_IMPORTED_MODULE_2__.getScrollParents(this.content.value)
                        ];
                        this.scrollElements.forEach((el)=>{
                            el.addEventListener('scroll', this.onScroll.bind(this), {
                                passive: true
                            });
                        });
                    }
                    disable() {
                        this.scrollElements.forEach((el)=>{
                            el.removeEventListener('scroll', this.onScroll.bind(this));
                        });
                    }
                    onScroll() {
                        this.isActive.value = false;
                    }
                }
                class BlockScrollStrategy {
                    constructor({ content: content1  }){
                        _defineProperty(this, "initialOverflow", []);
                        _defineProperty(this, "scrollElements", []);
                        this.content = content1;
                    }
                    enable() {
                        this.scrollElements = _util__WEBPACK_IMPORTED_MODULE_2__.getScrollParents(this.content.value);
                        document.documentElement.style.setProperty('--v-scrollbar-offset', _util__WEBPACK_IMPORTED_MODULE_3__.convertToUnit(window.innerWidth - document.documentElement.offsetWidth));
                        this.scrollElements.forEach((el, i)=>{
                            this.initialOverflow[i] = el.style.overflowY;
                            el.style.overflowY = 'hidden';
                        });
                    }
                    disable() {
                        this.scrollElements.forEach((el, i)=>{
                            el.style.overflowY = this.initialOverflow[i];
                        });
                        document.documentElement.style.setProperty('--v-scrollbar-offset', '');
                    }
                }
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VOverlay',
                    directives: {
                        ClickOutside: _directives_click_outside__WEBPACK_IMPORTED_MODULE_4__.ClickOutside
                    },
                    inheritAttrs: false,
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_5__.makeProps({
                        absolute: Boolean,
                        attach: {
                            type: [
                                Boolean,
                                String,
                                Element
                            ],
                            default: 'body'
                        },
                        eager: Boolean,
                        noClickAnimation: Boolean,
                        modelValue: Boolean,
                        origin: [
                            String,
                            Object
                        ],
                        persistent: Boolean,
                        positionStrategy: {
                            type: String,
                            default: 'global',
                            validator: (val)=>positionStrategies.includes(val)
                        },
                        scrim: {
                            type: [
                                String,
                                Boolean
                            ],
                            default: true
                        },
                        scrollStrategy: {
                            type: String,
                            default: 'block',
                            validator: (val)=>scrollStrategies.includes(val)
                        },
                        ..._composables_transition__WEBPACK_IMPORTED_MODULE_6__.makeTransitionProps()
                    }),
                    emits: {
                        'click:outside': (e)=>true
                        ,
                        'update:modelValue': (value)=>true
                    },
                    setup (props, { slots , attrs , emit  }) {
                        const isActive1 = _composables_proxiedModel__WEBPACK_IMPORTED_MODULE_7__.useProxiedModel(props, 'modelValue');
                        const { teleportTarget  } = _composables_teleport__WEBPACK_IMPORTED_MODULE_8__.useTeleport(vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'attach'));
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_9__.useTheme();
                        const { isBooted  } = useBooted(isActive1, vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'eager'));
                        const scrimColor = _composables_color__WEBPACK_IMPORTED_MODULE_10__.useBackgroundColor(vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            return typeof props.scrim === 'string' ? props.scrim : null;
                        }));
                        function onClickOutside(e) {
                            emit('click:outside', e);
                            if (!props.persistent) isActive1.value = false;
                            else animateClick();
                        }
                        function closeConditional() {
                            return isActive1.value;
                        }
                        const activatorElement = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        function onActivatorClick(e) {
                            activatorElement.value = e.currentTarget || e.target;
                            isActive1.value = !isActive1.value;
                        }
                        function onKeydown(e) {
                            if (e.key === 'Escape') {
                                if (!props.persistent) isActive1.value = false;
                                else animateClick();
                            }
                        }
                        const content2 = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        vue__WEBPACK_IMPORTED_MODULE_0__.watch(isActive1, (val)=>{
                            vue__WEBPACK_IMPORTED_MODULE_0__.nextTick(()=>{
                                if (val) {
                                    var _content$value;
                                    (_content$value = content2.value) == null || _content$value.focus();
                                } else {
                                    var _activatorElement$val;
                                    (_activatorElement$val = activatorElement.value) == null || _activatorElement$val.focus();
                                }
                            });
                        });
                        const root = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        const top = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                        vue__WEBPACK_IMPORTED_MODULE_0__.watch(()=>isActive1.value && props.absolute && teleportTarget.value == null
                        , (val)=>{
                            if (val) {
                                const scrollParent = _util__WEBPACK_IMPORTED_MODULE_2__.getScrollParent(root.value);
                                if (scrollParent && scrollParent !== document.scrollingElement) top.value = scrollParent.scrollTop;
                            }
                        }); // Add a quick "bounce" animation to the content
                        function animateClick() {
                            var _content$value2;
                            if (props.noClickAnimation) return;
                            (_content$value2 = content2.value) == null || _content$value2.animate([
                                {
                                    transformOrigin: 'center'
                                },
                                {
                                    transform: 'scale(1.03)'
                                },
                                {
                                    transformOrigin: 'center'
                                }
                            ], {
                                duration: 150,
                                easing: _util__WEBPACK_IMPORTED_MODULE_11__.standardEasing
                            });
                        }
                        function onAfterLeave() {
                            if (!props.eager) isBooted.value = false;
                        }
                        const scrollStrategy = props.scrollStrategy === 'close' ? new CloseScrollStrategy({
                            content: content2,
                            isActive: isActive1
                        }) : props.scrollStrategy === 'block' ? new BlockScrollStrategy({
                            content: content2
                        }) : null; // TODO: reactive
                        if (scrollStrategy) vue__WEBPACK_IMPORTED_MODULE_0__.watch(isActive1, (val)=>{
                            vue__WEBPACK_IMPORTED_MODULE_0__.nextTick(()=>{
                                val ? scrollStrategy.enable() : scrollStrategy.disable();
                            });
                        });
                        _util__WEBPACK_IMPORTED_MODULE_12__.useRender(()=>{
                            var _slots$activator, _slots$default;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
                                (_slots$activator = slots.activator) == null ? void 0 : _slots$activator.call(slots, {
                                    isActive: isActive1.value,
                                    props: {
                                        modelValue: isActive1.value,
                                        'onUpdate:modelValue': (val)=>isActive1.value = val
                                        ,
                                        onClick: onActivatorClick
                                    }
                                }),
                                vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(vue__WEBPACK_IMPORTED_MODULE_0__.Teleport, {
                                    "disabled": !teleportTarget.value,
                                    "ref": root,
                                    "to": teleportTarget.value
                                }, {
                                    default: ()=>[
                                            isBooted.value && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps({
                                                "class": [
                                                    'v-overlay',
                                                    {
                                                        'v-overlay--absolute': props.absolute,
                                                        'v-overlay--active': isActive1.value
                                                    },
                                                    themeClasses.value
                                                ],
                                                "style": top.value != null ? `top: ${_util__WEBPACK_IMPORTED_MODULE_3__.convertToUnit(top.value)}` : undefined
                                            }, attrs), [
                                                vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(Scrim, {
                                                    "color": scrimColor,
                                                    "modelValue": isActive1.value && !!props.scrim
                                                }, null, 8, [
                                                    "color",
                                                    "modelValue"
                                                ]),
                                                vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(_composables_transition__WEBPACK_IMPORTED_MODULE_6__.MaybeTransition, {
                                                    "appear": true,
                                                    "onAfterLeave": onAfterLeave,
                                                    "persisted": true,
                                                    "transition": props.transition
                                                }, {
                                                    default: ()=>[
                                                            vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives(vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                                                "ref": content2,
                                                                "class": "v-overlay__content",
                                                                "tabindex": -1,
                                                                "onKeydown": onKeydown
                                                            }, [
                                                                (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
                                                                    isActive: isActive1
                                                                })
                                                            ], 40, [
                                                                "tabindex",
                                                                "onKeydown"
                                                            ]), [
                                                                [
                                                                    vue__WEBPACK_IMPORTED_MODULE_0__.vShow,
                                                                    isActive1.value
                                                                ],
                                                                [
                                                                    vue__WEBPACK_IMPORTED_MODULE_0__.resolveDirective("click-outside"),
                                                                    {
                                                                        handler: onClickOutside,
                                                                        closeConditional
                                                                    }
                                                                ]
                                                            ])
                                                        ]
                                                }, 8, [
                                                    "appear",
                                                    "onAfterLeave",
                                                    "persisted",
                                                    "transition"
                                                ])
                                            ], 16)
                                        ]
                                }, 8, [
                                    "disabled",
                                    "to"
                                ])
                            ]);
                        });
                        return {
                            animateClick,
                            content: content2
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VOverlay/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VOverlay": ()=>/* reexport safe */ _VOverlay__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VOverlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VOverlay */ "./src/components/VOverlay/VOverlay.tsx");
            /***/ },
            /***/ "./src/components/VResponsive/VResponsive.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "useAspectStyles": ()=>/* binding */ useAspectStyles
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VResponsive_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VResponsive.sass */ "./src/components/VResponsive/VResponsive.sass");
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                function useAspectStyles(props) {
                    return {
                        aspectStyles: vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                            const ratio = Number(props.aspectRatio);
                            return ratio ? {
                                paddingBottom: String(1 / ratio * 100) + '%'
                            } : undefined;
                        })
                    };
                }
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VResponsive',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        aspectRatio: [
                            String,
                            Number
                        ],
                        contentClass: String,
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_3__.makeDimensionProps()
                    }),
                    setup (props, { slots  }) {
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_3__.useDimension(props);
                        const { aspectStyles  } = useAspectStyles(props);
                        return ()=>{
                            var _slots$additional;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                "class": "v-responsive",
                                "style": dimensionStyles.value
                            }, [
                                vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                    "class": "v-responsive__sizer",
                                    "style": aspectStyles.value
                                }, null, 4),
                                (_slots$additional = slots.additional) == null ? void 0 : _slots$additional.call(slots),
                                slots.default && vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                    "class": [
                                        'v-responsive__content',
                                        props.contentClass
                                    ]
                                }, [
                                    slots.default()
                                ], 2)
                            ], 4);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VResponsive/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VResponsive": ()=>/* reexport safe */ _VResponsive__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VResponsive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VResponsive */ "./src/components/VResponsive/VResponsive.tsx");
            /***/ },
            /***/ "./src/components/VSheet/VSheet.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VSheet_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VSheet.sass */ "./src/components/VSheet/VSheet.sass");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_position__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/position */ "./src/composables/position.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_color__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../composables/color */ "./src/composables/color.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VSheet',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        color: {
                            type: String,
                            default: 'surface'
                        },
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_3__.makeBorderProps(),
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_4__.makeDimensionProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_5__.makeElevationProps(),
                        ..._composables_position__WEBPACK_IMPORTED_MODULE_6__.makePositionProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_7__.makeRoundedProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_8__.makeTagProps()
                    }),
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_9__.useTheme();
                        const { backgroundColorClasses , backgroundColorStyles  } = _composables_color__WEBPACK_IMPORTED_MODULE_10__.useBackgroundColor(vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'color'));
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_3__.useBorder(props, 'v-sheet');
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_4__.useDimension(props);
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_5__.useElevation(props);
                        const { positionClasses , positionStyles  } = _composables_position__WEBPACK_IMPORTED_MODULE_6__.usePosition(props, 'v-sheet');
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_7__.useRounded(props, 'v-sheet');
                        return ()=>vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    'v-sheet',
                                    themeClasses.value,
                                    backgroundColorClasses.value,
                                    borderClasses.value,
                                    elevationClasses.value,
                                    positionClasses.value,
                                    roundedClasses.value
                                ],
                                "style": [
                                    backgroundColorStyles.value,
                                    dimensionStyles.value,
                                    positionStyles.value
                                ]
                            }, slots, 8, [
                                "class",
                                "style"
                            ])
                        ;
                    }
                });
            /***/ },
            /***/ "./src/components/VSheet/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VSheet": ()=>/* reexport safe */ _VSheet__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VSheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VSheet */ "./src/components/VSheet/VSheet.tsx");
            /***/ },
            /***/ "./src/components/VSystemBar/VSystemBar.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VSystemBar_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VSystemBar.sass */ "./src/components/VSystemBar/VSystemBar.sass");
                /* harmony import */ var _composables_border__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/border */ "./src/composables/border.ts");
                /* harmony import */ var _composables_dimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../composables/dimensions */ "./src/composables/dimensions.ts");
                /* harmony import */ var _composables_elevation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../composables/elevation */ "./src/composables/elevation.ts");
                /* harmony import */ var _composables_position__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../composables/position */ "./src/composables/position.ts");
                /* harmony import */ var _composables_rounded__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../composables/rounded */ "./src/composables/rounded.ts");
                /* harmony import */ var _composables_tag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../composables/tag */ "./src/composables/tag.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VSystemBar',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        lightsOut: Boolean,
                        window: Boolean,
                        ..._composables_border__WEBPACK_IMPORTED_MODULE_3__.makeBorderProps(),
                        ..._composables_dimensions__WEBPACK_IMPORTED_MODULE_4__.makeDimensionProps(),
                        ..._composables_elevation__WEBPACK_IMPORTED_MODULE_5__.makeElevationProps(),
                        ..._composables_position__WEBPACK_IMPORTED_MODULE_6__.makePositionProps(),
                        ..._composables_rounded__WEBPACK_IMPORTED_MODULE_7__.makeRoundedProps(),
                        ..._composables_tag__WEBPACK_IMPORTED_MODULE_8__.makeTagProps()
                    }),
                    setup (props, { slots  }) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_9__.useTheme();
                        const { borderClasses  } = _composables_border__WEBPACK_IMPORTED_MODULE_3__.useBorder(props, 'v-system-bar');
                        const { dimensionStyles  } = _composables_dimensions__WEBPACK_IMPORTED_MODULE_4__.useDimension(props);
                        const { elevationClasses  } = _composables_elevation__WEBPACK_IMPORTED_MODULE_5__.useElevation(props);
                        const { positionClasses , positionStyles  } = _composables_position__WEBPACK_IMPORTED_MODULE_6__.usePosition(props, 'v-system-bar');
                        const { roundedClasses  } = _composables_rounded__WEBPACK_IMPORTED_MODULE_7__.useRounded(props, 'v-system-bar');
                        return ()=>vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": [
                                    {
                                        'v-system-bar': true,
                                        'v-system-bar--lights-out': props.lightsOut,
                                        'v-system-bar--window': props.window
                                    },
                                    themeClasses.value,
                                    borderClasses.value,
                                    elevationClasses.value,
                                    positionClasses.value,
                                    roundedClasses.value
                                ],
                                "style": [
                                    dimensionStyles.value,
                                    positionStyles.value
                                ]
                            }, slots, 8, [
                                "class",
                                "style"
                            ])
                        ;
                    }
                });
            /***/ },
            /***/ "./src/components/VSystemBar/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VSystemBar": ()=>/* reexport safe */ _VSystemBar__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VSystemBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VSystemBar */ "./src/components/VSystemBar/VSystemBar.tsx");
            /***/ },
            /***/ "./src/components/VThemeProvider/VThemeProvider.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _VThemeProvider_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VThemeProvider.sass */ "./src/components/VThemeProvider/VThemeProvider.sass");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Styles
                // Composables
                // Utilities
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VThemeProvider',
                    props: _util__WEBPACK_IMPORTED_MODULE_2__.makeProps({
                        theme: {
                            type: String
                        },
                        // TODO: Better name
                        newContext: {
                            type: Boolean
                        }
                    }),
                    setup (props, context) {
                        const { themeClasses  } = _composables_theme__WEBPACK_IMPORTED_MODULE_3__.provideTheme(props);
                        return ()=>{
                            var _context$slots$defaul, _context$slots;
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", {
                                "class": [
                                    'v-theme-provider',
                                    themeClasses.value
                                ]
                            }, [
                                vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("div", null, [
                                    (_context$slots$defaul = (_context$slots = context.slots).default) == null ? void 0 : _context$slots$defaul.call(_context$slots)
                                ])
                            ], 2);
                        };
                    }
                });
            /***/ },
            /***/ "./src/components/VThemeProvider/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VThemeProvider": ()=>/* reexport safe */ _VThemeProvider__WEBPACK_IMPORTED_MODULE_0__.default
                });
                /* harmony import */ var _VThemeProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VThemeProvider */ "./src/components/VThemeProvider/VThemeProvider.tsx");
            /***/ },
            /***/ "./src/components/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VApp": ()=>/* reexport safe */ _VApp__WEBPACK_IMPORTED_MODULE_0__.VApp
                    ,
                    /* harmony export */ "VAppBar": ()=>/* reexport safe */ _VAppBar__WEBPACK_IMPORTED_MODULE_1__.VAppBar
                    ,
                    /* harmony export */ "VAppBarNavIcon": ()=>/* reexport safe */ _VAppBar__WEBPACK_IMPORTED_MODULE_1__.VAppBarNavIcon
                    ,
                    /* harmony export */ "VAppBarTitle": ()=>/* reexport safe */ _VAppBar__WEBPACK_IMPORTED_MODULE_1__.VAppBarTitle
                    ,
                    /* harmony export */ "VAvatar": ()=>/* reexport safe */ _VAvatar__WEBPACK_IMPORTED_MODULE_2__.VAvatar
                    ,
                    /* harmony export */ "VBadge": ()=>/* reexport safe */ _VBadge__WEBPACK_IMPORTED_MODULE_3__.VBadge
                    ,
                    /* harmony export */ "VBanner": ()=>/* reexport safe */ _VBanner__WEBPACK_IMPORTED_MODULE_4__.VBanner
                    ,
                    /* harmony export */ "VBottomNavigation": ()=>/* reexport safe */ _VBottomNavigation__WEBPACK_IMPORTED_MODULE_5__.VBottomNavigation
                    ,
                    /* harmony export */ "VBtn": ()=>/* reexport safe */ _VBtn__WEBPACK_IMPORTED_MODULE_6__.VBtn
                    ,
                    /* harmony export */ "VCard": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCard
                    ,
                    /* harmony export */ "VCardActions": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardActions
                    ,
                    /* harmony export */ "VCardAvatar": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardAvatar
                    ,
                    /* harmony export */ "VCardHeader": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardHeader
                    ,
                    /* harmony export */ "VCardHeaderText": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardHeaderText
                    ,
                    /* harmony export */ "VCardImg": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardImg
                    ,
                    /* harmony export */ "VCardItem": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardItem
                    ,
                    /* harmony export */ "VCardMedia": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardMedia
                    ,
                    /* harmony export */ "VCardSubtitle": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardSubtitle
                    ,
                    /* harmony export */ "VCardText": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardText
                    ,
                    /* harmony export */ "VCardTitle": ()=>/* reexport safe */ _VCard__WEBPACK_IMPORTED_MODULE_7__.VCardTitle
                    ,
                    /* harmony export */ "VCode": ()=>/* reexport safe */ _VCode__WEBPACK_IMPORTED_MODULE_8__.VCode
                    ,
                    /* harmony export */ "VDialog": ()=>/* reexport safe */ _VDialog__WEBPACK_IMPORTED_MODULE_9__.VDialog
                    ,
                    /* harmony export */ "VDivider": ()=>/* reexport safe */ _VDivider__WEBPACK_IMPORTED_MODULE_10__.VDivider
                    ,
                    /* harmony export */ "VFooter": ()=>/* reexport safe */ _VFooter__WEBPACK_IMPORTED_MODULE_11__.VFooter
                    ,
                    /* harmony export */ "VCol": ()=>/* reexport safe */ _VGrid__WEBPACK_IMPORTED_MODULE_12__.VCol
                    ,
                    /* harmony export */ "VContainer": ()=>/* reexport safe */ _VGrid__WEBPACK_IMPORTED_MODULE_12__.VContainer
                    ,
                    /* harmony export */ "VRow": ()=>/* reexport safe */ _VGrid__WEBPACK_IMPORTED_MODULE_12__.VRow
                    ,
                    /* harmony export */ "VSpacer": ()=>/* reexport safe */ _VGrid__WEBPACK_IMPORTED_MODULE_12__.VSpacer
                    ,
                    /* harmony export */ "VClassIcon": ()=>/* reexport safe */ _VIcon__WEBPACK_IMPORTED_MODULE_13__.VClassIcon
                    ,
                    /* harmony export */ "VComponentIcon": ()=>/* reexport safe */ _VIcon__WEBPACK_IMPORTED_MODULE_13__.VComponentIcon
                    ,
                    /* harmony export */ "VIcon": ()=>/* reexport safe */ _VIcon__WEBPACK_IMPORTED_MODULE_13__.VIcon
                    ,
                    /* harmony export */ "VLigatureIcon": ()=>/* reexport safe */ _VIcon__WEBPACK_IMPORTED_MODULE_13__.VLigatureIcon
                    ,
                    /* harmony export */ "VSvgIcon": ()=>/* reexport safe */ _VIcon__WEBPACK_IMPORTED_MODULE_13__.VSvgIcon
                    ,
                    /* harmony export */ "VImg": ()=>/* reexport safe */ _VImg__WEBPACK_IMPORTED_MODULE_14__.VImg
                    ,
                    /* harmony export */ "VKbd": ()=>/* reexport safe */ _VKbd__WEBPACK_IMPORTED_MODULE_15__.VKbd
                    ,
                    /* harmony export */ "VItem": ()=>/* reexport safe */ _VItemGroup__WEBPACK_IMPORTED_MODULE_16__.VItem
                    ,
                    /* harmony export */ "VItemGroup": ()=>/* reexport safe */ _VItemGroup__WEBPACK_IMPORTED_MODULE_16__.VItemGroup
                    ,
                    /* harmony export */ "VLayout": ()=>/* reexport safe */ _VLayout__WEBPACK_IMPORTED_MODULE_17__.VLayout
                    ,
                    /* harmony export */ "VLayoutItem": ()=>/* reexport safe */ _VLayout__WEBPACK_IMPORTED_MODULE_17__.VLayoutItem
                    ,
                    /* harmony export */ "VLocaleProvider": ()=>/* reexport safe */ _VLocaleProvider__WEBPACK_IMPORTED_MODULE_18__.VLocaleProvider
                    ,
                    /* harmony export */ "VLazy": ()=>/* reexport safe */ _VLazy__WEBPACK_IMPORTED_MODULE_19__.VLazy
                    ,
                    /* harmony export */ "VMain": ()=>/* reexport safe */ _VMain__WEBPACK_IMPORTED_MODULE_20__.VMain
                    ,
                    /* harmony export */ "VNavigationDrawer": ()=>/* reexport safe */ _VNavigationDrawer__WEBPACK_IMPORTED_MODULE_21__.VNavigationDrawer
                    ,
                    /* harmony export */ "VOverlay": ()=>/* reexport safe */ _VOverlay__WEBPACK_IMPORTED_MODULE_22__.VOverlay
                    ,
                    /* harmony export */ "VSheet": ()=>/* reexport safe */ _VSheet__WEBPACK_IMPORTED_MODULE_23__.VSheet
                    ,
                    /* harmony export */ "VResponsive": ()=>/* reexport safe */ _VResponsive__WEBPACK_IMPORTED_MODULE_24__.VResponsive
                    ,
                    /* harmony export */ "VSystemBar": ()=>/* reexport safe */ _VSystemBar__WEBPACK_IMPORTED_MODULE_25__.VSystemBar
                    ,
                    /* harmony export */ "VThemeProvider": ()=>/* reexport safe */ _VThemeProvider__WEBPACK_IMPORTED_MODULE_26__.VThemeProvider
                    ,
                    /* harmony export */ "VCarouselReverseTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VCarouselReverseTransition
                    ,
                    /* harmony export */ "VCarouselTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VCarouselTransition
                    ,
                    /* harmony export */ "VDialogBottomTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VDialogBottomTransition
                    ,
                    /* harmony export */ "VDialogTopTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VDialogTopTransition
                    ,
                    /* harmony export */ "VDialogTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VDialogTransition
                    ,
                    /* harmony export */ "VExpandTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VExpandTransition
                    ,
                    /* harmony export */ "VExpandXTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VExpandXTransition
                    ,
                    /* harmony export */ "VFabTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VFabTransition
                    ,
                    /* harmony export */ "VFadeTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VFadeTransition
                    ,
                    /* harmony export */ "VMenuTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VMenuTransition
                    ,
                    /* harmony export */ "VScaleTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VScaleTransition
                    ,
                    /* harmony export */ "VScrollXReverseTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VScrollXReverseTransition
                    ,
                    /* harmony export */ "VScrollXTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VScrollXTransition
                    ,
                    /* harmony export */ "VScrollYReverseTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VScrollYReverseTransition
                    ,
                    /* harmony export */ "VScrollYTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VScrollYTransition
                    ,
                    /* harmony export */ "VSlideXReverseTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VSlideXReverseTransition
                    ,
                    /* harmony export */ "VSlideXTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VSlideXTransition
                    ,
                    /* harmony export */ "VSlideYReverseTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VSlideYReverseTransition
                    ,
                    /* harmony export */ "VSlideYTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VSlideYTransition
                    ,
                    /* harmony export */ "VTabReverseTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VTabReverseTransition
                    ,
                    /* harmony export */ "VTabTransition": ()=>/* reexport safe */ _transitions__WEBPACK_IMPORTED_MODULE_27__.VTabTransition
                });
                /* harmony import */ var _VApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VApp */ "./src/components/VApp/index.ts");
                /* harmony import */ var _VAppBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VAppBar */ "./src/components/VAppBar/index.ts");
                /* harmony import */ var _VAvatar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VAvatar */ "./src/components/VAvatar/index.ts");
                /* harmony import */ var _VBadge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./VBadge */ "./src/components/VBadge/index.ts");
                /* harmony import */ var _VBanner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VBanner */ "./src/components/VBanner/index.ts");
                /* harmony import */ var _VBottomNavigation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./VBottomNavigation */ "./src/components/VBottomNavigation/index.ts");
                /* harmony import */ var _VBtn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./VBtn */ "./src/components/VBtn/index.ts");
                /* harmony import */ var _VCard__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./VCard */ "./src/components/VCard/index.ts");
                /* harmony import */ var _VCode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./VCode */ "./src/components/VCode/index.ts");
                /* harmony import */ var _VDialog__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./VDialog */ "./src/components/VDialog/index.ts");
                /* harmony import */ var _VDivider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./VDivider */ "./src/components/VDivider/index.ts");
                /* harmony import */ var _VFooter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./VFooter */ "./src/components/VFooter/index.ts");
                /* harmony import */ var _VGrid__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./VGrid */ "./src/components/VGrid/index.ts");
                /* harmony import */ var _VIcon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./VIcon */ "./src/components/VIcon/index.ts");
                /* harmony import */ var _VImg__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./VImg */ "./src/components/VImg/index.ts");
                /* harmony import */ var _VKbd__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./VKbd */ "./src/components/VKbd/index.ts");
                /* harmony import */ var _VItemGroup__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./VItemGroup */ "./src/components/VItemGroup/index.ts");
                /* harmony import */ var _VLayout__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./VLayout */ "./src/components/VLayout/index.ts");
                /* harmony import */ var _VLocaleProvider__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./VLocaleProvider */ "./src/components/VLocaleProvider/index.ts");
                /* harmony import */ var _VLazy__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./VLazy */ "./src/components/VLazy/index.ts");
                /* harmony import */ var _VMain__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./VMain */ "./src/components/VMain/index.ts");
                /* harmony import */ var _VNavigationDrawer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./VNavigationDrawer */ "./src/components/VNavigationDrawer/index.ts");
                /* harmony import */ var _VOverlay__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./VOverlay */ "./src/components/VOverlay/index.ts");
                /* harmony import */ var _VSheet__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./VSheet */ "./src/components/VSheet/index.ts");
                /* harmony import */ var _VResponsive__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./VResponsive */ "./src/components/VResponsive/index.ts");
                /* harmony import */ var _VSystemBar__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./VSystemBar */ "./src/components/VSystemBar/index.ts");
                /* harmony import */ var _VThemeProvider__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./VThemeProvider */ "./src/components/VThemeProvider/index.ts");
                /* harmony import */ var _transitions__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./transitions */ "./src/components/transitions/index.ts");
            // export * from './VAlert'
            // export * from './VAutocomplete'
            // export * from './VBottomSheet'
            // export * from './VBreadcrumbs'
            // export * from './VBtn'
            // export * from './VBtnToggle'
            // export * from './VCalendar'
            // export * from './VCarousel'
            // export * from './VCheckbox'
            // export * from './VChip'
            // export * from './VChipGroup'
            // export * from './VColorPicker'
            // export * from './VContent'
            // export * from './VCombobox'
            // export * from './VCounter'
            // export * from './VData'
            // export * from './VDataIterator'
            // export * from './VDataTable'
            // export * from './VDatePicker'
            // export * from './VExpansionPanel'
            // export * from './VFileInput'
            // export * from './VForm'
            // export * from './VHover'
            // export * from './VInput'
            // export * from './VItemGroup'
            // export * from './VLabel'
            // export * from './VList'
            // export * from './VMenu'
            // export * from './VMessages'
            // export * from './VOverflowBtn'
            // export * from './VPagination'
            // export * from './VParallax'
            // export * from './VPicker'
            // export * from './VProgressCircular'
            // export * from './VProgressLinear'
            // export * from './VRadioGroup'
            // export * from './VRangeSlider'
            // export * from './VRating'
            // export * from './VSelect'
            // export * from './VSkeletonLoader'
            // export * from './VSlider'
            // export * from './VSlideGroup'
            // export * from './VSnackbar'
            // export * from './VSparkline'
            // export * from './VSpeedDial'
            // export * from './VStepper'
            // export * from './VSubheader'
            // export * from './VSwitch'
            // export * from './VTabs'
            // export * from './VTextarea'
            // export * from './VTextField'
            // export * from './VTimeline'
            // export * from './VTimePicker'
            // export * from './VToolbar'
            // export * from './VTooltip'
            // export * from './VTreeview'
            // export * from './VVirtualScroll'
            // export * from './VWindow'
            /***/ },
            /***/ "./src/components/transitions/createTransition.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "createCssTransition": ()=>/* binding */ createCssTransition
                    ,
                    /* harmony export */ "createJavascriptTransition": ()=>/* binding */ createJavascriptTransition
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                // Utilities
                // Types
                function createCssTransition(name, origin = 'top center 0', mode) {
                    return vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                        name,
                        props: _util__WEBPACK_IMPORTED_MODULE_1__.makeProps({
                            group: Boolean,
                            hideOnLeave: Boolean,
                            leaveAbsolute: Boolean,
                            mode: {
                                type: String,
                                default: mode
                            },
                            origin: {
                                type: String,
                                default: origin
                            }
                        }),
                        setup (props, { slots  }) {
                            return ()=>{
                                const tag = props.group ? vue__WEBPACK_IMPORTED_MODULE_0__.TransitionGroup : vue__WEBPACK_IMPORTED_MODULE_0__.Transition;
                                return vue__WEBPACK_IMPORTED_MODULE_0__.h(tag, {
                                    name,
                                    mode: props.mode,
                                    onBeforeEnter (el) {
                                        el.style.transformOrigin = props.origin;
                                    },
                                    onLeave (el) {
                                        if (props.leaveAbsolute) el.style.position = 'absolute';
                                        if (props.hideOnLeave) el.style.display = 'none';
                                    }
                                }, slots.default);
                            };
                        }
                    });
                }
                function createJavascriptTransition(name, functions, mode = 'in-out') {
                    return vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                        name,
                        props: _util__WEBPACK_IMPORTED_MODULE_1__.makeProps({
                            mode: {
                                type: String,
                                default: mode
                            }
                        }),
                        setup (props, { slots  }) {
                            return ()=>{
                                return vue__WEBPACK_IMPORTED_MODULE_0__.h(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {
                                    name,
                                    // mode: props.mode, // TODO: vuejs/vue-next#3104
                                    ...functions
                                }, slots.default);
                            };
                        }
                    });
                }
            /***/ },
            /***/ "./src/components/transitions/dialog-transition.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/util/makeProps.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./src/util/easing.ts");
                /* harmony default export */ __webpack_exports__["default"] = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VDialogTransition',
                    props: _util__WEBPACK_IMPORTED_MODULE_1__.makeProps({
                        target: Element
                    }),
                    setup (props, { slots  }) {
                        const functions = {
                            onEnter (el, done) {
                                const { x , y  } = getDimensions(props.target, el);
                                const animation = el.animate([
                                    {
                                        transform: `translate(${x}px, ${y}px) scale(0.1)`,
                                        opacity: 0
                                    },
                                    {
                                        transform: ''
                                    }
                                ], {
                                    duration: 225,
                                    easing: _util__WEBPACK_IMPORTED_MODULE_2__.deceleratedEasing
                                });
                                animation.finished.then(()=>done()
                                );
                            },
                            onLeave (el, done) {
                                const { x , y  } = getDimensions(props.target, el);
                                const animation = el.animate([
                                    {
                                        transform: ''
                                    },
                                    {
                                        transform: `translate(${x}px, ${y}px) scale(0.1)`,
                                        opacity: 0
                                    }
                                ], {
                                    duration: 125,
                                    easing: _util__WEBPACK_IMPORTED_MODULE_2__.acceleratedEasing
                                });
                                animation.finished.then(()=>done()
                                );
                            }
                        };
                        return ()=>{
                            return props.target ? vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps({
                                "name": "dialog-transition"
                            }, functions, {
                                "css": false
                            }), slots, 16) : vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {
                                "name": "dialog-transition"
                            }, slots);
                        };
                    }
                });
                function getDimensions(target, el) {
                    const initialDisplay = el.style.display;
                    const initialTransform = el.style.transform;
                    el.style.transition = 'none';
                    el.style.display = '';
                    el.style.transform = 'none';
                    const targetBox = target.getBoundingClientRect();
                    const elBox = el.getBoundingClientRect();
                    const x = targetBox.width / 2 + targetBox.left - (elBox.width / 2 + elBox.left);
                    const y = targetBox.height / 2 + targetBox.top - (elBox.height / 2 + elBox.top);
                    el.style.display = initialDisplay;
                    el.style.transform = initialTransform;
                    return {
                        x,
                        y
                    };
                }
            /***/ },
            /***/ "./src/components/transitions/expand-transition.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "default": ()=>/* export default binding */ __WEBPACK_DEFAULT_EXPORT__
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                // Utilities
                /* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(expandedParentClass = '', x = false) {
                    const sizeProperty = x ? 'width' : 'height';
                    const offsetProperty = vue__WEBPACK_IMPORTED_MODULE_0__.camelize(`offset-${sizeProperty}`);
                    function onAfterLeave(el) {
                        if (expandedParentClass && el._parent) {
                            el._parent.classList.remove(expandedParentClass);
                        }
                        resetStyles(el);
                    }
                    function resetStyles(el) {
                        const size = el._initialStyle[sizeProperty];
                        el.style.overflow = el._initialStyle.overflow;
                        if (size != null) el.style[sizeProperty] = size;
                        delete el._initialStyle;
                    }
                    return {
                        onBeforeEnter (el) {
                            el._parent = el.parentNode;
                            el._initialStyle = {
                                transition: el.style.transition,
                                overflow: el.style.overflow,
                                [sizeProperty]: el.style[sizeProperty]
                            };
                        },
                        onEnter (el) {
                            const initialStyle = el._initialStyle;
                            el.style.setProperty('transition', 'none', 'important'); // Hide overflow to account for collapsed margins in the calculated height
                            el.style.overflow = 'hidden';
                            const offset = `${el[offsetProperty]}px`;
                            el.style[sizeProperty] = '0';
                            el.offsetHeight; // force reflow
                            el.style.transition = initialStyle.transition;
                            if (expandedParentClass && el._parent) el._parent.classList.add(expandedParentClass);
                            requestAnimationFrame(()=>{
                                el.style[sizeProperty] = offset;
                            });
                        },
                        onAfterEnter: resetStyles,
                        onEnterCancelled: resetStyles,
                        onLeave (el) {
                            el._initialStyle = {
                                transition: '',
                                overflow: el.style.overflow,
                                [sizeProperty]: el.style[sizeProperty]
                            };
                            el.style.overflow = 'hidden';
                            el.style[sizeProperty] = `${el[offsetProperty]}px`;
                            el.offsetHeight; // force reflow
                            requestAnimationFrame(()=>el.style[sizeProperty] = '0'
                            );
                        },
                        onAfterLeave,
                        onLeaveCancelled: onAfterLeave
                    };
                }
            /***/ },
            /***/ "./src/components/transitions/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VCarouselTransition": ()=>/* binding */ VCarouselTransition
                    ,
                    /* harmony export */ "VCarouselReverseTransition": ()=>/* binding */ VCarouselReverseTransition
                    ,
                    /* harmony export */ "VTabTransition": ()=>/* binding */ VTabTransition
                    ,
                    /* harmony export */ "VTabReverseTransition": ()=>/* binding */ VTabReverseTransition
                    ,
                    /* harmony export */ "VMenuTransition": ()=>/* binding */ VMenuTransition
                    ,
                    /* harmony export */ "VFabTransition": ()=>/* binding */ VFabTransition
                    ,
                    /* harmony export */ "VDialogBottomTransition": ()=>/* binding */ VDialogBottomTransition
                    ,
                    /* harmony export */ "VDialogTopTransition": ()=>/* binding */ VDialogTopTransition
                    ,
                    /* harmony export */ "VFadeTransition": ()=>/* binding */ VFadeTransition
                    ,
                    /* harmony export */ "VScaleTransition": ()=>/* binding */ VScaleTransition
                    ,
                    /* harmony export */ "VScrollXTransition": ()=>/* binding */ VScrollXTransition
                    ,
                    /* harmony export */ "VScrollXReverseTransition": ()=>/* binding */ VScrollXReverseTransition
                    ,
                    /* harmony export */ "VScrollYTransition": ()=>/* binding */ VScrollYTransition
                    ,
                    /* harmony export */ "VScrollYReverseTransition": ()=>/* binding */ VScrollYReverseTransition
                    ,
                    /* harmony export */ "VSlideXTransition": ()=>/* binding */ VSlideXTransition
                    ,
                    /* harmony export */ "VSlideXReverseTransition": ()=>/* binding */ VSlideXReverseTransition
                    ,
                    /* harmony export */ "VSlideYTransition": ()=>/* binding */ VSlideYTransition
                    ,
                    /* harmony export */ "VSlideYReverseTransition": ()=>/* binding */ VSlideYReverseTransition
                    ,
                    /* harmony export */ "VExpandTransition": ()=>/* binding */ VExpandTransition
                    ,
                    /* harmony export */ "VExpandXTransition": ()=>/* binding */ VExpandXTransition
                    ,
                    /* harmony export */ "VDialogTransition": ()=>/* reexport safe */ _dialog_transition__WEBPACK_IMPORTED_MODULE_2__.default
                });
                /* harmony import */ var _createTransition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createTransition */ "./src/components/transitions/createTransition.ts");
                /* harmony import */ var _expand_transition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./expand-transition */ "./src/components/transitions/expand-transition.ts");
                /* harmony import */ var _dialog_transition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dialog-transition */ "./src/components/transitions/dialog-transition.tsx");
                // Component specific transitions
                const VCarouselTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('carousel-transition');
                const VCarouselReverseTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('carousel-reverse-transition');
                const VTabTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('tab-transition');
                const VTabReverseTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('tab-reverse-transition');
                const VMenuTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('menu-transition');
                const VFabTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('fab-transition', 'center center', 'out-in'); // Generic transitions
                const VDialogBottomTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('dialog-bottom-transition');
                const VDialogTopTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('dialog-top-transition');
                const VFadeTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('fade-transition');
                const VScaleTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('scale-transition');
                const VScrollXTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('scroll-x-transition');
                const VScrollXReverseTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('scroll-x-reverse-transition');
                const VScrollYTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('scroll-y-transition');
                const VScrollYReverseTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('scroll-y-reverse-transition');
                const VSlideXTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('slide-x-transition');
                const VSlideXReverseTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('slide-x-reverse-transition');
                const VSlideYTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('slide-y-transition');
                const VSlideYReverseTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createCssTransition('slide-y-reverse-transition'); // Javascript transitions
                const VExpandTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createJavascriptTransition('expand-transition', _expand_transition__WEBPACK_IMPORTED_MODULE_1__.default());
                const VExpandXTransition = _createTransition__WEBPACK_IMPORTED_MODULE_0__.createJavascriptTransition('expand-x-transition', _expand_transition__WEBPACK_IMPORTED_MODULE_1__.default('', true));
            /***/ },
            /***/ "./src/composables/border.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeBorderProps": ()=>/* binding */ makeBorderProps
                    ,
                    /* harmony export */ "useBorder": ()=>/* binding */ useBorder
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                // Utilities
                // Types
                // Composables
                const makeBorderProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    outlined: Boolean,
                    border: [
                        Boolean,
                        Number,
                        String
                    ]
                }, 'border');
                function useBorder(props, name) {
                    const borderClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const classes = [];
                        if (props.outlined || props.border === true || props.border === '') classes.push(`${name}--border`);
                        if (typeof props.border === 'string' && props.border !== '' || props.border === 0) for (const value of String(props.border).split(' '))classes.push(`border-${value}`);
                        return classes;
                    });
                    return {
                        borderClasses
                    };
                }
            /***/ },
            /***/ "./src/composables/color.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "useColor": ()=>/* binding */ useColor
                    ,
                    /* harmony export */ "useTextColor": ()=>/* binding */ useTextColor
                    ,
                    /* harmony export */ "useBackgroundColor": ()=>/* binding */ useBackgroundColor
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/colorUtils.ts");
                // Utilities
                // Types
                // Composables
                function useColor(colors) {
                    const backgroundIsCssColor = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>_util__WEBPACK_IMPORTED_MODULE_1__.isCssColor(colors.value.background)
                    );
                    const textIsCssColor = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>_util__WEBPACK_IMPORTED_MODULE_1__.isCssColor(colors.value.text)
                    );
                    const colorClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const classes = [];
                        if (colors.value.background && !backgroundIsCssColor.value) classes.push(`bg-${colors.value.background}`);
                        if (colors.value.text && !textIsCssColor.value) classes.push(`text-${colors.value.text}`);
                        return classes;
                    });
                    const colorStyles = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const styles = {
                        };
                        if (colors.value.background && backgroundIsCssColor.value) styles.backgroundColor = colors.value.background;
                        if (colors.value.text && textIsCssColor.value) {
                            styles.color = colors.value.text;
                            styles.caretColor = colors.value.text;
                        }
                        return styles;
                    });
                    return {
                        colorClasses,
                        colorStyles
                    };
                }
                function useTextColor(props, name) {
                    const colors = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>({
                            text: vue__WEBPACK_IMPORTED_MODULE_0__.isRef(props) ? props.value : name ? props[name] : null
                        })
                    );
                    const { colorClasses: textColorClasses , colorStyles: textColorStyles  } = useColor(colors);
                    return {
                        textColorClasses,
                        textColorStyles
                    };
                }
                function useBackgroundColor(props, name) {
                    const colors = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>({
                            background: vue__WEBPACK_IMPORTED_MODULE_0__.isRef(props) ? props.value : name ? props[name] : null
                        })
                    );
                    const { colorClasses: backgroundColorClasses , colorStyles: backgroundColorStyles  } = useColor(colors);
                    return {
                        backgroundColorClasses,
                        backgroundColorStyles
                    };
                }
            /***/ },
            /***/ "./src/composables/density.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeDensityProps": ()=>/* binding */ makeDensityProps
                    ,
                    /* harmony export */ "useDensity": ()=>/* binding */ useDensity
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                // Utilities
                // Types
                const allowedDensities = [
                    'default',
                    'comfortable',
                    'compact'
                ];
                // Composables
                const makeDensityProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    density: {
                        type: String,
                        default: 'default',
                        validator: (v)=>allowedDensities.includes(v)
                    }
                }, 'density');
                function useDensity(props, name) {
                    const densityClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        return `${name}--density-${props.density}`;
                    });
                    return {
                        densityClasses
                    };
                }
            /***/ },
            /***/ "./src/composables/dimensions.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeDimensionProps": ()=>/* binding */ makeDimensionProps
                    ,
                    /* harmony export */ "useDimension": ()=>/* binding */ useDimension
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                // Utilities
                // Types
                // Composables
                const makeDimensionProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    height: [
                        Number,
                        String
                    ],
                    maxHeight: [
                        Number,
                        String
                    ],
                    maxWidth: [
                        Number,
                        String
                    ],
                    minHeight: [
                        Number,
                        String
                    ],
                    minWidth: [
                        Number,
                        String
                    ],
                    width: [
                        Number,
                        String
                    ]
                }, 'dimension');
                function useDimension(props) {
                    const dimensionStyles = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>({
                            height: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(props.height),
                            maxHeight: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(props.maxHeight),
                            maxWidth: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(props.maxWidth),
                            minHeight: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(props.minHeight),
                            minWidth: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(props.minWidth),
                            width: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(props.width)
                        })
                    );
                    return {
                        dimensionStyles
                    };
                }
            /***/ },
            /***/ "./src/composables/display.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VuetifyDisplaySymbol": ()=>/* binding */ VuetifyDisplaySymbol
                    ,
                    /* harmony export */ "createDisplay": ()=>/* binding */ createDisplay
                    ,
                    /* harmony export */ "useDisplay": ()=>/* binding */ useDisplay
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                /* harmony import */ var _util_globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/globals */ "./src/util/globals.ts");
                // Utilities
                // Globals
                // Types
                const VuetifyDisplaySymbol = Symbol.for('vuetify:display');
                const defaultDisplayOptions = {
                    mobileBreakpoint: 'lg',
                    thresholds: {
                        xs: 0,
                        sm: 600,
                        md: 960,
                        lg: 1280,
                        xl: 1920,
                        xxl: 2560
                    }
                };
                const parseDisplayOptions = (options = defaultDisplayOptions)=>{
                    return _util__WEBPACK_IMPORTED_MODULE_1__.mergeDeep(defaultDisplayOptions, options);
                }; // Cross-browser support as described in:
                // https://stackoverflow.com/questions/1248081
                function getClientWidth() {
                    return _util_globals__WEBPACK_IMPORTED_MODULE_2__.IN_BROWSER ? Math.max(document.documentElement.clientWidth, window.innerWidth) : 0; // SSR
                }
                function getClientHeight() {
                    return _util_globals__WEBPACK_IMPORTED_MODULE_2__.IN_BROWSER ? Math.max(document.documentElement.clientHeight, window.innerHeight) : 0; // SSR
                }
                function getPlatform() {
                    const userAgent = _util_globals__WEBPACK_IMPORTED_MODULE_2__.IN_BROWSER ? window.navigator.userAgent : 'ssr';
                    function match(regexp) {
                        return Boolean(userAgent.match(regexp));
                    }
                    const android = match(/android/i);
                    const ios = match(/iphone|ipad|ipod/i);
                    const cordova = match(/cordova/i);
                    const electron = match(/electron/i);
                    const chrome = match(/chrome/i);
                    const edge = match(/edge/i);
                    const firefox = match(/firefox/i);
                    const opera = match(/opera/i);
                    const win = match(/win/i);
                    const mac = match(/mac/i);
                    const linux = match(/linux/i);
                    const ssr = match(/ssr/i);
                    return {
                        android,
                        ios,
                        cordova,
                        electron,
                        chrome,
                        edge,
                        firefox,
                        opera,
                        win,
                        mac,
                        linux,
                        touch: _util_globals__WEBPACK_IMPORTED_MODULE_2__.SUPPORTS_TOUCH,
                        ssr
                    };
                }
                function createDisplay(options) {
                    const { thresholds , mobileBreakpoint  } = parseDisplayOptions(options);
                    const height = vue__WEBPACK_IMPORTED_MODULE_0__.ref(getClientHeight());
                    const platform = getPlatform();
                    const state = vue__WEBPACK_IMPORTED_MODULE_0__.reactive({
                    });
                    const width = vue__WEBPACK_IMPORTED_MODULE_0__.ref(getClientWidth());
                    function onResize() {
                        height.value = getClientHeight();
                        width.value = getClientWidth();
                    } // eslint-disable-next-line max-statements
                    vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect(()=>{
                        const xs = width.value < thresholds.sm;
                        const sm = width.value < thresholds.md && !xs;
                        const md = width.value < thresholds.lg && !(sm || xs);
                        const lg = width.value < thresholds.xl && !(md || sm || xs);
                        const xl = width.value < thresholds.xxl && !(lg || md || sm || xs);
                        const xxl = width.value >= thresholds.xxl;
                        const name = xs ? 'xs' : sm ? 'sm' : md ? 'md' : lg ? 'lg' : xl ? 'xl' : 'xxl';
                        const breakpointValue = typeof mobileBreakpoint === 'number' ? mobileBreakpoint : thresholds[mobileBreakpoint];
                        const mobile = !platform.ssr ? width.value < breakpointValue : platform.android || platform.ios || platform.opera;
                        state.xs = xs;
                        state.sm = sm;
                        state.md = md;
                        state.lg = lg;
                        state.xl = xl;
                        state.xxl = xxl;
                        state.smAndUp = !xs;
                        state.mdAndUp = !(xs || sm);
                        state.lgAndUp = !(xs || sm || md);
                        state.xlAndUp = !(xs || sm || md || lg);
                        state.smAndDown = !(md || lg || xl || xxl);
                        state.mdAndDown = !(lg || xl || xxl);
                        state.lgAndDown = !(xl || xxl);
                        state.xlAndDown = !xxl;
                        state.name = name;
                        state.height = height.value;
                        state.width = width.value;
                        state.mobile = mobile;
                        state.mobileBreakpoint = mobileBreakpoint;
                        state.platform = platform;
                        state.thresholds = thresholds;
                    });
                    if (_util_globals__WEBPACK_IMPORTED_MODULE_2__.IN_BROWSER) window.addEventListener('resize', onResize, {
                        passive: true
                    });
                    return vue__WEBPACK_IMPORTED_MODULE_0__.toRefs(state);
                }
                function useDisplay() {
                    const display = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyDisplaySymbol);
                    if (!display) throw new Error('Could not find Vuetify display injection');
                    return display;
                }
            /***/ },
            /***/ "./src/composables/elevation.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeElevationProps": ()=>/* binding */ makeElevationProps
                    ,
                    /* harmony export */ "useElevation": ()=>/* binding */ useElevation
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                // Utilities
                // Types
                // Composables
                const makeElevationProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    elevation: {
                        type: [
                            Number,
                            String
                        ],
                        validator (v) {
                            const value = parseInt(v);
                            return !isNaN(value) && value >= 0 && // https://material.io/design/environment/elevation.html#default-elevations
                            value <= 24;
                        }
                    }
                }, 'elevation');
                function useElevation(props) {
                    const elevationClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const classes = [];
                        if (props.elevation == null) return classes;
                        classes.push(`elevation-${props.elevation}`);
                        return classes;
                    });
                    return {
                        elevationClasses
                    };
                }
            /***/ },
            /***/ "./src/composables/group.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeGroupProps": ()=>/* binding */ makeGroupProps
                    ,
                    /* harmony export */ "makeGroupItemProps": ()=>/* binding */ makeGroupItemProps
                    ,
                    /* harmony export */ "useGroupItem": ()=>/* binding */ useGroupItem
                    ,
                    /* harmony export */ "useGroup": ()=>/* binding */ useGroup
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _proxiedModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proxiedModel */ "./src/composables/proxiedModel.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./src/util/console.ts");
                // Utilities
                // Types
                const makeGroupProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    modelValue: {
                        type: [
                            Number,
                            Boolean,
                            String,
                            Array,
                            Object
                        ],
                        default: undefined
                    },
                    multiple: Boolean,
                    mandatory: [
                        Boolean,
                        String
                    ],
                    max: Number,
                    selectedClass: String
                }, 'group');
                const makeGroupItemProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    value: {
                        type: [
                            Number,
                            Boolean,
                            String,
                            Object
                        ],
                        default: undefined
                    },
                    index: Number,
                    disabled: Boolean,
                    selectedClass: String
                }, 'group-item'); // Composables
                function useGroupItem(props, injectKey) {
                    const group = vue__WEBPACK_IMPORTED_MODULE_0__.inject(injectKey, null);
                    if (!group) throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`);
                    const id = _util__WEBPACK_IMPORTED_MODULE_2__.getUid();
                    const value = vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'value');
                    const disabled = vue__WEBPACK_IMPORTED_MODULE_0__.toRef(props, 'disabled');
                    group.register({
                        id,
                        value,
                        disabled
                    }, props.index);
                    vue__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount(()=>{
                        group.unregister(id);
                    });
                    const isSelected = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        return group.isSelected(id);
                    });
                    const selectedClass = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        var _group$selectedClass$;
                        return isSelected.value && ((_group$selectedClass$ = group.selectedClass.value) != null ? _group$selectedClass$ : props.selectedClass);
                    });
                    return {
                        isSelected,
                        toggle: ()=>group.select(id, !isSelected.value)
                        ,
                        select: (value1)=>group.select(id, value1)
                        ,
                        selectedClass,
                        value,
                        disabled
                    };
                }
                function useGroup(props, injectKey) {
                    let isUnmounted = false;
                    const items = vue__WEBPACK_IMPORTED_MODULE_0__.reactive([]);
                    const selected = _proxiedModel__WEBPACK_IMPORTED_MODULE_3__.useProxiedModel(props, 'modelValue', [], (v)=>{
                        if (v == null) return [];
                        return getIds(items, _util__WEBPACK_IMPORTED_MODULE_2__.wrapInArray(v));
                    }, (v)=>{
                        const arr = getValues(items, v);
                        return props.multiple ? arr : arr[0];
                    });
                    function register(item, index) {
                        // Is there a better way to fix this typing?
                        const unwrapped = item;
                        if (index != null) items.splice(index, 0, unwrapped);
                        else items.push(unwrapped);
                    }
                    function unregister(id) {
                        if (isUnmounted) return;
                        selected.value = selected.value.filter((v)=>v !== id
                        );
                        forceMandatoryValue();
                        const index = items.findIndex((item)=>item.id === id
                        );
                        items.splice(index, 1);
                    } // If mandatory and nothing is selected, then select first non-disabled item
                    function forceMandatoryValue() {
                        const item = items.find((item1)=>!item1.disabled
                        );
                        if (item && props.mandatory === 'force' && !selected.value.length) selected.value = [
                            item.id
                        ];
                    }
                    vue__WEBPACK_IMPORTED_MODULE_0__.onMounted(()=>{
                        forceMandatoryValue();
                    });
                    vue__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount(()=>{
                        isUnmounted = true;
                    });
                    function select(id, isSelected) {
                        const item = items.find((item1)=>item1.id === id
                        );
                        if (isSelected && item != null && item.disabled) return;
                        if (props.multiple) {
                            const internalValue = selected.value.slice();
                            const index = internalValue.findIndex((v)=>v === id
                            ); // We can't remove value if group is
                            // mandatory, value already exists,
                            // and it is the only value
                            if (props.mandatory && index > -1 && internalValue.length <= 1) return; // We can't add value if it would
                            // cause max limit to be exceeded
                            if (props.max != null && index < 0 && internalValue.length + 1 > props.max) return;
                            if (index < 0 && isSelected) internalValue.push(id);
                            else if (index >= 0 && !isSelected) internalValue.splice(index, 1);
                            selected.value = internalValue;
                        } else {
                            if (props.mandatory && selected.value.includes(id)) return;
                            selected.value = isSelected ? [
                                id
                            ] : [];
                        }
                    }
                    function step(offset) {
                        // getting an offset from selected value obviously won't work with multiple values
                        if (props.multiple) _util__WEBPACK_IMPORTED_MODULE_4__.consoleWarn('This method is not supported when using "multiple" prop');
                        if (!selected.value.length) {
                            const item = items.find((item1)=>!item1.disabled
                            );
                            item && (selected.value = [
                                item.id
                            ]);
                        } else {
                            const currentId = selected.value[0];
                            const currentIndex = items.findIndex((i)=>i.id === currentId
                            );
                            let newIndex = (currentIndex + offset) % items.length;
                            let newItem = items[newIndex];
                            while(newItem.disabled && newIndex !== currentIndex){
                                newIndex = (newIndex + offset) % items.length;
                                newItem = items[newIndex];
                            }
                            if (newItem.disabled) return;
                            selected.value = [
                                items[newIndex].id
                            ];
                        }
                    }
                    const state = {
                        register,
                        unregister,
                        selected,
                        select,
                        prev: ()=>step(items.length - 1)
                        ,
                        next: ()=>step(1)
                        ,
                        isSelected: (id)=>selected.value.includes(id)
                        ,
                        selectedClass: vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>props.selectedClass
                        )
                    };
                    vue__WEBPACK_IMPORTED_MODULE_0__.provide(injectKey, state);
                    return state;
                }
                function getIds(items, modelValue) {
                    const ids = [];
                    for (const item of items){
                        if (item.value != null) {
                            if (modelValue.find((value)=>_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual(value, item.value)
                            )) ids.push(item.id);
                        } else if (modelValue.includes(item.id)) ids.push(item.id);
                    }
                    return ids;
                }
                function getValues(items, ids) {
                    const values = [];
                    for (const item of items)if (ids.includes(item.id)) values.push(item.value != null ? item.value : item.id);
                    return values;
                }
            /***/ },
            /***/ "./src/composables/icons.tsx": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VuetifyIconSymbol": ()=>/* binding */ VuetifyIconSymbol
                    ,
                    /* harmony export */ "makeIconProps": ()=>/* binding */ makeIconProps
                    ,
                    /* harmony export */ "VComponentIcon": ()=>/* binding */ VComponentIcon
                    ,
                    /* harmony export */ "VSvgIcon": ()=>/* binding */ VSvgIcon
                    ,
                    /* harmony export */ "VLigatureIcon": ()=>/* binding */ VLigatureIcon
                    ,
                    /* harmony export */ "VClassIcon": ()=>/* binding */ VClassIcon
                    ,
                    /* harmony export */ "defaultSets": ()=>/* binding */ defaultSets
                    ,
                    /* harmony export */ "useIcon": ()=>/* binding */ useIcon
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util_makeProps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/makeProps */ "./src/util/makeProps.ts");
                /* harmony import */ var _util_propsFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/propsFactory */ "./src/util/propsFactory.ts");
                // Utilities
                // Types
                const VuetifyIconSymbol = Symbol.for('vuetify:icons');
                const makeIconProps = _util_propsFactory__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    icon: {
                        type: [
                            String,
                            Object
                        ],
                        required: true
                    },
                    // Could not remove this and use makeTagProps, types complained because it is not required
                    tag: {
                        type: String,
                        required: true
                    }
                }, 'icon');
                const VComponentIcon = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VComponentIcon',
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps(makeIconProps()),
                    setup (props) {
                        return ()=>{
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, null, {
                                default: ()=>[
                                        vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.icon, null, null)
                                    ]
                            });
                        };
                    }
                });
                const VSvgIcon = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VSvgIcon',
                    inheritAttrs: false,
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps(makeIconProps()),
                    setup (props, { attrs  }) {
                        return ()=>{
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps(attrs, {
                                "style": null
                            }), {
                                default: ()=>[
                                        vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("svg", {
                                            "class": "v-icon__svg",
                                            "xmlns": "http://www.w3.org/2000/svg",
                                            "viewBox": "0 0 24 24",
                                            "role": "img",
                                            "aria-hidden": "true"
                                        }, [
                                            vue__WEBPACK_IMPORTED_MODULE_0__.createVNode("path", {
                                                "d": props.icon
                                            }, null, 8, [
                                                "d"
                                            ])
                                        ])
                                    ]
                            }, 16);
                        };
                    }
                });
                const VLigatureIcon = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VLigatureIcon',
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps(makeIconProps()),
                    setup (props) {
                        return ()=>{
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, null, {
                                default: ()=>[
                                        props.icon
                                    ]
                            });
                        };
                    }
                });
                const VClassIcon = vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                    name: 'VClassIcon',
                    props: _util_makeProps__WEBPACK_IMPORTED_MODULE_2__.makeProps(makeIconProps()),
                    setup (props) {
                        return ()=>{
                            return vue__WEBPACK_IMPORTED_MODULE_0__.createVNode(props.tag, {
                                "class": props.icon
                            }, null, 8, [
                                "class"
                            ]);
                        };
                    }
                });
                const defaultSets = {
                    svg: {
                        component: VSvgIcon
                    },
                    class: {
                        component: VClassIcon
                    }
                }; // Composables
                const useIcon = (props)=>{
                    const icons = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyIconSymbol);
                    if (!icons) throw new Error('Missing Vuetify Icons provide!');
                    const iconData = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const iconAlias = vue__WEBPACK_IMPORTED_MODULE_0__.isRef(props) ? props.value : props.icon;
                        if (!iconAlias) throw new Error('Icon value is undefined or null');
                        let icon = iconAlias;
                        if (typeof iconAlias === 'string' && iconAlias.includes('$')) {
                            var _icons$aliases;
                            icon = (_icons$aliases = icons.aliases) == null ? void 0 : _icons$aliases[iconAlias.slice(iconAlias.indexOf('$') + 1)];
                        }
                        if (!icon) throw new Error(`Could not find aliased icon "${iconAlias}"`);
                        if (typeof icon !== 'string') return {
                            component: VComponentIcon,
                            icon
                        };
                        const hasSet = icon.includes(':');
                        const setName = hasSet ? icon.split(':')[0] : icons.defaultSet;
                        const iconName = hasSet ? icon.split(':')[1] : icon;
                        const set = icons.sets[setName != null ? setName : icons.defaultSet];
                        if (!set) throw new Error(`Could not find icon set "${setName}"`);
                        return {
                            component: set.component,
                            icon: iconName
                        };
                    });
                    return {
                        iconData
                    };
                };
            /***/ },
            /***/ "./src/composables/layout.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VuetifyLayoutKey": ()=>/* binding */ VuetifyLayoutKey
                    ,
                    /* harmony export */ "makeLayoutProps": ()=>/* binding */ makeLayoutProps
                    ,
                    /* harmony export */ "makeLayoutItemProps": ()=>/* binding */ makeLayoutItemProps
                    ,
                    /* harmony export */ "useMain": ()=>/* binding */ useMain
                    ,
                    /* harmony export */ "useLayoutItem": ()=>/* binding */ useLayoutItem
                    ,
                    /* harmony export */ "createLayout": ()=>/* binding */ createLayout
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                // Utilities
                // Types
                const VuetifyLayoutKey = Symbol.for('vuetify:layout');
                const makeLayoutProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    overlaps: {
                        type: Array,
                        default: ()=>[]
                    },
                    fullHeight: Boolean
                }, 'layout'); // Composables
                const makeLayoutItemProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    name: {
                        type: String
                    },
                    priority: {
                        type: Number,
                        default: 0
                    },
                    absolute: Boolean
                }, 'layout-item');
                function useMain() {
                    const layout = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyLayoutKey);
                    if (!layout) throw new Error('Could not find injected Vuetify layout');
                    return layout;
                }
                function useLayoutItem(name, priority, position, layoutSize, elementSize, active) {
                    const layout = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyLayoutKey);
                    if (!layout) throw new Error('Could not find injected Vuetify layout');
                    const id = name != null ? name : `layout-item-${_util__WEBPACK_IMPORTED_MODULE_2__.getUid()}`;
                    const styles = layout.register(id, priority, position, layoutSize, elementSize, active);
                    vue__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount(()=>layout.unregister(id)
                    );
                    return styles;
                }
                const generateLayers = (layout, registered, positions, layoutSizes, activeItems)=>{
                    let previousLayer = {
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0
                    };
                    const layers = [
                        {
                            id: '',
                            layer: {
                                ...previousLayer
                            }
                        }
                    ];
                    const ids = !layout.length ? registered : layout.map((l)=>l.split(':')[0]
                    ).filter((l)=>registered.includes(l)
                    );
                    for (const id of ids){
                        const position = positions.get(id);
                        const amount = layoutSizes.get(id);
                        const active = activeItems.get(id);
                        if (!position || !amount || !active) continue;
                        const layer = {
                            ...previousLayer,
                            [position.value]: parseInt(previousLayer[position.value], 10) + (active.value ? parseInt(amount.value, 10) : 0)
                        };
                        layers.push({
                            id,
                            layer
                        });
                        previousLayer = layer;
                    }
                    return layers;
                }; // TODO: Remove undefined from layout and overlaps when vue typing for required: true prop is fixed
                function createLayout(props) {
                    const registered = vue__WEBPACK_IMPORTED_MODULE_0__.ref([]);
                    const positions = new Map();
                    const layoutSizes = new Map();
                    const priorities = new Map();
                    const activeItems = new Map();
                    const computedOverlaps = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        var _props$overlaps;
                        const map = new Map();
                        const overlaps = (_props$overlaps = props.overlaps) != null ? _props$overlaps : [];
                        for (const overlap of overlaps.filter((item)=>item.includes(':')
                        )){
                            const [top, bottom] = overlap.split(':');
                            if (!registered.value.includes(top) || !registered.value.includes(bottom)) continue;
                            const topPosition = positions.get(top);
                            const bottomPosition = positions.get(bottom);
                            const topAmount = layoutSizes.get(top);
                            const bottomAmount = layoutSizes.get(bottom);
                            if (!topPosition || !bottomPosition || !topAmount || !bottomAmount) continue;
                            map.set(bottom, {
                                position: topPosition.value,
                                amount: parseInt(topAmount.value, 10)
                            });
                            map.set(top, {
                                position: bottomPosition.value,
                                amount: -parseInt(bottomAmount.value, 10)
                            });
                        }
                        return map;
                    });
                    const layers = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const entries = [
                            ...priorities.entries()
                        ];
                        const sortedEntries = entries.sort(([, a], [, b])=>a.value - b.value
                        ).map(([id])=>id
                        );
                        return generateLayers(sortedEntries, registered.value, positions, layoutSizes, activeItems);
                    });
                    const mainStyles = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const layer = layers.value[layers.value.length - 1].layer;
                        return {
                            position: 'relative',
                            paddingLeft: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(layer.left),
                            paddingRight: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(layer.right),
                            paddingTop: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(layer.top),
                            paddingBottom: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(layer.bottom)
                        };
                    });
                    const items = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        return layers.value.slice(1).map(({ id  }, index)=>{
                            const { layer  } = layers.value[index];
                            const size = layoutSizes.get(id);
                            return {
                                id,
                                ...layer,
                                size: Number(size.value)
                            };
                        });
                    });
                    const getLayoutItem = (id)=>{
                        return items.value.find((item)=>item.id === id
                        );
                    };
                    vue__WEBPACK_IMPORTED_MODULE_0__.provide(VuetifyLayoutKey, {
                        register: (id, priority, position, layoutSize, elementSize, active)=>{
                            priorities.set(id, priority);
                            positions.set(id, position);
                            layoutSizes.set(id, layoutSize);
                            activeItems.set(id, active);
                            registered.value.push(id);
                            return vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                                const index = items.value.findIndex((i)=>i.id === id
                                );
                                if (index < 0) throw new Error(`Layout item "${id}" is missing from layout prop`);
                                const item = items.value[index];
                                if (!item) throw new Error(`Could not find layout item "${id}`);
                                const overlap = computedOverlaps.value.get(id);
                                if (overlap) item[overlap.position] += overlap.amount;
                                const isHorizontal = position.value === 'left' || position.value === 'right';
                                const isOppositeHorizontal = position.value === 'right';
                                const isOppositeVertical = position.value === 'bottom';
                                return {
                                    [position.value]: 0,
                                    height: isHorizontal ? `calc(100% - ${item.top}px - ${item.bottom}px)` : `${elementSize.value}px`,
                                    marginLeft: isOppositeHorizontal ? undefined : `${item.left}px`,
                                    marginRight: isOppositeHorizontal ? `${item.right}px` : undefined,
                                    marginTop: position.value !== 'bottom' ? `${item.top}px` : undefined,
                                    marginBottom: position.value !== 'top' ? `${item.bottom}px` : undefined,
                                    width: !isHorizontal ? `calc(100% - ${item.left}px - ${item.right}px)` : `${elementSize.value}px`,
                                    zIndex: layers.value.length - index,
                                    transform: `translate${isHorizontal ? 'X' : 'Y'}(${(active.value ? 0 : -110) * (isOppositeHorizontal || isOppositeVertical ? -1 : 1)}%)`
                                };
                            });
                        },
                        unregister: (id)=>{
                            priorities.delete(id);
                            positions.delete(id);
                            layoutSizes.delete(id);
                            activeItems.delete(id);
                            registered.value = registered.value.filter((v)=>v !== id
                            );
                        },
                        mainStyles,
                        getLayoutItem,
                        items
                    });
                    return {
                        layoutClasses: vue__WEBPACK_IMPORTED_MODULE_0__.ref('v-layout'),
                        getLayoutItem,
                        items
                    };
                }
            /***/ },
            /***/ "./src/composables/locale.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VuetifyLocaleAdapterSymbol": ()=>/* binding */ VuetifyLocaleAdapterSymbol
                    ,
                    /* harmony export */ "VuetifyLocaleSymbol": ()=>/* binding */ VuetifyLocaleSymbol
                    ,
                    /* harmony export */ "provideLocale": ()=>/* binding */ provideLocale
                    ,
                    /* harmony export */ "useLocale": ()=>/* binding */ useLocale
                    ,
                    /* harmony export */ "createLocaleAdapter": ()=>/* binding */ createLocaleAdapter
                    ,
                    /* harmony export */ "createDefaultLocaleAdapter": ()=>/* binding */ createDefaultLocaleAdapter
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./src/util/console.ts");
                /* harmony import */ var _locale_en__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../locale/en */ "./src/locale/en.ts");
                // Types
                const VuetifyLocaleAdapterSymbol = Symbol.for('vuetify:locale-adapter');
                const VuetifyLocaleSymbol = Symbol.for('vuetify:locale');
                function provideLocale(props) {
                    const adapter = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyLocaleAdapterSymbol);
                    if (!adapter) throw new Error('[Vuetify] Could not find injected locale adapter');
                    return adapter.createScope(props);
                }
                function useLocale() {
                    const adapter = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyLocaleAdapterSymbol);
                    if (!adapter) throw new Error('[Vuetify] Could not find injected locale adapter');
                    return adapter.getScope();
                }
                function isLocaleAdapter(x) {
                    return !!x && x.hasOwnProperty('getScope') && x.hasOwnProperty('createScope') && x.hasOwnProperty('createRoot');
                }
                function createLocaleAdapter(app, options) {
                    const adapter = isLocaleAdapter(options) ? options : createDefaultLocaleAdapter(options);
                    const rootInstance = adapter.createRoot(app);
                    return {
                        adapter,
                        rootInstance
                    };
                }
                const LANG_PREFIX = '$vuetify.';
                const replace = (str, params)=>{
                    return str.replace(/\{(\d+)\}/g, (match, index)=>{
                        /* istanbul ignore next */ return String(params[+index]);
                    });
                };
                const createTranslateFunction = (current, fallback, messages)=>{
                    return (key, ...params)=>{
                        if (!key.startsWith(LANG_PREFIX)) return replace(key, params);
                        const shortKey = key.replace(LANG_PREFIX, '');
                        const currentLocale = current.value && messages.value[current.value];
                        const fallbackLocale = fallback.value && messages.value[fallback.value];
                        let str = _util__WEBPACK_IMPORTED_MODULE_1__.getObjectValueByPath(currentLocale, shortKey, null);
                        if (!str) {
                            _util__WEBPACK_IMPORTED_MODULE_2__.consoleWarn(`Translation key "${key}" not found in "${current.value}", trying fallback locale`);
                            str = _util__WEBPACK_IMPORTED_MODULE_1__.getObjectValueByPath(fallbackLocale, shortKey, null);
                        }
                        if (!str) {
                            _util__WEBPACK_IMPORTED_MODULE_2__.consoleError(`Translation key "${key}" not found in fallback`);
                            str = key;
                        }
                        if (typeof str !== 'string') {
                            _util__WEBPACK_IMPORTED_MODULE_2__.consoleError(`Translation key "${key}" has a non-string value`);
                            str = key;
                        }
                        return replace(str, params);
                    };
                };
                function createDefaultLocaleAdapter(options) {
                    const createScope = (options1)=>{
                        const current = _util__WEBPACK_IMPORTED_MODULE_1__.wrapInRef(options1.current);
                        const fallback = _util__WEBPACK_IMPORTED_MODULE_1__.wrapInRef(options1.fallback);
                        const messages = _util__WEBPACK_IMPORTED_MODULE_1__.wrapInRef(options1.messages);
                        return {
                            current,
                            fallback,
                            messages,
                            t: createTranslateFunction(current, fallback, messages)
                        };
                    };
                    return {
                        createRoot: (app)=>{
                            var _options$defaultLocal, _options$fallbackLoca, _options$messages;
                            const rootScope = createScope({
                                current: (_options$defaultLocal = options == null ? void 0 : options.defaultLocale) != null ? _options$defaultLocal : 'en',
                                fallback: (_options$fallbackLoca = options == null ? void 0 : options.fallbackLocale) != null ? _options$fallbackLoca : 'en',
                                messages: (_options$messages = options == null ? void 0 : options.messages) != null ? _options$messages : {
                                    en: _locale_en__WEBPACK_IMPORTED_MODULE_3__.default
                                }
                            });
                            app.provide(VuetifyLocaleSymbol, rootScope);
                            return rootScope;
                        },
                        getScope: ()=>{
                            const currentScope = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyLocaleSymbol);
                            if (!currentScope) throw new Error('[Vuetify] Could not find injected locale instance');
                            return currentScope;
                        },
                        createScope: (options1)=>{
                            const currentScope = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyLocaleSymbol);
                            if (!currentScope) throw new Error('[Vuetify] Could not find injected locale instance');
                            const newScope = createScope({
                                current: vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                                    var _options$locale;
                                    return (_options$locale = options1 == null ? void 0 : options1.locale) != null ? _options$locale : currentScope.current.value;
                                }),
                                fallback: vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                                    var _options$locale2;
                                    return (_options$locale2 = options1 == null ? void 0 : options1.locale) != null ? _options$locale2 : currentScope.fallback.value;
                                }),
                                messages: vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                                    var _options$messages2;
                                    return (_options$messages2 = options1 == null ? void 0 : options1.messages) != null ? _options$messages2 : currentScope.messages.value;
                                })
                            });
                            vue__WEBPACK_IMPORTED_MODULE_0__.provide(VuetifyLocaleSymbol, newScope);
                            return newScope;
                        }
                    };
                }
            /***/ },
            /***/ "./src/composables/position.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makePositionProps": ()=>/* binding */ makePositionProps
                    ,
                    /* harmony export */ "usePosition": ()=>/* binding */ usePosition
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                // Utilities
                // Types
                const positionValues = [
                    'static',
                    'relative',
                    'fixed',
                    'absolute',
                    'sticky'
                ];
                // Composables
                const makePositionProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    absolute: Boolean,
                    bottom: [
                        Boolean,
                        Number,
                        String
                    ],
                    fixed: Boolean,
                    left: [
                        Boolean,
                        Number,
                        String
                    ],
                    position: {
                        type: String,
                        validator: /* istanbul ignore next */ (v)=>positionValues.includes(v)
                    },
                    right: [
                        Boolean,
                        Number,
                        String
                    ],
                    top: [
                        Boolean,
                        Number,
                        String
                    ]
                }, 'position');
                function usePosition(props, name) {
                    const targets = [
                        'top',
                        'right',
                        'bottom',
                        'left'
                    ];
                    const positionClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        if (props.fixed) return `${name}--fixed`;
                        if (props.absolute) return `${name}--absolute`;
                        return props.position ? `position-${props.position}` : undefined;
                    });
                    const positionStyles = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const styles = {
                        };
                        for (const target of targets){
                            const prop = props[target];
                            if (prop == null || prop === false) continue;
                            styles[target] = _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(prop === true ? '0' : String(prop));
                        }
                        return styles;
                    });
                    return {
                        positionClasses,
                        positionStyles
                    };
                }
            /***/ },
            /***/ "./src/composables/proxiedModel.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "useProxiedModel": ()=>/* binding */ useProxiedModel
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/console.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                // Utilities
                // Types
                // Composables
                function useProxiedModel(props, prop, defaultValue, transformIn = (v)=>v
                , transformOut = (v)=>v
                ) {
                    const vm = vue__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance();
                    if (!vm) _util__WEBPACK_IMPORTED_MODULE_1__.consoleError('useProxiedModel must be called from inside a setup function');
                    const propIsDefined = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        var _vm$vnode$props, _vm$vnode$props2;
                        return !!(typeof props[prop] !== 'undefined' && (vm != null && (_vm$vnode$props = vm.vnode.props) != null && _vm$vnode$props.hasOwnProperty(prop) || vm != null && (_vm$vnode$props2 = vm.vnode.props) != null && _vm$vnode$props2.hasOwnProperty(_util__WEBPACK_IMPORTED_MODULE_2__.toKebabCase(prop))));
                    });
                    const internal = vue__WEBPACK_IMPORTED_MODULE_0__.ref(transformIn(propIsDefined.value ? props[prop] : defaultValue));
                    return vue__WEBPACK_IMPORTED_MODULE_0__.computed({
                        get () {
                            if (propIsDefined.value) return transformIn(props[prop]);
                            else return internal.value;
                        },
                        set (newValue) {
                            internal.value = newValue;
                            vm == null || vm.emit(`update:${prop}`, transformOut(newValue));
                        }
                    });
                }
            /***/ },
            /***/ "./src/composables/rounded.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeRoundedProps": ()=>/* binding */ makeRoundedProps
                    ,
                    /* harmony export */ "useRounded": ()=>/* binding */ useRounded
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                // Utilities
                // Types
                // Composables
                const makeRoundedProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    rounded: {
                        type: [
                            Boolean,
                            Number,
                            String
                        ],
                        default: undefined
                    },
                    tile: Boolean
                }, 'rounded');
                function useRounded(props, name) {
                    const roundedClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const classes = [];
                        if (props.tile) classes.push(`${name}--tile`);
                        else if (props.rounded === true || props.rounded === '') classes.push(`${name}--rounded`);
                        else if (typeof props.rounded === 'string' || props.rounded === 0) for (const value of String(props.rounded).split(' '))classes.push(`rounded-${value}`);
                        return classes;
                    });
                    return {
                        roundedClasses
                    };
                }
            /***/ },
            /***/ "./src/composables/rtl.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VuetifyRtlSymbol": ()=>/* binding */ VuetifyRtlSymbol
                    ,
                    /* harmony export */ "createRtl": ()=>/* binding */ createRtl
                    ,
                    /* harmony export */ "createRtlScope": ()=>/* binding */ createRtlScope
                    ,
                    /* harmony export */ "provideRtl": ()=>/* binding */ provideRtl
                    ,
                    /* harmony export */ "useRtl": ()=>/* binding */ useRtl
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _locale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locale */ "./src/locale/index.ts");
                // Types
                const VuetifyRtlSymbol = Symbol.for('vuetify:rtl');
                function createRtl(localeScope, options) {
                    var _options$rtl, _options$defaultRtl;
                    return createRtlScope({
                        rtl: {
                            ..._locale__WEBPACK_IMPORTED_MODULE_1__.rtl,
                            ...(_options$rtl = options == null ? void 0 : options.rtl) != null ? _options$rtl : {
                            }
                        },
                        isRtl: vue__WEBPACK_IMPORTED_MODULE_0__.ref((_options$defaultRtl = options == null ? void 0 : options.defaultRtl) != null ? _options$defaultRtl : false),
                        rtlClasses: vue__WEBPACK_IMPORTED_MODULE_0__.ref('')
                    }, localeScope);
                }
                function createRtlScope(currentScope, localeScope, options) {
                    const isRtl = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        if (typeof (options == null ? void 0 : options.rtl) === 'boolean') return options.rtl;
                        if (localeScope.current.value && currentScope.rtl.hasOwnProperty(localeScope.current.value)) return currentScope.rtl[localeScope.current.value];
                        return currentScope.isRtl.value;
                    });
                    return {
                        isRtl,
                        rtl: currentScope.rtl,
                        rtlClasses: vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>`v-locale--is-${isRtl.value ? 'rtl' : 'ltr'}`
                        )
                    };
                }
                function provideRtl(props, localeScope) {
                    const currentScope = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyRtlSymbol);
                    if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance');
                    const newScope = createRtlScope(currentScope, localeScope, props);
                    vue__WEBPACK_IMPORTED_MODULE_0__.provide(VuetifyRtlSymbol, newScope);
                    return newScope;
                }
                function useRtl() {
                    const currentScope = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyRtlSymbol);
                    if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance');
                    return currentScope;
                }
            /***/ },
            /***/ "./src/composables/size.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeSizeProps": ()=>/* binding */ makeSizeProps
                    ,
                    /* harmony export */ "useSize": ()=>/* binding */ useSize
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                // Utilities
                // Types
                const predefinedSizes = [
                    'x-small',
                    'small',
                    'default',
                    'large',
                    'x-large'
                ];
                // Composables
                const makeSizeProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    size: {
                        type: [
                            String,
                            Number
                        ],
                        default: 'default'
                    }
                }, 'size');
                function useSize(props, name) {
                    const sizeClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        return predefinedSizes.includes(props.size) ? `${name}--size-${props.size}` : null;
                    });
                    const sizeStyles = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        return !predefinedSizes.includes(props.size) && props.size ? {
                            width: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(props.size),
                            height: _util__WEBPACK_IMPORTED_MODULE_2__.convertToUnit(props.size)
                        } : null;
                    });
                    return {
                        sizeClasses,
                        sizeStyles
                    };
                }
            /***/ },
            /***/ "./src/composables/ssrBoot.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "useSsrBoot": ()=>/* binding */ useSsrBoot
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                // Utilities
                // Composables
                function useSsrBoot() {
                    const isBooted = vue__WEBPACK_IMPORTED_MODULE_0__.ref(false);
                    vue__WEBPACK_IMPORTED_MODULE_0__.onMounted(()=>{
                        window.requestAnimationFrame(()=>{
                            isBooted.value = true;
                        });
                    });
                    const ssrBootStyles = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>!isBooted.value ? {
                            transition: 'none !important'
                        } : undefined
                    );
                    return {
                        ssrBootStyles
                    };
                }
            /***/ },
            /***/ "./src/composables/tag.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeTagProps": ()=>/* binding */ makeTagProps
                });
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                // Utilities
                // Types
                // Composables
                const makeTagProps = _util__WEBPACK_IMPORTED_MODULE_0__.propsFactory({
                    tag: {
                        type: String,
                        default: 'div'
                    }
                }, 'tag');
            /***/ },
            /***/ "./src/composables/teleport.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "useTeleport": ()=>/* binding */ useTeleport
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                function useTeleport(target) {
                    const teleportTarget = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        const _target = target.value;
                        if (_target === true) return undefined;
                        const targetElement = _target === false ? document.body : typeof _target === 'string' ? document.querySelector(_target) : _target;
                        if (targetElement == null) {
                            vue__WEBPACK_IMPORTED_MODULE_0__.warn(`Unable to locate target ${_target}`);
                            return undefined;
                        }
                        if (!useTeleport.cache.has(targetElement)) {
                            const el = document.createElement('div');
                            el.className = 'v-overlay-container';
                            targetElement.appendChild(el);
                            useTeleport.cache.set(targetElement, el);
                        }
                        return useTeleport.cache.get(targetElement);
                    });
                    return {
                        teleportTarget
                    };
                }
                useTeleport.cache = new WeakMap();
            /***/ },
            /***/ "./src/composables/theme.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VuetifyThemeSymbol": ()=>/* binding */ VuetifyThemeSymbol
                    ,
                    /* harmony export */ "createTheme": ()=>/* binding */ createTheme
                    ,
                    /* harmony export */ "provideTheme": ()=>/* binding */ provideTheme
                    ,
                    /* harmony export */ "useTheme": ()=>/* binding */ useTheme
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/colorUtils.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./src/util/helpers.ts");
                /* harmony import */ var _util_console__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/console */ "./src/util/console.ts");
                // Utilities
                // Types
                const VuetifyThemeSymbol = Symbol.for('vuetify:theme');
                const defaultThemeOptions = {
                    defaultTheme: 'light',
                    variations: {
                        colors: [],
                        lighten: 0,
                        darken: 0
                    },
                    themes: {
                        light: {
                            dark: false,
                            colors: {
                                background: '#FFFFFF',
                                surface: '#FFFFFF',
                                primary: '#6200EE',
                                'primary-darken-1': '#3700B3',
                                secondary: '#03DAC6',
                                'secondary-darken-1': '#018786',
                                error: '#B00020',
                                info: '#2196F3',
                                success: '#4CAF50',
                                warning: '#FB8C00'
                            },
                            variables: {
                                'border-color': '0, 0, 0',
                                'border-opacity': 0.12,
                                'high-emphasis-opacity': 0.87,
                                'medium-emphasis-opacity': 0.6,
                                'disabled-opacity': 0.38,
                                'kbd-background-color': '#212529',
                                'kbd-color': '#FFFFFF',
                                'code-background-color': '#C2C2C2'
                            }
                        },
                        dark: {
                            dark: true,
                            colors: {
                                background: '#121212',
                                surface: '#121212',
                                primary: '#BB86FC',
                                'primary-darken-1': '#3700B3',
                                secondary: '#03DAC5',
                                'secondary-darken-1': '#03DAC5',
                                error: '#CF6679',
                                info: '#2196F3',
                                success: '#4CAF50',
                                warning: '#FB8C00'
                            },
                            variables: {
                                'border-color': '255, 255, 255',
                                'border-opacity': 0.12,
                                'high-emphasis-opacity': 0.87,
                                'medium-emphasis-opacity': 0.6,
                                'disabled-opacity': 0.38,
                                'kbd-background-color': '#212529',
                                'kbd-color': '#FFFFFF',
                                'code-background-color': '#B7B7B7'
                            }
                        }
                    }
                };
                const parseThemeOptions = (options = defaultThemeOptions)=>{
                    if (!options) return {
                        ...defaultThemeOptions,
                        isDisabled: true
                    };
                    return {
                        ...defaultThemeOptions,
                        ...options,
                        variations: (options == null ? void 0 : options.variations) == null || (options == null ? void 0 : options.variations) === false ? defaultThemeOptions.variations : options.variations
                    };
                }; // Composables
                function createTheme(options) {
                    const parsedOptions = parseThemeOptions(options);
                    const styleEl = vue__WEBPACK_IMPORTED_MODULE_0__.ref();
                    const current = vue__WEBPACK_IMPORTED_MODULE_0__.ref(parsedOptions.defaultTheme);
                    const themes = vue__WEBPACK_IMPORTED_MODULE_0__.ref(parsedOptions.themes);
                    const variations = vue__WEBPACK_IMPORTED_MODULE_0__.ref(parsedOptions.variations);
                    const computedThemes = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>{
                        return Object.keys(themes.value).reduce((obj, key)=>{
                            var _parsedOptions$variat;
                            const theme = {
                                ...themes.value[key],
                                colors: {
                                    ...themes.value[key].colors,
                                    ...((_parsedOptions$variat = parsedOptions.variations.colors) != null ? _parsedOptions$variat : []).reduce((obj1, color)=>{
                                        return {
                                            ...obj1,
                                            ...genColorVariations(color, themes.value[key].colors[color])
                                        };
                                    }, {
                                    })
                                }
                            };
                            for (const color of Object.keys(theme.colors)){
                                if (/on-[a-z]/.test(color) || theme.colors[`on-${color}`]) continue;
                                const onColor = `on-${color}`;
                                theme.colors[onColor] = _util__WEBPACK_IMPORTED_MODULE_1__.intToHex(_util__WEBPACK_IMPORTED_MODULE_1__.getLuma(theme.colors[color]) > 0.18 ? 0 : 16777215);
                            }
                            obj[key] = theme;
                            return obj;
                        }, {
                        });
                    });
                    function genColorVariations(name, color) {
                        const obj = {
                        };
                        for (const variation of [
                            'lighten',
                            'darken'
                        ]){
                            const fn = variation === 'lighten' ? _util__WEBPACK_IMPORTED_MODULE_1__.lighten : _util__WEBPACK_IMPORTED_MODULE_1__.darken;
                            for (const amount of _util__WEBPACK_IMPORTED_MODULE_2__.createRange(variations.value[variation], 1))obj[`${name}-${variation}-${amount}`] = _util__WEBPACK_IMPORTED_MODULE_1__.intToHex(fn(_util__WEBPACK_IMPORTED_MODULE_1__.colorToInt(color), amount));
                        }
                        return obj;
                    }
                    function genCssVariables(name) {
                        const theme = computedThemes.value[name];
                        if (!theme) throw new Error(`Could not find theme ${name}`);
                        const lightOverlay = theme.dark ? 2 : 1;
                        const darkOverlay = theme.dark ? 1 : 2;
                        const variables = [];
                        for (const [key, value] of Object.entries(theme.colors)){
                            const rgb = _util__WEBPACK_IMPORTED_MODULE_1__.colorToRGB(value);
                            variables.push(`--v-theme-${key}: ${rgb.r},${rgb.g},${rgb.b}`);
                            if (!key.startsWith('on-')) variables.push(`--v-theme-${key}-overlay-multiplier: ${_util__WEBPACK_IMPORTED_MODULE_1__.getLuma(value) > 0.18 ? lightOverlay : darkOverlay}`);
                        }
                        return variables;
                    }
                    function genStyleElement() {
                        if (typeof document === 'undefined' || styleEl.value) return;
                        const el = document.createElement('style');
                        el.type = 'text/css';
                        el.id = 'vuetify-theme-stylesheet';
                        styleEl.value = el;
                        document.head.appendChild(styleEl.value);
                    }
                    function createCssClass(selector, content) {
                        return [
                            `${selector} {\n`,
                            ...content.map((line)=>`  ${line};\n`
                            ),
                            '}\n'
                        ];
                    }
                    function updateStyles() {
                        if (parsedOptions.isDisabled) return;
                        genStyleElement();
                        const lines = [];
                        for (const themeName of Object.keys(computedThemes.value)){
                            const variables = computedThemes.value[themeName].variables;
                            lines.push(...createCssClass(`.v-theme--${themeName}`, [
                                ...genCssVariables(themeName),
                                ...Object.keys(variables).map((key)=>{
                                    const value = variables[key];
                                    const color = typeof value === 'string' && value.startsWith('#') ? _util__WEBPACK_IMPORTED_MODULE_1__.colorToRGB(value) : undefined;
                                    const rgb = color ? `${color.r}, ${color.g}, ${color.b}` : undefined;
                                    return `--v-${key}: ${rgb != null ? rgb : value}`;
                                })
                            ]));
                        } // Assumption is that all theme objects have the same keys, so it doesn't matter which one
                        // we use since the values are all css variables.
                        const firstTheme = Object.keys(computedThemes.value)[0];
                        for (const key of Object.keys(computedThemes.value[firstTheme].colors))if (/on-[a-z]/.test(key)) lines.push(...createCssClass(`.${key}`, [
                            `color: rgb(var(--v-theme-${key}))`
                        ]));
                        else lines.push(...createCssClass(`.bg-${key}`, [
                            `--v-theme-overlay-multiplier: var(--v-theme-${key}-overlay-multiplier)`,
                            `background: rgb(var(--v-theme-${key}))`,
                            `color: rgb(var(--v-theme-on-${key}))`
                        ]), ...createCssClass(`.text-${key}`, [
                            `color: rgb(var(--v-theme-${key}))`
                        ]), ...createCssClass(`.border-${key}`, [
                            `--v-border-color: var(--v-theme-${key})`
                        ]));
                        if (styleEl.value) styleEl.value.innerHTML = lines.map((str, i)=>i === 0 ? str : `    ${str}`
                        ).join('');
                    }
                    vue__WEBPACK_IMPORTED_MODULE_0__.watch(themes, updateStyles, {
                        deep: true,
                        immediate: true
                    });
                    return {
                        isDisabled: parsedOptions.isDisabled,
                        themes: computedThemes,
                        setTheme: (key, theme)=>themes.value[key] = theme
                        ,
                        getTheme: (key)=>computedThemes.value[key]
                        ,
                        current,
                        themeClasses: vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>parsedOptions.isDisabled ? '' : `v-theme--${current.value}`
                        ),
                        hasColor: (color)=>!!computedThemes.value[current.value].colors[color]
                    };
                }
                /**
 * Used to either set up and provide a new theme instance, or to pass
 * along the closest available already provided instance.
 *
 * A new theme instance will be created if either `theme` prop is provided,
 * or if `newContext` prop is true
 */ function provideTheme(props = {
                }) {
                    const vm = vue__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance();
                    const theme = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyThemeSymbol, null);
                    if (!vm) _util_console__WEBPACK_IMPORTED_MODULE_3__.consoleError('provideTheme must be called from inside a setup function');
                    if (!theme) throw new Error('Could not find Vuetify theme injection');
                    const internal = vue__WEBPACK_IMPORTED_MODULE_0__.ref(null);
                    const current = vue__WEBPACK_IMPORTED_MODULE_0__.computed({
                        get: ()=>{
                            var _ref, _internal$value;
                            return (_ref = (_internal$value = internal.value) != null ? _internal$value : props.theme) != null ? _ref : theme == null ? void 0 : theme.current.value;
                        },
                        set (value) {
                            if (theme && !props.theme && !props.newContext) theme.current.value = value;
                            else {
                                internal.value = value;
                                vm == null || vm.emit('update:theme', value);
                            }
                        }
                    });
                    const themeClasses = vue__WEBPACK_IMPORTED_MODULE_0__.computed(()=>theme.isDisabled ? '' : `v-theme--${current.value}`
                    );
                    const newTheme = {
                        ...theme,
                        current,
                        themeClasses
                    };
                    vue__WEBPACK_IMPORTED_MODULE_0__.provide(VuetifyThemeSymbol, newTheme);
                    return newTheme;
                }
                /**
 * Injects and returns closest available provided theme instance.
 */ function useTheme() {
                    const theme = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifyThemeSymbol);
                    if (!theme) throw new Error('Could not find Vuetify theme injection');
                    return theme;
                }
            /***/ },
            /***/ "./src/composables/transition.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeTransitionProps": ()=>/* binding */ makeTransitionProps
                    ,
                    /* harmony export */ "MaybeTransition": ()=>/* binding */ MaybeTransition
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/util/propsFactory.ts");
                // Utilities
                // Types
                const makeTransitionProps = _util__WEBPACK_IMPORTED_MODULE_1__.propsFactory({
                    transition: {
                        type: [
                            Boolean,
                            String,
                            Object
                        ],
                        default: 'fade-transition',
                        validator: (val)=>val !== true
                    }
                }, 'transition');
                const MaybeTransition = (props, { slots  })=>{
                    var _slots$default;
                    const { transition , ...rest } = props;
                    if (!transition || typeof transition === 'boolean') return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
                    const { component =vue__WEBPACK_IMPORTED_MODULE_0__.Transition , ...customProps } = typeof transition === 'object' ? transition : {
                    };
                    return vue__WEBPACK_IMPORTED_MODULE_0__.h(component, vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps(typeof transition === 'string' ? {
                        name: transition
                    } : customProps, rest), slots);
                };
            /***/ },
            /***/ "./src/directives/click-outside/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "ClickOutside": ()=>/* binding */ ClickOutside
                });
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/dom.ts");
                function defaultConditional() {
                    return true;
                }
                function checkEvent(e, el, binding) {
                    // The include element callbacks below can be expensive
                    // so we should avoid calling them when we're not active.
                    // Explicitly check for false to allow fallback compatibility
                    // with non-toggleable components
                    if (!e || checkIsActive(e, binding) === false) return false; // If we're clicking inside the shadowroot, then the app root doesn't get the same
                    // level of introspection as to _what_ we're clicking. We want to check to see if
                    // our target is the shadowroot parent container, and if it is, ignore.
                    const root = _util__WEBPACK_IMPORTED_MODULE_0__.attachedRoot(el);
                    if (root instanceof ShadowRoot && root.host === e.target) return false; // Check if additional elements were passed to be included in check
                    // (click must be outside all included elements, if any)
                    const elements = (typeof binding.value === 'object' && binding.value.include || (()=>[]
                    ))(); // Add the root element for the component this directive was defined on
                    elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.
                    // Non-toggleable components should take action in their callback and return falsy.
                    // Toggleable can return true if it wants to deactivate.
                    // Note that, because we're in the capture phase, this callback will occur before
                    // the bubbling click event on any outside elements.
                    return !elements.some((el1)=>el1.contains(e.target)
                    );
                }
                function checkIsActive(e, binding) {
                    const isActive = typeof binding.value === 'object' && binding.value.closeConditional || defaultConditional;
                    return isActive(e);
                }
                function directive(e, el, binding) {
                    const handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;
                    el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(()=>{
                        checkIsActive(e, binding) && handler && handler(e);
                    }, 0);
                }
                function handleShadow(el, callback) {
                    const root = _util__WEBPACK_IMPORTED_MODULE_0__.attachedRoot(el);
                    callback(document.body);
                    if (root instanceof ShadowRoot) callback(root);
                }
                const ClickOutside = {
                    // [data-app] may not be found
                    // if using bind, inserted makes
                    // sure that the root element is
                    // available, iOS does not support
                    // clicks on body
                    mounted (el, binding) {
                        const onClick = (e)=>directive(e, el, binding)
                        ;
                        const onMousedown = (e)=>{
                            el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);
                        };
                        handleShadow(el, (app)=>{
                            app.addEventListener('click', onClick, true);
                            app.addEventListener('mousedown', onMousedown, true);
                        });
                        el._clickOutside = {
                            lastMousedownWasOutside: true,
                            onClick,
                            onMousedown
                        };
                    },
                    unmounted (el) {
                        if (!el._clickOutside) return;
                        handleShadow(el, (app)=>{
                            if (!app || !el._clickOutside) return;
                            app.removeEventListener('click', el._clickOutside.onClick, true);
                            app.removeEventListener('mousedown', el._clickOutside.onMousedown, true);
                        });
                        delete el._clickOutside;
                    }
                };
                /* harmony default export */ __webpack_exports__["default"] = ClickOutside;
            /***/ },
            /***/ "./src/directives/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "ClickOutside": ()=>/* reexport safe */ _click_outside__WEBPACK_IMPORTED_MODULE_0__.ClickOutside
                    ,
                    /* harmony export */ "Intersect": ()=>/* reexport safe */ _intersect__WEBPACK_IMPORTED_MODULE_1__.Intersect
                    ,
                    /* harmony export */ "Resize": ()=>/* reexport safe */ _resize__WEBPACK_IMPORTED_MODULE_2__.Resize
                    ,
                    /* harmony export */ "Ripple": ()=>/* reexport safe */ _ripple__WEBPACK_IMPORTED_MODULE_3__.Ripple
                    ,
                    /* harmony export */ "Scroll": ()=>/* reexport safe */ _scroll__WEBPACK_IMPORTED_MODULE_4__.Scroll
                    ,
                    /* harmony export */ "Touch": ()=>/* reexport safe */ _touch__WEBPACK_IMPORTED_MODULE_5__.Touch
                });
                /* harmony import */ var _click_outside__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./click-outside */ "./src/directives/click-outside/index.ts");
                /* harmony import */ var _intersect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersect */ "./src/directives/intersect/index.ts");
                /* harmony import */ var _resize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resize */ "./src/directives/resize/index.ts");
                /* harmony import */ var _ripple__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ripple */ "./src/directives/ripple/index.ts");
                /* harmony import */ var _scroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scroll */ "./src/directives/scroll/index.ts");
                /* harmony import */ var _touch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./touch */ "./src/directives/touch/index.ts");
            // export { Color } from './color'
            // export { Mutate } from './mutate'
            /***/ },
            /***/ "./src/directives/intersect/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "Intersect": ()=>/* binding */ Intersect
                });
                // Types
                function mounted(el, binding) {
                    const modifiers = binding.modifiers || {
                    };
                    const value = binding.value;
                    const { handler , options  } = typeof value === 'object' ? value : {
                        handler: value,
                        options: {
                        }
                    };
                    const observer = new IntersectionObserver((entries = [], observer1)=>{
                        /* istanbul ignore if */ if (!el._observe) return; // Just in case, should never fire
                        // If is not quiet or has already been
                        // initted, invoke the user callback
                        if (handler && (!modifiers.quiet || el._observe.init)) {
                            const isIntersecting = Boolean(entries.find((entry)=>entry.isIntersecting
                            ));
                            handler(isIntersecting, entries, observer1);
                        } // If has already been initted and
                        // has the once modifier, unbind
                        if (el._observe.init && modifiers.once) unmounted(el); // Otherwise, mark the observer as initted
                        else el._observe.init = true;
                    }, options);
                    el._observe = {
                        init: false,
                        observer
                    };
                    observer.observe(el);
                }
                function unmounted(el) {
                    /* istanbul ignore if */ if (!el._observe) return;
                    el._observe.observer.unobserve(el);
                    delete el._observe;
                }
                const Intersect = {
                    mounted,
                    unmounted
                };
                /* harmony default export */ __webpack_exports__["default"] = Intersect;
            /***/ },
            /***/ "./src/directives/resize/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "Resize": ()=>/* binding */ Resize
                });
                function mounted(el, binding) {
                    var _binding$modifiers, _binding$modifiers2;
                    const handler = binding.value;
                    const options = {
                        passive: !((_binding$modifiers = binding.modifiers) != null && _binding$modifiers.active)
                    };
                    window.addEventListener('resize', handler, options);
                    el._onResize = {
                        handler,
                        options
                    };
                    if (!((_binding$modifiers2 = binding.modifiers) != null && _binding$modifiers2.quiet)) handler();
                }
                function unmounted(el) {
                    if (!el._onResize) return;
                    const { handler , options  } = el._onResize;
                    window.removeEventListener('resize', handler, options);
                    delete el._onResize;
                }
                const Resize = {
                    mounted,
                    unmounted
                };
                /* harmony default export */ __webpack_exports__["default"] = Resize;
            /***/ },
            /***/ "./src/directives/ripple/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "Ripple": ()=>/* binding */ Ripple
                });
                /* harmony import */ var _VRipple_sass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VRipple.sass */ "./src/directives/ripple/VRipple.sass");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/util/helpers.ts");
                // Styles
                // Utilities
                // Types
                const rippleStop = Symbol('rippleStop');
                const DELAY_RIPPLE = 80;
                function transform(el, value) {
                    el.style.transform = value;
                    el.style.webkitTransform = value;
                }
                function opacity(el, value) {
                    el.style.opacity = `calc(${value} * var(--v-theme-overlay-multiplier))`;
                }
                function isTouchEvent(e) {
                    return e.constructor.name === 'TouchEvent';
                }
                function isKeyboardEvent(e) {
                    return e.constructor.name === 'KeyboardEvent';
                }
                const calculate = (e, el, value = {
                })=>{
                    var _el$_ripple;
                    let localX = 0;
                    let localY = 0;
                    if (!isKeyboardEvent(e)) {
                        const offset = el.getBoundingClientRect();
                        const target = isTouchEvent(e) ? e.touches[e.touches.length - 1] : e;
                        localX = target.clientX - offset.left;
                        localY = target.clientY - offset.top;
                    }
                    let radius = 0;
                    let scale = 0.3;
                    if ((_el$_ripple = el._ripple) != null && _el$_ripple.circle) {
                        scale = 0.15;
                        radius = el.clientWidth / 2;
                        radius = value.center ? radius : radius + Math.sqrt((localX - radius) ** 2 + (localY - radius) ** 2) / 4;
                    } else radius = Math.sqrt(el.clientWidth ** 2 + el.clientHeight ** 2) / 2;
                    const centerX = `${(el.clientWidth - radius * 2) / 2}px`;
                    const centerY = `${(el.clientHeight - radius * 2) / 2}px`;
                    const x = value.center ? centerX : `${localX - radius}px`;
                    const y = value.center ? centerY : `${localY - radius}px`;
                    return {
                        radius,
                        scale,
                        x,
                        y,
                        centerX,
                        centerY
                    };
                };
                const ripples = {
                    /* eslint-disable max-statements */ show (e, el, value = {
                    }) {
                        var _el$_ripple2;
                        if (!(el != null && (_el$_ripple2 = el._ripple) != null && _el$_ripple2.enabled)) return;
                        const container = document.createElement('span');
                        const animation = document.createElement('span');
                        container.appendChild(animation);
                        container.className = 'v-ripple__container';
                        if (value.class) container.className += ` ${value.class}`;
                        const { radius , scale , x , y , centerX , centerY  } = calculate(e, el, value);
                        const size = `${radius * 2}px`;
                        animation.className = 'v-ripple__animation';
                        animation.style.width = size;
                        animation.style.height = size;
                        el.appendChild(container);
                        const computed = window.getComputedStyle(el);
                        if (computed && computed.position === 'static') {
                            el.style.position = 'relative';
                            el.dataset.previousPosition = 'static';
                        }
                        animation.classList.add('v-ripple__animation--enter');
                        animation.classList.add('v-ripple__animation--visible');
                        transform(animation, `translate(${x}, ${y}) scale3d(${scale},${scale},${scale})`);
                        opacity(animation, 0);
                        animation.dataset.activated = String(performance.now());
                        setTimeout(()=>{
                            animation.classList.remove('v-ripple__animation--enter');
                            animation.classList.add('v-ripple__animation--in');
                            transform(animation, `translate(${centerX}, ${centerY}) scale3d(1,1,1)`);
                            opacity(animation, 0.08);
                        }, 0);
                    },
                    hide (el) {
                        var _el$_ripple3;
                        if (!(el != null && (_el$_ripple3 = el._ripple) != null && _el$_ripple3.enabled)) return;
                        const ripples1 = el.getElementsByClassName('v-ripple__animation');
                        if (ripples1.length === 0) return;
                        const animation = ripples1[ripples1.length - 1];
                        if (animation.dataset.isHiding) return;
                        else animation.dataset.isHiding = 'true';
                        const diff = performance.now() - Number(animation.dataset.activated);
                        const delay = Math.max(250 - diff, 0);
                        setTimeout(()=>{
                            animation.classList.remove('v-ripple__animation--in');
                            animation.classList.add('v-ripple__animation--out');
                            opacity(animation, 0);
                            setTimeout(()=>{
                                const ripples2 = el.getElementsByClassName('v-ripple__animation');
                                if (ripples2.length === 1 && el.dataset.previousPosition) {
                                    el.style.position = el.dataset.previousPosition;
                                    delete el.dataset.previousPosition;
                                }
                                animation.parentNode && el.removeChild(animation.parentNode);
                            }, 300);
                        }, delay);
                    }
                };
                function isRippleEnabled(value) {
                    return typeof value === 'undefined' || !!value;
                }
                function rippleShow(e) {
                    const value = {
                    };
                    const element = e.currentTarget;
                    if (!(element != null && element._ripple) || element._ripple.touched || e[rippleStop]) return; // Don't allow the event to trigger ripples on any other elements
                    e[rippleStop] = true;
                    if (isTouchEvent(e)) {
                        element._ripple.touched = true;
                        element._ripple.isTouch = true;
                    } else {
                        // It's possible for touch events to fire
                        // as mouse events on Android/iOS, this
                        // will skip the event call if it has
                        // already been registered as touch
                        if (element._ripple.isTouch) return;
                    }
                    value.center = element._ripple.centered || isKeyboardEvent(e);
                    if (element._ripple.class) value.class = element._ripple.class;
                    if (isTouchEvent(e)) {
                        // already queued that shows or hides the ripple
                        if (element._ripple.showTimerCommit) return;
                        element._ripple.showTimerCommit = ()=>{
                            ripples.show(e, element, value);
                        };
                        element._ripple.showTimer = window.setTimeout(()=>{
                            var _element$_ripple;
                            if (element != null && (_element$_ripple = element._ripple) != null && _element$_ripple.showTimerCommit) {
                                element._ripple.showTimerCommit();
                                element._ripple.showTimerCommit = null;
                            }
                        }, DELAY_RIPPLE);
                    } else ripples.show(e, element, value);
                }
                function rippleHide(e) {
                    const element = e.currentTarget;
                    if (!element || !element._ripple) return;
                    window.clearTimeout(element._ripple.showTimer); // The touch interaction occurs before the show timer is triggered.
                    // We still want to show ripple effect.
                    if (e.type === 'touchend' && element._ripple.showTimerCommit) {
                        element._ripple.showTimerCommit();
                        element._ripple.showTimerCommit = null; // re-queue ripple hiding
                        element._ripple.showTimer = setTimeout(()=>{
                            rippleHide(e);
                        });
                        return;
                    }
                    window.setTimeout(()=>{
                        if (element._ripple) element._ripple.touched = false;
                    });
                    ripples.hide(element);
                }
                function rippleCancelShow(e) {
                    const element = e.currentTarget;
                    if (!element || !element._ripple) return;
                    if (element._ripple.showTimerCommit) element._ripple.showTimerCommit = null;
                    window.clearTimeout(element._ripple.showTimer);
                }
                let keyboardRipple = false;
                function keyboardRippleShow(e) {
                    if (!keyboardRipple && (e.keyCode === _util__WEBPACK_IMPORTED_MODULE_1__.keyCodes.enter || e.keyCode === _util__WEBPACK_IMPORTED_MODULE_1__.keyCodes.space)) {
                        keyboardRipple = true;
                        rippleShow(e);
                    }
                }
                function keyboardRippleHide(e) {
                    keyboardRipple = false;
                    rippleHide(e);
                }
                function focusRippleHide(e) {
                    if (keyboardRipple) {
                        keyboardRipple = false;
                        rippleHide(e);
                    }
                }
                function updateRipple(el, binding, wasEnabled) {
                    var _el$_ripple4;
                    const { value , modifiers  } = binding;
                    const enabled = isRippleEnabled(value);
                    if (!enabled) ripples.hide(el);
                    el._ripple = (_el$_ripple4 = el._ripple) != null ? _el$_ripple4 : {
                    };
                    el._ripple.enabled = enabled;
                    el._ripple.centered = modifiers.center;
                    el._ripple.circle = modifiers.circle;
                    if (_util__WEBPACK_IMPORTED_MODULE_1__.isObject(value) && value.class) el._ripple.class = value.class;
                    if (enabled && !wasEnabled) {
                        el.addEventListener('touchstart', rippleShow, {
                            passive: true
                        });
                        el.addEventListener('touchend', rippleHide, {
                            passive: true
                        });
                        el.addEventListener('touchmove', rippleCancelShow, {
                            passive: true
                        });
                        el.addEventListener('touchcancel', rippleHide);
                        el.addEventListener('mousedown', rippleShow);
                        el.addEventListener('mouseup', rippleHide);
                        el.addEventListener('mouseleave', rippleHide);
                        el.addEventListener('keydown', keyboardRippleShow);
                        el.addEventListener('keyup', keyboardRippleHide);
                        el.addEventListener('blur', focusRippleHide); // Anchor tags can be dragged, causes other hides to fail - #1537
                        el.addEventListener('dragstart', rippleHide, {
                            passive: true
                        });
                    } else if (!enabled && wasEnabled) removeListeners(el);
                }
                function removeListeners(el) {
                    el.removeEventListener('mousedown', rippleShow);
                    el.removeEventListener('touchstart', rippleShow);
                    el.removeEventListener('touchend', rippleHide);
                    el.removeEventListener('touchmove', rippleCancelShow);
                    el.removeEventListener('touchcancel', rippleHide);
                    el.removeEventListener('mouseup', rippleHide);
                    el.removeEventListener('mouseleave', rippleHide);
                    el.removeEventListener('keydown', keyboardRippleShow);
                    el.removeEventListener('keyup', keyboardRippleHide);
                    el.removeEventListener('dragstart', rippleHide);
                    el.removeEventListener('blur', focusRippleHide);
                }
                function mounted(el, binding) {
                    updateRipple(el, binding, false);
                }
                function unmounted(el) {
                    delete el._ripple;
                    removeListeners(el);
                }
                function updated(el, binding) {
                    if (binding.value === binding.oldValue) return;
                    const wasEnabled = isRippleEnabled(binding.oldValue);
                    updateRipple(el, binding, wasEnabled);
                }
                const Ripple = {
                    mounted,
                    unmounted,
                    updated
                };
                /* harmony default export */ __webpack_exports__["default"] = Ripple;
            /***/ },
            /***/ "./src/directives/scroll/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "Scroll": ()=>/* binding */ Scroll
                });
                function mounted(el, binding) {
                    var _binding$modifiers;
                    const { self =false  } = (_binding$modifiers = binding.modifiers) != null ? _binding$modifiers : {
                    };
                    const value = binding.value;
                    const options = typeof value === 'object' && value.options || {
                        passive: true
                    };
                    const handler = typeof value === 'function' || 'handleEvent' in value ? value : value.handler;
                    const target = self ? el : binding.arg ? document.querySelector(binding.arg) : window;
                    if (!target) return;
                    target.addEventListener('scroll', handler, options);
                    el._onScroll = {
                        handler,
                        options,
                        // Don't reference self
                        target: self ? undefined : target
                    };
                }
                function unmounted(el) {
                    if (!el._onScroll) return;
                    const { handler , options , target =el  } = el._onScroll;
                    target.removeEventListener('scroll', handler, options);
                    delete el._onScroll;
                }
                function updated(el, binding) {
                    if (binding.value === binding.oldValue) return;
                    unmounted(el);
                    mounted(el, binding);
                }
                const Scroll = {
                    mounted,
                    unmounted,
                    updated
                };
                /* harmony default export */ __webpack_exports__["default"] = Scroll;
            /***/ },
            /***/ "./src/directives/touch/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "Touch": ()=>/* binding */ Touch1
                });
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./src/util/helpers.ts");
                // Types
                // Utilities
                const handleGesture = (wrapper)=>{
                    const { touchstartX , touchendX , touchstartY , touchendY  } = wrapper;
                    const dirRatio = 0.5;
                    const minDistance = 16;
                    wrapper.offsetX = touchendX - touchstartX;
                    wrapper.offsetY = touchendY - touchstartY;
                    if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {
                        wrapper.left && touchendX < touchstartX - minDistance && wrapper.left(wrapper);
                        wrapper.right && touchendX > touchstartX + minDistance && wrapper.right(wrapper);
                    }
                    if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {
                        wrapper.up && touchendY < touchstartY - minDistance && wrapper.up(wrapper);
                        wrapper.down && touchendY > touchstartY + minDistance && wrapper.down(wrapper);
                    }
                };
                function touchstart(event, wrapper) {
                    var _wrapper$start;
                    const touch = event.changedTouches[0];
                    wrapper.touchstartX = touch.clientX;
                    wrapper.touchstartY = touch.clientY;
                    (_wrapper$start = wrapper.start) == null || _wrapper$start.call(wrapper, {
                        ...event,
                        ...wrapper
                    });
                }
                function touchend(event, wrapper) {
                    var _wrapper$end;
                    const touch = event.changedTouches[0];
                    wrapper.touchendX = touch.clientX;
                    wrapper.touchendY = touch.clientY;
                    (_wrapper$end = wrapper.end) == null || _wrapper$end.call(wrapper, {
                        ...event,
                        ...wrapper
                    });
                    handleGesture(wrapper);
                }
                function touchmove(event, wrapper) {
                    var _wrapper$move;
                    const touch = event.changedTouches[0];
                    wrapper.touchmoveX = touch.clientX;
                    wrapper.touchmoveY = touch.clientY;
                    (_wrapper$move = wrapper.move) == null || _wrapper$move.call(wrapper, {
                        ...event,
                        ...wrapper
                    });
                }
                function createHandlers(value = {
                }) {
                    const wrapper = {
                        touchstartX: 0,
                        touchstartY: 0,
                        touchendX: 0,
                        touchendY: 0,
                        touchmoveX: 0,
                        touchmoveY: 0,
                        offsetX: 0,
                        offsetY: 0,
                        left: value.left,
                        right: value.right,
                        up: value.up,
                        down: value.down,
                        start: value.start,
                        move: value.move,
                        end: value.end
                    };
                    return {
                        touchstart: (e)=>touchstart(e, wrapper)
                        ,
                        touchend: (e)=>touchend(e, wrapper)
                        ,
                        touchmove: (e)=>touchmove(e, wrapper)
                    };
                }
                function mounted(el, binding) {
                    var _value$options, _binding$instance, _target$_touchHandler;
                    const value = binding.value;
                    const target = value != null && value.parent ? el.parentElement : el;
                    const options = (_value$options = value == null ? void 0 : value.options) != null ? _value$options : {
                        passive: true
                    };
                    const uid = (_binding$instance = binding.instance) == null ? void 0 : _binding$instance.$.uid; // TODO: use custom uid generator
                    if (!target || !uid) return;
                    const handlers = createHandlers(binding.value);
                    target._touchHandlers = (_target$_touchHandler = target._touchHandlers) != null ? _target$_touchHandler : Object.create(null);
                    target._touchHandlers[uid] = handlers;
                    _util__WEBPACK_IMPORTED_MODULE_0__.keys(handlers).forEach((eventName)=>{
                        target.addEventListener(eventName, handlers[eventName], options);
                    });
                }
                function unmounted(el, binding) {
                    var _binding$value, _binding$instance2;
                    const target = (_binding$value = binding.value) != null && _binding$value.parent ? el.parentElement : el;
                    const uid = (_binding$instance2 = binding.instance) == null ? void 0 : _binding$instance2.$.uid;
                    if (!(target != null && target._touchHandlers) || !uid) return;
                    const handlers = target._touchHandlers[uid];
                    _util__WEBPACK_IMPORTED_MODULE_0__.keys(handlers).forEach((eventName)=>{
                        target.removeEventListener(eventName, handlers[eventName]);
                    });
                    delete target._touchHandlers[uid];
                }
                const Touch1 = {
                    mounted,
                    unmounted
                };
                /* harmony default export */ __webpack_exports__["default"] = Touch1;
            /***/ },
            /***/ "./src/entry-bundler.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VApp": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VApp
                    ,
                    /* harmony export */ "VAppBar": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VAppBar
                    ,
                    /* harmony export */ "VAppBarNavIcon": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VAppBarNavIcon
                    ,
                    /* harmony export */ "VAppBarTitle": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VAppBarTitle
                    ,
                    /* harmony export */ "VAvatar": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VAvatar
                    ,
                    /* harmony export */ "VBadge": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VBadge
                    ,
                    /* harmony export */ "VBanner": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VBanner
                    ,
                    /* harmony export */ "VBottomNavigation": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VBottomNavigation
                    ,
                    /* harmony export */ "VBtn": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VBtn
                    ,
                    /* harmony export */ "VCard": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCard
                    ,
                    /* harmony export */ "VCardActions": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardActions
                    ,
                    /* harmony export */ "VCardAvatar": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardAvatar
                    ,
                    /* harmony export */ "VCardHeader": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardHeader
                    ,
                    /* harmony export */ "VCardHeaderText": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardHeaderText
                    ,
                    /* harmony export */ "VCardImg": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardImg
                    ,
                    /* harmony export */ "VCardItem": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardItem
                    ,
                    /* harmony export */ "VCardMedia": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardMedia
                    ,
                    /* harmony export */ "VCardSubtitle": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardSubtitle
                    ,
                    /* harmony export */ "VCardText": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardText
                    ,
                    /* harmony export */ "VCardTitle": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCardTitle
                    ,
                    /* harmony export */ "VCarouselReverseTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCarouselReverseTransition
                    ,
                    /* harmony export */ "VCarouselTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCarouselTransition
                    ,
                    /* harmony export */ "VClassIcon": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VClassIcon
                    ,
                    /* harmony export */ "VCode": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCode
                    ,
                    /* harmony export */ "VCol": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VCol
                    ,
                    /* harmony export */ "VComponentIcon": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VComponentIcon
                    ,
                    /* harmony export */ "VContainer": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VContainer
                    ,
                    /* harmony export */ "VDialog": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VDialog
                    ,
                    /* harmony export */ "VDialogBottomTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VDialogBottomTransition
                    ,
                    /* harmony export */ "VDialogTopTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VDialogTopTransition
                    ,
                    /* harmony export */ "VDialogTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VDialogTransition
                    ,
                    /* harmony export */ "VDivider": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VDivider
                    ,
                    /* harmony export */ "VExpandTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VExpandTransition
                    ,
                    /* harmony export */ "VExpandXTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VExpandXTransition
                    ,
                    /* harmony export */ "VFabTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VFabTransition
                    ,
                    /* harmony export */ "VFadeTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VFadeTransition
                    ,
                    /* harmony export */ "VFooter": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VFooter
                    ,
                    /* harmony export */ "VIcon": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VIcon
                    ,
                    /* harmony export */ "VImg": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VImg
                    ,
                    /* harmony export */ "VItem": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VItem
                    ,
                    /* harmony export */ "VItemGroup": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VItemGroup
                    ,
                    /* harmony export */ "VKbd": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VKbd
                    ,
                    /* harmony export */ "VLayout": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VLayout
                    ,
                    /* harmony export */ "VLayoutItem": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VLayoutItem
                    ,
                    /* harmony export */ "VLazy": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VLazy
                    ,
                    /* harmony export */ "VLigatureIcon": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VLigatureIcon
                    ,
                    /* harmony export */ "VLocaleProvider": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VLocaleProvider
                    ,
                    /* harmony export */ "VMain": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VMain
                    ,
                    /* harmony export */ "VMenuTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VMenuTransition
                    ,
                    /* harmony export */ "VNavigationDrawer": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VNavigationDrawer
                    ,
                    /* harmony export */ "VOverlay": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VOverlay
                    ,
                    /* harmony export */ "VResponsive": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VResponsive
                    ,
                    /* harmony export */ "VRow": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VRow
                    ,
                    /* harmony export */ "VScaleTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VScaleTransition
                    ,
                    /* harmony export */ "VScrollXReverseTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VScrollXReverseTransition
                    ,
                    /* harmony export */ "VScrollXTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VScrollXTransition
                    ,
                    /* harmony export */ "VScrollYReverseTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VScrollYReverseTransition
                    ,
                    /* harmony export */ "VScrollYTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VScrollYTransition
                    ,
                    /* harmony export */ "VSheet": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VSheet
                    ,
                    /* harmony export */ "VSlideXReverseTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VSlideXReverseTransition
                    ,
                    /* harmony export */ "VSlideXTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VSlideXTransition
                    ,
                    /* harmony export */ "VSlideYReverseTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VSlideYReverseTransition
                    ,
                    /* harmony export */ "VSlideYTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VSlideYTransition
                    ,
                    /* harmony export */ "VSpacer": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VSpacer
                    ,
                    /* harmony export */ "VSvgIcon": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VSvgIcon
                    ,
                    /* harmony export */ "VSystemBar": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VSystemBar
                    ,
                    /* harmony export */ "VTabReverseTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VTabReverseTransition
                    ,
                    /* harmony export */ "VTabTransition": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VTabTransition
                    ,
                    /* harmony export */ "VThemeProvider": ()=>/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.VThemeProvider
                    ,
                    /* harmony export */ "VuetifySymbol": ()=>/* reexport safe */ _framework__WEBPACK_IMPORTED_MODULE_2__.VuetifySymbol
                    ,
                    /* harmony export */ "useVuetify": ()=>/* reexport safe */ _framework__WEBPACK_IMPORTED_MODULE_2__.useVuetify
                    ,
                    /* harmony export */ "createVuetify": ()=>/* binding */ createVuetify
                });
                /* harmony import */ var _styles_main_sass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/main.sass */ "./src/styles/main.sass");
                /* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components */ "./src/components/index.ts");
                /* harmony import */ var _directives__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./directives */ "./src/directives/index.ts");
                /* harmony import */ var _framework__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./framework */ "./src/framework.ts");
                const createVuetify = (options = {
                })=>{
                    return _framework__WEBPACK_IMPORTED_MODULE_2__.createVuetify({
                        components: _components__WEBPACK_IMPORTED_MODULE_1__,
                        directives: _directives__WEBPACK_IMPORTED_MODULE_3__,
                        ...options
                    });
                };
            /***/ },
            /***/ "./src/framework.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VuetifySymbol": ()=>/* binding */ VuetifySymbol
                    ,
                    /* harmony export */ "useVuetify": ()=>/* binding */ useVuetify
                    ,
                    /* harmony export */ "createVuetify": ()=>/* binding */ createVuetify
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _composables_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./composables/display */ "./src/composables/display.ts");
                /* harmony import */ var _composables_theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./composables/theme */ "./src/composables/theme.ts");
                /* harmony import */ var _composables_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./composables/icons */ "./src/composables/icons.tsx");
                /* harmony import */ var _composables_locale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./composables/locale */ "./src/composables/locale.ts");
                /* harmony import */ var _composables_rtl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./composables/rtl */ "./src/composables/rtl.ts");
                /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "./src/util/helpers.ts");
                /* harmony import */ var _iconsets_mdi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./iconsets/mdi */ "./src/iconsets/mdi.ts");
                // Types
                const VuetifySymbol = Symbol.for('vuetify');
                const useVuetify = ()=>{
                    const vuetify = vue__WEBPACK_IMPORTED_MODULE_0__.inject(VuetifySymbol);
                    if (!vuetify) throw new Error('Vuetify has not been installed on this app');
                    return vuetify;
                };
                const createVuetify = (options = {
                })=>{
                    const install = (app)=>{
                        const { components ={
                        } , directives ={
                        } , defaults ={
                        } , icons ={
                        }  } = options;
                        for(const key in directives){
                            const directive = directives[key];
                            app.directive(key, directive);
                        }
                        for(const key1 in components){
                            const component = components[key1];
                            app.component(key1, component);
                        }
                        const vuetify = {
                            defaults: {
                                global: {
                                },
                                ...defaults
                            }
                        };
                        app.provide(VuetifySymbol, vuetify);
                        app.provide(_composables_display__WEBPACK_IMPORTED_MODULE_1__.VuetifyDisplaySymbol, _composables_display__WEBPACK_IMPORTED_MODULE_1__.createDisplay(options.display));
                        app.provide(_composables_theme__WEBPACK_IMPORTED_MODULE_2__.VuetifyThemeSymbol, _composables_theme__WEBPACK_IMPORTED_MODULE_2__.createTheme(options.theme));
                        app.provide(_composables_icons__WEBPACK_IMPORTED_MODULE_3__.VuetifyIconSymbol, _util__WEBPACK_IMPORTED_MODULE_4__.mergeDeep({
                            defaultSet: 'mdi',
                            sets: {
                                ..._composables_icons__WEBPACK_IMPORTED_MODULE_3__.defaultSets,
                                mdi: _iconsets_mdi__WEBPACK_IMPORTED_MODULE_5__.mdi
                            },
                            aliases: _iconsets_mdi__WEBPACK_IMPORTED_MODULE_5__.aliases
                        }, icons));
                        const { adapter , rootInstance  } = _composables_locale__WEBPACK_IMPORTED_MODULE_6__.createLocaleAdapter(app, options == null ? void 0 : options.locale);
                        app.provide(_composables_locale__WEBPACK_IMPORTED_MODULE_6__.VuetifyLocaleAdapterSymbol, adapter);
                        app.provide(_composables_rtl__WEBPACK_IMPORTED_MODULE_7__.VuetifyRtlSymbol, _composables_rtl__WEBPACK_IMPORTED_MODULE_7__.createRtl(rootInstance, options == null ? void 0 : options.locale));
                        app.config.globalProperties.$vuetify = vuetify;
                    };
                    return {
                        install
                    };
                };
            /***/ },
            /***/ "./src/iconsets/mdi.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "aliases": ()=>/* binding */ aliases
                    ,
                    /* harmony export */ "mdi": ()=>/* binding */ mdi
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _composables_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../composables/icons */ "./src/composables/icons.tsx");
                // Utilities
                // Components
                // Types
                const aliases = {
                    complete: 'mdi-check',
                    cancel: 'mdi-close-circle',
                    close: 'mdi-close',
                    delete: 'mdi-close-circle',
                    // delete (e.g. v-chip close)
                    clear: 'mdi-close',
                    success: 'mdi-check-circle',
                    info: 'mdi-information',
                    warning: 'mdi-exclamation',
                    error: 'mdi-alert',
                    prev: 'mdi-chevron-left',
                    next: 'mdi-chevron-right',
                    checkboxOn: 'mdi-checkbox-marked',
                    checkboxOff: 'mdi-checkbox-blank-outline',
                    checkboxIndeterminate: 'mdi-minus-box',
                    delimiter: 'mdi-circle',
                    // for carousel
                    sort: 'mdi-arrow-up',
                    expand: 'mdi-chevron-down',
                    menu: 'mdi-menu',
                    subgroup: 'mdi-menu-down',
                    dropdown: 'mdi-menu-down',
                    radioOn: 'mdi-radiobox-marked',
                    radioOff: 'mdi-radiobox-blank',
                    edit: 'mdi-pencil',
                    ratingEmpty: 'mdi-star-outline',
                    ratingFull: 'mdi-star',
                    ratingHalf: 'mdi-star-half-full',
                    loading: 'mdi-cached',
                    first: 'mdi-page-first',
                    last: 'mdi-page-last',
                    unfold: 'mdi-unfold-more-horizontal',
                    file: 'mdi-paperclip',
                    plus: 'mdi-plus',
                    minus: 'mdi-minus'
                };
                const mdi = {
                    // Not using mergeProps here, functional components merge props by default (?)
                    component: (props)=>vue__WEBPACK_IMPORTED_MODULE_0__.h(_composables_icons__WEBPACK_IMPORTED_MODULE_1__.VClassIcon, {
                            ...props,
                            class: 'mdi'
                        })
                };
            /***/ },
            /***/ "./src/locale/af.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'badge',
                    close: 'Close',
                    dataIterator: {
                        noResultsText: 'Geen ooreenstemmende resultate is gevind nie',
                        loadingText: 'Loading item...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Rye per bladsy:',
                        ariaLabel: {
                            sortDescending: 'Sorted descending.',
                            sortAscending: 'Sorted ascending..',
                            sortNone: 'Not sorted.',
                            activateNone: 'Activate to remove sorting.',
                            activateDescending: 'Activate to sort descending.',
                            activateAscending: 'Activate to sort ascending.'
                        },
                        sortBy: 'Sort by'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Aantal per bladsy:',
                        itemsPerPageAll: 'Alles',
                        nextPage: 'Volgende bladsy',
                        prevPage: 'Vorige bladsy',
                        firstPage: 'Eerste bladsy',
                        lastPage: 'Laaste bladsy',
                        pageText: '{0}-{1} van {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} gekies',
                        nextMonthAriaLabel: 'Volgende maand',
                        nextYearAriaLabel: 'Volgende jaar',
                        prevMonthAriaLabel: 'Vorige maand',
                        prevYearAriaLabel: 'Vorige jaar'
                    },
                    noDataText: 'Geen data is beskikbaar nie',
                    carousel: {
                        prev: 'Vorige visuele',
                        next: 'Volgende visuele',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} meer'
                    },
                    fileInput: {
                        counter: '{0} files',
                        counterSize: '{0} files ({1} in total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Paginasie-navigasie',
                            next: 'Volgende bladsy',
                            previous: 'Vorige bladsy',
                            page: 'Gaan na bladsy {0}',
                            currentPage: 'Huidige bladsy, Bladsy {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/ar.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'شارة',
                    close: 'إغلاق',
                    dataIterator: {
                        noResultsText: 'لا توجد سجلات مطابقة',
                        loadingText: 'تحميل العنصر...'
                    },
                    dataTable: {
                        itemsPerPageText: 'الصفوف لكل صفحة:',
                        ariaLabel: {
                            sortDescending: 'مفروز تنازلي. تنشيط لإزالة الفرز.',
                            sortAscending: 'مفروز تصاعدي. تنشيط للفرز التنازلي.',
                            sortNone: 'غير مفروزة. تفعيل لفرز تصاعدي.',
                            activateNone: 'Activate to remove sorting.',
                            activateDescending: 'Activate to sort descending.',
                            activateAscending: 'Activate to sort ascending.'
                        },
                        sortBy: 'مفروزة حسب'
                    },
                    dataFooter: {
                        itemsPerPageText: 'العناصر لكل صفحة:',
                        itemsPerPageAll: 'الكل',
                        nextPage: 'الصفحة التالية',
                        prevPage: 'الصفحة السابقة',
                        firstPage: 'الصفحة الأولى',
                        lastPage: 'الصفحة الأخيرة',
                        pageText: '{0}-{1} من {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} مختارة',
                        nextMonthAriaLabel: 'الشهر القادم',
                        nextYearAriaLabel: 'العام القادم',
                        prevMonthAriaLabel: 'الشهر الماضى',
                        prevYearAriaLabel: 'السنة الماضية'
                    },
                    noDataText: 'لا توجد بيانات متاحة',
                    carousel: {
                        prev: 'البصري السابق',
                        next: 'البصري التالي',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} أكثر'
                    },
                    fileInput: {
                        counter: '{0} ملفات',
                        counterSize: '{0} ملفات ({1} في المجموع)'
                    },
                    timePicker: {
                        am: 'صباحاً',
                        pm: 'مساءً'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'ترقيم الصفحات الملاحة',
                            next: 'الصفحة التالية',
                            previous: 'الصفحة السابقة',
                            page: '{0} انتقل إلى صفحة',
                            currentPage: '{0} الصفحة الحالية ، الصفحة'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/az.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'nişan',
                    close: 'Bağla',
                    dataIterator: {
                        noResultsText: 'Uyğun məlumat tapılmadı',
                        loadingText: 'Yüklənir... Zəhmət olmasa, gözləyin.'
                    },
                    dataTable: {
                        itemsPerPageText: 'Səhifə başı sətir sayı:',
                        ariaLabel: {
                            sortDescending: 'Azalan sıra ilə düzülmüş.',
                            sortAscending: 'Artan sıra ilə düzülmüş.',
                            sortNone: 'Sıralanmamışdır. ',
                            activateNone: 'Sıralamanı yığışdır.',
                            activateDescending: 'Azalan sıra ilə düz.',
                            activateAscending: 'Artan sıra ilə düz.'
                        },
                        sortBy: 'Sırala'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Səhifə başı sətir sayı:',
                        itemsPerPageAll: 'Hamısı',
                        nextPage: 'Növbəti səhifə',
                        prevPage: 'Əvvəlki səhifə',
                        firstPage: 'İlk səhifə',
                        lastPage: 'Son səhifə',
                        pageText: '{0} - {1} arası, Cəmi: {2} qeydiyyat'
                    },
                    datePicker: {
                        itemsSelected: '{0} element seçildi',
                        nextMonthAriaLabel: 'Növbəti ay',
                        nextYearAriaLabel: 'Növbəti yıl',
                        prevMonthAriaLabel: 'Keçən ay',
                        prevYearAriaLabel: 'Keçən yıl'
                    },
                    noDataText: 'Bu görüntüdə məlumat yoxdur.',
                    carousel: {
                        prev: 'Əvvəlki görüntü',
                        next: 'Növbəti görüntü',
                        ariaLabel: {
                            delimiter: 'Galereya səhifə {0} / {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} ədad daha'
                    },
                    fileInput: {
                        counter: '{0} fayl',
                        counterSize: '{0} fayl (cəmi {1})'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Səhifələmə Naviqasiyası',
                            next: 'Növbəti səhifə',
                            previous: 'Əvəvlki səhifə',
                            page: 'Səhifəyə get {0}',
                            currentPage: 'Cari səhifə, Səhifə {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/bg.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Значка',
                    close: 'Затвори',
                    dataIterator: {
                        noResultsText: 'Не са намерени записи',
                        loadingText: 'Зареждане на елементи...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Редове на страница:',
                        ariaLabel: {
                            sortDescending: 'Подреди в намаляващ ред.',
                            sortAscending: 'Подреди в нарастващ ред.',
                            sortNone: 'Без подредба.',
                            activateNone: 'Активирай за премахване на подредбата.',
                            activateDescending: 'Активирай за подредба в намаляващ ред.',
                            activateAscending: 'Активирай за подредба в нарастващ ред.'
                        },
                        sortBy: 'Сортирай по'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Елементи на страница:',
                        itemsPerPageAll: 'Всички',
                        nextPage: 'Следваща страница',
                        prevPage: 'Предишна страница',
                        firstPage: 'Първа страница',
                        lastPage: 'Последна страница',
                        pageText: '{0}-{1} от {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} избрани',
                        nextMonthAriaLabel: 'Следващ месец',
                        nextYearAriaLabel: 'Следващата година',
                        prevMonthAriaLabel: 'Предишен месец',
                        prevYearAriaLabel: 'Предишна година'
                    },
                    noDataText: 'Няма налични данни',
                    carousel: {
                        prev: 'Предишна визуализация',
                        next: 'Следваща визуализация',
                        ariaLabel: {
                            delimiter: 'Кадър {0} от {1} на въртележката'
                        }
                    },
                    calendar: {
                        moreEvents: 'Още {0}'
                    },
                    fileInput: {
                        counter: '{0} файла',
                        counterSize: '{0} файла ({1} общо)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Странициране',
                            next: 'Следваща страница',
                            previous: 'Предишна страница',
                            page: 'Отиди на страница {0}',
                            currentPage: 'Текуща страница, Страница {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/ca.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Insígnia',
                    close: 'Tancar',
                    dataIterator: {
                        noResultsText: 'Sense dades per mostrar',
                        loadingText: 'Carregant...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Files per pàgina:',
                        ariaLabel: {
                            sortDescending: 'Ordre descendent. Premi per treure la ordenació.',
                            sortAscending: 'Ordre ascendent. Premi per ordenar descendent.',
                            sortNone: 'Sense ordenar. Premi per ordenar ascendent.',
                            activateNone: 'Activate to remove sorting.',
                            activateDescending: 'Activate to sort descending.',
                            activateAscending: 'Activate to sort ascending.'
                        },
                        sortBy: 'Ordenat per'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Elements per pàgina:',
                        itemsPerPageAll: 'Tot',
                        nextPage: 'Pàgina següent',
                        prevPage: 'Pàgina anterior',
                        firstPage: 'Primera pàgina',
                        lastPage: 'Última pàgina',
                        pageText: '{0}-{1} de {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} seleccionats',
                        nextMonthAriaLabel: 'El mes que ve',
                        nextYearAriaLabel: `L'any que ve`,
                        prevMonthAriaLabel: 'Mes anterior',
                        prevYearAriaLabel: 'Any anterior'
                    },
                    noDataText: 'Sense dades',
                    carousel: {
                        prev: 'Visualització prèvia',
                        next: 'Visualització següent',
                        ariaLabel: {
                            delimiter: 'Diapositiva {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} més'
                    },
                    fileInput: {
                        counter: '{0} fitxers',
                        counterSize: '{0} fitxers ({1} en total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navegació de la pàgina',
                            next: 'Pàgina següent',
                            previous: 'Pàgina anterior',
                            page: 'Ves a la pàgina {0}',
                            currentPage: 'Pàgina actual, pàgina {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/ckb.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'باج',
                    close: 'داخستن',
                    dataIterator: {
                        noResultsText: 'هیچ تۆمارێکی هاوتا نەدۆزرایەوە',
                        loadingText: 'بارکردنی ئایتمەکان...'
                    },
                    dataTable: {
                        itemsPerPageText: 'ڕیزەکان بۆ هەر پەڕەیەک:',
                        ariaLabel: {
                            sortDescending: '.سەر بەرەو خوار ڕیزکراوە',
                            sortAscending: '.سەر بەرەو ژوور ڕیزکراوە',
                            sortNone: 'ڕیزنەکراوە.',
                            activateNone: 'چالاککردن بۆ لابردنی ڕیزکردن.',
                            activateDescending: 'چالاککردن بۆ ڕیزکردنی سەربەرەوخوار.',
                            activateAscending: 'چالاککردن بۆ ڕیزکردنی سەر بەرەو ژوور.'
                        },
                        sortBy: 'ڕیزکردن بەپێی'
                    },
                    dataFooter: {
                        itemsPerPageText: 'ئایتمەکان بۆ هەر پەڕەیەک:',
                        itemsPerPageAll: 'هەمووی',
                        nextPage: 'پەڕەی دواتر',
                        prevPage: 'پەڕەی پێشوو',
                        firstPage: 'پەڕەی یەکەم',
                        lastPage: 'پەڕەی کۆتایی',
                        pageText: '{0}-{1} لە {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} دەسنیشانکراوە',
                        nextMonthAriaLabel: 'مانگی داهاتوو',
                        nextYearAriaLabel: 'ساڵی داهاتوو',
                        prevMonthAriaLabel: 'مانگی پێشوو',
                        prevYearAriaLabel: 'ساڵی پێشوو'
                    },
                    noDataText: 'هیچ داتایەک بەردەست نیە',
                    carousel: {
                        prev: 'بینراوی پێشوو',
                        next: 'بینراوی داهاتوو',
                        ariaLabel: {
                            delimiter: 'سلایدی کارۆسێل {0} لە {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} زیاتر'
                    },
                    fileInput: {
                        counter: '{0} فایل',
                        counterSize: '{0} فایل ({1} لە کۆی گشتی)'
                    },
                    timePicker: {
                        am: 'پێش نیوەڕۆژ',
                        pm: 'دوای نیوەڕۆژ'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'ڕێنیشاندەری پەڕەگۆڕکێ',
                            next: 'پەڕەی دواتر',
                            previous: 'پەڕەی پێشوو',
                            page: 'بڕۆ بۆ پەڕەی {0}',
                            currentPage: 'پەڕەی ئێستا، پەڕە{0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/cs.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Odznak',
                    close: 'Zavřít',
                    dataIterator: {
                        noResultsText: 'Nenalezeny žádné záznamy',
                        loadingText: 'Načítám položky...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Řádků na stránku:',
                        ariaLabel: {
                            sortDescending: 'Řazeno sestupně.',
                            sortAscending: 'Řazeno vzestupně.',
                            sortNone: 'Neseřazeno.',
                            activateNone: 'Aktivováním vypnete řazení.',
                            activateDescending: 'Aktivováním se bude řadit sestupně.',
                            activateAscending: 'Aktivováním se bude řadit vzestupně.'
                        },
                        sortBy: 'Řadit dle'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Položek na stránku:',
                        itemsPerPageAll: 'Vše',
                        nextPage: 'Další strana',
                        prevPage: 'Předchozí strana',
                        firstPage: 'První strana',
                        lastPage: 'Poslední strana',
                        pageText: '{0}-{1} z {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} vybráno',
                        nextMonthAriaLabel: 'Příští měsíc',
                        nextYearAriaLabel: 'Příští rok',
                        prevMonthAriaLabel: 'Předchozí měsíc',
                        prevYearAriaLabel: 'Předchozí rok'
                    },
                    noDataText: 'Nejsou dostupná žádná data',
                    carousel: {
                        prev: 'Předchozí obrázek',
                        next: 'Další obrázek',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} dalších'
                    },
                    fileInput: {
                        counter: '{0} souborů',
                        counterSize: '{0} souborů ({1} celkem)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigace stránkování',
                            next: 'Další strana',
                            previous: 'Předchozí strana',
                            page: 'Přejít na stránku {0}',
                            currentPage: 'Aktuální stránka, stránka {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/de.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Abzeichen',
                    close: 'Schließen',
                    dataIterator: {
                        noResultsText: 'Keine Elemente gefunden',
                        loadingText: 'Lade Elemente...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Zeilen pro Seite:',
                        ariaLabel: {
                            sortDescending: 'Absteigend sortiert.',
                            sortAscending: 'Aufsteigend sortiert.',
                            sortNone: 'Nicht sortiert.',
                            activateNone: 'Aktivieren um Sortierung zu entfernen.',
                            activateDescending: 'Aktivieren um absteigend zu sortieren.',
                            activateAscending: 'Aktivieren um aufsteigend zu sortieren.'
                        },
                        sortBy: 'Sortiere nach'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Elemente pro Seite:',
                        itemsPerPageAll: 'Alle',
                        nextPage: 'Nächste Seite',
                        prevPage: 'Vorherige Seite',
                        firstPage: 'Erste Seite',
                        lastPage: 'Letzte Seite',
                        pageText: '{0}-{1} von {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} ausgewählt',
                        nextMonthAriaLabel: 'Nächsten Monat',
                        nextYearAriaLabel: 'Nächstes Jahr',
                        prevMonthAriaLabel: 'Vorheriger Monat',
                        prevYearAriaLabel: 'Vorheriges Jahr'
                    },
                    noDataText: 'Keine Daten vorhanden',
                    carousel: {
                        prev: 'Vorheriges Bild',
                        next: 'Nächstes Bild',
                        ariaLabel: {
                            delimiter: 'Element {0} von {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} mehr'
                    },
                    fileInput: {
                        counter: '{0} Dateien',
                        counterSize: '{0} Dateien ({1} gesamt)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Seitennavigation',
                            next: 'Nächste Seite',
                            previous: 'Vorherige Seite',
                            page: 'Gehe zu Seite {0}',
                            currentPage: 'Aktuelle Seite, Seite {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/el.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Σήμα',
                    close: 'Close',
                    dataIterator: {
                        noResultsText: 'Δε βρέθηκαν αποτελέσματα',
                        loadingText: 'Loading item...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Γραμμές ανά σελίδα:',
                        ariaLabel: {
                            sortDescending: 'Sorted descending.',
                            sortAscending: 'Sorted ascending.',
                            sortNone: 'Not sorted.',
                            activateNone: 'Activate to remove sorting.',
                            activateDescending: 'Activate to sort descending.',
                            activateAscending: 'Activate to sort ascending.'
                        },
                        sortBy: 'Sort by'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Αντικείμενα ανά σελίδα:',
                        itemsPerPageAll: 'Όλα',
                        nextPage: 'Επόμενη σελίδα',
                        prevPage: 'Προηγούμενη σελίδα',
                        firstPage: 'Πρώτη σελίδα',
                        lastPage: 'Τελευταία σελίδα',
                        pageText: '{0}-{1} από {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} επιλεγμένα',
                        nextMonthAriaLabel: 'Τον επόμενο μήνα',
                        nextYearAriaLabel: 'Του χρόνου',
                        prevMonthAriaLabel: 'Προηγούμενος μήνας',
                        prevYearAriaLabel: 'Προηγούμενο έτος'
                    },
                    noDataText: 'Χωρίς δεδομένα',
                    carousel: {
                        prev: 'הקודם חזותי',
                        next: 'הבא חזותי',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} ακόμη'
                    },
                    fileInput: {
                        counter: '{0} files',
                        counterSize: '{0} files ({1} in total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Πλοήγηση με προορισμούς',
                            next: 'Επόμενη σελίδα',
                            previous: 'Προηγούμενη σελίδα',
                            page: 'Πήγαινε στην σελίδα {0}',
                            currentPage: 'Τρέχουσα σελίδα, σελίδα {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/en.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Badge',
                    close: 'Close',
                    dataIterator: {
                        noResultsText: 'No matching records found',
                        loadingText: 'Loading items...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Rows per page:',
                        ariaLabel: {
                            sortDescending: 'Sorted descending.',
                            sortAscending: 'Sorted ascending.',
                            sortNone: 'Not sorted.',
                            activateNone: 'Activate to remove sorting.',
                            activateDescending: 'Activate to sort descending.',
                            activateAscending: 'Activate to sort ascending.'
                        },
                        sortBy: 'Sort by'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Items per page:',
                        itemsPerPageAll: 'All',
                        nextPage: 'Next page',
                        prevPage: 'Previous page',
                        firstPage: 'First page',
                        lastPage: 'Last page',
                        pageText: '{0}-{1} of {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} selected',
                        nextMonthAriaLabel: 'Next month',
                        nextYearAriaLabel: 'Next year',
                        prevMonthAriaLabel: 'Previous month',
                        prevYearAriaLabel: 'Previous year'
                    },
                    noDataText: 'No data available',
                    carousel: {
                        prev: 'Previous visual',
                        next: 'Next visual',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} more'
                    },
                    fileInput: {
                        counter: '{0} files',
                        counterSize: '{0} files ({1} in total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Pagination Navigation',
                            next: 'Next page',
                            previous: 'Previous page',
                            page: 'Goto Page {0}',
                            currentPage: 'Current Page, Page {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/es.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Placa',
                    close: 'Cerrar',
                    dataIterator: {
                        noResultsText: 'Ningún elemento coincide con la búsqueda',
                        loadingText: 'Cargando...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Filas por página:',
                        ariaLabel: {
                            sortDescending: 'Orden descendente.',
                            sortAscending: 'Orden ascendente.',
                            sortNone: 'Sin ordenar.',
                            activateNone: 'Pulse para quitar orden.',
                            activateDescending: 'Pulse para ordenar descendente.',
                            activateAscending: 'Pulse para ordenar ascendente.'
                        },
                        sortBy: 'Ordenado por'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Elementos por página:',
                        itemsPerPageAll: 'Todos',
                        nextPage: 'Página siguiente',
                        prevPage: 'Página anterior',
                        firstPage: 'Primer página',
                        lastPage: 'Última página',
                        pageText: '{0}-{1} de {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} seleccionados',
                        nextMonthAriaLabel: 'Próximo mes',
                        nextYearAriaLabel: 'Próximo año',
                        prevMonthAriaLabel: 'Mes anterior',
                        prevYearAriaLabel: 'Año anterior'
                    },
                    noDataText: 'No hay datos disponibles',
                    carousel: {
                        prev: 'Visual anterior',
                        next: 'Visual siguiente',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} más'
                    },
                    fileInput: {
                        counter: '{0} archivos',
                        counterSize: '{0} archivos ({1} en total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navegación de paginación',
                            next: 'Página siguiente',
                            previous: 'Página anterior',
                            page: 'Ir a la página {0}',
                            currentPage: 'Página actual, página {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/et.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Märk',
                    close: 'Sulge',
                    dataIterator: {
                        noResultsText: 'Vastavaid kirjeid ei leitud',
                        loadingText: 'Andmeid laaditakse...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Ridu leheküljel:',
                        ariaLabel: {
                            sortDescending: 'Kahanevalt sorteeritud.',
                            sortAscending: 'Kasvavalt sorteeritud.',
                            sortNone: 'Ei ole sorteeritud.',
                            activateNone: 'Vajuta uuesti sorteerimise eemaldamiseks.',
                            activateDescending: 'Vajuta uuesti, et sorteerida kahanevalt.',
                            activateAscending: 'Vajuta kasvavalt sorteerimiseks.'
                        },
                        sortBy: 'Sorteerimise alus'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Kirjeid leheküljel:',
                        itemsPerPageAll: 'Kõik',
                        nextPage: 'Järgmine lehekülg',
                        prevPage: 'Eelmine lehekülg',
                        firstPage: 'Esimene lehekülg',
                        lastPage: 'Viimane lehekülg',
                        pageText: '{0}-{1} {2}st'
                    },
                    datePicker: {
                        itemsSelected: '{0} valitud',
                        nextMonthAriaLabel: 'Järgmine kuu',
                        nextYearAriaLabel: 'Järgmine aasta',
                        prevMonthAriaLabel: 'Eelmine kuu',
                        prevYearAriaLabel: 'Eelmine aasta'
                    },
                    noDataText: 'Andmed puuduvad',
                    carousel: {
                        prev: 'Eelmine visuaalne',
                        next: 'Järgmine visuaalne',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} veel'
                    },
                    fileInput: {
                        counter: '{0} faili',
                        counterSize: '{0} faili (kokku {1})'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Pagination Navigation',
                            next: 'Järgmine lehekülg',
                            previous: 'Eelmine lehekülg',
                            page: 'Mine lehele {0}',
                            currentPage: 'Praegune leht, leht {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/fa.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'نشان',
                    close: 'بستن',
                    dataIterator: {
                        noResultsText: 'نتیجه‌ای یافت نشد',
                        loadingText: 'در حال بارگذاری...'
                    },
                    dataTable: {
                        itemsPerPageText: 'ردیف در صفحه:',
                        ariaLabel: {
                            sortDescending: 'مرتب‌سازی نزولی',
                            sortAscending: 'مرتب‌سازی صعودی',
                            sortNone: 'بدون مرتب‌سازی',
                            activateNone: 'غیرفعال‌سازی مرتب‌سازی',
                            activateDescending: 'غیرفعال‌سازی مرتب‌سازی نزولی',
                            activateAscending: 'غیرفعال‌سازی مرتب‌سازی صعودی'
                        },
                        sortBy: 'مرتب‌سازی براساس'
                    },
                    dataFooter: {
                        itemsPerPageText: 'ردیف در صفحه:',
                        itemsPerPageAll: 'همه',
                        nextPage: 'صفحه‌ی بعد',
                        prevPage: 'صفحه‌ی قبل',
                        firstPage: 'صفحه‌ی یکم',
                        lastPage: 'صفحه‌ی آخر',
                        pageText: '{0} تا {1} از {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} انتخاب شده',
                        nextMonthAriaLabel: 'ماه بعد',
                        nextYearAriaLabel: 'سال بعد',
                        prevMonthAriaLabel: 'ماه قبل',
                        prevYearAriaLabel: 'سال قبل'
                    },
                    noDataText: 'داده‌ای موجود نیست',
                    carousel: {
                        prev: 'اسلاید قبلی',
                        next: 'اسلاید بعدی',
                        ariaLabel: {
                            delimiter: 'اسلاید {0} از {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{بیشتر {0'
                    },
                    fileInput: {
                        counter: '{0} پرونده',
                        counterSize: '{0} پرونده ({1} در کل)'
                    },
                    timePicker: {
                        am: 'قبل از ظهر',
                        pm: 'بعد از ظهر'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'جهت یابی صفحه',
                            next: 'صفحه بعد',
                            previous: 'صفحه قبلی',
                            page: 'برو صفحه {0}',
                            currentPage: '{0} صفحه فعلی ، صفحه'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/fi.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Infopiste',
                    close: 'Sulje',
                    dataIterator: {
                        noResultsText: 'Ei osumia',
                        loadingText: 'Ladataan kohteita...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Rivejä sivulla:',
                        ariaLabel: {
                            sortDescending: ': Järjestetty laskevasti. Poista järjestäminen aktivoimalla.',
                            sortAscending: ': Järjestetty nousevasti. Järjestä laskevasti aktivoimalla.',
                            sortNone: ': Ei järjestetty. Järjestä nousevasti aktivoimalla.',
                            activateNone: 'Aktivoi lajittelun poistamiseksi.',
                            activateDescending: 'Aktivoi laskevien laskevien lajittelemiseksi.',
                            activateAscending: 'Aktivoi lajitella nouseva.'
                        },
                        sortBy: 'Järjestä'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Kohteita sivulla:',
                        itemsPerPageAll: 'Kaikki',
                        nextPage: 'Seuraava sivu',
                        prevPage: 'Edellinen sivu',
                        firstPage: 'Ensimmäinen sivu',
                        lastPage: 'Viimeinen sivu',
                        pageText: '{0}-{1} ({2})'
                    },
                    datePicker: {
                        itemsSelected: '{0} valittu',
                        nextMonthAriaLabel: 'Seuraava kuukausi',
                        nextYearAriaLabel: 'Ensi vuosi',
                        prevMonthAriaLabel: 'Edellinen kuukausi',
                        prevYearAriaLabel: 'Edellinen vuosi'
                    },
                    noDataText: 'Ei dataa',
                    carousel: {
                        prev: 'Edellinen kuva',
                        next: 'Seuraava kuva',
                        ariaLabel: {
                            delimiter: 'Karusellin kuva {0}/{1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} lisää'
                    },
                    fileInput: {
                        counter: '{0} tiedostoa',
                        counterSize: '{0} tiedostoa ({1} yhteensä)'
                    },
                    timePicker: {
                        am: 'ap.',
                        pm: 'ip.'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Pagination Navigation',
                            next: 'Next page',
                            previous: 'Previous page',
                            page: 'Goto Page {0}',
                            currentPage: 'Current Page, Page {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/fr.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Badge',
                    close: 'Fermer',
                    dataIterator: {
                        noResultsText: 'Aucun enregistrement correspondant trouvé',
                        loadingText: `Chargement de l'élément...`
                    },
                    dataTable: {
                        itemsPerPageText: 'Lignes par page :',
                        ariaLabel: {
                            sortDescending: 'Tri décroissant.',
                            sortAscending: 'Tri croissant.',
                            sortNone: 'Non trié.',
                            activateNone: 'Activer pour supprimer le tri.',
                            activateDescending: 'Activer pour trier par ordre décroissant.',
                            activateAscending: 'Activer pour trier par ordre croissant.'
                        },
                        sortBy: 'Trier par'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Élements par page :',
                        itemsPerPageAll: 'Tous',
                        nextPage: 'Page suivante',
                        prevPage: 'Page précédente',
                        firstPage: 'Première page',
                        lastPage: 'Dernière page',
                        pageText: '{0}-{1} de {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} sélectionné(s)',
                        nextMonthAriaLabel: 'Le mois prochain',
                        nextYearAriaLabel: `L'année prochaine`,
                        prevMonthAriaLabel: 'Le mois précédent',
                        prevYearAriaLabel: 'Année précédente'
                    },
                    noDataText: 'Aucune donnée disponible',
                    carousel: {
                        prev: 'Visuel précédent',
                        next: 'Visuel suivant',
                        ariaLabel: {
                            delimiter: 'Diapositive {0} de {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} de plus'
                    },
                    fileInput: {
                        counter: '{0} fichier(s)',
                        counterSize: '{0} fichier(s) ({1} au total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigation de pagination',
                            next: 'Page suivante',
                            previous: 'Page précédente',
                            page: 'Aller à la page {0}',
                            currentPage: 'Page actuelle, Page {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/he.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'תג',
                    close: 'סגור',
                    dataIterator: {
                        noResultsText: 'לא נמצאו תוצאות מתאימות',
                        loadingText: 'טוען פריט...'
                    },
                    dataTable: {
                        itemsPerPageText: 'שורות לעמוד:',
                        ariaLabel: {
                            sortDescending: 'ממוין לפי סדר עולה. לחץ להספקת המיון.',
                            sortAscending: 'ממוין לפי סדר יורד. לחץ למיון לפי סדר עולה.',
                            sortNone: 'לא ממוין. לחץ למיון לפי סדר עולה.',
                            activateNone: 'הפעל להסרת המיון.',
                            activateDescending: 'הפעל למיון יורד.',
                            activateAscending: 'הפעל למיון עולה.'
                        },
                        sortBy: 'סדר לפי'
                    },
                    dataFooter: {
                        itemsPerPageText: 'פריטים לדף:',
                        itemsPerPageAll: 'הכל',
                        nextPage: 'עמוד הבא',
                        prevPage: 'עמוד הקודם',
                        firstPage: 'עמוד ראשון',
                        lastPage: 'עמוד אחרון',
                        pageText: '{0}-{1} מתוך {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} נבחרו',
                        nextMonthAriaLabel: 'חודש הבא',
                        nextYearAriaLabel: 'שנה הבאה',
                        prevMonthAriaLabel: 'חודש שעבר',
                        prevYearAriaLabel: 'שנה שעברה'
                    },
                    noDataText: 'אין נתונים זמינים',
                    carousel: {
                        prev: 'מצג קודם',
                        next: 'מצג הבא',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} נוספים'
                    },
                    fileInput: {
                        counter: '{0} קבצים',
                        counterSize: '{0} קבצים ({1} בסך הכל)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'ניווט עימוד',
                            next: 'עמוד הבא',
                            previous: 'עמוד הקודם',
                            page: '{0} לך לעמוד',
                            currentPage: '{0} עמוד נוכחי, עמוד'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/hr.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Bedž',
                    close: 'Zatvori',
                    dataIterator: {
                        noResultsText: 'Nisu pronađene odgovarajuće stavke',
                        loadingText: 'Učitavanje...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Redaka po stranici:',
                        ariaLabel: {
                            sortDescending: 'Sortirano silazno.',
                            sortAscending: 'Sortirano uzlazno.',
                            sortNone: 'Nije sortirano.',
                            activateNone: 'Odaberite za uklanjanje sortiranja.',
                            activateDescending: 'Odaberite za silazno sortiranje.',
                            activateAscending: 'Odaberite za uzlazno sortiranje.'
                        },
                        sortBy: 'Sortirajte po'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Stavki po stranici:',
                        itemsPerPageAll: 'Sve',
                        nextPage: 'Sljedeća stranica',
                        prevPage: 'Prethodna stranica',
                        firstPage: 'Prva stranica',
                        lastPage: 'Posljednja stranica',
                        pageText: '{0}-{1} od {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} odabrano',
                        nextMonthAriaLabel: 'Sljedeći mjesec',
                        nextYearAriaLabel: 'Slijedeće godine',
                        prevMonthAriaLabel: 'Prethodni mjesec',
                        prevYearAriaLabel: 'Prošla godina'
                    },
                    noDataText: 'Nema dostupnih podataka',
                    carousel: {
                        prev: 'Prethodno',
                        next: 'Sljedeće',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: 'Još {0}'
                    },
                    fileInput: {
                        counter: 'Odabranih datoteka: {0}',
                        counterSize: 'Odabranih datoteka: {0} ({1} ukupno)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigacija stranicama',
                            next: 'Sljedeća stranica',
                            previous: 'Prethodna stranica',
                            page: 'Idi na stranicu {0}',
                            currentPage: 'Trenutna stranica, stranica {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/hu.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Jelvény',
                    close: 'Bezárás',
                    dataIterator: {
                        noResultsText: 'Nincs egyező találat',
                        loadingText: 'Betöltés...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Elem oldalanként:',
                        ariaLabel: {
                            sortDescending: 'Csökkenő sorrendbe rendezve.',
                            sortAscending: 'Növekvő sorrendbe rendezve.',
                            sortNone: 'Rendezetlen.',
                            activateNone: 'Rendezés törlése.',
                            activateDescending: 'Aktiváld a csökkenő rendezésért.',
                            activateAscending: 'Aktiváld a növekvő rendezésért.'
                        },
                        sortBy: 'Rendezés'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Elem oldalanként:',
                        itemsPerPageAll: 'Mind',
                        nextPage: 'Következő oldal',
                        prevPage: 'Előző oldal',
                        firstPage: 'Első oldal',
                        lastPage: 'Utolsó oldal',
                        pageText: '{0}-{1} / {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} kiválasztva',
                        nextMonthAriaLabel: 'Következő hónap',
                        nextYearAriaLabel: 'Következő év',
                        prevMonthAriaLabel: 'Előző hónap',
                        prevYearAriaLabel: 'Előző év'
                    },
                    noDataText: 'Nincs elérhető adat',
                    carousel: {
                        prev: 'Előző',
                        next: 'Következő',
                        ariaLabel: {
                            delimiter: 'Dia {0}/{1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} további'
                    },
                    fileInput: {
                        counter: '{0} fájl',
                        counterSize: '{0} fájl ({1} összesen)'
                    },
                    timePicker: {
                        am: 'de',
                        pm: 'du'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Oldal navigáció',
                            next: 'Következő oldal',
                            previous: 'Előző oldal',
                            page: 'Menj a(z) {0}. oldalra',
                            currentPage: 'Aktuális oldal: {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/id.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Lencana',
                    close: 'Tutup',
                    dataIterator: {
                        noResultsText: 'Tidak ditemukan catatan yang cocok',
                        loadingText: 'Memuat data...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Baris per halaman:',
                        ariaLabel: {
                            sortDescending: 'Diurutkan kebawah.',
                            sortAscending: 'Diurutkan keatas.',
                            sortNone: 'Tidak diurutkan.',
                            activateNone: 'Aktifkan untuk menghapus penyortiran.',
                            activateDescending: 'Aktifkan untuk mengurutkan kebawah.',
                            activateAscending: 'Aktifkan untuk mengurutkan keatas.'
                        },
                        sortBy: 'Urutkan berdasar'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Item per halaman:',
                        itemsPerPageAll: 'Semua',
                        nextPage: 'Halaman selanjutnya',
                        prevPage: 'Halaman sebelumnya',
                        firstPage: 'Halaman pertama',
                        lastPage: 'Halaman terakhir',
                        pageText: '{0}-{1} dari {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} dipilih',
                        nextMonthAriaLabel: 'Bulan depan',
                        nextYearAriaLabel: 'Tahun depan',
                        prevMonthAriaLabel: 'Bulan sebelumnya',
                        prevYearAriaLabel: 'Tahun sebelumnya'
                    },
                    noDataText: 'Tidak ada data tersedia',
                    carousel: {
                        prev: 'Visual sebelumnya',
                        next: 'Visual selanjutnya',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} lagi'
                    },
                    fileInput: {
                        counter: '{0} berkas',
                        counterSize: '{0} berkas (dari total {1})'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigasi Pagination',
                            next: 'Halaman selanjutnya',
                            previous: 'Halaman sebelumnya',
                            page: 'Buka halaman {0}',
                            currentPage: 'Halaman Saat Ini, Halaman {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/index.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "af": ()=>/* reexport safe */ _af__WEBPACK_IMPORTED_MODULE_0__.default
                    ,
                    /* harmony export */ "ar": ()=>/* reexport safe */ _ar__WEBPACK_IMPORTED_MODULE_1__.default
                    ,
                    /* harmony export */ "bg": ()=>/* reexport safe */ _bg__WEBPACK_IMPORTED_MODULE_2__.default
                    ,
                    /* harmony export */ "ca": ()=>/* reexport safe */ _ca__WEBPACK_IMPORTED_MODULE_3__.default
                    ,
                    /* harmony export */ "ckb": ()=>/* reexport safe */ _ckb__WEBPACK_IMPORTED_MODULE_4__.default
                    ,
                    /* harmony export */ "cs": ()=>/* reexport safe */ _cs__WEBPACK_IMPORTED_MODULE_5__.default
                    ,
                    /* harmony export */ "de": ()=>/* reexport safe */ _de__WEBPACK_IMPORTED_MODULE_6__.default
                    ,
                    /* harmony export */ "el": ()=>/* reexport safe */ _el__WEBPACK_IMPORTED_MODULE_7__.default
                    ,
                    /* harmony export */ "en": ()=>/* reexport safe */ _en__WEBPACK_IMPORTED_MODULE_8__.default
                    ,
                    /* harmony export */ "es": ()=>/* reexport safe */ _es__WEBPACK_IMPORTED_MODULE_9__.default
                    ,
                    /* harmony export */ "et": ()=>/* reexport safe */ _et__WEBPACK_IMPORTED_MODULE_10__.default
                    ,
                    /* harmony export */ "fa": ()=>/* reexport safe */ _fa__WEBPACK_IMPORTED_MODULE_11__.default
                    ,
                    /* harmony export */ "fi": ()=>/* reexport safe */ _fi__WEBPACK_IMPORTED_MODULE_12__.default
                    ,
                    /* harmony export */ "fr": ()=>/* reexport safe */ _fr__WEBPACK_IMPORTED_MODULE_13__.default
                    ,
                    /* harmony export */ "hr": ()=>/* reexport safe */ _hr__WEBPACK_IMPORTED_MODULE_14__.default
                    ,
                    /* harmony export */ "hu": ()=>/* reexport safe */ _hu__WEBPACK_IMPORTED_MODULE_15__.default
                    ,
                    /* harmony export */ "he": ()=>/* reexport safe */ _he__WEBPACK_IMPORTED_MODULE_16__.default
                    ,
                    /* harmony export */ "id": ()=>/* reexport safe */ _id__WEBPACK_IMPORTED_MODULE_17__.default
                    ,
                    /* harmony export */ "it": ()=>/* reexport safe */ _it__WEBPACK_IMPORTED_MODULE_18__.default
                    ,
                    /* harmony export */ "ja": ()=>/* reexport safe */ _ja__WEBPACK_IMPORTED_MODULE_19__.default
                    ,
                    /* harmony export */ "ko": ()=>/* reexport safe */ _ko__WEBPACK_IMPORTED_MODULE_20__.default
                    ,
                    /* harmony export */ "lv": ()=>/* reexport safe */ _lv__WEBPACK_IMPORTED_MODULE_21__.default
                    ,
                    /* harmony export */ "lt": ()=>/* reexport safe */ _lt__WEBPACK_IMPORTED_MODULE_22__.default
                    ,
                    /* harmony export */ "nl": ()=>/* reexport safe */ _nl__WEBPACK_IMPORTED_MODULE_23__.default
                    ,
                    /* harmony export */ "no": ()=>/* reexport safe */ _no__WEBPACK_IMPORTED_MODULE_24__.default
                    ,
                    /* harmony export */ "pl": ()=>/* reexport safe */ _pl__WEBPACK_IMPORTED_MODULE_25__.default
                    ,
                    /* harmony export */ "pt": ()=>/* reexport safe */ _pt__WEBPACK_IMPORTED_MODULE_26__.default
                    ,
                    /* harmony export */ "ro": ()=>/* reexport safe */ _ro__WEBPACK_IMPORTED_MODULE_27__.default
                    ,
                    /* harmony export */ "ru": ()=>/* reexport safe */ _ru__WEBPACK_IMPORTED_MODULE_28__.default
                    ,
                    /* harmony export */ "sk": ()=>/* reexport safe */ _sk__WEBPACK_IMPORTED_MODULE_29__.default
                    ,
                    /* harmony export */ "sl": ()=>/* reexport safe */ _sl__WEBPACK_IMPORTED_MODULE_30__.default
                    ,
                    /* harmony export */ "srCyrl": ()=>/* reexport safe */ _sr_Cyrl__WEBPACK_IMPORTED_MODULE_31__.default
                    ,
                    /* harmony export */ "srLatn": ()=>/* reexport safe */ _sr_Latn__WEBPACK_IMPORTED_MODULE_32__.default
                    ,
                    /* harmony export */ "sv": ()=>/* reexport safe */ _sv__WEBPACK_IMPORTED_MODULE_33__.default
                    ,
                    /* harmony export */ "th": ()=>/* reexport safe */ _th__WEBPACK_IMPORTED_MODULE_34__.default
                    ,
                    /* harmony export */ "tr": ()=>/* reexport safe */ _tr__WEBPACK_IMPORTED_MODULE_35__.default
                    ,
                    /* harmony export */ "az": ()=>/* reexport safe */ _az__WEBPACK_IMPORTED_MODULE_36__.default
                    ,
                    /* harmony export */ "uk": ()=>/* reexport safe */ _uk__WEBPACK_IMPORTED_MODULE_37__.default
                    ,
                    /* harmony export */ "vi": ()=>/* reexport safe */ _vi__WEBPACK_IMPORTED_MODULE_38__.default
                    ,
                    /* harmony export */ "zhHans": ()=>/* reexport safe */ _zh_Hans__WEBPACK_IMPORTED_MODULE_39__.default
                    ,
                    /* harmony export */ "zhHant": ()=>/* reexport safe */ _zh_Hant__WEBPACK_IMPORTED_MODULE_40__.default
                    ,
                    /* harmony export */ "rtl": ()=>/* binding */ rtl
                });
                /* harmony import */ var _af__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./af */ "./src/locale/af.ts");
                /* harmony import */ var _ar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ar */ "./src/locale/ar.ts");
                /* harmony import */ var _bg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bg */ "./src/locale/bg.ts");
                /* harmony import */ var _ca__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ca */ "./src/locale/ca.ts");
                /* harmony import */ var _ckb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ckb */ "./src/locale/ckb.ts");
                /* harmony import */ var _cs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cs */ "./src/locale/cs.ts");
                /* harmony import */ var _de__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./de */ "./src/locale/de.ts");
                /* harmony import */ var _el__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./el */ "./src/locale/el.ts");
                /* harmony import */ var _en__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./en */ "./src/locale/en.ts");
                /* harmony import */ var _es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./es */ "./src/locale/es.ts");
                /* harmony import */ var _et__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./et */ "./src/locale/et.ts");
                /* harmony import */ var _fa__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fa */ "./src/locale/fa.ts");
                /* harmony import */ var _fi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fi */ "./src/locale/fi.ts");
                /* harmony import */ var _fr__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./fr */ "./src/locale/fr.ts");
                /* harmony import */ var _hr__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./hr */ "./src/locale/hr.ts");
                /* harmony import */ var _hu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./hu */ "./src/locale/hu.ts");
                /* harmony import */ var _he__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./he */ "./src/locale/he.ts");
                /* harmony import */ var _id__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./id */ "./src/locale/id.ts");
                /* harmony import */ var _it__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./it */ "./src/locale/it.ts");
                /* harmony import */ var _ja__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ja */ "./src/locale/ja.ts");
                /* harmony import */ var _ko__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ko */ "./src/locale/ko.ts");
                /* harmony import */ var _lv__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./lv */ "./src/locale/lv.ts");
                /* harmony import */ var _lt__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./lt */ "./src/locale/lt.ts");
                /* harmony import */ var _nl__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./nl */ "./src/locale/nl.ts");
                /* harmony import */ var _no__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./no */ "./src/locale/no.ts");
                /* harmony import */ var _pl__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./pl */ "./src/locale/pl.ts");
                /* harmony import */ var _pt__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./pt */ "./src/locale/pt.ts");
                /* harmony import */ var _ro__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./ro */ "./src/locale/ro.ts");
                /* harmony import */ var _ru__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./ru */ "./src/locale/ru.ts");
                /* harmony import */ var _sk__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./sk */ "./src/locale/sk.ts");
                /* harmony import */ var _sl__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./sl */ "./src/locale/sl.ts");
                /* harmony import */ var _sr_Cyrl__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./sr-Cyrl */ "./src/locale/sr-Cyrl.ts");
                /* harmony import */ var _sr_Latn__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./sr-Latn */ "./src/locale/sr-Latn.ts");
                /* harmony import */ var _sv__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./sv */ "./src/locale/sv.ts");
                /* harmony import */ var _th__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./th */ "./src/locale/th.ts");
                /* harmony import */ var _tr__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./tr */ "./src/locale/tr.ts");
                /* harmony import */ var _az__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./az */ "./src/locale/az.ts");
                /* harmony import */ var _uk__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./uk */ "./src/locale/uk.ts");
                /* harmony import */ var _vi__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./vi */ "./src/locale/vi.ts");
                /* harmony import */ var _zh_Hans__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./zh-Hans */ "./src/locale/zh-Hans.ts");
                /* harmony import */ var _zh_Hant__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./zh-Hant */ "./src/locale/zh-Hant.ts");
                const rtl = {
                    af: false,
                    ar: true,
                    bg: false,
                    ca: false,
                    ckb: false,
                    cs: false,
                    de: false,
                    el: false,
                    en: false,
                    es: false,
                    et: false,
                    fa: false,
                    fi: false,
                    fr: false,
                    hr: false,
                    hu: false,
                    he: true,
                    id: false,
                    it: false,
                    ja: false,
                    ko: false,
                    lv: false,
                    lt: false,
                    nl: false,
                    no: false,
                    pl: false,
                    pt: false,
                    ro: false,
                    ru: false,
                    sk: false,
                    sl: false,
                    srCyrl: false,
                    srLatn: false,
                    sv: false,
                    th: false,
                    tr: false,
                    az: false,
                    uk: false,
                    vi: false,
                    zhHans: false,
                    zhHant: false
                };
            /***/ },
            /***/ "./src/locale/it.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Distintivo',
                    close: 'Chiudi',
                    dataIterator: {
                        noResultsText: 'Nessun risultato trovato',
                        loadingText: 'Caricamento in corso...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Righe per pagina:',
                        ariaLabel: {
                            sortDescending: 'Ordinati in ordine decrescente.',
                            sortAscending: 'Ordinati in ordine crescente.',
                            sortNone: 'Non ordinato.',
                            activateNone: `Attiva per rimuovere l'ordinamento.`,
                            activateDescending: 'Attiva per ordinare in ordine decrescente.',
                            activateAscending: 'Attiva per ordinare in ordine crescente.'
                        },
                        sortBy: 'Ordina per'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Elementi per pagina:',
                        itemsPerPageAll: 'Tutti',
                        nextPage: 'Pagina seguente',
                        prevPage: 'Pagina precedente',
                        firstPage: 'Pagina prima',
                        lastPage: 'Pagina ultima',
                        pageText: '{0}-{1} di {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} selezionati',
                        nextMonthAriaLabel: 'Il prossimo mese',
                        nextYearAriaLabel: `L'anno prossimo`,
                        prevMonthAriaLabel: 'Il mese scorso',
                        prevYearAriaLabel: `L'anno scorso`
                    },
                    noDataText: 'Nessun elemento disponibile',
                    carousel: {
                        prev: 'Vista precedente',
                        next: 'Prossima vista',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} di più'
                    },
                    fileInput: {
                        counter: '{0} files',
                        counterSize: '{0} files ({1} in totale)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigazione impaginazione',
                            next: 'Pagina seguente',
                            previous: 'Pagina precedente',
                            page: 'Vai alla pagina {0}',
                            currentPage: 'Pagina corrente, pagina {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/ja.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'バッジ',
                    close: '閉じる',
                    dataIterator: {
                        noResultsText: '検索結果が見つかりません。',
                        loadingText: '項目をロード中です...'
                    },
                    dataTable: {
                        itemsPerPageText: '1ページあたりの行数：',
                        ariaLabel: {
                            sortDescending: '降順の並び替え。',
                            sortAscending: '昇順の並び替え。',
                            sortNone: 'ソートされていません。',
                            activateNone: 'ソートを削除するには有効にしてください。',
                            activateDescending: '降順の並び替えのためには有効にしてください。',
                            activateAscending: '昇順のソートのためには有効にしてください。'
                        },
                        sortBy: 'ソート方式'
                    },
                    dataFooter: {
                        itemsPerPageText: '1ページあたりの件数：',
                        itemsPerPageAll: 'すべて',
                        nextPage: '次のページ',
                        prevPage: '前のページ',
                        firstPage: '最初のページ',
                        lastPage: '最後のページ',
                        pageText: '{0}-{1} 件目 / {2}件'
                    },
                    datePicker: {
                        itemsSelected: '{0}日付選択',
                        nextMonthAriaLabel: '来月',
                        nextYearAriaLabel: '来年',
                        prevMonthAriaLabel: '前月',
                        prevYearAriaLabel: '前年'
                    },
                    noDataText: 'データはありません。',
                    carousel: {
                        prev: '前のビジュアル',
                        next: '次のビジュアル',
                        ariaLabel: {
                            delimiter: 'カルーセルのスライド {0}件目 / {1}件'
                        }
                    },
                    calendar: {
                        moreEvents: 'さらに{0}'
                    },
                    fileInput: {
                        counter: '{0} ファイル',
                        counterSize: '{0} ファイル (合計 {1})'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'ページネーションナビゲーション',
                            next: '次のページ',
                            previous: '前のページ',
                            page: '{0}ページ目に移動',
                            currentPage: '現在のページ、ページ {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: '評価 {1} のうち {0}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/ko.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: '배지',
                    close: '닫기',
                    dataIterator: {
                        noResultsText: '일치하는 항목이 없습니다.',
                        loadingText: '불러오는 중...'
                    },
                    dataTable: {
                        itemsPerPageText: '페이지 당 행 수:',
                        ariaLabel: {
                            sortDescending: '내림차순 정렬.',
                            sortAscending: '오름차순 정렬.',
                            sortNone: '정렬하지 않음.',
                            activateNone: '정렬을 취소하려면 활성화하세요.',
                            activateDescending: '내림차순 정렬을 위해 활성화하세요.',
                            activateAscending: '오름차순 정렬을 위해 활성화하세요.'
                        },
                        sortBy: 'Sort by'
                    },
                    dataFooter: {
                        itemsPerPageText: '페이지 당 항목 수:',
                        itemsPerPageAll: '전체',
                        nextPage: '다음 페이지',
                        prevPage: '이전 페이지',
                        firstPage: '첫 페이지',
                        lastPage: '마지막 페이지',
                        pageText: '{2} 중 {0}-{1}'
                    },
                    datePicker: {
                        itemsSelected: '{0} 선택됨',
                        nextMonthAriaLabel: '다음 달',
                        nextYearAriaLabel: '내년',
                        prevMonthAriaLabel: '지난달',
                        prevYearAriaLabel: '전년도'
                    },
                    noDataText: '데이터가 없습니다.',
                    carousel: {
                        prev: '이전 화면',
                        next: '다음 화면',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} 더보기'
                    },
                    fileInput: {
                        counter: '{0} files',
                        counterSize: '{0} files ({1} in total)'
                    },
                    timePicker: {
                        am: '오전',
                        pm: '오후'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Pagination Navigation',
                            next: '다음 페이지',
                            previous: '이전 페이지',
                            page: '고토 페이지 {0}',
                            currentPage: '현재 페이지, 페이지 {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/lt.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Ženklelis',
                    close: 'Uždaryti',
                    dataIterator: {
                        noResultsText: 'Nerasta atitinkančių įrašų',
                        loadingText: 'Kraunama...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Eilutės per puslapį:',
                        ariaLabel: {
                            sortDescending: 'Išrikiuota mažėjimo tvarka.',
                            sortAscending: 'Išrikiuota didėjimo tvarka.',
                            sortNone: 'Nerikiuota.',
                            activateNone: 'Suaktyvinkite, jei norite rikiavimą pašalinti.',
                            activateDescending: 'Suaktyvinkite, jei norite rikiuoti mažėjimo tvarka.',
                            activateAscending: 'Suaktyvinkite, jei norite rikiuoti didėjimo tvarka.'
                        },
                        sortBy: 'Sort by'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Įrašai per puslapį:',
                        itemsPerPageAll: 'Visi',
                        nextPage: 'Kitas puslapis',
                        prevPage: 'Ankstesnis puslapis',
                        firstPage: 'Pirmas puslapis',
                        lastPage: 'Paskutinis puslapis',
                        pageText: '{0}-{1} iš {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} pasirinkta',
                        nextMonthAriaLabel: 'Kitą mėnesį',
                        nextYearAriaLabel: 'Kitais metais',
                        prevMonthAriaLabel: 'Praeita mėnesį',
                        prevYearAriaLabel: 'Praeiti metai'
                    },
                    noDataText: 'Nėra duomenų',
                    carousel: {
                        prev: 'Ankstesnioji skaidrė',
                        next: 'Kita skaidrė',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: 'Daugiau {0}'
                    },
                    fileInput: {
                        counter: '{0} failų',
                        counterSize: '{0} failų ({1} iš viso)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Puslapio naršymas',
                            next: 'Kitas puslapis',
                            previous: 'Ankstesnis puslapis',
                            page: 'Eiti į puslapį {0}',
                            currentPage: 'Dabartinis puslapis, puslapis {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/lv.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Žetons',
                    close: 'Aizvērt',
                    dataIterator: {
                        noResultsText: 'Nekas netika atrasts',
                        loadingText: 'Ielādē...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Rādīt lapā:',
                        ariaLabel: {
                            sortDescending: 'Sakārtots dilstošā secībā.',
                            sortAscending: 'Sakārtots augošā secībā.',
                            sortNone: 'Nav sakārtots.',
                            activateNone: 'Aktivizēt, lai noņemtu kārtošanu.',
                            activateDescending: 'Aktivizēt, lai sakārtotu dilstošā secībā.',
                            activateAscending: 'Aktivizēt, lai sakārtotu augošā secībā.'
                        },
                        sortBy: 'Sort by'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Rādīt lapā:',
                        itemsPerPageAll: 'Visu',
                        nextPage: 'Nākamā lapa',
                        prevPage: 'Iepriekšējā lapa',
                        firstPage: 'Pirmā lapa',
                        lastPage: 'Pēdējā lapa',
                        pageText: '{0}-{1} no {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} izvēlēts',
                        nextMonthAriaLabel: 'Nākammēnes',
                        nextYearAriaLabel: 'Nākamgad',
                        prevMonthAriaLabel: 'Iepriekšējais mēnesis',
                        prevYearAriaLabel: 'Iepriekšējais gads'
                    },
                    noDataText: 'Nav pieejamu datu',
                    carousel: {
                        prev: 'Iepriekšējais slaids',
                        next: 'Nākamais slaids',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: 'Vēl {0}'
                    },
                    fileInput: {
                        counter: '{0} files',
                        counterSize: '{0} files ({1} in total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigācija paginationā',
                            next: 'Nākamā lapa',
                            previous: 'Iepriekšējā lapa',
                            page: 'Iet uz lapu {0}',
                            currentPage: 'Pašreizējā lapa, lapa {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/nl.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'insigne',
                    close: 'Sluiten',
                    dataIterator: {
                        noResultsText: 'Geen overeenkomende resultaten gevonden',
                        loadingText: 'Items aan het laden...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Rijen per pagina:',
                        ariaLabel: {
                            sortDescending: 'Aflopend gesorteerd.',
                            sortAscending: 'Oplopend gesorteerd.',
                            sortNone: 'Niet gesorteerd.',
                            activateNone: 'Activeer om de sortering te verwijderen.',
                            activateDescending: 'Activeer om aflopend te sorteren.',
                            activateAscending: 'Activeer om oplopend te sorteren.'
                        },
                        sortBy: 'Sorteer volgens'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Aantal per pagina:',
                        itemsPerPageAll: 'Alles',
                        nextPage: 'Volgende pagina',
                        prevPage: 'Vorige pagina',
                        firstPage: 'Eerste pagina',
                        lastPage: 'Laatste pagina',
                        pageText: '{0}-{1} van {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} geselecteerd',
                        nextMonthAriaLabel: 'Volgende maand',
                        nextYearAriaLabel: 'Volgend jaar',
                        prevMonthAriaLabel: 'Vorige maand',
                        prevYearAriaLabel: 'Vorig jaar'
                    },
                    noDataText: 'Geen gegevens beschikbaar',
                    carousel: {
                        prev: 'Vorig beeld',
                        next: 'Volgend beeld',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} meer'
                    },
                    fileInput: {
                        counter: '{0} bestanden',
                        counterSize: '{0} bestanden ({1} in totaal)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Paginanavigatie',
                            next: 'Volgende pagina',
                            previous: 'Vorige pagina',
                            page: 'Ga naar pagina {0}',
                            currentPage: 'Huidige pagina, pagina {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/no.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Skilt',
                    close: 'Lukk',
                    dataIterator: {
                        noResultsText: 'Fant ingen matchende elementer.',
                        loadingText: 'Laster elementer...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Rader per side:',
                        ariaLabel: {
                            sortDescending: 'Sortert synkende.',
                            sortAscending: 'Sortert stigende.',
                            sortNone: 'Ikke sortert.',
                            activateNone: 'Aktiver for å fjerne sortering.',
                            activateDescending: 'Aktiver for å sortere synkende.',
                            activateAscending: 'Aktiver for å sortere stigende.'
                        },
                        sortBy: 'Sorter etter'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Elementer per side:',
                        itemsPerPageAll: 'Alle',
                        nextPage: 'Neste side',
                        prevPage: 'Forrige side',
                        firstPage: 'Første side',
                        lastPage: 'Siste side',
                        pageText: '{0}-{1} av {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} valgt',
                        nextMonthAriaLabel: 'Neste måned',
                        nextYearAriaLabel: 'Neste år',
                        prevMonthAriaLabel: 'Forrige måned',
                        prevYearAriaLabel: 'Forrige år'
                    },
                    noDataText: 'Ingen data er tilgjengelig',
                    carousel: {
                        prev: 'Forrige bilde',
                        next: 'Neste bilde',
                        ariaLabel: {
                            delimiter: 'Karusellbilde {0} av {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} flere'
                    },
                    fileInput: {
                        counter: '{0} filer',
                        counterSize: '{0} filer ({1} totalt)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Paginasjonsnavigasjon',
                            next: 'Neste side',
                            previous: 'Forrige side',
                            page: 'Gå til side {0}',
                            currentPage: 'Gjeldende side, side {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/pl.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Odznaka',
                    close: 'Zamknij',
                    dataIterator: {
                        noResultsText: 'Nie znaleziono danych odpowiadających wyszukiwaniu',
                        loadingText: 'Wczytywanie danych...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Wierszy na stronie:',
                        ariaLabel: {
                            sortDescending: 'Sortowanie malejąco. Kliknij aby zmienić.',
                            sortAscending: 'Sortowanie rosnąco. Kliknij aby zmienić.',
                            sortNone: 'Bez sortowania. Kliknij aby posortować rosnąco.',
                            activateNone: 'Kliknij aby usunąć sortowanie.',
                            activateDescending: 'Kliknij aby posortować malejąco.',
                            activateAscending: 'Kliknij aby posortować rosnąco.'
                        },
                        sortBy: 'Sortuj według'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Pozycji na stronie:',
                        itemsPerPageAll: 'Wszystkie',
                        nextPage: 'Następna strona',
                        prevPage: 'Poprzednia strona',
                        firstPage: 'Pierwsza strona',
                        lastPage: 'Ostatnia strona',
                        pageText: '{0}-{1} z {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} dat(y)',
                        nextMonthAriaLabel: 'Następny miesiąc',
                        nextYearAriaLabel: 'Następny rok',
                        prevMonthAriaLabel: 'Poprzedni miesiąc',
                        prevYearAriaLabel: 'Poprzedni rok'
                    },
                    noDataText: 'Brak danych',
                    carousel: {
                        prev: 'Poprzedni obraz',
                        next: 'Następny obraz',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} więcej'
                    },
                    fileInput: {
                        counter: 'Liczba plików: {0}',
                        counterSize: 'Liczba plików: {0} (łącznie {1})'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Nawigacja paginacyjna',
                            next: 'Następna strona',
                            previous: 'Poprzednia strona',
                            page: 'Idź do strony {0}',
                            currentPage: 'Bieżąca strona, strona {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/pt.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Distintivo',
                    close: 'Fechar',
                    dataIterator: {
                        noResultsText: 'Nenhum dado encontrado',
                        loadingText: 'Carregando itens...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Linhas por página:',
                        ariaLabel: {
                            sortDescending: 'Ordenado decrescente.',
                            sortAscending: 'Ordenado crescente.',
                            sortNone: 'Não ordenado.',
                            activateNone: 'Ative para remover a ordenação.',
                            activateDescending: 'Ative para ordenar decrescente.',
                            activateAscending: 'Ative para ordenar crescente.'
                        },
                        sortBy: 'Ordenar por'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Itens por página:',
                        itemsPerPageAll: 'Todos',
                        nextPage: 'Próxima página',
                        prevPage: 'Página anterior',
                        firstPage: 'Primeira página',
                        lastPage: 'Última página',
                        pageText: '{0}-{1} de {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} selecionado(s)',
                        nextMonthAriaLabel: 'Próximo mês',
                        nextYearAriaLabel: 'Próximo ano',
                        prevMonthAriaLabel: 'Mês anterior',
                        prevYearAriaLabel: 'Ano anterior'
                    },
                    noDataText: 'Não há dados disponíveis',
                    carousel: {
                        prev: 'Visão anterior',
                        next: 'Próxima visão',
                        ariaLabel: {
                            delimiter: 'Slide {0} de {1} do carrossel'
                        }
                    },
                    calendar: {
                        moreEvents: 'Mais {0}'
                    },
                    fileInput: {
                        counter: '{0} arquivo(s)',
                        counterSize: '{0} arquivo(s) ({1} no total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navegação de paginação',
                            next: 'Próxima página',
                            previous: 'Página anterior',
                            page: 'Ir à página {0}',
                            currentPage: 'Página atual, página {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/ro.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Insignă',
                    close: 'Închideți',
                    dataIterator: {
                        noResultsText: 'Nu s-au găsit înregistrări corespunzătoare',
                        loadingText: 'Se încarcă articolele...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Rânduri pe pagină:',
                        ariaLabel: {
                            sortDescending: 'Sortate descendent.',
                            sortAscending: 'Sortate ascendent.',
                            sortNone: 'Nesortate.',
                            activateNone: 'Activați pentru a elimina sortarea.',
                            activateDescending: 'Activați pentru a sorta descendent.',
                            activateAscending: 'Activați pentru a sorta ascendent.'
                        },
                        sortBy: 'Sortați după'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Articole pe pagină:',
                        itemsPerPageAll: 'Toate',
                        nextPage: 'Pagina următoare',
                        prevPage: 'Pagina anterioară',
                        firstPage: 'Prima pagină',
                        lastPage: 'Ultima pagină',
                        pageText: '{0}-{1} din {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} selectate',
                        nextMonthAriaLabel: 'Luna următoare',
                        nextYearAriaLabel: 'Anul următor',
                        prevMonthAriaLabel: 'Luna anterioară',
                        prevYearAriaLabel: 'Anul anterior'
                    },
                    noDataText: 'Nu există date disponibile',
                    carousel: {
                        prev: 'Grafica anterioară',
                        next: 'Grafica următoare',
                        ariaLabel: {
                            delimiter: 'Slide carusel {0} din {1}'
                        }
                    },
                    calendar: {
                        moreEvents: 'încă {0}'
                    },
                    fileInput: {
                        counter: '{0} fișiere',
                        counterSize: '{0} fișiere ({1} în total)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigare prin paginare',
                            next: 'Pagina următoare',
                            previous: 'Pagina anterioară',
                            page: 'Mergeți la pagina {0}',
                            currentPage: 'Pagina curentă, pagina {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating de {0} din {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/ru.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'знак',
                    close: 'Закрыть',
                    dataIterator: {
                        noResultsText: 'Не найдено подходящих записей',
                        loadingText: 'Запись загружается...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Строк на странице:',
                        ariaLabel: {
                            sortDescending: 'Упорядочено по убыванию.',
                            sortAscending: 'Упорядочено по возрастанию.',
                            sortNone: 'Не упорядочено.',
                            activateNone: 'Активируйте, чтобы убрать сортировку.',
                            activateDescending: 'Активируйте для упорядочивания убыванию.',
                            activateAscending: 'Активируйте для упорядочивания по возрастанию.'
                        },
                        sortBy: 'Сортировать по'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Записей на странице:',
                        itemsPerPageAll: 'Все',
                        nextPage: 'Следующая страница',
                        prevPage: 'Предыдущая страница',
                        firstPage: 'Первая страница',
                        lastPage: 'Последняя страница',
                        pageText: '{0}-{1} из {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} выбран',
                        nextMonthAriaLabel: 'Следующий месяц',
                        nextYearAriaLabel: 'Следующий год',
                        prevMonthAriaLabel: 'Прошлый месяц',
                        prevYearAriaLabel: 'Предыдущий год'
                    },
                    noDataText: 'Отсутствуют данные',
                    carousel: {
                        prev: 'Предыдущий слайд',
                        next: 'Следующий слайд',
                        ariaLabel: {
                            delimiter: 'Слайд {0} из {1}'
                        }
                    },
                    calendar: {
                        moreEvents: 'Еще {0}'
                    },
                    fileInput: {
                        counter: 'Файлов: {0}',
                        counterSize: 'Файлов: {0} (всего {1})'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Навигация по страницам',
                            next: 'Следующая страница',
                            previous: 'Предыдущая страница',
                            page: 'Перейти на страницу {0}',
                            currentPage: 'Текущая страница, Страница {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/sk.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Odznak',
                    close: 'Zavrieť',
                    dataIterator: {
                        noResultsText: 'Neboli nájdené žiadne záznamy',
                        loadingText: 'Načítavam položky...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Počet riadkov na stránku:',
                        ariaLabel: {
                            sortDescending: 'Zoradené zostupne.',
                            sortAscending: 'Zoradené vzostupne.',
                            sortNone: 'Nezoradené.',
                            activateNone: 'Aktivujte na zrušenie triedenia.',
                            activateDescending: 'Aktivujte na zoradenie zostupne.',
                            activateAscending: 'Aktivujte na zoradenie vzostupne.'
                        },
                        sortBy: 'Zoradiť podľa'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Počet položiek na stránku:',
                        itemsPerPageAll: 'Všetko',
                        nextPage: 'Ďalšia stránka',
                        prevPage: 'Predchádzajúca stránka',
                        firstPage: 'Prvá stránka',
                        lastPage: 'Posledná stránka',
                        pageText: '{0}–{1} z {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} vybrané',
                        nextMonthAriaLabel: 'Ďalší mesiac',
                        nextYearAriaLabel: 'Ďalší rok',
                        prevMonthAriaLabel: 'Predchádzajúci mesiac',
                        prevYearAriaLabel: 'Predchádzajúci rok'
                    },
                    noDataText: 'Nie sú dostupné žiadne dáta',
                    carousel: {
                        prev: 'Predchádzajúci obrázok',
                        next: 'Další obrázok',
                        ariaLabel: {
                            delimiter: 'Snímka {0} z {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} ďalších'
                    },
                    fileInput: {
                        counter: '{0} súborov',
                        counterSize: '{0} súborov ({1} celkom)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigácia stránkovania',
                            next: 'Ďalšia stránka',
                            previous: 'Predchádzajúca stránka',
                            page: 'Ísť na stránku {0}',
                            currentPage: 'Aktuálna stránka, stránka {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Hodnotenie {0} z {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/sl.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Značka',
                    close: 'Zapri',
                    dataIterator: {
                        noResultsText: 'Ni iskanega zapisa',
                        loadingText: 'Nalaganje...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Vrstic na stran:',
                        ariaLabel: {
                            sortDescending: 'Razvrščeno padajoče.',
                            sortAscending: 'Razvrščeno naraščajoče.',
                            sortNone: 'Ni razvrščeno.',
                            activateNone: 'Aktivirajte za odstranitev razvrščanja.',
                            activateDescending: 'Aktivirajte za padajoče razvrščanje.',
                            activateAscending: 'Aktivirajte za naraščajoče razvrščanje.'
                        },
                        sortBy: 'Razvrsti po'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Predmetov na stran:',
                        itemsPerPageAll: 'Vse',
                        nextPage: 'Naslednja stran',
                        prevPage: 'Prejšnja stran',
                        firstPage: 'Prva stran',
                        lastPage: 'Zadnja stran',
                        pageText: '{0}-{1} od {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} izbrano/-ih',
                        nextMonthAriaLabel: 'Naslednji mesec',
                        nextYearAriaLabel: 'Naslednje leto',
                        prevMonthAriaLabel: 'Prejšnji mesec',
                        prevYearAriaLabel: 'Prejšnje leto'
                    },
                    noDataText: 'Ni podatkov',
                    carousel: {
                        prev: 'Prejšnji prikaz',
                        next: 'Naslednji prikaz',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: 'Še {0}'
                    },
                    fileInput: {
                        counter: '{0} datotek',
                        counterSize: '{0} datotek ({1} skupno)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigacija po strani po strani',
                            next: 'Naslednja stran',
                            previous: 'Prejšnja stran',
                            page: 'Pojdi na stran {0}',
                            currentPage: 'Trenutna stran, stran {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/sr-Cyrl.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Значка',
                    close: 'Затвори',
                    dataIterator: {
                        noResultsText: 'Ни један запис није пронађен',
                        loadingText: 'Учитавање ставке...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Редова по страници:',
                        ariaLabel: {
                            sortDescending: 'Сортирано опадајуће.',
                            sortAscending: 'Сортирано растуће.',
                            sortNone: 'Није сортирано.',
                            activateNone: 'Кликни да уклониш сортирање.',
                            activateDescending: 'Кликни да сортираш опадајуће.',
                            activateAscending: 'Кликни да сортираш растуће.'
                        },
                        sortBy: 'Сортирај по'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Ставки по страници:',
                        itemsPerPageAll: 'Све',
                        nextPage: 'Следећа страница',
                        prevPage: 'Претходна страница',
                        firstPage: 'Прва страница',
                        lastPage: 'Последња страница',
                        pageText: '{0}-{1} од {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} одабрано',
                        nextMonthAriaLabel: 'Следећег месеца',
                        nextYearAriaLabel: 'Следеће године',
                        prevMonthAriaLabel: 'Претходни месец',
                        prevYearAriaLabel: 'Претходна година'
                    },
                    noDataText: 'Нема доступних података',
                    carousel: {
                        prev: 'Претходна слика',
                        next: 'Следећа слика',
                        ariaLabel: {
                            delimiter: 'Слика {0} од {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} више'
                    },
                    fileInput: {
                        counter: '{0} фајлова',
                        counterSize: '{0} фајлова ({1} укупно)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Навигација страницама',
                            next: 'Следећа страница',
                            previous: 'Претходна страница',
                            page: 'Иди на страну {0}',
                            currentPage: 'Тренутна страница, страница {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Оцена {0} од {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/sr-Latn.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Značka',
                    close: 'Zatvori',
                    dataIterator: {
                        noResultsText: 'Nijedan zapis nije pronađen',
                        loadingText: 'Učitavanje stavke...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Redova po stranici:',
                        ariaLabel: {
                            sortDescending: 'Sortirano opadajuće.',
                            sortAscending: 'Sortirano rastuće.',
                            sortNone: 'Nije sortirano.',
                            activateNone: 'Klikni da ukloniš sortiranje.',
                            activateDescending: 'Klikni da sortiraš opadajuće.',
                            activateAscending: 'Klikni da sortiraš rastuće.'
                        },
                        sortBy: 'Sortiraj po'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Stavki po stranici:',
                        itemsPerPageAll: 'Sve',
                        nextPage: 'Sledeća stranica',
                        prevPage: 'Prethodna stranica',
                        firstPage: 'Prva stranica',
                        lastPage: 'Poslednja stranica',
                        pageText: '{0}-{1} od {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} odabrano',
                        nextMonthAriaLabel: 'Sledećeg meseca',
                        nextYearAriaLabel: 'Sledeće godine',
                        prevMonthAriaLabel: 'Prethodni mesec',
                        prevYearAriaLabel: 'Prethodna godina'
                    },
                    noDataText: 'Nema dostupnih podataka',
                    carousel: {
                        prev: 'Prethodna slika',
                        next: 'Sledeća slika',
                        ariaLabel: {
                            delimiter: 'Slika {0} od {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} više'
                    },
                    fileInput: {
                        counter: '{0} fajlova',
                        counterSize: '{0} fajlova ({1} ukupno)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Navigacija stranicama',
                            next: 'Sledeća stranica',
                            previous: 'Prethodna stranica',
                            page: 'Idi na stranu {0}',
                            currentPage: 'Trenutna stranica, stranica {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Ocena {0} od {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/sv.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Bricka',
                    close: 'Stäng',
                    dataIterator: {
                        noResultsText: 'Inga poster funna',
                        loadingText: 'Laddar data...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Rader per sida:',
                        ariaLabel: {
                            sortDescending: 'Sorterat fallande.',
                            sortAscending: 'Sorterat stigande.',
                            sortNone: 'Osorterat.',
                            activateNone: 'Aktivera för att ta bort sortering.',
                            activateDescending: 'Aktivera för sortering fallande.',
                            activateAscending: 'Aktivera för sortering stigande.'
                        },
                        sortBy: 'Sortera efter'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Objekt per sida:',
                        itemsPerPageAll: 'Alla',
                        nextPage: 'Nästa sida',
                        prevPage: 'Föregående sida',
                        firstPage: 'Första sidan',
                        lastPage: 'Sista sidan',
                        pageText: '{0}-{1} av {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} markerade',
                        nextMonthAriaLabel: 'Nästa månad',
                        nextYearAriaLabel: 'Nästa år',
                        prevMonthAriaLabel: 'Förra månaden',
                        prevYearAriaLabel: 'Förra året'
                    },
                    noDataText: 'Ingen data tillgänglig',
                    carousel: {
                        prev: 'Föregående vy',
                        next: 'Nästa vy',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} fler'
                    },
                    fileInput: {
                        counter: '{0} filer',
                        counterSize: '{0} filer (av {1} totalt)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Pagination Navigation',
                            next: 'Nästa sida',
                            previous: 'Föregående sida',
                            page: 'Gå till sidan {0}',
                            currentPage: 'Aktuell sida, sida {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/th.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'สัญลักษณ์',
                    close: 'ปิด',
                    dataIterator: {
                        noResultsText: 'ไม่พบข้อมูลที่ค้นหา',
                        loadingText: 'กำลังโหลดข้อมูล...'
                    },
                    dataTable: {
                        itemsPerPageText: 'แถวต่อหน้า:',
                        ariaLabel: {
                            sortDescending: 'เรียงจากมากไปน้อยอยู่',
                            sortAscending: 'เรียงจากน้อยไปมากอยู่',
                            sortNone: 'ไม่ได้เรียงลำดับ',
                            activateNone: 'กดเพื่อปิดการเรียงลำดับ',
                            activateDescending: 'กดเพื่อเรียงจากมากไปน้อย',
                            activateAscending: 'กดเพื่อเรียงจากน้อยไปมาก'
                        },
                        sortBy: 'เรียงตาม'
                    },
                    dataFooter: {
                        itemsPerPageText: 'รายการต่อหน้า:',
                        itemsPerPageAll: 'ทั้งหมด',
                        nextPage: 'หน้าต่อไป',
                        prevPage: 'หน้าที่แล้ว',
                        firstPage: 'หน้าแรก',
                        lastPage: 'หน้าสุดท้าย',
                        pageText: '{0}-{1} จาก {2}'
                    },
                    datePicker: {
                        itemsSelected: 'เลือก {0} วัน',
                        nextMonthAriaLabel: 'เดือนถัดไป',
                        nextYearAriaLabel: 'ปีถัดไป',
                        prevMonthAriaLabel: 'เดือนก่อนหน้า',
                        prevYearAriaLabel: 'ปีก่อนหน้า'
                    },
                    noDataText: 'ไม่มีข้อมูล',
                    carousel: {
                        prev: 'ภาพก่อนหน้า',
                        next: 'ภาพถัดไป',
                        ariaLabel: {
                            delimiter: 'ภาพสไลด์ที่ {0} จาก {1}'
                        }
                    },
                    calendar: {
                        moreEvents: 'มีอีก {0}'
                    },
                    fileInput: {
                        counter: '{0} ไฟล์',
                        counterSize: '{0} ไฟล์ (รวม {1})'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'การนำทางไปยังหน้า',
                            next: 'หน้าต่อไป',
                            previous: 'หน้าที่แล้ว',
                            page: 'ไปที่หน้า {0}',
                            currentPage: 'หน้าปัจจุบัน (หน้า {0})'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/tr.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'rozet',
                    close: 'Kapat',
                    dataIterator: {
                        noResultsText: 'Eşleşen veri bulunamadı',
                        loadingText: 'Yükleniyor... Lütfen bekleyin.'
                    },
                    dataTable: {
                        itemsPerPageText: 'Sayfa başına satır:',
                        ariaLabel: {
                            sortDescending: 'Z den A ya sıralı.',
                            sortAscending: 'A dan Z ye sıralı.',
                            sortNone: 'Sıralı değil. ',
                            activateNone: 'Sıralamayı kaldırmak için etkinleştir.',
                            activateDescending: 'Z den A ya sıralamak için etkinleştir.',
                            activateAscending: 'A dan Z ye sıralamak için etkinleştir.'
                        },
                        sortBy: 'Sırala'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Sayfa başına satır:',
                        itemsPerPageAll: 'Hepsi',
                        nextPage: 'Sonraki sayfa',
                        prevPage: 'Önceki sayfa',
                        firstPage: 'İlk sayfa',
                        lastPage: 'Son sayfa',
                        pageText: '{0} - {1} arası, Toplam: {2} kayıt'
                    },
                    datePicker: {
                        itemsSelected: '{0} öge seçildi',
                        nextMonthAriaLabel: 'Gelecek ay',
                        nextYearAriaLabel: 'Gelecek yıl',
                        prevMonthAriaLabel: 'Geçtiğimiz ay',
                        prevYearAriaLabel: 'Geçen yıl'
                    },
                    noDataText: 'Bu görünümde veri yok.',
                    carousel: {
                        prev: 'Önceki görsel',
                        next: 'Sonraki görsel',
                        ariaLabel: {
                            delimiter: 'Galeri sayfa {0} / {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} tane daha'
                    },
                    fileInput: {
                        counter: '{0} dosya',
                        counterSize: '{0} dosya (toplamda {1})'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Sayfalandırma Navigasyonu',
                            next: 'Sonraki sayfa',
                            previous: 'Önceki sayfa',
                            page: 'Sayfaya git {0}',
                            currentPage: 'Geçerli Sayfa, Sayfa {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/uk.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Знак',
                    close: 'Закрити',
                    dataIterator: {
                        noResultsText: 'В результаті пошуку нічого не знайдено',
                        loadingText: 'Завантаження...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Рядків на сторінці:',
                        ariaLabel: {
                            sortDescending: 'Відсортовано за спаданням.',
                            sortAscending: 'Відсортовано за зростанням.',
                            sortNone: 'Не відсортовано.',
                            activateNone: 'Активувати, щоб видалити сортування.',
                            activateDescending: 'Активувати, щоб відсортувати за спаданням.',
                            activateAscending: 'Активувати, щоб відсортувати за зростанням.'
                        },
                        sortBy: 'Відсортувати за'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Елементів на сторінці:',
                        itemsPerPageAll: 'Всі',
                        nextPage: 'Наступна сторінка',
                        prevPage: 'Попередня сторінка',
                        firstPage: 'Перша сторінка',
                        lastPage: 'Остання сторінка',
                        pageText: '{0}-{1} з {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} вибрано',
                        nextMonthAriaLabel: 'Наступного місяця',
                        nextYearAriaLabel: 'Наступного року',
                        prevMonthAriaLabel: 'Попередній місяць',
                        prevYearAriaLabel: 'Попередній рік'
                    },
                    noDataText: 'Немає даних для відображення',
                    carousel: {
                        prev: 'Попередній слайд',
                        next: 'Наступий слайд',
                        ariaLabel: {
                            delimiter: 'Слайд {0} з {1}'
                        }
                    },
                    calendar: {
                        moreEvents: 'Ще {0}'
                    },
                    fileInput: {
                        counter: '{0} файлів',
                        counterSize: '{0} файлів ({1} загалом)'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Навігація по сторінках',
                            next: 'Наступна сторінка',
                            previous: 'Попередня сторінка',
                            page: 'Перейти на сторінку {0}',
                            currentPage: 'Поточна сторінка, Сторінка {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/vi.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: 'Huy hiệu',
                    close: 'Đóng',
                    dataIterator: {
                        noResultsText: 'Không tìm thấy kết quả nào',
                        loadingText: 'Đang tải...'
                    },
                    dataTable: {
                        itemsPerPageText: 'Số hàng mỗi trang:',
                        ariaLabel: {
                            sortDescending: 'Sắp xếp giảm dần.',
                            sortAscending: 'Sắp xếp tăng dần.',
                            sortNone: 'Không sắp xếp.',
                            activateNone: 'Kích hoạt để bỏ sắp xếp.',
                            activateDescending: 'Kích hoạt để sắp xếp giảm dần.',
                            activateAscending: 'Kích hoạt để sắp xếp tăng dần.'
                        },
                        sortBy: 'Sắp xếp'
                    },
                    dataFooter: {
                        itemsPerPageText: 'Số mục mỗi trang:',
                        itemsPerPageAll: 'Toàn bộ',
                        nextPage: 'Trang tiếp theo',
                        prevPage: 'Trang trước',
                        firstPage: 'Trang đầu',
                        lastPage: 'Trang cuối',
                        pageText: '{0}-{1} trên {2}'
                    },
                    datePicker: {
                        itemsSelected: '{0} được chọn',
                        nextMonthAriaLabel: 'Tháng sau',
                        nextYearAriaLabel: 'Năm sau',
                        prevMonthAriaLabel: 'Tháng trước',
                        prevYearAriaLabel: 'Năm trước'
                    },
                    noDataText: 'Không có dữ liệu',
                    carousel: {
                        prev: 'Ảnh tiếp theo',
                        next: 'Ảnh trước',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} trên {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '{0} nữa'
                    },
                    fileInput: {
                        counter: '{0} tệp',
                        counterSize: '{0} tệp (tổng cộng {1})'
                    },
                    timePicker: {
                        am: 'SA',
                        pm: 'CH'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: 'Điều hướng phân trang',
                            next: 'Trang tiếp theo',
                            previous: 'Trang trước',
                            page: 'Đến trang {0}',
                            currentPage: 'Trang hiện tại, Trang {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Đánh giá {0} trên {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/zh-Hans.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: '徽章',
                    close: '关闭',
                    dataIterator: {
                        noResultsText: '没有符合条件的结果',
                        loadingText: '加载中……'
                    },
                    dataTable: {
                        itemsPerPageText: '每页数目：',
                        ariaLabel: {
                            sortDescending: '：降序排列。',
                            sortAscending: '：升序排列。',
                            sortNone: '：未排序。',
                            activateNone: '点击以移除排序。',
                            activateDescending: '点击以降序排列。',
                            activateAscending: '点击以升序排列。'
                        },
                        sortBy: '排序方式'
                    },
                    dataFooter: {
                        itemsPerPageText: '每页数目：',
                        itemsPerPageAll: '全部',
                        nextPage: '下一页',
                        prevPage: '上一页',
                        firstPage: '首页',
                        lastPage: '尾页',
                        pageText: '{0}-{1} 共 {2}'
                    },
                    datePicker: {
                        itemsSelected: '已选择 {0}',
                        nextMonthAriaLabel: '下个月',
                        nextYearAriaLabel: '明年',
                        prevMonthAriaLabel: '前一个月',
                        prevYearAriaLabel: '前一年'
                    },
                    noDataText: '没有数据',
                    carousel: {
                        prev: '上一张',
                        next: '下一张',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '还有 {0} 项'
                    },
                    fileInput: {
                        counter: '{0} 个文件',
                        counterSize: '{0} 个文件（共 {1}）'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: '分页导航',
                            next: '下一页',
                            previous: '上一页',
                            page: '转到页面 {0}',
                            currentPage: '当前页 {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/locale/zh-Hant.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony default export */ __webpack_exports__["default"] = {
                    badge: '徽章',
                    close: '關閉',
                    dataIterator: {
                        noResultsText: '沒有符合條件的結果',
                        loadingText: '讀取中...'
                    },
                    dataTable: {
                        itemsPerPageText: '每頁列數：',
                        ariaLabel: {
                            sortDescending: '：降序排列。',
                            sortAscending: '：升序排列。',
                            sortNone: '無排序方式。點擊以升序排列。',
                            activateNone: '點擊以移除排序方式。',
                            activateDescending: '點擊以降序排列。',
                            activateAscending: '點擊以移除排序方式。'
                        },
                        sortBy: '排序方式'
                    },
                    dataFooter: {
                        itemsPerPageText: '每頁項目：',
                        itemsPerPageAll: '全部',
                        nextPage: '下一頁',
                        prevPage: '上一頁',
                        firstPage: '第一頁',
                        lastPage: '最後頁',
                        pageText: '{2} 條中的 {0}~{1} 條'
                    },
                    datePicker: {
                        itemsSelected: '已選擇 {0}',
                        nextMonthAriaLabel: '下個月',
                        nextYearAriaLabel: '明年',
                        prevMonthAriaLabel: '前一個月',
                        prevYearAriaLabel: '前一年'
                    },
                    noDataText: '沒有資料',
                    carousel: {
                        prev: '上一張',
                        next: '下一張',
                        ariaLabel: {
                            delimiter: 'Carousel slide {0} of {1}'
                        }
                    },
                    calendar: {
                        moreEvents: '還有其他 {0} 項'
                    },
                    fileInput: {
                        counter: '{0} 個檔案',
                        counterSize: '{0} 個檔案（共 {1}）'
                    },
                    timePicker: {
                        am: 'AM',
                        pm: 'PM'
                    },
                    pagination: {
                        ariaLabel: {
                            wrapper: '分頁導航',
                            next: '下一頁',
                            previous: '上一頁',
                            page: '轉到頁面 {0}',
                            currentPage: '當前頁 {0}'
                        }
                    },
                    rating: {
                        ariaLabel: {
                            icon: 'Rating {0} of {1}'
                        }
                    }
                };
            /***/ },
            /***/ "./src/util/color/transformCIELAB.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "fromXYZ": ()=>/* binding */ fromXYZ
                    ,
                    /* harmony export */ "toXYZ": ()=>/* binding */ toXYZ
                });
                const delta = 0.20689655172413793; // 6÷29
                const cielabForwardTransform = (t)=>t > delta ** 3 ? Math.cbrt(t) : t / (3 * delta ** 2) + 4 / 29
                ;
                const cielabReverseTransform = (t)=>t > delta ? t ** 3 : 3 * delta ** 2 * (t - 4 / 29)
                ;
                function fromXYZ(xyz) {
                    const transform = cielabForwardTransform;
                    const transformedY = transform(xyz[1]);
                    return [
                        116 * transformedY - 16,
                        500 * (transform(xyz[0] / 0.95047) - transformedY),
                        200 * (transformedY - transform(xyz[2] / 1.08883))
                    ];
                }
                function toXYZ(lab) {
                    const transform = cielabReverseTransform;
                    const Ln = (lab[0] + 16) / 116;
                    return [
                        transform(Ln + lab[1] / 500) * 0.95047,
                        transform(Ln),
                        transform(Ln - lab[2] / 200) * 1.08883
                    ];
                }
            /***/ },
            /***/ "./src/util/color/transformSRGB.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "fromXYZ": ()=>/* binding */ fromXYZ
                    ,
                    /* harmony export */ "toXYZ": ()=>/* binding */ toXYZ
                });
                /* harmony import */ var _util_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/helpers */ "./src/util/helpers.ts");
                // For converting XYZ to sRGB
                const srgbForwardMatrix = [
                    [
                        3.2406,
                        -1.5372,
                        -0.4986
                    ],
                    [
                        -0.9689,
                        1.8758,
                        0.0415
                    ],
                    [
                        0.0557,
                        -0.204,
                        1.057
                    ]
                ]; // Forward gamma adjust
                const srgbForwardTransform = (C)=>C <= 0.0031308 ? C * 12.92 : 1.055 * C ** (1 / 2.4) - 0.055
                ; // For converting sRGB to XYZ
                const srgbReverseMatrix = [
                    [
                        0.4124,
                        0.3576,
                        0.1805
                    ],
                    [
                        0.2126,
                        0.7152,
                        0.0722
                    ],
                    [
                        0.0193,
                        0.1192,
                        0.9505
                    ]
                ]; // Reverse gamma adjust
                const srgbReverseTransform = (C)=>C <= 0.04045 ? C / 12.92 : ((C + 0.055) / 1.055) ** 2.4
                ;
                function fromXYZ(xyz) {
                    const rgb = Array(3);
                    const transform = srgbForwardTransform;
                    const matrix = srgbForwardMatrix; // Matrix transform, then gamma adjustment
                    for(let i = 0; i < 3; ++i)rgb[i] = Math.round(_util_helpers__WEBPACK_IMPORTED_MODULE_0__.clamp(transform(matrix[i][0] * xyz[0] + matrix[i][1] * xyz[1] + matrix[i][2] * xyz[2])) * 255);
                     // Rescale back to [0, 255]
                    return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0);
                }
                function toXYZ(rgb) {
                    const xyz = [
                        0,
                        0,
                        0
                    ];
                    const transform = srgbReverseTransform;
                    const matrix = srgbReverseMatrix; // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB
                    const r = transform((rgb >> 16 & 255) / 255);
                    const g = transform((rgb >> 8 & 255) / 255);
                    const b = transform((rgb >> 0 & 255) / 255); // Matrix color space transform
                    for(let i = 0; i < 3; ++i)xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;
                    return xyz;
                }
            /***/ },
            /***/ "./src/util/colorUtils.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "isCssColor": ()=>/* binding */ isCssColor
                    ,
                    /* harmony export */ "colorToInt": ()=>/* binding */ colorToInt
                    ,
                    /* harmony export */ "classToHex": ()=>/* binding */ classToHex
                    ,
                    /* harmony export */ "intToHex": ()=>/* binding */ intToHex
                    ,
                    /* harmony export */ "colorToHex": ()=>/* binding */ colorToHex
                    ,
                    /* harmony export */ "HSVAtoRGBA": ()=>/* binding */ HSVAtoRGBA
                    ,
                    /* harmony export */ "RGBAtoHSVA": ()=>/* binding */ RGBAtoHSVA
                    ,
                    /* harmony export */ "HSVAtoHSLA": ()=>/* binding */ HSVAtoHSLA
                    ,
                    /* harmony export */ "HSLAtoHSVA": ()=>/* binding */ HSLAtoHSVA
                    ,
                    /* harmony export */ "RGBAtoCSS": ()=>/* binding */ RGBAtoCSS
                    ,
                    /* harmony export */ "RGBtoCSS": ()=>/* binding */ RGBtoCSS
                    ,
                    /* harmony export */ "RGBAtoHex": ()=>/* binding */ RGBAtoHex
                    ,
                    /* harmony export */ "HexToRGBA": ()=>/* binding */ HexToRGBA
                    ,
                    /* harmony export */ "HexToHSVA": ()=>/* binding */ HexToHSVA
                    ,
                    /* harmony export */ "HSVAtoHex": ()=>/* binding */ HSVAtoHex
                    ,
                    /* harmony export */ "parseHex": ()=>/* binding */ parseHex
                    ,
                    /* harmony export */ "parseGradient": ()=>/* binding */ parseGradient
                    ,
                    /* harmony export */ "RGBtoInt": ()=>/* binding */ RGBtoInt
                    ,
                    /* harmony export */ "colorToRGB": ()=>/* binding */ colorToRGB
                    ,
                    /* harmony export */ "lighten": ()=>/* binding */ lighten
                    ,
                    /* harmony export */ "darken": ()=>/* binding */ darken
                    ,
                    /* harmony export */ "getLuma": ()=>/* binding */ getLuma
                    ,
                    /* harmony export */ "getContrast": ()=>/* binding */ getContrast
                });
                /* harmony import */ var _console__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./console */ "./src/util/console.ts");
                /* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./src/util/helpers.ts");
                /* harmony import */ var _color_transformSRGB__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./color/transformSRGB */ "./src/util/color/transformSRGB.ts");
                /* harmony import */ var _color_transformCIELAB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./color/transformCIELAB */ "./src/util/color/transformCIELAB.ts");
                // Utilities
                // Types
                function isCssColor(color) {
                    return !!color && /^(#|var\(--|(rgb|hsl)a?\()/.test(color);
                }
                function colorToInt(color) {
                    let rgb;
                    if (typeof color === 'number') rgb = color;
                    else if (typeof color === 'string') {
                        let c = color.startsWith('#') ? color.substring(1) : color;
                        if (c.length === 3) c = c.split('').map((char)=>char + char
                        ).join('');
                        if (c.length !== 6) _console__WEBPACK_IMPORTED_MODULE_0__.consoleWarn(`'${color}' is not a valid rgb color`);
                        rgb = parseInt(c, 16);
                    } else throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`);
                    if (rgb < 0) {
                        _console__WEBPACK_IMPORTED_MODULE_0__.consoleWarn(`Colors cannot be negative: '${color}'`);
                        rgb = 0;
                    } else if (rgb > 16777215 || isNaN(rgb)) {
                        _console__WEBPACK_IMPORTED_MODULE_0__.consoleWarn(`'${color}' is not a valid rgb color`);
                        rgb = 16777215;
                    }
                    return rgb;
                }
                function classToHex(color, colors, currentTheme) {
                    const [colorName, colorModifier] = color.toString().trim().replace('-', '').split(' ', 2);
                    let hexColor = '';
                    if (colorName && colorName in colors) {
                        if (colorModifier && colorModifier in colors[colorName]) hexColor = colors[colorName][colorModifier];
                        else if ('base' in colors[colorName]) hexColor = colors[colorName].base;
                    } else if (colorName && colorName in currentTheme) hexColor = currentTheme[colorName];
                    return hexColor;
                }
                function intToHex(color) {
                    let hexColor = color.toString(16);
                    if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;
                    return '#' + hexColor;
                }
                function colorToHex(color) {
                    return intToHex(colorToInt(color));
                }
                /**
 * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV
 *
 * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]
 */ function HSVAtoRGBA(hsva) {
                    const { h , s , v , a  } = hsva;
                    const f = (n)=>{
                        const k = (n + h / 60) % 6;
                        return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
                    };
                    const rgb = [
                        f(5),
                        f(3),
                        f(1)
                    ].map((v1)=>Math.round(v1 * 255)
                    );
                    return {
                        r: rgb[0],
                        g: rgb[1],
                        b: rgb[2],
                        a
                    };
                }
                /**
 * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV
 *
 * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]
 */ function RGBAtoHSVA(rgba) {
                    if (!rgba) return {
                        h: 0,
                        s: 1,
                        v: 1,
                        a: 1
                    };
                    const r = rgba.r / 255;
                    const g = rgba.g / 255;
                    const b = rgba.b / 255;
                    const max = Math.max(r, g, b);
                    const min = Math.min(r, g, b);
                    let h = 0;
                    if (max !== min) {
                        if (max === r) h = 60 * (0 + (g - b) / (max - min));
                        else if (max === g) h = 60 * (2 + (b - r) / (max - min));
                        else if (max === b) h = 60 * (4 + (r - g) / (max - min));
                    }
                    if (h < 0) h = h + 360;
                    const s = max === 0 ? 0 : (max - min) / max;
                    const hsv = [
                        h,
                        s,
                        max
                    ];
                    return {
                        h: hsv[0],
                        s: hsv[1],
                        v: hsv[2],
                        a: rgba.a
                    };
                }
                function HSVAtoHSLA(hsva) {
                    const { h , s , v , a  } = hsva;
                    const l = v - v * s / 2;
                    const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);
                    return {
                        h,
                        s: sprime,
                        l,
                        a
                    };
                }
                function HSLAtoHSVA(hsl) {
                    const { h , s , l , a  } = hsl;
                    const v = l + s * Math.min(l, 1 - l);
                    const sprime = v === 0 ? 0 : 2 - 2 * l / v;
                    return {
                        h,
                        s: sprime,
                        v,
                        a
                    };
                }
                function RGBAtoCSS(rgba) {
                    return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;
                }
                function RGBtoCSS(rgba) {
                    return RGBAtoCSS({
                        ...rgba,
                        a: 1
                    });
                }
                function RGBAtoHex(rgba) {
                    const toHex = (v)=>{
                        const h = Math.round(v).toString(16);
                        return ('00'.substr(0, 2 - h.length) + h).toUpperCase();
                    };
                    return `#${[
                        toHex(rgba.r),
                        toHex(rgba.g),
                        toHex(rgba.b),
                        toHex(Math.round(rgba.a * 255))
                    ].join('')}`;
                }
                function HexToRGBA(hex) {
                    const rgba = _helpers__WEBPACK_IMPORTED_MODULE_1__.chunk(hex.slice(1), 2).map((c)=>parseInt(c, 16)
                    );
                    return {
                        r: rgba[0],
                        g: rgba[1],
                        b: rgba[2],
                        a: Math.round(rgba[3] / 255 * 100) / 100
                    };
                }
                function HexToHSVA(hex) {
                    const rgb = HexToRGBA(hex);
                    return RGBAtoHSVA(rgb);
                }
                function HSVAtoHex(hsva) {
                    return RGBAtoHex(HSVAtoRGBA(hsva));
                }
                function parseHex(hex) {
                    if (hex.startsWith('#')) hex = hex.slice(1);
                    hex = hex.replace(/([^0-9a-f])/gi, 'F');
                    if (hex.length === 3 || hex.length === 4) hex = hex.split('').map((x)=>x + x
                    ).join('');
                    if (hex.length === 6) hex = _helpers__WEBPACK_IMPORTED_MODULE_1__.padEnd(hex, 8, 'F');
                    else hex = _helpers__WEBPACK_IMPORTED_MODULE_1__.padEnd(_helpers__WEBPACK_IMPORTED_MODULE_1__.padEnd(hex, 6), 8, 'F');
                    return `#${hex}`.toUpperCase().substr(0, 9);
                }
                function parseGradient(gradient, colors, currentTheme) {
                    return gradient.replace(/([a-z]+(\s[a-z]+-[1-5])?)(?=$|,)/gi, (x)=>{
                        return classToHex(x, colors, currentTheme) || x;
                    }).replace(/(rgba\()#[0-9a-f]+(?=,)/gi, (x)=>{
                        return 'rgba(' + Object.values(HexToRGBA(parseHex(x.replace(/rgba\(/, '')))).slice(0, 3).join(',');
                    });
                }
                function RGBtoInt(rgba) {
                    return (rgba.r << 16) + (rgba.g << 8) + rgba.b;
                }
                function colorToRGB(color) {
                    const int = colorToInt(color);
                    return {
                        r: (int & 16711680) >> 16,
                        g: (int & 65280) >> 8,
                        b: int & 255
                    };
                }
                function lighten(value, amount) {
                    const lab = _color_transformCIELAB__WEBPACK_IMPORTED_MODULE_2__.fromXYZ(_color_transformSRGB__WEBPACK_IMPORTED_MODULE_3__.toXYZ(value)); // TODO: why this false positive?
                    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
                    lab[0] = lab[0] + amount * 10;
                    return _color_transformSRGB__WEBPACK_IMPORTED_MODULE_3__.fromXYZ(_color_transformCIELAB__WEBPACK_IMPORTED_MODULE_2__.toXYZ(lab));
                }
                function darken(value, amount) {
                    const lab = _color_transformCIELAB__WEBPACK_IMPORTED_MODULE_2__.fromXYZ(_color_transformSRGB__WEBPACK_IMPORTED_MODULE_3__.toXYZ(value));
                    lab[0] = lab[0] - amount * 10;
                    return _color_transformSRGB__WEBPACK_IMPORTED_MODULE_3__.fromXYZ(_color_transformCIELAB__WEBPACK_IMPORTED_MODULE_2__.toXYZ(lab));
                }
                /**
 * Calculate the relative luminance of a given color
 * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef
 */ function getLuma(color) {
                    const rgb = colorToInt(color);
                    return _color_transformSRGB__WEBPACK_IMPORTED_MODULE_3__.toXYZ(rgb)[1];
                }
                /**
 * Returns the contrast ratio (1-21) between two colors.
 * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef
 */ function getContrast(first, second) {
                    const l1 = getLuma(first);
                    const l2 = getLuma(second);
                    const light = Math.max(l1, l2);
                    const dark = Math.min(l1, l2);
                    return (light + 0.05) / (dark + 0.05);
                }
            /***/ },
            /***/ "./src/util/console.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "consoleInfo": ()=>/* binding */ consoleInfo
                    ,
                    /* harmony export */ "consoleWarn": ()=>/* binding */ consoleWarn
                    ,
                    /* harmony export */ "consoleError": ()=>/* binding */ consoleError
                    ,
                    /* harmony export */ "deprecate": ()=>/* binding */ deprecate
                    ,
                    /* harmony export */ "breaking": ()=>/* binding */ breaking
                    ,
                    /* harmony export */ "removed": ()=>/* binding */ removed
                });
                /* eslint-disable no-console */ // import Vuetify from '../framework'
                function createMessage(message, vm, parent) {
                    // if (Vuetify.config.silent) return
                    if (parent) vm = {
                        _isVue: true,
                        $parent: parent,
                        $options: vm
                    };
                    if (vm) {
                        // Only show each message once per instance
                        vm.$_alreadyWarned = vm.$_alreadyWarned || [];
                        if (vm.$_alreadyWarned.includes(message)) return;
                        vm.$_alreadyWarned.push(message);
                    }
                    return `[Vuetify] ${message}` + (vm ? generateComponentTrace(vm) : '');
                }
                function consoleInfo(message, vm, parent) {
                    const newMessage = createMessage(message, vm, parent);
                    newMessage != null && console.info(newMessage);
                }
                function consoleWarn(message, vm, parent) {
                    const newMessage = createMessage(message, vm, parent);
                    newMessage != null && console.warn(newMessage);
                }
                function consoleError(message, vm, parent) {
                    const newMessage = createMessage(message, vm, parent);
                    newMessage != null && console.error(newMessage);
                }
                function deprecate(original, replacement, vm, parent) {
                    consoleWarn(`[UPGRADE] '${original}' is deprecated, use '${replacement}' instead.`, vm, parent);
                }
                function breaking(original, replacement, vm, parent) {
                    consoleError(`[BREAKING] '${original}' has been removed, use '${replacement}' instead. For more information, see the upgrade guide https://github.com/vuetifyjs/vuetify/releases/tag/v2.0.0#user-content-upgrade-guide`, vm, parent);
                }
                function removed(original, vm, parent) {
                    consoleWarn(`[REMOVED] '${original}' has been removed. You can safely omit it.`, vm, parent);
                }
                /**
 * Shamelessly stolen from vuejs/vue/blob/dev/src/core/util/debug.js
 */ const classifyRE = /(?:^|[-_])(\w)/g;
                const classify = (str)=>str.replace(classifyRE, (c)=>c.toUpperCase()
                    ).replace(/[-_]/g, '')
                ;
                function formatComponentName(vm, includeFile) {
                    if (vm.$root === vm) return '<Root>';
                    const options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {
                    };
                    let name = options.name || options._componentTag;
                    const file = options.__file;
                    if (!name && file) {
                        const match = file.match(/([^/\\]+)\.vue$/);
                        name = match == null ? void 0 : match[1];
                    }
                    return (name ? `<${classify(name)}>` : `<Anonymous>`) + (file && includeFile !== false ? ` at ${file}` : '');
                }
                function generateComponentTrace(vm) {
                    if (vm._isVue && vm.$parent) {
                        const tree = [];
                        let currentRecursiveSequence = 0;
                        while(vm){
                            if (tree.length > 0) {
                                const last = tree[tree.length - 1];
                                if (last.constructor === vm.constructor) {
                                    currentRecursiveSequence++;
                                    vm = vm.$parent;
                                    continue;
                                } else if (currentRecursiveSequence > 0) {
                                    tree[tree.length - 1] = [
                                        last,
                                        currentRecursiveSequence
                                    ];
                                    currentRecursiveSequence = 0;
                                }
                            }
                            tree.push(vm);
                            vm = vm.$parent;
                        }
                        return '\n\nfound in\n\n' + tree.map((vm1, i)=>`${i === 0 ? '---> ' : ' '.repeat(5 + i * 2)}${Array.isArray(vm1) ? `${formatComponentName(vm1[0])}... (${vm1[1]} recursive calls)` : formatComponentName(vm1)}`
                        ).join('\n');
                    } else return `\n\n(found in ${formatComponentName(vm)})`;
                }
            /***/ },
            /***/ "./src/util/createSimpleFunctional.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "createSimpleFunctional": ()=>/* binding */ createSimpleFunctional
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _makeProps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./makeProps */ "./src/util/makeProps.ts");
                function createSimpleFunctional(klass, tag = 'div', name) {
                    return vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent({
                        name: name != null ? name : vue__WEBPACK_IMPORTED_MODULE_0__.capitalize(vue__WEBPACK_IMPORTED_MODULE_0__.camelize(klass.replace(/__/g, '-'))),
                        props: _makeProps__WEBPACK_IMPORTED_MODULE_1__.makeProps({
                            tag: {
                                type: String,
                                default: tag
                            }
                        }),
                        setup (props, { slots  }) {
                            return ()=>{
                                var _slots$default;
                                return vue__WEBPACK_IMPORTED_MODULE_0__.h(props.tag, {
                                    class: klass
                                }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
                            };
                        }
                    });
                }
            /***/ },
            /***/ "./src/util/dom.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "attachedRoot": ()=>/* binding */ attachedRoot
                });
                /**
 * Returns:
 *  - 'null' if the node is not attached to the DOM
 *  - the root node (HTMLDocument | ShadowRoot) otherwise
 */ function attachedRoot(node) {
                    /* istanbul ignore next */ if (typeof node.getRootNode !== 'function') {
                        // Shadow DOM not supported (IE11), lets find the root of this node
                        while(node.parentNode)node = node.parentNode; // The root parent is the document if the node is attached to the DOM
                        if (node !== document) return null;
                        return document;
                    }
                    const root = node.getRootNode(); // The composed root node is the document if the node is attached to the DOM
                    if (root !== document && root.getRootNode({
                        composed: true
                    }) !== document) return null;
                    return root;
                }
            /***/ },
            /***/ "./src/util/easing.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "standardEasing": ()=>/* binding */ standardEasing
                    ,
                    /* harmony export */ "deceleratedEasing": ()=>/* binding */ deceleratedEasing
                    ,
                    /* harmony export */ "acceleratedEasing": ()=>/* binding */ acceleratedEasing
                });
                const standardEasing = 'cubic-bezier(0.4, 0, 0.2, 1)';
                const deceleratedEasing = 'cubic-bezier(0.0, 0, 0.2, 1)'; // Entering
                const acceleratedEasing = 'cubic-bezier(0.4, 0, 1, 1)'; // Leaving
            /***/ },
            /***/ "./src/util/getScrollParent.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "getScrollParent": ()=>/* binding */ getScrollParent
                    ,
                    /* harmony export */ "getScrollParents": ()=>/* binding */ getScrollParents
                });
                function getScrollParent(el) {
                    while(el){
                        if (hasScrollbar(el)) return el;
                        el = el.parentElement;
                    }
                    return document.scrollingElement;
                }
                function getScrollParents(el) {
                    const elements = [];
                    while(el){
                        if (hasScrollbar(el)) elements.push(el);
                        el = el.parentElement;
                    }
                    return elements;
                }
                function hasScrollbar(el) {
                    if (!el || el.nodeType !== Node.ELEMENT_NODE) return false;
                    const style = window.getComputedStyle(el);
                    return [
                        'auto',
                        'scroll'
                    ].includes(style.overflowY) && el.scrollHeight > el.clientHeight;
                }
            /***/ },
            /***/ "./src/util/globals.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "IS_NODE": ()=>/* binding */ IS_NODE
                    ,
                    /* harmony export */ "IN_BROWSER": ()=>/* binding */ IN_BROWSER
                    ,
                    /* harmony export */ "IS_DEBUG": ()=>/* binding */ IS_DEBUG
                    ,
                    /* harmony export */ "IS_PROD": ()=>/* binding */ IS_PROD
                    ,
                    /* harmony export */ "SUPPORTS_INTERSECTION": ()=>/* binding */ SUPPORTS_INTERSECTION
                    ,
                    /* harmony export */ "SUPPORTS_TOUCH": ()=>/* binding */ SUPPORTS_TOUCH
                });
                const IS_NODE = typeof process !== 'undefined';
                const IN_BROWSER = typeof window !== 'undefined';
                const IS_DEBUG = IS_NODE && false;
                const IS_PROD = IS_NODE && false;
                const SUPPORTS_INTERSECTION = IN_BROWSER && 'IntersectionObserver' in window;
                const SUPPORTS_TOUCH = IN_BROWSER && ('ontouchstart' in window || window.navigator.maxTouchPoints > 0);
            /***/ },
            /***/ "./src/util/helpers.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "getNestedValue": ()=>/* binding */ getNestedValue
                    ,
                    /* harmony export */ "deepEqual": ()=>/* binding */ deepEqual
                    ,
                    /* harmony export */ "getObjectValueByPath": ()=>/* binding */ getObjectValueByPath
                    ,
                    /* harmony export */ "getPropertyFromItem": ()=>/* binding */ getPropertyFromItem
                    ,
                    /* harmony export */ "createRange": ()=>/* binding */ createRange
                    ,
                    /* harmony export */ "getZIndex": ()=>/* binding */ getZIndex
                    ,
                    /* harmony export */ "escapeHTML": ()=>/* binding */ escapeHTML
                    ,
                    /* harmony export */ "filterObjectOnKeys": ()=>/* binding */ filterObjectOnKeys
                    ,
                    /* harmony export */ "convertToUnit": ()=>/* binding */ convertToUnit
                    ,
                    /* harmony export */ "isObject": ()=>/* binding */ isObject
                    ,
                    /* harmony export */ "keyCodes": ()=>/* binding */ keyCodes
                    ,
                    /* harmony export */ "keys": ()=>/* binding */ keys
                    ,
                    /* harmony export */ "extract": ()=>/* binding */ extract
                    ,
                    /* harmony export */ "arrayDiff": ()=>/* binding */ arrayDiff
                    ,
                    /* harmony export */ "groupItems": ()=>/* binding */ groupItems
                    ,
                    /* harmony export */ "wrapInArray": ()=>/* binding */ wrapInArray
                    ,
                    /* harmony export */ "sortItems": ()=>/* binding */ sortItems
                    ,
                    /* harmony export */ "defaultFilter": ()=>/* binding */ defaultFilter
                    ,
                    /* harmony export */ "searchItems": ()=>/* binding */ searchItems
                    ,
                    /* harmony export */ "debounce": ()=>/* binding */ debounce
                    ,
                    /* harmony export */ "throttle": ()=>/* binding */ throttle
                    ,
                    /* harmony export */ "getPrefixedSlots": ()=>/* binding */ getPrefixedSlots
                    ,
                    /* harmony export */ "clamp": ()=>/* binding */ clamp
                    ,
                    /* harmony export */ "padEnd": ()=>/* binding */ padEnd
                    ,
                    /* harmony export */ "chunk": ()=>/* binding */ chunk
                    ,
                    /* harmony export */ "humanReadableFileSize": ()=>/* binding */ humanReadableFileSize
                    ,
                    /* harmony export */ "camelizeObjectKeys": ()=>/* binding */ camelizeObjectKeys
                    ,
                    /* harmony export */ "mergeDeep": ()=>/* binding */ mergeDeep
                    ,
                    /* harmony export */ "fillArray": ()=>/* binding */ fillArray
                    ,
                    /* harmony export */ "getUid": ()=>/* binding */ getUid
                    ,
                    /* harmony export */ "flattenFragments": ()=>/* binding */ flattenFragments
                    ,
                    /* harmony export */ "randomHexColor": ()=>/* binding */ randomHexColor
                    ,
                    /* harmony export */ "toKebabCase": ()=>/* binding */ toKebabCase
                    ,
                    /* harmony export */ "wrapInRef": ()=>/* binding */ wrapInRef
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                function getNestedValue(obj, path, fallback) {
                    const last = path.length - 1;
                    if (last < 0) return obj === undefined ? fallback : obj;
                    for(let i = 0; i < last; i++){
                        if (obj == null) return fallback;
                        obj = obj[path[i]];
                    }
                    if (obj == null) return fallback;
                    return obj[path[last]] === undefined ? fallback : obj[path[last]];
                }
                function deepEqual(a, b) {
                    if (a === b) return true;
                    if (a instanceof Date && b instanceof Date && a.getTime() !== b.getTime()) // If the values are Date, compare them as timestamps
                    return false;
                    if (a !== Object(a) || b !== Object(b)) // If the values aren't objects, they were already checked for equality
                    return false;
                    const props = Object.keys(a);
                    if (props.length !== Object.keys(b).length) // Different number of props, don't bother to check
                    return false;
                    return props.every((p)=>deepEqual(a[p], b[p])
                    );
                }
                function getObjectValueByPath(obj, path, fallback) {
                    // credit: http://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key#comment55278413_6491621
                    if (obj == null || !path || typeof path !== 'string') return fallback;
                    if (obj[path] !== undefined) return obj[path];
                    path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
                    path = path.replace(/^\./, ''); // strip a leading dot
                    return getNestedValue(obj, path.split('.'), fallback);
                }
                function getPropertyFromItem(item, property, fallback) {
                    if (property == null) return item === undefined ? fallback : item;
                    if (item !== Object(item)) return fallback === undefined ? item : fallback;
                    if (typeof property === 'string') return getObjectValueByPath(item, property, fallback);
                    if (Array.isArray(property)) return getNestedValue(item, property, fallback);
                    if (typeof property !== 'function') return fallback;
                    const value = property(item, fallback);
                    return typeof value === 'undefined' ? fallback : value;
                }
                function createRange(length, start = 0) {
                    return Array.from({
                        length
                    }, (v, k)=>start + k
                    );
                }
                function getZIndex(el) {
                    if (!el || el.nodeType !== Node.ELEMENT_NODE) return 0;
                    const index = +window.getComputedStyle(el).getPropertyValue('z-index');
                    if (!index) return getZIndex(el.parentNode);
                    return index;
                }
                const tagsToReplace = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;'
                };
                function escapeHTML(str) {
                    return str.replace(/[&<>]/g, (tag)=>tagsToReplace[tag] || tag
                    );
                }
                function filterObjectOnKeys(obj, keys) {
                    const filtered = {
                    };
                    for(let i = 0; i < keys.length; i++){
                        const key = keys[i];
                        if (typeof obj[key] !== 'undefined') filtered[key] = obj[key];
                    }
                    return filtered;
                }
                function convertToUnit(str, unit = 'px') {
                    if (str == null || str === '') return undefined;
                    else if (isNaN(+str)) return String(str);
                    else return `${Number(str)}${unit}`;
                }
                function isObject(obj) {
                    return obj !== null && typeof obj === 'object';
                } // KeyboardEvent.keyCode aliases
                const keyCodes = Object.freeze({
                    enter: 13,
                    tab: 9,
                    delete: 46,
                    esc: 27,
                    space: 32,
                    up: 38,
                    down: 40,
                    left: 37,
                    right: 39,
                    end: 35,
                    home: 36,
                    del: 46,
                    backspace: 8,
                    insert: 45,
                    pageup: 33,
                    pagedown: 34,
                    shift: 16
                });
                function keys(o) {
                    return Object.keys(o);
                }
                function extract(obj, properties) {
                    const extracted = {
                    };
                    const rest = {
                    };
                    Object.entries(obj).forEach(([key, value])=>{
                        if (properties.includes(key)) extracted[key] = value;
                        else rest[key] = value;
                    });
                    return [
                        extracted,
                        rest
                    ];
                }
                /**
 * Returns the set difference of B and A, i.e. the set of elements in B but not in A
 */ function arrayDiff(a, b) {
                    const diff = [];
                    for(let i = 0; i < b.length; i++)if (!a.includes(b[i])) diff.push(b[i]);
                    return diff;
                }
                function groupItems(items, groupBy, groupDesc) {
                    const key = groupBy[0];
                    const groups = [];
                    let current;
                    for(var i = 0; i < items.length; i++){
                        const item = items[i];
                        const val = getObjectValueByPath(item, key, null);
                        if (current !== val) {
                            current = val;
                            groups.push({
                                name: val != null ? val : '',
                                items: []
                            });
                        }
                        groups[groups.length - 1].items.push(item);
                    }
                    return groups;
                }
                function wrapInArray(v) {
                    return v == null ? [] : Array.isArray(v) ? v : [
                        v
                    ];
                }
                function sortItems(items, sortBy, sortDesc, locale, customSorters) {
                    if (sortBy === null || !sortBy.length) return items;
                    const stringCollator = new Intl.Collator(locale, {
                        sensitivity: 'accent',
                        usage: 'sort'
                    });
                    return items.sort((a, b)=>{
                        for(let i = 0; i < sortBy.length; i++){
                            const sortKey = sortBy[i];
                            let sortA = getObjectValueByPath(a, sortKey);
                            let sortB = getObjectValueByPath(b, sortKey);
                            if (sortDesc[i]) [sortA, sortB] = [
                                sortB,
                                sortA
                            ];
                            if (customSorters != null && customSorters[sortKey]) {
                                const customResult = customSorters[sortKey](sortA, sortB);
                                if (!customResult) continue;
                                return customResult;
                            } // Check if both cannot be evaluated
                            if (sortA === null && sortB === null) continue;
                            [sortA, sortB] = [
                                sortA,
                                sortB
                            ].map((s)=>(s || '').toString().toLocaleLowerCase()
                            );
                            if (sortA !== sortB) {
                                if (!isNaN(sortA) && !isNaN(sortB)) return Number(sortA) - Number(sortB);
                                return stringCollator.compare(sortA, sortB);
                            }
                        }
                        return 0;
                    });
                }
                function defaultFilter(value, search, item) {
                    return value != null && search != null && typeof value !== 'boolean' && value.toString().toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) !== -1;
                }
                function searchItems(items, search) {
                    if (!search) return items;
                    search = search.toString().toLowerCase();
                    if (search.trim() === '') return items;
                    return items.filter((item)=>Object.keys(item).some((key)=>defaultFilter(getObjectValueByPath(item, key), search, item)
                        )
                    );
                }
                function debounce(fn, delay) {
                    let timeoutId = 0;
                    return (...args)=>{
                        clearTimeout(timeoutId);
                        timeoutId = setTimeout(()=>fn(...args)
                        , delay);
                    };
                }
                function throttle(fn, limit) {
                    let throttling = false;
                    return (...args)=>{
                        if (!throttling) {
                            throttling = true;
                            setTimeout(()=>throttling = false
                            , limit);
                            return fn(...args);
                        }
                    };
                }
                /**
 * Filters slots to only those starting with `prefix`, removing the prefix
 */ function getPrefixedSlots(prefix, slots) {
                    return Object.keys(slots).filter((k)=>k.startsWith(prefix)
                    ).reduce((obj, k)=>{
                        obj[k.replace(prefix, '')] = slots[k];
                        return obj;
                    }, {
                    });
                }
                function clamp(value, min = 0, max = 1) {
                    return Math.max(min, Math.min(max, value));
                }
                function padEnd(str, length, char = '0') {
                    return str + char.repeat(Math.max(0, length - str.length));
                }
                function chunk(str, size = 1) {
                    const chunked = [];
                    let index = 0;
                    while(index < str.length){
                        chunked.push(str.substr(index, size));
                        index += size;
                    }
                    return chunked;
                }
                function humanReadableFileSize(bytes, binary = false) {
                    const base = binary ? 1024 : 1000;
                    if (bytes < base) return `${bytes} B`;
                    const prefix = binary ? [
                        'Ki',
                        'Mi',
                        'Gi'
                    ] : [
                        'k',
                        'M',
                        'G'
                    ];
                    let unit = -1;
                    while(Math.abs(bytes) >= base && unit < prefix.length - 1){
                        bytes /= base;
                        ++unit;
                    }
                    return `${bytes.toFixed(1)} ${prefix[unit]}B`;
                }
                function camelizeObjectKeys(obj) {
                    if (!obj) return {
                    };
                    return Object.keys(obj).reduce((o, key)=>{
                        o[vue__WEBPACK_IMPORTED_MODULE_0__.camelize(key)] = obj[key];
                        return o;
                    }, {
                    });
                }
                function mergeDeep(source = {
                }, target = {
                }) {
                    for(const key in target){
                        const sourceProperty = source[key];
                        const targetProperty = target[key]; // Only continue deep merging if
                        // both properties are objects
                        if (isObject(sourceProperty) && isObject(targetProperty)) {
                            source[key] = mergeDeep(sourceProperty, targetProperty);
                            continue;
                        }
                        source[key] = targetProperty;
                    }
                    return source;
                }
                function fillArray(length, obj) {
                    return Array(length).fill(obj);
                }
                function getUid() {
                    return getUid._uid++;
                }
                getUid._uid = 0;
                function flattenFragments(nodes) {
                    return nodes.map((node)=>{
                        if (node.type === vue__WEBPACK_IMPORTED_MODULE_0__.Fragment) return flattenFragments(node.children);
                        else return node;
                    }).flat();
                }
                const randomHexColor = ()=>{
                    const n = (Math.random() * 1048575000000).toString(16);
                    return '#' + n.slice(0, 6);
                };
                const toKebabCase = (str)=>str.replace(/([A-Z])/g, (match)=>`-${match.toLowerCase()}`
                    )
                ;
                function wrapInRef(x) {
                    return vue__WEBPACK_IMPORTED_MODULE_0__.isRef(x) ? x : vue__WEBPACK_IMPORTED_MODULE_0__.ref(x);
                }
            /***/ },
            /***/ "./src/util/makeProps.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "makeProps": ()=>/* binding */ makeProps
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers */ "./src/util/helpers.ts");
                /* harmony import */ var _console__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./console */ "./src/util/console.ts");
                /* harmony import */ var _framework__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../framework */ "./src/framework.ts");
                // Utilities
                // Types
                function makeProps(props) {
                    for(const key in props){
                        const originalProp = props[key];
                        const isOptions = !(originalProp == null || Array.isArray(originalProp) || typeof originalProp === 'function');
                        const propDefinition = isOptions ? originalProp : {
                            type: originalProp
                        };
                        const originalDefault = propDefinition.hasOwnProperty('default') ? propDefinition.default : propDefinition.type === Boolean || Array.isArray(propDefinition.type) && propDefinition.type.includes(Boolean) ? false : undefined;
                        const wrappedDefault = generateDefault(key, originalDefault, propDefinition.type);
                        props[key] = {
                            ...propDefinition,
                            default: wrappedDefault
                        };
                    }
                    return props;
                }
                function generateDefault(propName, localDefault, type) {
                    return (props)=>{
                        var _vuetify$defaults$vm$;
                        const vm = vue__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance();
                        if (!vm) {
                            _console__WEBPACK_IMPORTED_MODULE_1__.consoleWarn('Unable to get current component instance when generating default prop value');
                            return localDefault;
                        }
                        if (!vm.type.name) {
                            _console__WEBPACK_IMPORTED_MODULE_1__.consoleWarn('The component is missing an explicit name, unable to generate default prop value');
                            return localDefault;
                        }
                        const vuetify = _framework__WEBPACK_IMPORTED_MODULE_2__.useVuetify();
                        const globalDefault = vuetify.defaults.global[propName];
                        const componentDefault = (_vuetify$defaults$vm$ = vuetify.defaults[vm.type.name]) == null ? void 0 : _vuetify$defaults$vm$[propName];
                        const actualDefault = typeof componentDefault !== 'undefined' ? componentDefault : typeof globalDefault !== 'undefined' ? globalDefault : localDefault;
                        return isFactory(actualDefault, type) ? actualDefault(props) : actualDefault;
                    };
                } // Would be nice to have PropOptions here
                function isFactory(val, type) {
                    return typeof val === 'function' && !_helpers__WEBPACK_IMPORTED_MODULE_3__.wrapInArray(type).includes(Function);
                }
            /***/ },
            /***/ "./src/util/propsFactory.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "propsFactory": ()=>/* binding */ propsFactory
                });
                /**
 * Creates a factory function for props definitions.
 * This is used to define props in a composable then override
 * default values in an implementing component.
 *
 * @example Simplified signature
 * (props: Props) => (defaults?: Record<keyof props, any>) => Props
 *
 * @example Usage
 * const makeProps = propsFactory({
 *   foo: String,
 * })
 *
 * defineComponent({
 *   props: {
 *     ...makeProps({
 *       foo: 'a',
 *     }),
 *   },
 *   setup (props) {
 *     // would be "string | undefined", now "string" because a default has been provided
 *     props.foo
 *   },
 * }
 */ function propsFactory(props, source) {
                    return (defaults)=>{
                        return Object.keys(props).reduce((obj, prop)=>{
                            const isObjectDefinition = typeof props[prop] === 'object' && props[prop] != null && !Array.isArray(props[prop]);
                            const definition = isObjectDefinition ? props[prop] : {
                                type: props[prop]
                            };
                            if (defaults && prop in defaults) obj[prop] = {
                                ...definition,
                                default: defaults[prop]
                            };
                            else obj[prop] = definition;
                            if (source) obj[prop].source = source;
                            return obj;
                        }, {
                        });
                    };
                }
            /***/ },
            /***/ "./src/util/useRender.ts": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "useRender": ()=>/* binding */ useRender
                });
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
                /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
                function useRender(render) {
                    const vm = vue__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance();
                    vm.render = render;
                }
            /***/ },
            /***/ "./src/components/VApp/VApp.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VAppBar/VAppBar.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VAppBar/VAppBarTitle.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VAvatar/VAvatar.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VBadge/VBadge.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VBanner/VBanner.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VBottomNavigation/VBottomNavigation.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VBtn/VBtn.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VCard/VCard.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VCode/VCode.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VDialog/VDialog.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VDivider/VDivider.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VFooter/VFooter.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VGrid/VGrid.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VIcon/VIcon.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VImg/VImg.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VItemGroup/VItemGroup.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VKbd/VKbd.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VLayout/VLayout.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VLayout/VLayoutItem.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VMain/VMain.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VNavigationDrawer/VNavigationDrawer.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VOverlay/VOverlay.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VResponsive/VResponsive.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VSheet/VSheet.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VSystemBar/VSystemBar.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/components/VThemeProvider/VThemeProvider.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/directives/ripple/VRipple.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "./src/styles/main.sass": (__unused_webpack_module, __webpack_exports__, __webpack_require__)=>{
                __webpack_require__.r(__webpack_exports__);
            // extracted by mini-css-extract-plugin
            /***/ },
            /***/ "vue": (module)=>{
                module.exports = __WEBPACK_EXTERNAL_MODULE_vue__;
            /***/ }
        };
        /************************************************************************/ /******/ // The module cache
        /******/ var __webpack_module_cache__ = {
        };
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ // Check if module is in cache
            /******/ if (__webpack_module_cache__[moduleId]) /******/ return __webpack_module_cache__[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = __webpack_module_cache__[moduleId] = {
                /******/ // no module.id needed
                /******/ // no module.loaded needed
                /******/ exports: {
                }
            };
            /******/ /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
            /******/ /******/ // Return the exports of the module
            /******/ return module.exports;
        /******/ }
        /******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/ (()=>{
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/ __webpack_require__.n = (module)=>{
                /******/ var getter = module && module.__esModule ? /******/ ()=>module['default']
                 : /******/ ()=>module
                ;
                /******/ __webpack_require__.d(getter, {
                    a: getter
                });
                /******/ return getter;
            /******/ };
        /******/ })();
        /******/ /******/ /* webpack/runtime/define property getters */ /******/ (()=>{
            /******/ // define getter functions for harmony exports
            /******/ __webpack_require__.d = (exports, definition)=>{
                /******/ for(var key in definition)/******/ if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) /******/ Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: definition[key]
                });
            /******/ };
        /******/ })();
        /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ (()=>{
            /******/ __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop)
            ;
        /******/ })();
        /******/ /******/ /* webpack/runtime/make namespace object */ /******/ (()=>{
            /******/ // define __esModule on exports
            /******/ __webpack_require__.r = (exports)=>{
                /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) /******/ Object.defineProperty(exports, Symbol.toStringTag, {
                    value: 'Module'
                });
                /******/ Object.defineProperty(exports, '__esModule', {
                    value: true
                });
            /******/ };
        /******/ })();
        /******/ /************************************************************************/ /******/ // module exports must be returned from runtime so entry inlining is disabled
        /******/ // startup
        /******/ // Load entry module and return exports
        /******/ return __webpack_require__("./src/entry-bundler.ts");
    /******/ })());
});

},{"process":"7AgFc","vue":"4ayRm"}],"7AgFc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while((++queueIndex) < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"5tssH":[function() {},{}]},["3zYeR","2SiKW"], "2SiKW", "parcelRequire2a87")

//# sourceMappingURL=basket.HASH_REF_2e7aeb1cb8a692989efc5b8426cd0cdd.js.map
